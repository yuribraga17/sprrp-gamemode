#pragma tabsize 0
#pragma dynamic 500000

#include <a_samp>
#include <a_http>
#include <strlib>
#include <crashdetect>
#include <nex-ac>
#include <easyDialog>
#include <streamer>
#include <sscanf2>
#include <a_mysql>
#include <foreach>
#include <zcmd>
#include <dini>
#include <bg>
#include <zone>
#include <regex>
#include <timerfix>
#include <mapandreas>
#include <YSF>
#include <timestamptodate>
#include <evi>
#include <colandreas>
#include <eSelection>
#include <memory>

//#include <YSI_Coding\y_hooks> // pawn-lang/YSI-Includes
//#include <YSI_Data\y_iterate>

#define COLANDREAS

#include <physics>
//#include <AntiCheat>
/*#include <profiler>
#include <jit>*/

#include <YSI\y_iterate>

//mapas
//#include "system/hud.pwn"
//phone
//#include "system/phone.pwn"

new Text:TelinhaPreta;

#undef MAX_PLAYERS
#define MAX_PLAYERS (500)
#define HOLDOBJECT_UMBRELLA (0)

#define SERVER_NAME "São Paulo Roleplay | SAMP 0.3DL"
#define SERVER_SITE "www.sp-roleplay.com.br"
#define SERVER_MODE "SP:RP v1.85b"

#define SQL_HOSTNAME "198.50.171.217"
#define SQL_USERNAME "root"
#define SQL_DATABASE "sprpoficial"
#define SQL_PASSWORD "87@Ve#!mecbook"

/*#define SQL_HOSTNAME "localhost"
#define SQL_USERNAME "root"
#define SQL_DATABASE "sprp"
#define SQL_PASSWORD ""*/


#define BitFlag_Get(%0,%1)            ((%0) & (%1))   // Return value 0 (false) If it is not set to it.
#define BitFlag_On(%0,%1)             ((%0) |= (%1))  // Adjust the value to ON.
#define BitFlag_Off(%0,%1)            ((%0) &= ~(%1)) // Value is off
#define BitFlag_Toggle(%0,%1)         ((%0) ^= (%1))  // Switch value (Switch real/false)



#define Pressed(%0)	\
	(((newkeys & (%0)) == (%0)) && ((oldkeys & (%0)) != (%0)))

#define Holding(%0) \
	((newkeys & (%0)) == (%0))

#define RELEASED(%0) \
	(((newkeys & (%0)) != (%0)) && ((oldkeys & (%0)) == (%0)))

#define LOCAL_BIZZ 500
#define LOCAL_HOUSE 600
// Type Offer
#define OFFER_TYPE_NONE		0
#define OFFER_TYPE_VSELL	1
#define OFFER_TYPE_SERVICE	2

#define NT_DISTANCE 10.0

#define SHOT_MS 700
new playerblock[MAX_PLAYERS];
new playershottick[MAX_PLAYERS];
new EmpresaNenhuma[MAX_PLAYERS],
	VendoEmpresa[MAX_PLAYERS];

// Weapon Skill
#define NORMAL_SKILL	1
#define MEDIUM_SKILL	2
#define FULL_SKILL		3

#define MODEL_SELECTION_BINCO       80

// Vehicle Label Timer
#define VLT_TYPE_TOWING  			1
#define VLT_TYPE_PERMITFACTION		2
#define VLT_TYPE_LOCK		  		3
#define VLT_TYPE_UNREGISTER    		4
#define VLT_TYPE_REGISTER           5
#define VLT_TYPE_OPERAFAILED	  	6
#define VLT_TYPE_UPGRADELOCK      	7
#define VLT_TYPE_UPGRADEALARM     	8
#define VLT_TYPE_UPGRADEIMMOB       9
#define VLT_TYPE_UPGRADEINSURANCE 	10
#define VLT_TYPE_BREAKIN		 	11
#define VLT_TYPE_ARMOUR			 	12
#define VLT_TYPE_REFILL			 	13
#define VLT_TYPE_OPERAOUTOFRANG    	14
#define VLT_TYPE_UPGRADEBATTERY     15
#define VLT_TYPE_UPGRADEENGINE  	16


#define MAX_PLAYER_DRUG_PACKAGE 24
#define MAX_VEHICLE_DRUG_PACKAGE 48
#define MAX_ITEM_DRUG 100


#define MAX_TIME 6
#define MAX_DAMAGES 50
#define MAX_COOLDOWNS 3
#define MAX_CLOTHES 15
#define MAX_SIGNALTOWER 60
#define MAX_FACTIONS 8
#define MAX_WAREHOUSE 10
#define MAX_DROP_ITEMS 100
#define MAX_BIZZ 100
#define MAX_ADMIN_VEHICLES 20
#define MAX_DYNAMIC_VEHICLES 200
#define MAX_PLAYER_VEHICLES 200
#define MAX_SMS 30
#define MAX_CALLHISTORY 50
#define MAX_HOUSES 700
#define MAX_IDENT 800
#define MAX_INTERIORS 100
#define MAX_FURNITURE 400
#define MAX_MATERIAL 5
#define MAX_CAR_WEAPONS 4
#define MAX_HOUSE_ITEMS 4
#define MAX_HOUSE_WEAPONS 40
#define MAX_BUSINESS_ITEM 12
#define MAX_FURNITURE_PERPAGE 40
#define MAX_BUYHOUSES 4
#define MAX_ITEM_STORAGE 70
#define MAX_INDUSTRY 31
#define MAX_TRUCKER_ITEMS 26
#define MAX_CRATE 60
#define MAX_AD_QUEUE 5
#define MAX_EMERGENCY_CALL 10
#define MAX_PLAYER_TICKETS 10
#define MAX_ARREST 30
#define MAX_PLAYER_WEAPON_PACKAGE 12
#define MAX_CAR_WEAPON_PACKAGE 20
#define MAX_MOVEDOORS 100
#define MAX_ATTACH_WEAPON 17
#define MAX_GRAFFITI 100
/*#define MAX_TIME 5
#define MAX_DAMAGES 2
#define MAX_COOLDOWNS 2
#define MAX_CLOTHES 2
#define MAX_SIGNALTOWER 2
#define MAX_FACTIONS 2
#define MAX_DROP_ITEMS 2
#define MAX_BIZZ 2
#define MAX_DYNAMIC_VEHICLES 2
#define MAX_PLAYER_VEHICLES 2
#define MAX_SMS 2
#define MAX_CALLHISTORY 2
#define MAX_HOUSES 2
#define MAX_INTERIORS 2
#define MAX_FURNITURE 2
#define MAX_MATERIAL 2
#define MAX_CAR_WEAPONS 5
#define MAX_HOUSE_WEAPONS 2
#define MAX_BUSINESS_ITEM 5
#define MAX_FURNITURE_PERPAGE 2
#define MAX_BUYHOUSES 2
#define MAX_ITEM_STORAGE 2
#define MAX_INDUSTRY 2
#define MAX_TRUCKER_ITEMS 26
#define MAX_CRATE 2*/
//
#define COOLDOWN_CLOTHES  	0
#define COOLDOWN_ENGINE  	1

// ......

/* 0-4 /clothing */
#define FREESLOT5 5
#define FREESLOT6 6
#define FREESLOT7 7
#define FREESLOT8 8
#define FREESLOT9 9

/* Checkpoint */
#define CHECKPOINT_NONE 			0
#define CHECKPOINT_HOUSE 			1
#define CHECKPOINT_UNLOADFISHING	7
#define CHECKPOINT_GOFISHING 		8
#define CHECKPOINT_FARMER 			9
#define CHECKPOINT_FARMER2 			10
#define CHECKPOINT_COMP 			11
#define CHECKPOINT_VEH 				12
#define CHECKPOINT_NEWSPAPER 		13
#define CHECKPOINT_CAREXAM          14


/* Race Checkpoint */
#define RCHECKPOINT_NONE 			0
#define RCHECKPOINT_TRUCKER 		1
#define RCHECKPOINT_TRUCKERJOB 		2


#define THREAD_BLACKLIST_LOOKUP	(1)
#define THREAD_FIND_CHARACTER 	(2)
#define THREAD_CHECK_ACCOUNT 	(3)
#define THREAD_LOGIN 			(4)
#define THREAD_LOAD_CHARACTER 	(5)
#define THREAD_LOG_CON			(6)
#define THREAD_PLAYER_CONTACTS	(7)
#define THREAD_PLAYER_SMS		(8)
#define THREAD_PLAYER_CLOTHING	(9)
#define THREAD_UNBAN	 		(10)
#define	THREAD_BAN_LOOKUP			(11)
#define THREAD_SECRET_CONFIRM		(12)
#define THREAD_CHECK_CHARACTER 		(13)
#define THREAD_PLAYER_DRUG   	 	(17)
#define THREAD_VEHICLE_DRUG			(18)
#define THREAD_PLAYER_HOLDWEAPON	(14)


#define COLOR_WHITE 0xFFFFFFFF
#define COLOR_GRAD1 0xB4B5B7FF
#define COLOR_GRAD2 0xBFC0C2FF
#define COLOR_GRAD3 0xCBCCCEFF
#define COLOR_GRAD4 0xD8D8D8FF
#define COLOR_GRAD5 0xE3E3E3FF
#define COLOR_GRAD6 0xF0F0F0FF
#define COLOR_GREY 0xAFAFAFAA
#define COLOR_FADE1 0xE6E6E6E6
#define COLOR_FADE2 0xC8C8C8C8
#define COLOR_FADE3 0xAAAAAAAA
#define COLOR_FADE4 0x8C8C8C8C
#define COLOR_FADE5 0x6E6E6E6E
#define COLOR_GREEN 0x33AA33AA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_YELLOW2 0xF5DEB3AA
#define COLOR_YELLOW3 0xF0EA92AA
#define COLOR_DARKGOLDENROD 0xB8860BFF
#define COLOR_PMF 0xF9D718AA
#define COLOR_PMS 0xF5F260AA
#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_LIGHTGREEN 0x9ACD32AA
#define COLOR_PURPLE 0xC2A2DAAA
#define COLOR_RED 0xFF0000FF
#define TEAM_CYAN_COLOR 0xFF8282AA
#define DEFAULT_COLOR 0xFFFFFF00
#define COLOR_STAT1 0xE0FFFFAA
#define COLOR_STAT2 0xCCE6E6FF
#define COLOR_FACTION 0xBDF38BFF
#define COLOR_DARKBLUE 0x1394BFFF
#define COLOR_GENANNOUNCE 0xA9C4E4FF
#define COLOR_ALLDEPT 0xFF8282AA
#define COLOR_DBLUE 0x2641FEAA
#define COLOR_BLUE 0x0000BBAA
#define COLOR_RADIO 0x8D8DFFFF
#define COLOR_GREEN2 0x33AA33FF
#define COLOR_DARKGREEN 0x88AA62FF
#define TEAM_CYAN_COLOR 0xFF8282AA
#define TEAM_TAT_COLOR 0xBDCB9200
#define TEAM_CUN_COLOR 0xD900D300
#define TAXI_DUTY 0x95FF95AA
#define TEAM_ADMIN_COLOR 0x40808000
#define COLOR_LSPDNEW 0x9189EFFF
#define COLOR_HELPME 0x2EFE9AFF
#define COLOR_REPORT 0xFA5882FF
#define COLOR_ANIMS 0xf0f8ffFF
//=======Embed Colors=======
#define EMBED_RED "{FF0000}"
#define EMBED_WHITE "{FFFFFF}"
#define EMBED_YELLOW "{FFFF00}"
#define EMBED_GREEN "{808040}"
#define EMBED_BLUE "{0000FF}"
#define EMBED_LIGHTBLUE "{8080FF}"
#define EMBED_ORANGE "{FF8000}"
#define EMBED_GRAY "{949494}"
#define EMBED_CYAN "{00FFFF}"
#define EMBED_GRAD "{CBCCCE}"


// message
#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_GRAD2, "USE: "%1)

/*#define SendAdminAction(%0,%1) \
	SendClientMessageEx(%0, COLOR_YELLOW, "[ADMIN]:{FFFFFF} "%1) // COLOR_YELLOW*/
//Server authentication
//#define DEBUG

//Server value
#define levelcost 25000
#define levelexp 3
#define multiplyexp 1
#define deathcost 500
#define cchargetime 30
#define callcost 10

#define BUYZIP 1
#define BUYHARDWARE 2
#define BUYSPORTS 3
#define BUYMUSIC 4
#define BUYGOV 5
#define BUYNOVOS 6

#define FACTION_POLICE (1)
#define FACTION_NEWS (2)
#define FACTION_MEDIC (3)
#define FACTION_GOV (4)
#define FACTION_GANG (5)
#define FACTION_SASD (6)

// ================== [ NEW PHONE SYSTEM ] ============================.
#define PH_LBUTTON		0
#define PH_RBUTTON		1
#define PH_SELFIE		2
#define PH_UP 			3
#define PH_DOWN     	4
#define PH_CLICKOPEN  	5
// ================== [ NEW PHONE SYSTEM ] ============================
#define PH_OUTGOING 0
#define PH_INCOMING 1
#define PH_MISSED 	2
/*// ================== [ PHONE SYSTEM ] ============================

#define PH_OFF -1
#define PH_MAIN 0
#define PH_MENU 1 // >> Sub
#define PH_M_PHONEBOOK 2
#define PH_M_PHONEBOOK_LISTCON 3
#define PH_M_SMS 4
#define PH_M_SMS_LISTCON 5
#define PH_M_SMS_INBOX 6
#define PH_M_SMS_ARCHIVE 7
#define PH_M_CALLS 8
#define PH_M_CALLS_LISTCON 9
#define PH_M_SETTINGS 10
#define PH_M_SETTINGS_RING 11
#define PH_M_SETTINGS_INFO 12
#define PH_TEXTDISPLAY 1
#define PH_T_NAMENUB 1
#define PH_T_NAMENUBMENU 2
#define PH_CALLING 2
#define PH_SMSING 3
#define PH_SELFIE 4

// ================== [ PHONE SYSTEM ] ============================*/


#define MAX_HUD     12
#define HUD_ARMOR   0
#define HUD_HEALTH  1
#define HUD_PING    2
#define HUD_PACKET  3
#define HUD_MI      4
#define HUD_FUEL    5
#define HUD_SPEED   6
#define HUD_NOS     7
#define HUD_LOCK    8
#define HUD_ENGINE  9
#define HUD_BATTERY 10
#define HUD_LIGHT   11

/*
                                        Player HUD


										
*/
//new Text3D:cNametag[MAX_PLAYERS];


new Text:HUDPlayer_Ping;
new Text:HUDPlayer_PacketLoss;
new PlayerText:HUDPlayer_Armor[MAX_PLAYERS];
new PlayerText:HUDPlayer_Health[MAX_PLAYERS];
new PlayerText:HUDPlayer_ArmorRate[MAX_PLAYERS];
new PlayerText:HUDPlayer_HealthRate[MAX_PLAYERS];
new PlayerText:HUDPlayer_PingRate[MAX_PLAYERS];
new PlayerText:HUDPlayer_PacketLossRate[MAX_PLAYERS];
//new PlayerText:HUDPlayer_Clock[MAX_PLAYERS];

/*
                                        Vehicle HUD
*/
new Text:HUDMileage;
new Text:HUDBattery;
new Text:HUDLights;
new PlayerText:HUDFuel[MAX_PLAYERS];
new PlayerText:HUDZone[MAX_PLAYERS];
new PlayerText:HUDSpeedoRate[MAX_PLAYERS];
new PlayerText:HUDNos[MAX_PLAYERS];
new PlayerText:HUDLock[MAX_PLAYERS];
new PlayerText:HUDEngine[MAX_PLAYERS];
new PlayerText:HUDSpeedoMPH[MAX_PLAYERS];
new PlayerText:HUDMileageRate[MAX_PLAYERS];

new displayHUD[MAX_PLAYERS char];
new isHideHUD[MAX_PLAYERS char];
new isVehicleHUD[MAX_PLAYERS char];

new bool:HUDtoggle[MAX_PLAYERS][MAX_HUD];

stock showPlayerHUD(playerid) {
    if (!HUDtoggle[playerid][HUD_PING]) {
        PlayerTextDrawShow(playerid, HUDPlayer_PingRate[playerid]);
        TextDrawShowForPlayer(playerid, HUDPlayer_Ping);
    }

    if (!HUDtoggle[playerid][HUD_PACKET]) {
        PlayerTextDrawShow(playerid, HUDPlayer_PacketLossRate[playerid]);
        TextDrawShowForPlayer(playerid, HUDPlayer_PacketLoss);
    }

    if (!HUDtoggle[playerid][HUD_ARMOR]) {
        PlayerTextDrawShow(playerid, HUDPlayer_Armor[playerid]);
    }

    if (!HUDtoggle[playerid][HUD_HEALTH]) {
        PlayerTextDrawShow(playerid, HUDPlayer_Health[playerid]);
    }
    
    //PlayerTextDrawShow(playerid, HUDPlayer_Clock[playerid]);

    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
        isVehicleHUD { playerid } = true;
        showVehicleHUD(playerid);
    }

    isHideHUD{ playerid } = false;
}

stock hidePlayerHUD(playerid) {
    TextDrawHideForPlayer(playerid, HUDPlayer_Ping);
    TextDrawHideForPlayer(playerid, HUDPlayer_PacketLoss);
    PlayerTextDrawHide(playerid, HUDPlayer_Armor[playerid]);
    PlayerTextDrawHide(playerid, HUDPlayer_Health[playerid]);
    PlayerTextDrawHide(playerid, HUDPlayer_ArmorRate[playerid]);
    PlayerTextDrawHide(playerid, HUDPlayer_HealthRate[playerid]);
    PlayerTextDrawHide(playerid, HUDPlayer_PingRate[playerid]);
    PlayerTextDrawHide(playerid, HUDPlayer_PacketLossRate[playerid]);
    //PlayerTextDrawHide(playerid, HUDPlayer_Clock[playerid]);
    hideVehicleHUD(playerid);
    isHideHUD{ playerid } = true;
}

//============================Tolls============================//
// Main configuration
#define TollCost (50) 					// How much it costs to pass the tolls
#define TollDelayCop (4) 				// The timespace in seconds between each /toll command for all cops (To avoid spam)
#define TollOpenDistance (4.0) 			// The distance in units the player can be from the icon to open the toll

// Other defines
#define MAX_TOLLS (5) // Amount of tolls
#define INVALID_TOLL_ID (-1)
#define RichmanToll (0)
#define FlintToll (1)
#define LVToll (2)
#define BlueberryTollR (3)
#define BlueberryTollL (4)

#define L_sz_TollStringLocked ("Guarda diz: Desculpe, o pedágio fechou temporariamente. Por favor, volte mais tarde.")
#define L_sz_TollStringNoMoney ("ERRO: Você não possui dinheiro para passar no pedagio.")
#define L_sz_TollStringBye ("Guarda diz: Obrigado, dirija com cuidado!.")
#define L_sz_TollStringHurryUp ("INFO: Você tem 6 segundos para passar. Certifique-se de que Você não ficará preso.")

// JOB DEFINE
#define JOB_NONE			0
#define JOB_FARMER			1
#define JOB_TRUCKER         2
#define JOB_MECHANIC        3
#define JOB_TAXI        	4
#define JOB_GUIDE        	5
#define JOB_WPDEALER		6
#define JOB_SUPPLIER		7

enum TOLL_INFO
{
	E_tLocked,  // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
	E_tOpenTime // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
}
new aTolls[MAX_TOLLS][TOLL_INFO];

//============================Tolls============================//

//Tolls
new L_a_RequestAllowedCop, // The same timer for all /toll changes
    L_a_Pickup[MAX_TOLLS*2],
	L_a_TollObject[MAX_TOLLS*2]; // 0 & 1 = Richhman, 2 & 3 = Flint, 4 & 5 = LV, 6 & 7 = BlueBerry right
//Tolls


#define STATE_WAIT_HIT          0
#define STATE_PENDING_HIT       1
#define ISSUE_HIT_DELAY         300


#define START_BENCH(%0); {new __a=%0,__b=0,__c,__d=GetTickCount(),__e=1;do{}\
    while(__d==GetTickCount());__c=GetTickCount();__d=__c;while(__c-__d<__a||\
    __e){if(__e){if(__c-__d>=__a){__e=0;__c=GetTickCount();do{}while(__c==\
    GetTickCount());__c=GetTickCount();__d=__c;__b=0;}}{

#define FINISH_BENCH(%0); }__b++;__c=GetTickCount();}printf(" Barco para "\
%0": executa, em média, %f vezes/ms.",floatdiv(__b,__a));}

Float:ConvertFloatToOneDP(Float:value)
{
	new Float:result;
	new tempInt;
	result = value * 10;
	tempInt = floatround(result);
	result = float(tempInt);
	result = result / 10;

	result += 0.0000001;
	
	return result;
}


// .......

new const Float:GoFishingPlace[3][3] = {
	{813.6824,-2248.2407,-0.4488},
	{407.6824,-2318.2407,-0.5752},
	{-25.9471,-1981.9995,-0.6268}
};

new const Float:FlintFarm[5][3] = {
	{-207.9474,-1327.1185,9.8555},
	{-569.3899,-1302.7570,22.4331},
	{-511.1070,-1376.0288,19.4673},
	{-309.0976,-1539.4039,11.7151},
	{-222.2049,-1520.7129,7.0026}
};

new const Float:BlueFarm[5][3] = {
	{69.6013,-3.1608,1.8764},
	{-25.4396,-56.4816,4.0989},
	{-148.9333,41.2588,4.0932},
	{-190.1118,138.5946,5.8175},
	{15.3321,-104.6317,1.9983}
};

new const Float:gBoatSpawn[20][4] = {
	{81.599998, -1699.599975, 0.000000, 88.000000},
	{73.500000, -1647.799804, 0.000000, 73.998001},
	{71.699996, -1658.300048, 0.300000, 89.995002},
	{78.699996, -1677.400024, 0.000000, 109.995002},
	{73.900390, -1667.500000, 0.000000, 109.995002},
	{81.700187, -1689.400390, 0.000000, 87.995002},
	{90.300003, -1743.400024, 0.000000, 111.995002},
	{82.400390, -1709.799804, 0.000000, 93.994003},
	{84.400390, -1721.700195, 0.000000, 93.994003},
	{86.400001, -1733.599975, 0.000000, 95.992996},
	{96.099998, -1753.099975, 0.000000, 111.995002},
	{103.800003, -1764.199951, 0.000000, 123.995002},
	{72.300003, -1632.300048, 0.000000, 85.991996},
	{72.300003, -1622.300048, 0.000000, 85.989997},
	{72.500000, -1611.699951, 0.000000, 85.989997},
	{70.800003, -1579.699951, 0.000000, 91.989997},
	{72.500000, -1601.099609, 0.000000, 85.989997},
	{72.000000, -1591.799804, 0.000000, 85.989997},
	{67.099998, -1569.599975, 0.000000, 93.988998},
	{63.799999, -1559.699951, 0.000000, 109.987998}
};

new const Float:gCombineSpawn[34][4] = {
	{94.199996, -5.199999, 1.700000, 80.000000},
	{97.599609, 14.299810, 1.700000, 79.997001},
	{95.799812, 4.700200, 1.700000, 79.997001},
	{88.000000, -46.500000, 1.799999, 79.997001},
	{92.299812, -15.200189, 1.799999, 79.997001},
	{90.599609, -25.299800, 1.899999, 79.997001},
	{89.500000, -35.799800, 1.899999, 79.997001},
	{46.299999, -172.699996, 1.799999, 3.996999},
	{14.500000, -172.899993, 1.700000, 0.000000},
	{36.599609, -173.099609, 1.700000, 3.993999},
	{25.899999, -173.699996, 1.700000, 0.000000},
	{-7.800000, -170.199996, 2.299999, 352.000000},
	{2.599610, -171.599609, 1.700000, 351.996002},
	{-17.700000, -168.699996, 3.000000, 351.996002},
	{-27.600000, -167.399993, 3.599999, 351.996002},
	{-48.900001, -164.000000, 4.199999, 350.000000},
	{-38.500000, -165.799804, 4.199999, 349.997009},
	{-132.600006, -136.899993, 4.199999, 349.997009},
	{-156.600006, -132.899993, 4.199999, 349.997009},
	{-144.400390, -134.599609, 4.199999, 349.997009},
	{-168.600006, -130.899993, 4.199999, 349.997009},
	{-181.100006, -129.500000, 4.199999, 349.997009},
	{-192.899993, -127.900001, 4.199999, 349.997009},
	{-229.899993, -123.699996, 4.199999, 349.997009},
	{-205.000000, -127.099609, 4.199999, 349.997009},
	{-217.400390, -125.599609, 4.199999, 349.997009},
	{-83.500000, 180.000000, 4.000000, 160.000000},
	{-93.000000, 184.000000, 4.099999, 159.998992},
	{-111.599998, 192.000000, 5.400000, 165.998992},
	{-102.200202, 188.099609, 4.699999, 159.998992},
	{-121.500000, 195.199996, 6.400000, 165.992004},
	{-141.699996, 200.899993, 8.800000, 169.992004},
	{-131.400390, 198.099609, 7.599999, 165.992004},
	{-151.500000, 202.800003, 10.000000, 169.990997}
};

new const Float:gVehicleSpawn[120][4] = {
	{1616.900024, -1137.099975, 23.899999, 90.000000},
	{1616.800048, -1132.599975, 23.899999, 90.000000},
	{1616.800048, -1128.199951, 23.899999, 90.000000},
	{1616.699951, -1123.699951, 23.899999, 90.000000},
	{1616.599975, -1119.400024, 23.899999, 90.000000},
	{1630.099975, -1107.500000, 23.899999, 90.000000},
	{1630.099975, -1102.800048, 23.899999, 90.000000},
	{1629.800048, -1098.300048, 23.899999, 90.000000},
	{1629.800048, -1093.900024, 23.899999, 90.000000},
	{1629.699951, -1089.599975, 23.899999, 90.000000},
	{1629.599975, -1085.099975, 23.899999, 90.000000},
	{1657.699951, -1111.599975, 23.899999, 90.000000},
	{1658.000000, -1107.000000, 23.899999, 90.000000},
	{1658.000000, -1102.500000, 23.899999, 90.000000},
	{1657.900024, -1098.099975, 23.899999, 90.000000},
	{1657.800048, -1093.599975, 23.899999, 90.000000},
	{1657.800048, -1089.000000, 23.899999, 90.000000},
	{1658.000000, -1084.500000, 23.899999, 90.000000},
	{1658.099975, -1080.099975, 23.899999, 90.000000},
	{1621.099975, -1107.400024, 23.899999, 270.00000},
	{1621.199951, -1103.099975, 23.899999, 270.00000},
	{1621.300048, -1098.599975, 23.899999, 270.00000},
	{1621.300048, -1094.099975, 23.899999, 270.00000},
	{1621.300048, -1089.699951, 23.899999, 270.00000},
	{1621.300048, -1085.199951, 23.899999, 270.00000},
	{1649.199951, -1111.599975, 23.899999, 270.00000},
	{1649.599975, -1107.000000, 23.899999, 270.00000},
	{1649.699951, -1102.599975, 23.899999, 270.00000},
	{1649.699951, -1098.000000, 23.899999, 270.00000},
	{1649.699951, -1093.699951, 23.899999, 270.00000},
	{1649.700195, -1089.099609, 23.899999, 270.00000},
	{1649.700195, -1084.799804, 23.899999, 270.00000},
	{1649.699951, -1080.300048, 23.899999, 270.00000},
	{1675.599975, -1097.800048, 23.899999, 270.00000},
	{1675.599975, -1102.500000, 23.899999, 270.00000},
	{1675.500000, -1106.900024, 23.899999, 270.00000},
	{1675.400024, -1111.300048, 23.899999, 270.00000},
	{1675.500000, -1115.900024, 23.899999, 270.00000},
	{1675.500000, -1120.199951, 23.899999, 270.00000},
	{1675.500000, -1124.699951, 23.899999, 270.00000},
	{1675.500000, -1129.099975, 23.899999, 270.00000},
	{1666.199951, -1135.400024, 23.899999, 180.00000},
	{1661.599975, -1135.800048, 23.899999, 180.00000},
	{1657.400024, -1135.800048, 23.899999, 180.00000},
	{1652.900024, -1135.800048, 23.899999, 180.00000},
	{1648.400024, -1135.800048, 23.899999, 180.00000},
	{1793.400024, -1060.900024, 24.000000, 180.00000},
	{1788.800048, -1061.099975, 24.000000, 180.00000},
	{1784.500000, -1060.900024, 24.000000, 180.00000},
	{1779.800048, -1061.300048, 24.000000, 180.00000},
	{1775.400024, -1061.199951, 24.000000, 180.00000},
	{1771.000000, -1061.199951, 24.000000, 180.00000},
	{1766.599975, -1061.099975, 24.000000, 180.00000},
	{1761.699951, -1061.300048, 24.000000, 180.00000},
	{1722.699951, -1060.599975, 24.000000, 180.00000},
	{1718.099975, -1060.500000, 24.000000, 180.00000},
	{1714.000000, -1060.500000, 24.000000, 180.00000},
	{1709.000000, -1060.500000, 24.000000, 180.00000},
	{1704.500000, -1060.500000, 24.000000, 180.00000},
	{1700.300048, -1060.599975, 24.000000, 180.00000},
	{1696.000000, -1060.400024, 24.000000, 180.00000},
	{1691.400024, -1060.400024, 24.000000, 180.00000},
	{1680.900024, -1036.000000, 23.899999, 180.00000},
	{1685.400024, -1036.000000, 23.899999, 180.00000},
	{1689.800048, -1035.800048, 23.899999, 180.00000},
	{1694.400024, -1035.900024, 23.899999, 180.00000},
	{1698.699951, -1035.699951, 23.899999, 180.00000},
	{1703.300048, -1035.599975, 23.899999, 180.00000},
	{1707.699951, -1035.599975, 24.000000, 180.00000},
	{1712.300048, -1035.000000, 23.899999, 180.00000},
	{1757.199951, -1037.800048, 24.000000, 180.00000},
	{1761.599975, -1038.199951, 24.000000, 180.00000},
	{1752.900024, -1037.699951, 24.000000, 180.00000},
	{1748.699951, -1038.000000, 24.000000, 180.00000},
	{1744.199951, -1037.900024, 24.000000, 180.00000},
	{1691.400024, -1070.000000, 23.899999, 0.000000},
	{1695.699951, -1069.900024, 23.899999, 0.000000},
	{1704.800048, -1069.699951, 23.899999, 0.000000},
	{1700.200195, -1069.799804, 23.899999, 0.000000},
	{1709.300048, -1069.699951, 23.899999, 0.000000},
	{1718.199951, -1069.500000, 23.899999, 0.000000},
	{1713.700195, -1069.500000, 23.899999, 0.000000},
	{1722.500000, -1069.400024, 23.899999, 0.000000},
	{1681.199951, -1044.300048, 23.899999, 0.000000},
	{1685.699951, -1044.300048, 23.899999, 0.000000},
	{1690.000000, -1044.300048, 23.899999, 0.000000},
	{1694.599975, -1044.000000, 23.899999, 0.000000},
	{1698.900024, -1044.099975, 23.899999, 0.000000},
	{1703.400024, -1044.300048, 23.899999, 0.000000},
	{1708.099975, -1044.300048, 23.899999, 0.000000},
	{1712.699951, -1044.199951, 23.899999, 0.000000},
	{1744.099975, -1046.000000, 23.899999, 0.000000},
	{1748.400024, -1045.900024, 23.899999, 0.000000},
	{1752.800048, -1046.199951, 23.899999, 0.000000},
	{1757.500000, -1046.000000, 23.899999, 0.000000},
	{1761.599975, -1046.000000, 23.899999, 0.000000},
	{1762.099975, -1069.699951, 23.899999, 0.000000},
	{1766.699951, -1069.800048, 23.899999, 0.000000},
	{1771.199951, -1069.800048, 23.899999, 0.000000},
	{1775.300048, -1070.000000, 23.899999, 0.000000},
	{1780.000000, -1070.000000, 23.899999, 0.000000},
	{1784.400024, -1069.900024, 23.899999, 0.000000},
	{1788.800048, -1069.800048, 23.899999, 0.000000},
	{1793.199951, -1069.699951, 23.899999, 0.000000},
	{1658.699951, -1046.400024, 23.899999, 0.000000},
	{1654.199951, -1046.500000, 23.899999, 0.000000},
	{1649.599975, -1046.300048, 23.899999, 0.000000},
	{1644.900024, -1046.400024, 23.899999, 0.000000},
	{1640.400024, -1046.300048, 23.899999, 0.000000},
	{1636.199951, -1046.400024, 23.899999, 0.000000},
	{1631.699951, -1046.400024, 23.899999, 0.000000},
	{1627.099975, -1046.400024, 23.899999, 0.000000},
	{1658.099975, -1038.099975, 23.899999, 180.00000},
	{1653.599975, -1038.300048, 23.899999, 180.00000},
	{1649.000000, -1038.300048, 23.899999, 180.00000},
	{1644.599975, -1038.199951, 23.899999, 180.00000},
	{1640.000000, -1038.300048, 23.899999, 180.00000},
	{1635.599975, -1038.199951, 23.899999, 180.00000},
	{1631.099975, -1038.300048, 23.899999, 180.00000},
	{1626.699951, -1038.300048, 23.899999, 180.00000}
};


new stock const Float:gSprayTag[100][3] = {
	{ 2046.41, -1635.84, 13.5859 },
	{ 2066.43, -1652.48, 14.2812 },
	{ 2102.20, -1648.76, 13.5859 },
	{ 2399.41, -1552.03, 28.7500 },
	{ 2353.54, -1508.21, 24.7500 },
	{ 2394.10, -1468.37, 24.7812 },
	{ 1724.73, -1741.50, 14.1016 },
	{ 1767.21, -1617.54, 15.0391 },
	{ 1799.13, -1708.77, 14.1016 },
	{ 1746.75, -1359.77, 16.2109 },
	{ 1850.01, -1876.84, 14.3594 },
	{ 1889.24, -1982.51, 15.7578 },
	{ 1950.62, -2034.40, 14.0938 },
	{ 1936.88, -2134.91, 14.2188 },
	{ 1808.34, -2092.27, 14.2188 },
	{ 2273.90, -2265.80, 14.5625 },
	{ 2173.59, -2165.19, 15.3047 },
	{ 2281.46, -1118.96, 27.0078 },
	{ 2239.78, -999.75, 59.7578 },
	{ 2122.69, -1060.90, 25.3906 },
	{ 2062.72, -996.46, 48.2656 },
	{ 2076.73, -1071.13, 27.6094 },
	{ 2841.37, -1312.96, 18.8203 },
	{ 2820.34, -1190.98, 25.6719 },
	{ 2766.09, -1197.14, 69.0703 },
	{ 2756.01, -1388.12, 39.4609 },
	{ 2821.23, -1465.09, 16.5391 },
	{ 2767.78, -1621.19, 11.2344 },
	{ 2767.76, -1819.95, 12.2266 },
	{ 2667.89, -1469.13, 31.6797 },
	{ 2612.93, -1390.77, 35.4297 },
	{ 2536.22, -1352.77, 31.0859 },
	{ 2580.95, -1274.09, 46.5938 },
	{ 2603.16, -1197.81, 60.9922 },
	{ 2576.82, -1143.27, 48.2031 },
	{ 2621.51, -1092.20, 69.7969 },
	{ 2797.92, -1097.70, 31.0625 },
	{ 1332.13, -1722.30, 14.1875 },
	{ 1732.73, -963.08, 41.4375 },
	{ 1118.91, -2008.24, 75.0234 },
	{ 2273.20, -2529.12, 8.5156 },
	{ 2704.23, -2144.30, 11.8203 },
	{ 2763.00, -2012.11, 14.1328 },
	{ 2794.53, -1906.81, 14.6719 },
	{ 2812.94, -1942.07, 11.0625 },
	{ 2874.50, -1909.38, 8.3906 },
	{ 2182.23, -1467.90, 25.5547 },
	{ 2132.23, -1258.09, 24.0547 },
	{ 2233.95, -1367.62, 24.5312 },
	{ 2224.77, -1193.06, 25.8359 },
	{ 2119.20, -1196.62, 24.6328 },
	{ 2522.46, -1478.74, 24.1641 },
	{ 2322.45, -1254.41, 22.9219 },
	{ 1448.23, -1755.90, 14.5234 },
	{ 1574.71, -2691.88, 13.6016 },
	{ 1071.14, -1863.79, 14.0938 },
	{ 2392.36, -1914.57, 14.7422 },
	{ 2430.33, -1997.91, 14.7422 },
	{ 2587.32, -2063.52, 4.6094 },
	{ 1974.09, -1351.16, 24.5625 },
	{ 2093.76, -1413.45, 24.1172 },
	{ 1969.59, -1289.70, 24.5625 },
	{ 1966.95, -1174.73, 20.0391 },
	{ 1911.87, -1064.40, 25.1875 },
	{ 2462.27, -1541.41, 25.4219 },
	{ 2346.52, -1350.78, 24.2812 },
	{ 2273.02, -1687.43, 14.9688 },
	{ 2422.91, -1682.30, 13.9922 },
	{ 1549.89, -1714.52, 15.1016 },
	{ 1498.63, -1207.35, 24.6797 },
	{ 1519.42, -1010.95, 24.6094 },
	{ 1687.23, -1239.12, 15.8125 },
	{ 1783.97, -2156.54, 14.3125 },
	{ 1624.62, -2296.24, 14.3125 },
	{ 2065.44, -1897.23, 13.6094 },
	{ 2134.33, -2011.20, 10.5156 },
	{ 1271.48, -1662.32, 20.2500 },
	{ 2162.78, -1786.07, 14.1875 },
	{ 2034.40, -1801.67, 14.5469 },
	{ 1910.16, -1779.66, 18.7500 },
	{ 1837.20, -1814.19, 4.3359 },
	{ 1837.66, -1640.38, 13.7578 },
	{ 1959.40, -1577.76, 13.7578 },
	{ 2074.18, -1579.15, 14.0312 },
	{ 2542.95, -1363.24, 31.7656 },
	{ 2704.20, -1966.69, 13.7578 },
	{ 2489.24, -1959.07, 13.7578 },
	{ 1295.18, -1465.22, 10.2812 },
	{ 482.63, -1761.59, 5.9141 },
	{ 2379.32, -2166.22, 24.9453 },
	{ 810.57, -1797.57, 13.6172 },
	{ 730.45, -1482.01, 2.2500 },
	{ 947.48, -1466.72, 17.2422 },
	{ 399.01, -2066.88, 11.2344 },
	{ 466.98, -1283.02, 16.3203 },
	{ 583.46, -1502.11, 16.0000 },
	{ 944.27, -985.82, 39.2969 },
	{ 1072.91, -1012.80, 35.5156 },
	{ 1206.25, -1162.00, 23.8750 },
	{ 1098.81, -1292.55, 17.1406 }
};


new const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11, 0, 0
};

/*new const g_aWeaponAttachSlots[] = {
	0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};*/

new const g_aWeaponAttach[] = {
	-1, -1, -1, 0, 1, 2, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
};

new const graffiti_SprayTag[][] = {
{18659, "Grove St 4 Life"},
{18660, "Seville B.V.V.D Families"},
{18661, "Varrio Los Aztecas"},
{18662, "Kilo"},
{18663, "San Fiero Rifa"},
{18664, "Temple Drive Ballas"},
{18665, "Los Santos Vargos"},
{18666, "Front Yard Balas"},
{18667, "Rolling Heights Ballas"}
};


new const BoneName[][] = {
	"Espinha", "Cabeca", "Braço esquerdo", "Braço Direito",
	"Mão Esquerda", "Mão Direita", "Coxa Esquerda", "Coxa Direita", "Pé esquerdo", "Pé direito", "Panturrilha", "Meia calça",
	"Ombro esquerdo", "Right sleeve", "Costas", "Clavicula", "Pescoço", "Mandibula"
}
;

new const MonthDay[][] = {
	"Janeiro", "Fevereiro", "Março", "Abril",
	"Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro",
	"Novembro","Dezembro"
}
;

new const szMonthDay[][] = {
	"Jan", "Fev", "Mar", "Abr",
	"Mai", "Jun", "Jul", "Ago", "Set", "Out",
	"Nov","Dez"
}
;

new const ScrambleWord[][] = {
	"ARANHA", "GENERAL", "RODA", "BRASIL", "OURO", "SOLDADO", "BRUXA", "FACA",
	"PISCINA", "CANETA", "CAPACETE", "CHAVE", "ARTE", "PROFESSOR", "SARGENTO", "AUSENTE",
	"BOLACHA", "DANÇA", "PLACA", "SEXO", "TIRO", "CARTEIRA", "POLICIA", "ALTO", "PRIMEIRO",
	"PRATO", "CAVALO", "CACHORRO", "PAPAGAIO", "DINHEIRO", "PRESO", "REFUNDO", "HUMANO", "ANIMAL",
	"MUSICA", "QUATRO", "CHAVE", "PENDRIVE", "HUMOR"
}
;

new FishNames[5][20] = {
	"Tuna",
	"Salmon",
	"Swordfish",
	"Moray eel",
	"Shark"
};

new const OrTeleports[][] =
{
	{"24/7 1"},
	{"24/7 2"},
	{"24/7 3"},
	{"24/7 4"},
	{"24/7 5"},
	{"24/7 6"},
	{"Airport Ticket Desk"},
	{"Airport Baggage Reclaim"},
	{"Shamal"},
	{"Andromada"},
	{"Ammunation 1"},
	{"Ammunation 2"},
	{"Ammunation 3"},
	{"Ammunation 4"},
	{"Ammunation 5"},
	{"Ammunation Booths"},
	{"Ammunation Range"},
	{"Blastin Fools Hallway"},
	{"Budget Inn Motel Room"},
	{"Jefferson Motel"},
	{"Off Track Betting Shop"},
	{"Sex Shop"},
	{"Meat Factory"},
	{"Zero's RC Shop"},
	{"Dillmore Gas Station"},
	{"Caligula's Basement"},
	{"FDC Janitors Room"},
	{"Woozie's Office"},
	{"Binco"},
	{"Didier Sachs"},
	{"Prolaps"},
	{"Suburban"},
	{"Victim"},
	{"ZIP"},
	{"Alhambra"},
	{"Ten Bottles"},
 	{"Lil' Probe Inn"},
 	{"Jay's Dinner"},
 	{"Gant Bridge Dinner"},
	{"Secret Valley Dinner"},
	{"World of Coq"},
	{"Welcome Pump"},
	{"Burger Shot"},
	{"Cluckin' Bell"},
	{"Well Stacked Pizza"},
	{"Jimmy's Sticky Ring"},
	{"Denise Room"},
	{"Katie Room"},
	{"Helena Room"},
	{"Michelle Room"},
	{"Barbara Room"},
	{"Mille Room"},
	{"Sherman Dam"},
	{"Planning Dept."},
	{"Area 51"},
	{"LS Gym"},
	{"SF Gym"},
	{"LV Gym"},
	{"B Dup's House"},
	{"B Dup's Crack Pad"},
	{"CJ's House"},
	{"Madd Dogg's Mansion"},
	{"OG Loc's House"},
	{"Ryder's House"},
	{"Sweet's House"},
	{"Crack Factory"},
	{"Big Spread Ranch"},
	{"Fanny Batters"},
	{"Strip Club"},
	{"Strip Club Private Room"},
	{"Unnamed Brothel"},
	{"Tiger Skin Brothel"},
	{"Pleasure Domes"},
	{"Liberty City Outside"},
	{"Liverty City Inside"},
	{"Gang House"},
	{"Colonel Furhberger's House"},
	{"Crack Den"},
	{"Warehouse 1"},
	{"Warehouse 2"},
	{"Sweet's Garage"},
	{"Lil' Probe Inn Toilet"},
	{"Unused Safe House"},
	{"RC Battlefield"},
	{"Barber 1"},
	{"Barber 2"},
	{"Barber 3"},
	{"Tatoo parlour 1"},
	{"Tatoo parlour 2"},
	{"Tatoo parlour 3"},
	{"LS Police HQ"},
	{"SF Police HQ"},
	{"LV Police HQ"},
	{"Car School"},
	{"8-Track"},
	{"Bloodbowl"},
	{"Dirt Track"},
	{"Kickstart"},
	{"Vice Stadium"},
	{"SF Garage"},
	{"LS Garage"},
	{"SF Bomb Shop"},
	{"Blueberry Warehouse"},
	{"LV Warehouse 1"},
	{"LV Warehouse 2"},
	{"Catigula's Hidden Room"},
	{"Banco"},
	{"Banco - Behind Desk"},
	{"LS Atruim"},
	{"Bike School"}
}
;

new const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

new const g_arrSelectColors[256] = {
	0x000000FF, 0xF5F5F5FF, 0x2A77A1FF, 0x840410FF, 0x263739FF, 0x86446EFF, 0xD78E10FF, 0x4C75B7FF, 0xBDBEC6FF, 0x5E7072FF,
	0x46597AFF, 0x656A79FF, 0x5D7E8DFF, 0x58595AFF, 0xD6DAD6FF, 0x9CA1A3FF, 0x335F3FFF, 0x730E1AFF, 0x7B0A2AFF, 0x9F9D94FF,
	0x3B4E78FF, 0x732E3EFF, 0x691E3BFF, 0x96918CFF, 0x515459FF, 0x3F3E45FF, 0xA5A9A7FF, 0x635C5AFF, 0x3D4A68FF, 0x979592FF,
	0x421F21FF, 0x5F272BFF, 0x8494ABFF, 0x767B7CFF, 0x646464FF, 0x5A5752FF, 0x252527FF, 0x2D3A35FF, 0x93A396FF, 0x6D7A88FF,
	0x221918FF, 0x6F675FFF, 0x7C1C2AFF, 0x5F0A15FF, 0x193826FF, 0x5D1B20FF, 0x9D9872FF, 0x7A7560FF, 0x989586FF, 0xADB0B0FF,
	0x848988FF, 0x304F45FF, 0x4D6268FF, 0x162248FF, 0x272F4BFF, 0x7D6256FF, 0x9EA4ABFF, 0x9C8D71FF, 0x6D1822FF, 0x4E6881FF,
	0x9C9C98FF, 0x917347FF, 0x661C26FF, 0x949D9FFF, 0xA4A7A5FF, 0x8E8C46FF, 0x341A1EFF, 0x6A7A8CFF, 0xAAAD8EFF, 0xAB988FFF,
	0x851F2EFF, 0x6F8297FF, 0x585853FF, 0x9AA790FF, 0x601A23FF, 0x20202CFF, 0xA4A096FF, 0xAA9D84FF, 0x78222BFF, 0x0E316DFF,
	0x722A3FFF, 0x7B715EFF, 0x741D28FF, 0x1E2E32FF, 0x4D322FFF, 0x7C1B44FF, 0x2E5B20FF, 0x395A83FF, 0x6D2837FF, 0xA7A28FFF,
	0xAFB1B1FF, 0x364155FF, 0x6D6C6EFF, 0x0F6A89FF, 0x204B6BFF, 0x2B3E57FF, 0x9B9F9DFF, 0x6C8495FF, 0x4D8495FF, 0xAE9B7FFF,
	0x406C8FFF, 0x1F253BFF, 0xAB9276FF, 0x134573FF, 0x96816CFF, 0x64686AFF, 0x105082FF, 0xA19983FF, 0x385694FF, 0x525661FF,
	0x7F6956FF, 0x8C929AFF, 0x596E87FF, 0x473532FF, 0x44624FFF, 0x730A27FF, 0x223457FF, 0x640D1BFF, 0xA3ADC6FF, 0x695853FF,
	0x9B8B80FF, 0x620B1CFF, 0x5B5D5EFF, 0x624428FF, 0x731827FF, 0x1B376DFF, 0xEC6AAEFF, 0x000000FF, 0x177517FF, 0x210606FF,
	0x125478FF, 0x452A0DFF, 0x571E1EFF, 0x010701FF, 0x25225AFF, 0x2C89AAFF, 0x8A4DBDFF, 0x35963AFF, 0xB7B7B7FF, 0x464C8DFF,
	0x84888CFF, 0x817867FF, 0x817A26FF, 0x6A506FFF, 0x583E6FFF, 0x8CB972FF, 0x824F78FF, 0x6D276AFF, 0x1E1D13FF, 0x1E1306FF,
	0x1F2518FF, 0x2C4531FF, 0x1E4C99FF, 0x2E5F43FF, 0x1E9948FF, 0x1E9999FF, 0x999976FF, 0x7C8499FF, 0x992E1EFF, 0x2C1E08FF,
	0x142407FF, 0x993E4DFF, 0x1E4C99FF, 0x198181FF, 0x1A292AFF, 0x16616FFF, 0x1B6687FF, 0x6C3F99FF, 0x481A0EFF, 0x7A7399FF,
	0x746D99FF, 0x53387EFF, 0x222407FF, 0x3E190CFF, 0x46210EFF, 0x991E1EFF, 0x8D4C8DFF, 0x805B80FF, 0x7B3E7EFF, 0x3C1737FF,
	0x733517FF, 0x781818FF, 0x83341AFF, 0x8E2F1CFF, 0x7E3E53FF, 0x7C6D7CFF, 0x020C02FF, 0x072407FF, 0x163012FF, 0x16301BFF,
	0x642B4FFF, 0x368452FF, 0x999590FF, 0x818D96FF, 0x99991EFF, 0x7F994CFF, 0x839292FF, 0x788222FF, 0x2B3C99FF, 0x3A3A0BFF,
	0x8A794EFF, 0x0E1F49FF, 0x15371CFF, 0x15273AFF, 0x375775FF, 0x060820FF, 0x071326FF, 0x20394BFF, 0x2C5089FF, 0x15426CFF,
	0x103250FF, 0x241663FF, 0x692015FF, 0x8C8D94FF, 0x516013FF, 0x090F02FF, 0x8C573AFF, 0x52888EFF, 0x995C52FF, 0x99581EFF,
	0x993A63FF, 0x998F4EFF, 0x99311EFF, 0x0D1842FF, 0x521E1EFF, 0x42420DFF, 0x4C991EFF, 0x082A1DFF, 0x96821DFF, 0x197F19FF,
	0x3B141FFF, 0x745217FF, 0x893F8DFF, 0x7E1A6CFF, 0x0B370BFF, 0x27450DFF, 0x071F24FF, 0x784573FF, 0x8A653AFF, 0x732617FF,
	0x319490FF, 0x56941DFF, 0x59163DFF, 0x1B8A2FFF, 0x38160BFF, 0x041804FF, 0x355D8EFF, 0x2E3F5BFF, 0x561A28FF, 0x4E0E27FF,
	0x706C67FF, 0x3B3E42FF, 0x2E2D33FF, 0x7B7E7DFF, 0x4A4442FF, 0x28344EFF
};

//drug system edit by imac & yuri

#define MAX_DRUG_TYPE 14
new const Float:DrugPackageSize[MAX_DRUG_TYPE] = {
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0,
	28.0,
	7.0 ,
	14.0
};

new const DrugPackageName[MAX_DRUG_TYPE][64] = {
	"Ziplock - Pequeno",
	"Ziplock - Medio",
	"Ziplock - Grande",
	"Saco - Pequeno",
	"Saco - Medio",
	"Saco - Grande",
	"Papel Aluminio - Pequeno",
	"Papel Aluminio - médio",
	"Papel Aluminio - Grande",
	"Potes de Cumprimidos - Pequeno",
	"Potes de Cumprimidos - médio",
	"Potes de Cumprimidos - Grande",
	"Ceda - Pequena",
	"Ceda - médio"
};

#define DRUGOBJECT_MODEL 0
#define DRUGOBJECT_SIZE 1
#define DRUGOBJECT_NAME 2

new const DrugObject[][] = {
	{2768, 28,"Caixa de Hamburguer"},
	{2647, 135,"Burgershot Cup"},
	{2821, 226,"Cok O Pops"},
	{2694, 226,"Caixa de Sapatos"},
	{19569, 226,"Milk Carton"},
	{2891, 226,"Caixa de leite"},
	{19571, 226,"Caixa Pizza"},
	{1220, 361,"Caixa de papelão"},
	{19897, 82,"Maço de Cigarro"}
};

#define DRUGDATA_TYPE 0
#define DRUGDATA_NAME 1
#define MAX_DRUGS 10
new const DrugData[MAX_DRUGS][] = { // 0-grams, 1-Pills
	{0,"Cocaina"},
	{0,"Maconha"},
	{1,"Xanax"},
	{1,"MDMA"},
	{0,"Heroina"},
	{0,"Ketamine"},
	{0,"Fentanyl"},
	{0,"Methamphetamine"},
	{1,"Steroids"},
	{1,"Oxycodone"}
};

enum e_Drug
{
	drugID,
	drugType, // 1 Cocaina, 2 Maconha, 3 Xanax, 4 MDMA, 5 Heroina, 6 Ketamine 7, Fentanyl 8, Methamphetamine 9, Steroids 10, Oxycodone
	Float:drugQTY,
	drugStrength,
	drugPackage, // DrugPackageName 0 - 13
	drugFore
};

enum e_objectDrug
{
	drugSID,
	drugObj,
	Float:drugObjectX,
	Float:drugObjectY,
	Float:drugObjectZ,
	Float:drugObjectRX,
	Float:drugObjectRY,
	Float:drugObjectRZ,
	drugObjectWorld,
	drugObjectInt,
	drugOwner
};

// DEALERSHIP MENU
new const VehicleMenuInfo[][] = {
{511, "Aeronaves"},
{487, "Aeronaves_2"},
{481, "Motocicleta"},
{480, "Conversiveis"},
{422, "Industriais"},
{567, "Low_Rider"},
{500, "Off_Road"},
{431, "Servico_Publico"},
{596, "Public_Server_Law"},
{407, "Public_Service_Rescue"},
{421, "Saloons"},
{451, "Sportivos"},
{479, "Station_Wagons"},
{454, "Boats"},
{483, "Unicos"}
};

new VehicleDealership[][] = {
{511, 0},
{593, 0},

{417, 1},
{487, 1},
{488, 1},

{462, 2},
{463, 2},
{468, 2},
{471, 2},
{481, 2},
{509, 2},
{521, 2},
{586, 2},

{480, 3},
{533, 3},
{555, 3},

{403, 4},
{408, 4},
{413, 4},
{414, 4},
{422, 4},
{440, 4},
{443, 4},
{455, 4},
{456, 4},
{459, 4},
{478, 4},
{482, 4},
{498, 4}, // ... 609
{499, 4},
{514, 4},
{515, 4},
{543, 4}, // ...605
{554, 4},
{578, 4},
{582, 4},
{600, 4},

{412, 5},
{439, 5},
{534, 5},
{535, 5},
{536, 5},
{566, 5},
{567, 5},
{575, 5},
{576, 5},

{400, 6},
{489, 6},
{500, 6},
{579, 6},

{420, 7},
{431, 7},
{437, 7},
{438, 7},

{490, 8},
{497, 8},
{523, 8},
{528, 8},
{596, 8},
{597, 8},
{598, 8},
{599, 8},
{601, 8},

{416, 9},

{401, 10},
{405, 10},
{410, 10},
{419, 10},
{421, 10},
{426, 10},
{436, 10},
{445, 10},
{466, 10}, //... 604
{467, 10},
{474, 10},
{491, 10},
{492, 10},
{507, 10},
{516, 10},
{517, 10},
{518, 10},
{526, 10},
{527, 10},
{529, 10},
{540, 10},
{542, 10},
{546, 10},
{547, 10},
{549, 10},
{550, 10},
{551, 10},
{560, 10},
{562, 10},
{580, 10},
{585, 10},

{402, 11},
{415, 11},
{429, 11},
{475, 11},
{477, 11},
{496, 11},
{541, 11},
{558, 11},
{559, 11},
{565, 11},
{587, 11},
{589, 11},
{602, 11},
{603, 11},

{404, 12},
{418, 12},
{458, 12},
{479, 12},
{561, 12},

{446, 13},
{453, 13},
{454, 13},
{472, 13},
{473, 13},
{484, 13},

{409, 14},
{423, 14},
{483, 14},
{508, 14},
{525, 14},
{532, 14},
{545, 14},
{588, 14}

};


new stock const g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Cruiser", "SFPD Cruiser", "LVPD Cruiser",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

new stock const g_arrWeaponNames[][]={
	"Fist",
	"Brass Knuckles",
	"Golf Club",
	"Nightstick",
	"Knife",
	"Baseball Bat",
	"Shovel",
	"Pool Cue",
	"Katana",
	"Chainsaw",
	"Double Dildo",
	"Dildo",
	"Vibrator",
	"Silver Vibrator",
	"Flowers",
	"Cane/Brifcase",
	"Grenade",
	"Tear Gas",
	"Molotov Cocktail",
	"",
	"",
	"",
	"9mm",
	"Silences 9mm",
	"Desert Eagle",
	"Shotgun",
	"Sawnoff Shotgun",
	"Combat Shotgun",
	"Micro SMG",
	"MP5",
	"AK47",
	"M4",
	"Tec9",
	"Country Rifle",
	"Sniper Rifle",
	"Rocket Launcher",
	"HeatSeek Rocket Launcher",
	"Flamethrower",
	"Minigun",
	"Satchel Charge",
	"Detonator",
	"Spraycan",
	"Fire Extinguisher",
	"Camera",
	"Night Vision Goggles",
	"Thermal Goggles",
	"Parachute"
};


enum Door
{
	DOOR_HOOD,
	DOOR_TRUNK,
	DOOR_DRIVER,
	DOOR_PASSENGER
}

enum DoorState(<<= 1)
{
	IS_OPENED = 1,
	IS_DAMAGED,
	IS_REMOVED
}

//========================Industry System========================//
new stock const g_arrIndustryNames[][] = {
	"The Ship", "Green Palms Refinery", "Easter Bay Chemicals", "San Andreas Federal Mint", "Whetstone Scrap Yard", "The Panopticon Forest - West", "The Panopticon Forest - East",
	"The Impounder's Farm", "The Farm On a Rock", "The Flint Range Farm", "The Beacon Hill Eggs", "EasterBoard Farm", "The Palomino Farm", "The Leafy Hollow Orchards", "The Hilltop Farm",
	"Fort Carson Quarry", "San Andreas Federal Weapon Factory", "San Andreas Steel Mill", "Angel Pine Sawmill", "Doherty Textile Factory", "FleischBerg Brewery", "SA Food Processing Plant",
	"Ocean Docks Concrete Plant", "Fort Carson Distillery", "Las Payasdas Malt House", "Shafted Appliances", "Solarin Autos", "Rockshore Construction Site", "Doherty Construction Site",
	"Bone County Substation", "Sherman Dam Powerplant"
};

new stock const g_arrIndItemNames[][] = {
	"tinturas", "polvora", "Moedas", "sucata", "toras de madeira", "Algodão", "leite", "bebidas", "carne", "cereais", "ovos", "Eletrodomêsticos", "roupas",
	"combustivel", "mobilia", "frutas", "transformador", "veículos", "agregado", "armas", "formas de aço", "papel", "tijolos", "peças de automoveis", "farinha", "malte"
};



enum eindustry
{
	in_close,
	in_type // - 0 - Primary, 1 - Secondary, 2 -Special
}
new IndustryData[MAX_INDUSTRY][eindustry];

enum estorage
{
	in_id,
	Float:in_posx,
	Float:in_posy,
	Float:in_posz,
	in_item,
	in_industryid,
	in_trading_type, // - 0 for sale, 1 wanted
	in_price,
	in_consumption,
	in_stock,
	in_maximum,
	Text3D:in_label,
	in_pickup

};
new StorageData[MAX_ITEM_STORAGE][estorage];

new HouseDialogNames[13][] =
{
    "Apartamento [Luxo]",
    "Apartamento 2 [Luxo]",
    "Apartamento 3 [Luxo]",
    "Escola Main 1",
    "Escola Main 2",
    "Escola Biblioteca",
    "Escola Enfermaria",
    "Escola Sala de Aula",
    "Presidio - 1",
    "NADA",
    "Caravan",
    "NADA",
    "NADA"
};

new InteriorDialogHouse[13][1] =
{
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
	{1},
	{1},
	{1},
	{1},
	{1},
    {0},
    {0}
};

new Float:HouseDialogData[13][4] =
{
    {1699.5927, -1424.9175, 36.5657, 0.0}, 			//Apartamento
    {-1817.0074, 825.8862, 127.2960, 0.0}, 			// Apartamento 2
    {851.3640100,1991.1080300,1013.4790000, 0.0}, 	// Apartamento 3
    {1783.6355, -1340.8993, 3529.8076, 0.0}, 		// Main
    {1801.9773, -1381.4071, 6532.2888, 0.0}, 		// Main 2
    {1843.7408, -1446.2926, 566.6570, 0.0}, 		// Biblioteca
    {-2801.8401, -2505.0554, 1500.5603, 0.0}, 		// Enfermaria
    {1764.5349, -1377.0894, 1923.0090, 0.0}, 		// Sala de Aula
    {1814.4818, -1595.0229, 1095.5571, 0.0}, 		// Presidio
    {0.0, 0.0, 0.0, 0.0},        //
    {0.0, 0.0, 0.0, 0.0},        	// Caravan
    {-699.1899,-7450.6929,37.9266, 0.0},            //
    {0.0, 0.0, 0.0, 0.0}            //
};



//ints casa
stock ShowHouseInterioresDialog(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(HouseDialogNames); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), HouseDialogNames[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, HouseDialogNames[i]);
        }
    }
    return Dialog_Show(playerid, Dialog_Casas_Menu, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Selecionar", "Cancelar");
}







//========================Furnitures System========================//

enum mSubE
{
    mName[32],
    mModel,
    mtxd[32],
    mtexture[32]
};

new stock const MaterialData[][mSubE] = {
{"Lady Desperado", 18028, "cj_bar2", "CJ_nastybar_D"},
{"Hispanic Pose", 18028, "cj_bar2", "CJ_nastybar_D2"},
{"Diablo Pose", 18028, "cj_bar2", "CJ_nastybar_D3"},
{"Jesus Saves", 18028, "cj_bar2", "CJ_nastybar_D4"},
{"Sun Emblem", 18028, "cj_bar2", "CJ_nastybar_D5"},
{"S.W.A.T Solider", 18028, "cj_bar2", "CJ_nastybar_D6"},
{"Engraved Wood", 18028, "cj_bar2", "GB_nastybar01"},
{"Snow", 3914, "snow", "mp_snow"},
{"Dirty Sand", 18202, "w_towncs_t", "concretebig4256128"},
{"Light Sand", 10433, "hashmarket1_sfs", "concretenewb256"},
{"Grass", 10931, "traingen_sfse", "desgreengrass"},
{"Light Grass", 10403, "golf_sfs", "golf_greengrass"},
{"Cracked Ground", 5404, "stormdra1_lae", "des_crackeddirt1"},
{"Grey Rocks", 10969, "scum_sfse", "Was_scrpyd_floor_hangar"},
{"Red Rocks", 11421, "desn_desert", "des_redrock1"},
{"Grey Rocks", 896, "underwater", "greyrockbig"},
{"Concrete", 9507, "boxybld2_sfw", "sf_concrete1"},
{"Dirty Concrete", 18200, "w_town2cs_t", "newall3_16c128"},
{"Clear Water", 3947, "rczero_track", "waterclear256"},
{"Glass", 17079, "cuntwland", "grasstype3dirt"},
{"Metal Plate", 5417, "idlewood6_tr", "metpat64"},
{"Wood Floor", 16150, "ufo_bar", "sa_wood07_128"},
{"Wooden Planks", 11497, "des_baitshop", "des_woodslats1"},
{"Brick", 9495, "vict_sfw", "newall10_seamless"},
{"Red Brick", 8678, "wddngchplgrnd01", "vgschapelwall01_128"},
{"Marbled", 12979, "sw_block9", "sw_wall03"},
{"Stone", 6293, "lawland2", "stonewall_la"}
};

new stock const xmGenres[][] = {
	"Rocha",
	"De outros",
	"Rhythm & Blues",
	"Urbano",
	"Pop",
	"Oldies",
	"Internacional",
	"Cultural",
	"Eletronico",
	"Link"
};

enum E_SubGenres
{
    xmid,
    subname[32],
}

new stock const xmSubGenres[][E_SubGenres] = {
// Rock
{0, "Alternative Rock"},
{0, "Hard Rock"},
{0, "Classic Rock"},
{0, "India Rock"},
{0, "Punk Rock"},
{0, "Death Metal"},
{0, "Psychedelic Rock"},
{0, "Surf"},
{0, "Rockabilly"},
{0, "Surf"},
{0, "Rockabilly"},
{0, "Heavy Metal"},
{0, "Gothic Rock"},
{0, "Doom Metal"},
// Other
{1, "SP-RP"},
{1, "Mash Ups"},
{1, "Dance"},
{1, "Chiptune"},
{1, "Ambient"},
{1, "Latin"},
// Rhythm & Blues
{2, "Soul"},
{2, "Jazz"},
{2, "R&B"},
{2, "Electro Swig"},
// Urban
{3, "Country"},
{3, "Hip Hop"},
{3, "Ska"},
{3, "Rap"},
{3, "Trap"},
{3, "Classic Rap"},
{3, "Reggae"},
{3, "Reggaeton"},
// Pop
{4, "Pop"},
{4, "Latin"},
// Oldies
{5, "80s"},
{5, "Mixed"},
{5, "70s"},
{5, "60s"},
{5, "90s"},
// International
{6, "South Asian"},
{6, "Russian"},
{6, "Mexican"},
{6, "Bosnian"},
{6, "Macedonian"},
{6, "French"},
{6, "Cuban"},
{6, "Swedish"},
{6, "Arabic"},
{6, "Romanian"},
{6, "Norwegian"},
{6, "Dutch"},
{6, "Greek"},
{6, "Hebrew"},
{6, "Serbian"},
{6, "Czech"},
{6, "Albanian"},
{6, "Spanish"},
{6, "Armenian"},
// Cultural
{7, "Instruments"},
// Electronic
{8, "House"},
{8, "Dance"},
{8, "Psychedelic"},
{8, "Ambient & Chillout"},
{8, "Drum and Bass & Dubs"},
{8, "Hard House"},
{8, "Progressive"},
{8, "Synthwave"},
{8, "Dark Alternative"},
// Talk
{9, "Scanners"},
{9, "News"}
};

new stock const fCategory[][] = {
	"Eletrodomesticos",
	"Conforto",
	"Decorações",
	"Entretenimento",
	"Iluminação",
	"Encanamento",
	"Armazenamento",
	"Superficies",
	"Diversos",
	"Especial"
};

enum subCatalogE
{
    catid,
    subname[32],
}

new stock const fSubCategory[][subCatalogE] = {
	{0, "Geladeiras"},
	{0, "Fogões"},
	{0, "Latas de lixo"},
	{0, "Pequenos Eletrodomesticos"},
	{0, "lixeiras"},
	{1, "Camas"},
	{1, "Cadeiras"},
	{1, "Poltronas de braço"},
	{1, "Sofas"},
	{1, "Bancos"},
	{2, "Cortinas"},
	{2, "Sinalizadores"},
	{2, "Tapetes"},
	{2, "estátuas"},
	{2, "Toalhas"},
	{2, "Pinturas"},
	{2, "Plantas"},
	{2, "Posters"},
	{3, "Equipamentos Esportivos"},
	{3, "Televistions"},
	{3, "Maquinas de jogos"},
	{3, "Media Players"},
	{3, "Estereo"},
	{3, "Alto-falantes"},
	{4, "Lampadas"},
	{4, "Arandelas"},
	{4, "Luzes de teto"},
	{4, "Luzes de nãon"},
	{5, "Banheiros"},
	{5, "Pias"},
	{5, "Chuveiros"},
	{5, "Banheiras"},
	{6, "Seguro"},
	{6, "Estantes de livros"},
	{6, "Comodas"},
	{6, "Armarios de arquivamento"},
	{6, "Despensas"},
	{7, "Mesas de jantar"},
	{7, "Mesas de cafe"},
	{7, "Contadores"},
	{7, "Expositores"},
	{7, "Expositores"},
	{7, "Estandes de TV"},
	{8, "Roupas"},
	{8, "Consumiveis"},
	{8, "Portas"},
	{8, "bagunça"},
	{8, "Diversos"},
	{8, "Pilares"},
	{8, "Segurança"},
	{8, "Escritorio"},
	{8, "Brinquedos"},
	{9, "Animais"},
	{9, "Jogos de azar"},
	{9, "Tags de gangue"},
	{9, "facção"},
	{9, "Efeitos"},
	{9, "Paredes"},
	{9, "Paredes (entrada)"},
	{9, "Paredes (janela aberta)"},
	{9, "Paredes (finas)"},
	{9, "Paredes (largas)"},
	{9, "Vidro"}
};

enum FURNITURE_DETAILS
{
    furnitureCatalog,
    furnitureSubCatalog,
    furnitureModel,
    furnitureName[48],
    furniturePrice,
}

new const FurnitureItems[][FURNITURE_DETAILS] = {
{0,0, 1780, "Freezer", 5500},
{0,0, 2127, "LoveSet Red Refrigerator",7820},
{0,0, 2131, "Creamy Metal Refrigerator",7820},
{0,0, 2147, "Old Town Refrigerator",7820},
{0,1, 2017, "Maggie's Co. Stove",2400},
{0,1, 2135, "Sterling Co. Stove",3000},
{0,1, 2144, "Old Town Stove",2100},
{0,1, 2294, "LoveSet Stove",4500},
{0,1, 2340, "Creamy Metal Stove",4500},
{0,2, 1235, "Transparent Sides Trash Can", 50},
{0,2, 1300, "Stone Trash Can", 140},
{0,2, 1328, "Aluminum Lid Trash Can", 15},
{0,2, 1329, "Ghetto Trash Can", 10},
{0,2, 1330, "Trash Bag Covered Trash Can", 12},
{0,2, 1337, "Tall Rolling Trash Can", 70},
{0,2, 1339, "Light Blue Rolling Trash Can", 70},
{0,2, 1347, "Street Trash Can", 40},
{0,2, 1359, "Metal Plate Trash Can", 60},
{0,2, 1371, "Hippo Trash Can", 200},
{0,2, 1574, "White Trash Can", 501},
{0,2, 2770, "Cluck n Bell Trash Can", 80},
{0,3, 2149, "Microwave", 100},
{0,3, 2426, "Toaster Oven", 150},
{0,4, 1331, "Recycle Dumpster", 1400},
{0,4, 1332, "Glass Recycle Dumpster", 1400},
{0,4, 1333, "Orange Dumpster", 1200},
{0,4, 1334, "Blue Dumpster", 1200},
{0,4, 1335, "Clothes Recycle Dumpster", 1400},
{0,4, 1336, "Blue Compact Dumpster", 1200},
{0,4, 1372, "Regular Street Dumpster", 2000},
{0,4, 3035, "Black Compact Dumpster", 1200},
{0,4, 1415, "Packed Regular Street Dumpster", 2000},
{1,0, 1700, "Pink Queen Bed", 5750},
{1,0, 1701, "Royal Brown Queen Bed", 6100},
{1,0, 1745, "Green & White Backboard Queen Bed", 6200},
{1,0, 1793, "Stack of Mattresses", 2850},
{1,0, 1794, "Brown Wooden Queen Bed", 6450},
{1,0, 1795, "Basic Beach Bed", 6500},
{1,0, 1796, "Brown Wooden Quilted Bed", 4200},
{1,0, 1797, "Basic Bed & Stylish Legs", 5000},
{1,0, 1798, "Basic Beach Single Bed", 7050},
{1,0, 1799, "Brown Quilted Yellow Queen Bed", 5640},
{1,0, 1800, "Metal Prison Bed", 1520},
{1,0, 1801, "White Wooden Queen Bed", 7000},
{1,0, 1802, "Floral Quilt Wooden Queen Bed", 7200},
{1,0, 1803, "Floral Quilt Wooden Queen Bed (Overhead)	", 7300},
{1,0, 1812, "Shiny Metal Prison Bed", 1800},
{1,0, 2299, "Brown Quilted Queen Bed", 5640},
{1,0, 2302, "Cabin Bed", 3900},
{1,0, 2603, "White Police Cell Bed", 1800},
{1,0, 14866, "Tropical Sand Queen Bed", 9150},
{1,0, 14446, "King Size Zebra Styled Bed", 10200},
{1,1, 1663, "Swivel Chair", 400},
{1,1, 1671, "Arms Rest Swivel Chair", 410},
{1,1, 1720, "Wooden Chair", 500},
{1,1, 1721, "Metallic Chair", 500},
{1,1, 1739, "Dining Chair", 500},
{1,1, 11685, "Brown Thick Silk Armchair", 1080},
{1,1, 2356, "Office Chair", 700},
{1,1, 19996, "Fold Chair", 200},
{1,1, 19994, "Oval Wooden Chair", 1090},
{1,1, 2079, "Green Wooden Dining Chair", 1100},
{1,1, 2120, "Black Wooden Dining Chair", 1150},
{1,1, 2121, "Foldable Red Chair", 400},
{1,1, 2122, "White Dining Chair", 800},
{1,1, 2123, "White Dining Chair Wooden Legs", 900},
{1,1, 2124, "Light Brown Wooden Dining Chair", 850},
{1,1, 19994, "Dark Color Wooden Chair Metallic Legs", 1400},
{1,1, 1806, "Navy Wheeled Office Chair", 725},
{1,1, 2636, "Pizza Chair", 1150},
{1,1, 2724, "Black Metallic Strip Chair", 1350},
{1,1, 2777, "Black Metallic Strip Chair", 1325},
{1,1, 2788, "Red & Green Metallic Burger Chair", 1350},
{1,2, 1724, "Black Silk Arm Chair", 3000},
{1,2, 1705, "Brown Silk Arm Chair", 3000},
{1,2, 1707, "Chevy Arm Chair", 3500},
{1,2, 1708, "Blue Business Arm Chair", 3800},
{1,2, 1711, "Basic Arm Chair", 2000},
{1,2, 1727, "Black Leather Arm Chair", 4000},
{1,2, 1729, "Egg Shaped Basic Arm Chair", 1800},
{1,2, 1735, "Flowered Style Country Arm Chair", 1750},
{1,2, 1755, "Cold Autumn Styled Arm Chair", 1700},
{1,2, 1758, "Autumn Styled Arm Chair", 1500},
{1,2, 1759, "Basic Flower Styled Arm Chair", 1450},
{1,2, 1762, "Basic Wooden Arm Chair", 2000},
{1,2, 1765, "Basic Polyester Tiled Arm Chair", 1850},
{1,2, 1767, "Basic Indian Styled Arm Chair", 1800},
{1,2, 1769, "Blue Cotton Arm Chair", 1450},
{1,2, 2096, "Rocking Chair", 2010},
{1,2, 11682, "Brown Thick Silk Armchair", 3550},
{1,3, 1702, "Brown Silk Couch", 5000},
{1,3, 1703, "Black Silk Couch", 5000},
{1,3, 1706, "Purple Cotton Couch", 4750},
{1,3, 1710, "Long x2 Basic Couch", 4600},
{1,3, 1712, "Long Basic Couch", 4250},
{1,3, 1713, "Blue Business Couch", 5850},
{1,3, 1756, "Basic Indian Styled Couch", 3800},
{1,3, 1757, "Autumn Styled Couch", 3600},
{1,3, 1760, "Cold Autumn Styled Couch", 3500},
{1,3, 1761, "Basic Wooden Couch", 4050},
{1,3, 1763, "Basic Flower Styled Couch", 3500},
{1,3, 1764, "Basic Polyester Tiled Couch", 3950},
{1,3, 1768, "Blue Cotton Couch", 3650},
{1,3, 2290, "Thick Silk Couch", 6650},
{1,4, 1716, "Metal Stool", 650},
{1,4, 1805, "Short Red Cotton Stool", 525},
{1,4, 2293, "Thick Silk Foot Stool", 1000},
{1,4, 2350, "Red Cotton Stool", 425},
{1,4, 2723, "Retro Metal Stool", 700},
{2,0, 2558, "Green Curtains", 750},
{2,0, 2561, "Wide Green Curtains", 900},
{2,1, 2048, "Confederate Flag", 500},
{2,1, 2614, "USA Flags", 500},
{2,1, 11245, "USA Flags", 750},
{2,1, 2914, "Green Flag", 300},
{2,2, 2631, "Red Mat", 350},
{2,2, 2632, "Turquoise Mat", 350},
{2,2, 1828, "Tiger Rug", 3000},
{2,2, 2815, "Runway Rug", 510},
{2,2, 2817, "Bubbles Rug", 300},
{2,2, 2818, "Red & Orange Tile Bath Rug", 320},
{2,2, 2833, "Royal Tan Rug", 550},
{2,2, 2834, "Plain Tan Rug", 500},
{2,2, 2835, "Ovan Tan Rug", 430},
{2,2, 2836, "Royal Diamond Rug", 600},
{2,2, 2841, "Oval Water Tile Rug", 372},
{2,2, 2842, "Pink Diamond Rug", 323},
{2,2, 2847, "Sand Styled Rug", 300},
{2,3, 3471, "Ancient Chinese Lion Statue", 10050},
{2,3, 3935, "Headless Armless Woman Statue", 8000},
{2,3, 14467, "Big Smoke Statue", 18000},
{2,3, 14608, "Huge Buddha Statue", 50000},
{2,3, 3528, "Dragon Head Statue", 25000},
{2,3, 2743, "Crying Man Statue", 15000},
{2,3, 1736, "Moose Head", 5000},
{2,4, 1640, "Green Striped Towel", 250},
{2,4, 1641, "Blue R* Towel", 200},
{2,4, 1642, "White Sprinkled Red Towel", 300},
{2,4, 1643, "Wayland Towel", 245},
{2,5, 2289, "City Painting", 2250},
{2,5, 2287, "Boats Painting", 1500},
{2,5, 2286, "Ship Painting", 1000},
{2,5, 2285, "Abstract Painting", 900},
{2,5, 2284, "Building Painting", 1500},
{2,5, 2274, "Abstract Painting", 2300},
{2,5, 2282, "Landscape Painting", 1300},
{2,5, 2281, "Landscape Painting", 1300},
{2,5, 2280, "Landscape Painting", 1500},
{2,5, 2279, "Landscape Painting", 1400},
{2,5, 2278, "Boat Painting", 950},
{2,5, 2277, "Cat Painting", 1000},
{2,5, 2276, "Bridge Painting", 1200},
{2,5, 2275, "Fruits Painting", 1000},
{2,5, 2274, "Flowers Painting", 1500},
{2,5, 2273, "Flowers Painting", 1250},
{2,5, 2272, "Landscape Painting", 800},
{2,5, 2271, "Abstract Painting", 750},
{2,5, 2270, "Leaves Painting", 1250},
{2,5, 2269, "Landscape Painting", 1100},
{2,5, 2268, "Cat Painting", 1000},
{2,5, 2267, "Ship Painting", 1000},
{2,5, 2266, "City Painting", 850},
{2,5, 2265, "Landscape Painting", 1400},
{2,5, 2264, "Beach Painting", 1350},
{2,5, 2263, "City Painting", 1500},
{2,5, 2262, "City Painting", 1450},
{2,5, 2261, "Bridge Painting", 1500},
{2,5, 2260, "Boat Painting", 1000},
{2,5, 2259, "Landscape Painting", 800},
{2,5, 2258, "Landscape Painting", 2000},
{2,5, 2257, "Abstract Painting", 1200},
{2,5, 2256, "Landscape Painting	", 2250},
{2,5, 2255, "Candy Suxx Painting", 4500},
{2,6, 859, "Plant Top", 350}, //Decorations => Plants
{2,6, 860, "Bushy Plant Top", 375},
{2,6, 861, "Tall Plant Top", 345},
{2,6, 862, "Tall Orange Plant Top", 400},
{2,6, 863, "Cactus Top", 700},
{2,6, 638, "Planted Bush", 2500},
{2,6, 640, "Long Planted Bush", 3000},
{2,6, 948, "Dry Plant Pot", 800},
{2,6, 949, "Normal Plant Pot", 100},
{2,6, 950, "Big Dry Plants Pot", 1200},
{2,6, 2001, "Long Plants Pots", 1350},
{2,6, 2010, "Long Plants Pot 2", 1400},
{2,6, 2011, "Long Plants Pot 3", 1500},
{2,6, 2194, "Short Plants Pot", 700},
{2,6, 2195, "Short Plants Pot 2", 900},
{2,6, 2203, "Empty Pot", 200},
{2,6, 2240, "Weeds In Red Pot", 1350},
{2,6, 2241, "Rusty Pottery Plant", 1200},
{2,6, 2242, "Empty Red Pot", 350},
{2,6, 2244, "Plants With Big Wooden Pot", 1500},
{2,6, 2243, "Red Flowers With Wide Modern Pot", 1400},
{2,6, 2246, "Empty White Vase", 2000},
{2,6, 2247, "Oriental Plants In Glass Vase", 1650},
{2,6, 2248, "Empty Tall Red Vase", 1000},
{2,6, 2249, "Oriental Flowers In Glass Vase", 1500},
{2,6, 2250, "Spring Flowers In Glass Vase", 1200},
{2,6, 2251, "Oriental Flowers In blue Designer Glass", 1600},
{2,6, 2252, "Small Bowl Plant", 1000},
{2,6, 2253, "Red Flowers In Wooden Cube", 1500},
{2,6, 2345, "Vines", 700},
{2,6, 3802, "Hanging Red Flowers", 2250},
{2,6, 3806, "Wall Mounted Flowers", 2500},
{2,6, 3810, "Hanging Flowers", 2250},
{2,6, 3811, "Wall Mounted Flowers With Dandelion", 3000},
{2,6, 861, "Dark Exotic Plants", 2400},
{2,6, 2195, "Potted Shrub", 1200},
{2,7, 2049, "Shooting Target", 140},  //Decorations => Posters
{2,7, 2050, "Shooting Targets", 140},
{2,7, 2051, "Inverted Shooting Target", 140},
{2,7, 2691, "Base 5 Poster", 140},
{2,7, 2695, "Thin Bare 5 Poster", 70},
{2,7, 2696, "Thin Bare 5 Dog Poster", 70},
{2,7, 2692, "Wheelchairster cutout Poster", 200},
{2,7, 2693, "Nino Cutout Poster", 200},
{2,7, 19328, "Filthy Chicks Poster", 140},
{2,7, 2646, "Candy Suxx Set Poster", 140},
{3,0, 1985, "Punching Bag", 5000}, // Entertainment => Sporting Equipment
{3,0, 2627, "Treadmill", 13000},
{3,0, 2628, "Weight Lifting Bench", 7500},
{3,0, 2629, "Weight Lifting Bench", 7500},
{3,0, 2916, "One Dumbbell", 2500},
{3,0, 2915, "Two Dumbells", 5000},
{3,0, 2630, "Exercise Bike", 10000},
{3,0, 2964, "Blue Pool Table", 15000},
{3,0, 14651, "Green Pool Table", 15000},
{3,0, 338, "Pool Cue", 700},
{3,0, 3003, "Pool: Cue Ball", 1500},
{3,0, 3106, "Pool: 8 Ball", 1000},
{3,0, 3105, "Pool: Red Solid Ball", 700},
{3,0, 3104, "Pool: Green Solid Ball", 700},
{3,0, 3103, "Pool: Orange Solid Ball", 700},
{3,0, 3101, "Pool: Red Solid Ball", 700},
{3,0, 3100, "Pool: Blue Solid Ball", 700},
{3,0, 3002, "Pool: Yellow Solid Ball", 700},
{3,0, 2997, "Pool: Maroon Stripe Ball", 700},
{3,0, 3000, "Pool: Green Stripe Ball", 700},
{3,0, 2999, "Pool: Orange Stripe Ball", 700},
{3,0, 2997, "Pool: Red Stripe Ball", 700},
{3,0, 2996, "Pool: Blue Stripe Ball", 700},
{3,0, 2995, "Pool: Yellow Stripe Ball	", 700},
{3,0, 946, "Hanging Basketball Goal", 3000},
{3,0, 3065, "Basketball", 1100},
{3,1, 2316, "Small Black Television", 3800}, // Entertainment => Televisions
{3,1, 2320, "Wooden Television", 4550},
{3,1, 2317, "Rusty Television", 4000},
{3,1, 2322, "Dark Wooden Television", 4500},
{3,1, 1429, "Wooden White Television", 4550},
{3,1, 1791, "Tall Black Television", 5000},
{3,1, 2595, "Television On Top Of DVD", 3600},
{3,1, 14532, "Rolling Television Stand", 4000},
{3,1, 2596, "Mounted Black Television", 4300},
{3,1, 1751, "White Metal Television", 4700},
{3,1, 2648, "Tall Black Television", 5000},
{3,1, 1781, "Slim Tall Black Television", 5300},
{3,1, 1752, "Medium Black Television", 4200},
{3,1, 2224, "Orange Sphere Television", 5000},
{3,1, 1792, "Slim Grey Television", 5200},
{3,1, 19787, "Large Wide Television", 5500},
{3,2, 1515, "Triple Play Poker Machine", 20000}, // Entertainment => Gaming Machines
{3,2, 2778, "Bee Be Gone Arcade Machine", 17500},
{3,2, 2779, "Duality Arcade Machine", 17500},
{3,2, 2028, "Xbox 360 Console	2028", 10000},
{3,3, 1782, "HI-DE DVD Player", 3240}, // Entertainment => Media Players
{3,3, 1783, "DVR620 DVD Player", 3500},
{3,3, 1785, "Sunny DVD Player", 4400},
{3,3, 1787, "BD655 Blu-Ray Player", 4300},
{3,3, 1788, "BD670 Blu-Ray Player", 4500},
{3,4, 2100, "Stereo System & Speakers", 2025}, // Entertainment => Stereos
{3,4, 2101, "Stereo System", 2500},
{3,4, 2102, "Retro Boombox", 2800},
{3,4, 2103, "White Boombox ", 3000},
{3,4, 2104, "Stereo System Stand", 3400},
{3,4, 2226, "Boombox", 3500},
{3,5, 2229, "Metal Plate Speaker", 13000}, // Entertainment => Speakers
{3,5, 2230, "Wooden Speaker", 12000},
{3,5, 2231, "Wooden Speaker Amplifier", 7000},
{3,5, 2232, "Metal Plate Speaker Amplifier", 9000},
{3,5, 2233, "Futuristic Speaker", 13000},
//Lamps
{4,0, 2238, "Lava Lamp", 900},
{4,0, 2196, "Work Lamp", 800},
{4,0, 2026, "White Lamp", 860},
{4,0, 2726, "Red Lamp", 860},
{4,0, 3534, "Red Lamp Style 2", 860},
//Sconces
{4,1, 1731, "Gray Sconce", 1500},
{4,1, 3785, "Bulkhead Light", 1600},
//Ceilinglights
{4,2, 2075, "Long Bulb Ceiling Light", 2500},
{4,2, 2073, "Brown Threaded Ceiling Light", 3200},
{4,2, 2074, "Hanging Light Bulb", 200},
{4,2, 2075, "Romantic Red Ceiling Light", 3500},
{4,2, 2076, "Hanging Bowl Ceiling Light", 3000},
{4,2, 16779, "Wooden Ceiling Fan", 3300},
//Neonlights
{4,3, 18647, "Red Neon Light", 3200},
{4,3, 18648, "Blue Neon Light", 3200},
{4,3, 18649, "Green Neon Light", 3200},
{4,3, 18650, "Yellow Neon Light", 3200},
{4,3, 18651, "Pink Neon Light", 3200},
{4,3, 18652, "White Neon Light", 3200},
//Toilets
{5,0, 2514, "Plain Toilet", 3750},
{5,0, 2521, "White Metal Toilet	", 5000},
{5,0, 2525, "Sauna Toilet", 5000},
{5,0, 2528, "Black Wooden Toilet", 5500},
//Sinks
{5,1, 2013, "Maggie's Co. Sink", 3850},
{5,1, 2130, "LoveSet Sink", 4900},
{5,1, 2132, "Creamy Metal Sink", 4600},
{5,1, 2136, "Sterlin Co. Metal Sink", 3000},
{5,1, 2150, "Old Town Sink Pt.2", 500},
{5,1, 2518, "Wooden Snow White Sink", 3850},
{5,1, 2523, "Bathroom Sink With Pad", 2550},
{5,1, 2524, "Sauna Bathroom Sink", 2200},
{5,1, 2739, "Bare Bathroom Sink", 1700},
//Showers
{5,2, 2517, "Silver Glass Shower", 8000},
{5,2, 2520, "Dark Metal Shower	", 7550},
{5,2, 2527, "Sauna Shower	", 7000},
//Bathtubs
{5,3, 2097, "Sprunk Bath Tub", 8000},
{5,3, 2516, "Sparkly White Bath Tub", 7500},
{5,3, 2519, "White Bath Tub", 7900},
{5,3, 2522, "Dark Wooden Bath Tub", 8200},
{5,3, 2526, "Sauna Wooden Bath Tub", 8500},
//Safe
{6,0, 2332, "Sealed Safe", 10000},
//Bookshelves
{6,1, 1742, "Half Empty Book Shelf", 3000},
{6,1, 14455, "Large Green Book Shelves", 3000},
{6,1, 2608, "Three Wooden Level Book Shelf", 2500},
//Dressers
{6,2, 2330, "Standard Wooden Dresser", 3250},
{6,2, 2323, "Light Wooden Dresser Bottom Opening Legs", 3500},
{6,2, 2088, "Long Light Wooden Dresser Legs", 4300},
//Filling Cabinets
{6,3, 2000, "Metal Filing Cabinet", 1500},
{6,3, 2007, "Double Filing Cabinet", 3000},
{6,3, 2163, "Wall Mounted Filing Cabinet", 900},
{6,3, 2200, "Tall Wall Mounted Filing Cabinet", 1200},
{6,3, 2197, "Brown Metal Filing CabinetAME", 1500},
{6,3, 2167, "Big Oak Filing Cabinet", 3000},
//Pantries
{6,4, 2128, "LoveSet Pantry", 3000},
{6,4, 2140, "Sterlin Co. Pantry", 2000},
{6,4, 2141, "Creamy Metal Pantry", 2500},
{6,4, 2145, "Old Town Pantry", 2500},
{6,4, 2153, "Wooden Snow White Pantry", 2000},
{6,4, 2158, "Mahogany Green Wood Pantry", 2000},
//Diningtables
{7,0, 2357, "Long Wooden Table", 2500},
{7,0, 2118, "Marble Top Table", 3000},
{7,0, 2117, "Pine Wood Table", 3000},
{7,0, 2115, "Oak Wood Table", 4700},
{7,0, 2110, "Basic Wood Table", 1500},
{7,0, 15037, "Table With TV", 4000},
//Coffeetables
{7,1, 1813, "Basic Oak Coffee Table", 5750},
{7,1, 1814, "Fancy Oak Coffee Table/Drawers", 5500},
{7,1, 1815, "Oval Coffee Table", 3750},
{7,1, 1817, "Fancy Oak Coffee Table	", 5500},
{7,1, 1818, "Square Oak Coffee Table", 5750},
{7,1, 1819, "Fancy Circle Coffee Table", 4500},
{7,1, 1820, "Basic Circle Coffee Table", 3750},
{7,1, 1822, "Mahogany Oval Coffee Table", 3750},
{7,1, 1823, "Mahogany Square Coffee Table", 4500},
{7,1, 2126, "Ebony Wood Basic Coffee Table", 3750},
//Counters
{7,2, 2014, "Maggie's Co. Counter Top", 950},
{7,2, 2015, "Maggie's Co. Counter Right Handle", 1000},
{7,2, 2016, "Maggie's Co. Counter Left Handle", 2000},
{7,2, 2019, "Maggie's Co. Blank Counter Top", 4000},
{7,2, 2022, "Maggie's Co. Corner Counter Top", 4000},
{7,2, 2129, "LoveSet Counter Top", 2000},
{7,2, 2133, "Creamy Metal Counter Top", 2000},
{7,2, 2137, "Sterlin Co. Cabinet Top", 3500},
{7,2, 2138, "Sterlin Co. Counter Top", 3500},
{7,2, 2139, "Sterlin Co. Counter", 3500},
{7,2, 2142, "Old Town Counter", 2000},
{7,2, 2151, "Wooden Snow White Counter Top", 3250},
{7,2, 2152, "Wooden Snow White Cabinete Counter", 2750},
{7,2, 2153, "Wooden Snow White Counter", 3000},
{7,2, 2156, "Mahogany Green Wood Counter", 2000},
{7,2, 2159, "Mahogany Green Wood Cabinet Counter", 3000},
{7,2, 2414, "Laguna Wooden Counter", 2200},
{7,2, 2424, "Light Blue IceBox Counter", 2100},
{7,2, 2423, "Light Blue IceBox Corner Counter	", 2100},
{7,2, 2435, "November Wood Counter", 2100},
{7,2, 2434, "November Wood Corner Counter", 2100},
{7,2, 2439, "Dark Marble Diamond Counter", 4000},
{7,2, 2440, "Dark Marble Diamond Corner Counter", 4000},
{7,2, 2441, "Marble Zinc Top Counter", 4200},
{7,2, 2442, "Marble Zinc Top Corner Counter", 6000},
{7,2, 2445, "Marble Zinc Top Counter (Regular)", 2500},
{7,2, 2444, "Marble Zinc Top Counter (Half Design)", 2500},
{7,2, 2446, "Parlor Red Counter", 2000},
{7,2, 2450, "Parlor Red Corner Counter", 2000},
{7,2, 2455, "Parlor Red Checkered Counter", 2000},
{7,2, 2454, "Parlor Red Checkered Corner Counter", 2000},
//Displaycabinets
{7,3, 2046, "Basic Wooden Display Cabinet", 1450},
{7,3, 2078, "Fancy Dark Wooden Display Cabinet", 2150},
{7,3, 2385, "Glass Front Wooden Display Cabinet", 1750},
{7,3, 2458, "Delicate Glass Wooden Display Cabinet", 1750},
{7,3, 2459, "Long Delicate Glass Wooden Display Cabinet", 1750},
{7,3, 2460, "Mini Delicate Glass Wooden Display Cabinet", 1750},
{7,3, 2461, "Cubed Delicate Glass Wooden Display Cabinet", 1750},
//Displayshelves
{7,4, 2063, "Industrial Display Shelf", 2450},
{7,4, 2210, "Black Metal Glass Display Shelf", 2750},
{7,4, 2211, "Wooden Glass Display Shelf", 2750},
{7,4, 2403, "Very Large Wooden Display Shelf", 16750},
{7,4, 2462, "Wall Mounted Thin Wooden Display Shelf", 2750},
{7,4, 2463, "Wall Mounted Thin Wooden Display Shelf", 3000},
{7,4, 2708, "Wooden Display Shelf With Bar", 3200},
{7,4, 2367, "Modern White Counter Display Shelf", 3500},
{7,4, 2368, "Wooden Counter Display Shelf", 3500},
{7,4, 2376, "Wooden & Glass Table Display Shelf", 3000},
{7,4, 2447, "Tall Parlor Red Display Shelf", 2300},
{7,4, 2448, "Wide Parlor Red Display Shelf", 2500},
{7,4, 2449, "Tall & Wide Parlor Red Display Shelf", 3700},
{7,4, 2457, "Parlor Red Checkered Display Shelf", 4500},
//Tvstands
{7,5, 2306, "Three Level Wooden TV Stand", 1500},
{7,5, 2321, "Small Two Level TV Stand", 1700},
{7,5, 2319, "Antique Oak TV Stand", 1350},
{7,5, 2314, "Light Wooden Small TV Stand", 1950},
{7,5, 2315, "Small Wooden TV Stand", 1700},
{7,5, 2313, "Light Wooden TV Stand With VCR", 2500},
{7,5, 2236, "Dark Mahogany TV Stand", 2900},
//Miscellaneous
//Clothes
{8,0, 2374, "Blue Plaid Shirts Rail", 200},
{8,0, 2377, "Black Levis Jeans Rail", 400},
{8,0, 2378, "Black Levis Jeans Rail", 400},
{8,0, 2381, "Row of Sweat Pants", 560},
{8,0, 2382, "Row of Levis Jeans	", 1000},
{8,0, 2383, "Yellow Shirts Rail", 200},
{8,0, 2384, "Stack of Khaki Pants", 300},
{8,0, 2389, "Red And White Sports Jacket Rail", 680},
{8,0, 2390, "Green Sweat Pants Rail", 240},
{8,0, 2391, "Khaki Pants Rail", 300},
{8,0, 2392, "Row of Khakis & Levis Jeans", 950},
{8,0, 2394, "Row of Shirts", 850},
{8,0, 2396, "Black and Red Blazers Rail ", 1200},
{8,0, 2397, "Grey Jeans Rail", 340},
{8,0, 2398, "Blue Sweat Pants Rail", 240},
{8,0, 2399, "Grey Sweatshirt Rail", 240},
{8,0, 2401, "Red Sweat Pants Rail", 240},
//Consumables
{8,1, 1950, "Beer Bottle", 50},
{8,1, 2958, "Beer Bottle", 50},
{8,1, 1486, "Beer Bottle", 50},
{8,1, 1543, "Beer Bottle", 50},
{8,1, 1544, "Beer Bottle", 50},
{8,1, 1520, "Scotch Bottle", 100},
{8,1, 1644, "Wine Bottle", 150},
{8,1, 1669, "Wine Bottle", 150},
//Doors
{8,2, 3109, "White Basic Door", 4000},
{8,2, 19857, "Wooden Door With Small Window", 5500},
{8,2, 3093, "Gate Door", 3000},
{8,2, 2947, "Heavy Blue Door", 5750},
{8,2, 2955, "White Basic Room Door", 4000},
{8,2, 2946, "Golden Door", 5750},
{8,2, 2930, "Small Cell Gate", 3000},
{8,2, 977, "Old Office Door", 4000},
{8,2, 1491, "Swinging Dark Wooden Door", 5000},
{8,2, 1492, "White Wooden Door", 4500},
{8,2, 1493, "Red Shop Door", 3500},
{8,2, 1494, "Blue Wooden Door", 4500},
{8,2, 1495, "Blue Wired Door", 3500},
{8,2, 1496, "Metal Love Shop Door", 4500},
{8,2, 1497, "Metal Door", 5000},
{8,2, 1498, "Dirty White Door", 2600},
{8,2, 1499, "Dirty Metal Door", 4700},
{8,2, 1500, "Metal Screen Door", 4700},
{8,2, 1501, "Wooden Screen Door", 4700},
{8,2, 1502, "Swinging Wooden Door", 5000},
{8,2, 1504, "Red Door", 4000},
{8,2, 1505, "Blue Door", 4000},
{8,2, 1506, "White Door", 4000},
{8,2, 1507, "Yellow Door", 4000},
{8,2, 1522, "Shop Door With Stickers", 3500},
{8,2, 1532, "Shop Door With Stickers 2", 3500},
{8,2, 1533, "Metal Shop Door", 4000},
{8,2, 1523, "Swinging Metal Door With Window", 4500},
{8,2, 1535, "Basic White Door", 4000},
{8,2, 1569, "Modern Black Door", 4000},
{8,2, 1559, "Modern Black Door Golden Frame", 5000},
//Mess
{8,3, 2670, "Random Mess", 5},
{8,3, 2671, "Random Mess", 5},
{8,3, 2673, "Random Mess", 5},
{8,3, 2674, "Random Mess", 5},
{8,3, 2867, "Random Mess", 5},
{8,3, 2672, "Burger Shot Mess", 8},
{8,3, 2675, "Burger Shot Mess", 8},
{8,3, 2677, "Burger Shot Mess", 8},
{8,3, 2840, "Burger Shot Mess", 8},
{8,3, 2676, "Newspapers & Burger Shot Mess", 13},
{8,3, 2850, "Dishes", 20},
{8,3, 2843, "Messy Clothes", 50},
{8,3, 2844, "Messy Clothes", 50},
{8,3, 2845, "Messy Clothes", 50},
{8,3, 2846, "Messy Clothes", 50},
{8,3, 2851, "Dishes", 20},
{8,3, 2821, "Cereal Box & Cans", 10},
{8,3, 2822, "Blue Dishes", 30},
{8,3, 2829, "Colorful Dishes", 30},
{8,3, 2830, "Dishes", 30},
{8,3, 2831, "Dishes & Colorful Cups", 30},
{8,3, 2832, "Colorful Dishes", 40},
{8,3, 2837, "Cluck N Bell Mess", 8},
{8,3, 2838, "Pizza Stack Mess", 10},
{8,3, 2839, "Chinese Food Mess", 7},
{8,3, 2848, "Dishes With Pizza", 12},
{8,3, 2850, "Dishes With Pizzaz", 13},
{8,3, 2849, "Colorful Dishes", 30},
{8,3, 2851, "Dishes", 20},
{8,3, 2856, "Crushed Milk", 5},
{8,3, 2857, "Pizza Box Mess", 6},
{8,3, 2861, "Empty Cookie Boxes", 2},
{8,3, 2866, "Empty Cookie Boxes & Cans", 4},
//Miscellaneous
{8,4, 2680, "Padlock", 700},
{8,4, 1665, "Ashtray", 700},
{8,4, 14774, "Electric Fly Killer", 2000},
{8,4, 2961, "Fire Alarm Button", 900},
{8,4, 2962, "Fire Alarm Button (Sign)", 700},
{8,4, 2616, "Whiteboard", 3500},
{8,4, 2611, "Blue Pinboard", 700},
{8,4, 2612, "Blue Pinboard	", 700},
{8,4, 2615, "Articles", 100},
{8,4, 2896, "Casket", 10000},
{8,4, 2404, "R* Surfboard", 2000},
{8,4, 2405, "Red & Blue Surfboard", 2000},
{8,4, 2406, "Vice City Surfboard", 2000},
{8,4, 2410, "Wooden Surfboard", 2000},
//Pillars
{8,5, 3494, "Stone Pillar", 5300},
{8,5, 3498, "Tall Wooden Pillar", 5200},
{8,5, 3499, "Fat Tall Wooden Pillar", 5300},
{8,5, 3524, "Pillar Skull Head", 5240},
{8,5, 3533, "Red Dragon Pillar", 5150},
{8,5, 3529, "Brick Construction Pillar", 5500},
{8,5, 3503, "Metal Pole", 1850},
//Security
{8,6, 1622, "Security Camera", 3000},
{8,6, 1616, "Security Camera", 3000},
{8,6, 1886, "Security Camera", 3000},
//Office
{8,7, 1808, "Ja Water Dispenser", 150},
{8,7, 1998, "Office Desk & Equipment", 1300},
{8,7, 1999, "Office Light Wooden Desk & Computer", 1000},
{8,7, 2002, "Water Dispenser", 150},
{8,7, 2008, "Office White Top Desk & Equipment", 1200},
{8,7, 2009, "White Office Desk & Computer", 1250},
{8,7, 2161, "Office Shelf & Files", 80},
{8,7, 2162, "Wide Office Shelf & Files", 160},
{8,7, 2164, "Wide and Tall Office Shelf & Files", 300},
{8,7, 2165, "Oak Office Desk & Equipment", 4500},
{8,7, 2166, "Oak Office Desk & Files", 3800},
{8,7, 2169, "White Office Desk With Wood Top", 2200},
{8,7, 2171, "Wood Top Desk With Backboard", 2400},
{8,7, 2172, "Blue Office Desk & Equipment", 5600},
{8,7, 2173, "Oak Office Desk", 5000},
{8,7, 2174, "Wood Top Desk With Backboard & Equipment", 2800},
{8,7, 2175, "Wood Top Desk Corner", 1900},
{8,7, 2180, "Wide Wooden Desk", 2500},
{8,7, 2181, "Office Desk With Backboard & Computer", 2500},
{8,7, 2308, "Office Desk & Files", 2200},
{8,7, 2183, "Four Divided Wooden Desks", 8500},
{8,7, 2184, "Diagonal Wooden Desk", 2000},
{8,7, 2185, "Open Wooden Desk & Computer", 1000},
{8,7, 2186, "Office Printer", 4000},
{8,7, 2187, "Blue Cubicle Divider", 1000},
{8,7, 2190, "Computer", 760},
//Toys
{8,8, 2511, "Toy Red Plane", 10},
{8,8, 2471, "Three Train Toy Boxes", 20},
{8,8, 2472, "Four Toy Red Planes", 40},
{8,8, 2473, "Two Toy Red Planes", 20},
{8,8, 2474, "Four Train Toys", 30},
{8,8, 2477, "Three Hotwheels Stacked Boxes", 25},
{8,8, 2480, "Four Hotwheels Stacked Boxes", 30},
{8,8, 2481, "Hotwheels Box", 5},
{8,8, 2483, "Train Model Box", 15},
{8,8, 2484, "R* Boat Model", 25},
{8,8, 2485, "Wooden Car Toy", 45},
{8,8, 2487, "Tropical Diamond Kite", 30},
{8,8, 2488, "Manhunt Toy Box Sets", 20},
{8,8, 2490, "Vice City Toy Box Sets", 20},
{8,8, 2497, "Pink Winged Box Kite", 35},
{8,8, 2498, "Blue Winged Box Kite", 35},
{8,8, 2499, "R* Diamond Kite", 30},
{8,8, 2512, "Paper Wooden Plane", 30},
//Special
//Animals
{9,0, 1599, "Bright Yellow Flouder", 300},
{9,0, 1600, "Exotic Blue Flounder", 350},
{9,0, 1604, "School of Blue Flounders", 600},
{9,0, 1602, "Bright Jellyfish", 500},
{9,0, 1603, "Jellyfish", 500},
{9,0, 1604, "Blue Flounder", 300},
{9,0, 1605, "School of Yellow Flounders", 600},
{9,0, 1606, "School of Exotic Blue Flounders", 650},
{9,0, 1607, "Dolphin", 5000},
{9,0, 1608, "Shark", 5000},
{9,0, 1609, "Turtle", 5000},
{9,0, 19315, "Deer", 4500},
{9,0, 19079, "Parrot", 1500},
//Gambling
{9,1, 1838, "Slot Machine", 10000},
{9,1, 1831, "Slot Machine", 10000},
{9,1, 1832, "Slot Machine", 10000},
{9,1, 1833, "Slot Machine", 10000},
{9,1, 1834, "Slot Machine", 10000},
{9,1, 1835, "Slot Machine", 10000},
{9,1, 1838, "Slot Machine", 10000},
{9,1, 1978, "Roulette Table", 10000},
{9,1, 1929, "Roulette Wheel", 10000},
{9,1, 2188, "Blackjack Table", 10000},
//Gangtags
{9,2, 18659, "Grove St. 4 Life", 3000},
{9,2, 1528, "Seville B.L.V.D Families", 3000},
{9,2, 1531, "Varrio Los Aztecas", 3000},
{9,2, 1525, "Kilo", 3000},
{9,2, 1526, "San Fiero Rifa", 3000},
{9,2, 18664, "Temple Drive Ballas", 3000},
{9,2, 1530, "Los Santos Vagos", 3000},
{9,2, 18666, "Front Yard Balas", 3000},
{9,2, 1527, "Rollin Heights Ballas", 3000},
//faction}
{9,3, 19128, "Dance Floor", 15550},
{9,3, 19129, "Large Dance Floor", 25000},
{9,3, 19159, "Disco Ball", 6300},
{9,3, 18656, "Club Lights ", 20000},
{9,3, 19122, "Blue Bollard Light", 3000},
{9,3, 19123, "Green Bollard Light", 3000},
{9,3, 19126, "Light Blue Bollard Light", 3000},
{9,3, 19127, "Purple Bollard Light", 3000},
{9,3, 19124, "Red Bollard Light", 3000},
{9,3, 19121, "White Bollard Light", 3000},
{9,3, 19125, "Yellow Bollard Light", 3000},
//Effect
{9,4, 18864, "Snow Machine", 13500},
{9,4, 18715, "Smoke Machine", 13500},
//Walls
{9,5, 19353, "Ice Cream Parlor Wall", 3000},
{9,5, 19354, "Leather Diamond Wall", 3000},
{9,5, 19355, "Cement Think Brick Wall", 3500},
{9,5, 19356, "Wooden Wall", 3200},
{9,5, 19357, "Cement Wall", 3500},
{9,5, 19358, "Grey & Black Cotton Wall", 3200},
{9,5, 19359, "Plain Tan Wall", 3300},
{9,5, 19360, "Tough Light Wood Wall", 3300},
{9,5, 19361, "Tan & Red Wall", 3300},
{9,5, 19362, "Road Textured Wall", 3200},
{9,5, 19363, "Plain Dark Pastel Pink Wall", 3400},
{9,5, 19364, "Cement Brick Wall", 3500},
{9,5, 19365, "Plain Light Blue Wall", 3300},
{9,5, 19366, "Thick Wood Wall", 3400},
{9,5, 19367, "Light Blue Spring Themed Wall", 3400},
{9,5, 19368, "Light Pink Spring Themed Wall", 3400},
{9,5, 19369, "Light Yellow Spring Themed Wall", 3300},
{9,5, 19370, "Bright Wooden Wall", 3400},
{9,5, 19371, "Plain Cement Wall", 3300},
{9,5, 19372, "Sand Wall", 3400},
{9,5, 19373, "Grass Wall", 3300},
{9,5, 19375, "Wavey Wooden Wall", 3400},
{9,5, 19376, "Red Wooden Wall", 3300},
{9,5, 19377, "Carpet Textured Wall", 3400},
{9,5, 19378, "Dark Wooden Wall", 3400},
{9,5, 19379, "Basic Light Wood Wall", 3400},
{9,5, 19380, "Dark Sand Wall", 3400},
{9,5, 19381, "Dark Grass Wall", 3300},
//Wallsdoorway
{9,6, 19383, "Ice Cream Parlor Wall (Doorway)", 3000},
{9,6, 19384, "Leather Diamond Wall (Doorway)", 3000},
{9,6, 19391, "Cement Think Brick Wall (Doorway)", 3000},
{9,6, 19386, "Wooden Wall (Doorway)", 3000},
{9,6, 19387, "Cement Wall (Doorway)	", 3000},
{9,6, 19388, "Grey & Black Cotton Wall (Doorway)", 3000},
{9,6, 19389, "Plain Tan Wall (Doorway)", 3000},
{9,6, 19390, "Tan & Red Wall (Doorway)", 3000},
{9,6, 19385, "Road Textured Wall (Doorway)", 3000},
{9,6, 19392, "Plain Dark Pastel Pink Wall (Doorway)", 3000},
{9,6, 19393, "Cement Brick Wall (Doorway)", 3000},
{9,6, 19394, "Plain Light Blue Wall (Doorway)", 3000},
{9,6, 19395, "Light Blue Spring Themed Wall (Doorway)", 3000},
{9,6, 19396, "Light Pink Spring Themed Wall (Doorway)", 3000},
{9,6, 19397, "Light Yellow Spring Themed Wall (Doorway)", 3000},
{9,6, 19398, "Plain Cement Wall (Doorway)", 3000},
//Wallsopenwindow
{9,7, 19399, "Ice Cream Parlor Wall (Open Window)", 3000},
{9,7, 19400, "Leather Diamond Wall (Open Window)", 3000},
{9,7, 19401, "Cement Think Brick Wall (Open Window)", 3300},
{9,7, 19402, "Wooden Wall (Open Window)", 3000},
{9,7, 19403, "Cement Wall (Open Window)", 3200},
{9,7, 19404, "Grey & Black Cotton Wall (Open Window)", 3200},
{9,7, 19405, "Plain Tan Wall (Open Window)", 3300},
{9,7, 19407, "Tan & Red Wall (Open Window)", 3200},
{9,7, 19408, "Road Textured Wall (Open Window)", 3300},
{9,7, 19409, "Plain Dark Pastel Pink Wall (Open Window)", 3300},
{9,7, 19410, "Cement Brick Wall (Open Window)", 3200},
{9,7, 19411, "Plain Light Blue Wall (Open Window)", 3300},
{9,7, 19412, "Thick Wooden Wall (Open Window)", 3300},
{9,7, 19413, "Light Blue Spring Themed Wall (Open Window)", 3300},
{9,7, 19414, "Light Pink Spring Themed Wall (Open Window)", 3200},
{9,7, 19415, "Light Yellow Spring Themed Wall (Open Window)", 3300},
{9,7, 19416, "Basic Light Wood Wall (Open Window)", 3300},
{9,7, 19417, "Plain Cement Wall (Open Window)", 3200},
//Wallsthin
{9,8, 19426, "Ice Cream Parlor Wall (Thin)", 2000},
{9,8, 19427, "Leather Diamond Wall (Thin)", 2000},
{9,8, 19428, "Cement Think Brick Wall (Thin)", 2000},
{9,8, 19429, "Wooden Wall (Thin)", 2000},
{9,8, 19430, "Cement Wall (Thin)", 2000},
{9,8, 19431, "Grey & Black Cotton Wall (Thin)", 2000},
{9,8, 19432, "Plain Tan Wall (Thin)", 2000},
{9,8, 19433, "Tan & Red Wall (Thin)", 2200},
{9,8, 19435, "Road Textured Wall (Thin)", 2200},
{9,8, 19436, "Plain Dark Pastel Pink Wall (Thin)", 2200},
{9,8, 19437, "Cement Brick Wall (Thin)", 2200},
{9,8, 19438, "Plain Light Blue Wall (Thin)", 2200},
{9,8, 19439, "Thick Wooden Wall (Thin)", 2300},
{9,8, 19440, "Light Blue Spring Themed Wall (Thin)", 2300},
{9,8, 19441, "Light Pink Spring Themed Wall (Thin)", 2300},
{9,8, 19442, "Light Yellow Spring Themed Wall (Thin)", 2400},
{9,8, 19443, "Basic Light Wood Wall (Thin)", 2400},
{9,8, 19444, "Plain Cement Wall (Thin)", 2500},
//Wallswide
{9,9, 19445, "Ice Cream Parlor Wall (Wide)", 6200},
{9,9, 19446, "Leather Diamond Wall (Wide)", 6200},
{9,9, 19447, "Cement Think Brick Wall (Wide)", 6500},
{9,9, 19448, "Wooden Wall (Wide)", 6200},
{9,9, 19449, "Cement Wall (Wide)", 6500},
{9,9, 19450, "Grey & Black Cotton Wall (Wide)", 6300},
{9,9, 19451, "Plain Tan Wall (Wide)", 6300},
{9,9, 19452, "Red Wooden Wall (Wide)", 6300},
{9,9, 19453, "Tan & Red Wall (Wide) ", 6300},
{9,9, 19454, "Carpet Textured Wall (Wide)	", 6300},
{9,9, 19455, "Plain Dark Pastel Pink Wall (Wide)", 6300},
{9,9, 19456, "Cement Brick Wall (Wide)", 6500},
{9,9, 19457, "Plain Light Blue Wall (Wide)", 6300},
{9,9, 19458, "Thick Wooden Wall (Wide)", 6300},
{9,9, 19459, "Light Blue Spring Themed Wall (Wide)", 6300},
{9,9, 19460, "Light Pink Spring Themed Wall (Wide)", 6300},
{9,9, 19461, "Light Yellow Spring Themed Wall (Wide)", 6300},
{9,9, 19462, "Basic Light Wood Wall (Wide)", 6300},
{9,9, 19463, "Plain Cement Wall (Wide)", 6300},
//Glass
{9,10, 19466, "Regular Glass", 3000},
{9,10, 1651, "Glass", 3000},
{9,10, 1649, "Long Glass", 6000},
{9,10, 1651, "Tall Glass", 4000},
{9,10, 19325, "Unbreakable Glass", 7000}
};

new const ColorMenuInfo[][] = {
{1, "Basic"},
{3, "Red"},
{2, "Blue"},
{16, "Green"},
{6, "Yellow"},
{158, "Orange"},
{30, "Brown"},
{179, "Purple"},
{190, "Pink"},
{110, "Tan"}
};

new const ColorMenuSelect[][] = {
{0, 0},
{1, 0},
{8, 0},
{11, 0},
{13, 0},
{14, 0},
{15, 0},
{19, 0},
{23, 0},
{24, 0},
{25, 0},
{26, 0},
{27, 0},
{29, 0},
{33, 0},
{34, 0},
{35, 0},
{38, 0},
{39, 0},
{49, 0},
{50, 0},
{52, 0},
{56, 0},
{60, 0},
{63, 0},
{64, 0},
{67, 0},
{71, 0},
{90, 0},
{96, 0},
{109, 0},
{111, 0},
{118, 0},
{122, 0},
{138, 0},
{140, 0},
{148, 0},
{157, 0},
{192, 0},
{193, 0},
{196, 0},
{213, 0},
{250, 0},
{251, 0},
{252, 0},
{253, 0},
{255, 0},
{3, 1},
{17, 1},
{42, 1},
{43, 1},
{45, 1},
{58, 1},
{70, 1},
{82, 1},
{117, 1},
{121, 1},
{124, 1},
{2, 2},
{7, 2},
{10, 2},
{12, 2},
{20, 2},
{28, 2},
{32, 2},
{53, 2},
{54, 2},
{59, 2},
{79, 2},
{87, 2},
{93, 2},
{94, 2},
{95, 2},
{100, 2},
{101, 2},
{103, 2},
{106, 2},
{108, 2},
{109, 2},
{112, 2},
{116, 2},
{125, 2},
{130, 2},
{135, 2},
{139, 2},
{152, 2},
{166, 2},
{198, 2},
{201, 2},
{205, 2},
{208, 2},
{209, 2},
{210, 2},
{223, 2},
{246, 2},

{16, 3},
{28, 3},
{44, 3},
{51, 3},
{83, 3},
{86, 3},
{114, 3},
{137, 3},
{145, 3},
{151, 3},
{153, 3},
{154, 3},
{160, 3},
{186, 3},
{187, 3},
{188, 3},
{189, 3},
{191, 3},
{202, 3},
{215, 3},
{226, 3},
{227, 3},
{229, 3},
{234, 3},
{235, 3},
{241, 3},
{243, 3},
{245, 3},
{6, 4},
{65, 4},
{142, 4},
{194, 4},
{195, 4},
{197, 4},
{221, 4},
{228, 4},
{6, 5},
{158, 5},
{175, 5},
{181, 5},
{182, 5},
{183, 5},
{219, 5},
{222, 5},
{239, 5},
{30, 6},
{31, 6},
{40, 6},
{41, 6},
{58, 6},
{62, 6},
{66, 6},
{74, 6},
{78, 6},
{84, 6},
{88, 6},
{113, 6},
{119, 6},
{123, 6},
{129, 6},
{131, 6},
{149, 6},
{159, 6},
{168, 6},
{173, 6},
{174, 6},
{180, 6},
{212, 6},
{224, 6},
{230, 6},
{238, 6},
{244, 6},
{254, 6},
{147, 7},
{167, 7},
{171, 7},
{179, 7},
{190, 7},
{211, 7},
{232, 7},
{233, 7},
{237, 7},
{5, 8},
{126, 8},
{146, 8},
{176, 8},
{177, 8},
{178, 8},
{46, 9},
{47, 9},
{48, 9},
{55, 9},
{58, 9},
{61, 9},
{68, 9},
{69, 9},
{73, 9},
{76, 9},
{77, 9},
{81, 9},
{89, 9},
{99, 9},
{102, 9},
{104, 9},
{107, 9},
{110, 9},
{120, 9},
{138, 9},
{140, 9},
{141, 9},
{157, 9},
{192, 9},
{193, 9},
{196, 9},
{213, 9},
{250, 9},
{253, 9}

};


enum upgradeinfo
{
    u_price,
    Float:u_rate,
}

new const VehicleUpgradeLock[][upgradeinfo] = {
{1000, 75.0},
{1500, 50.0},
{2200, 37.5},
{5000, 30.0}
};

new const VehicleUpgradeImmob[][upgradeinfo] = {
{1200, 150.0},
{2400, 75.0},
{3000, 50.0},
{4000, 37.5}
};

new const VehicleUpgradeAlarm[][upgradeinfo] = {
{1000, 150.0},
{1800, 75.0},
{2500, 50.0},
{3600, 37.5}
};

enum c_data {
	c_price,
	Float:c_maxhp,
	Float:c_engine,
	Float:c_battery,
	Float:c_maxfuel,
	Float:c_fuelrate,
	c_scrap
};

new VehicleData[][c_data] =
{
	// Value, MAX HP, ENGINE LIFE, BATTERY LIFE, MAX FUEL, Fuel rate, Scap Value
	{32580, 1120.0, 100.0, 100.0, 22.0, 13.0, 0}, //landastalker
	{10000, 1000.0, 75.0, 100.0, 15.0, 9.0, 0}, //bravura
	{600000, 1000.0, 100.0, 100.0, 19.0, 3.0, 0}, //buffalo
	{22000, 2000.0, 100.0, 100.0, 100.0, 4.0, 0}, //linerunner
	{40000, 1000.0, 75.0, 100.0, 100.0, 15.0, 0}, //Perenail
	{15000, 1000.0, 100.0, 100.0, 17.0, 8.0, 0}, //Sentinel
	{27000, 2000.0, 100.0, 100.0, 100.0, 4.0, 0}, //dumper
	{3000000, 1800.0, 100.0, 100.0, 100.0, 11.0, 0}, // firetruck
	{25000, 2000.0, 100.0, 100.0, 100.0, 3.0, 0}, //caminhao de lixo
	{325000, 1000.0, 100.0, 100.0, 23.0, 11.0, 0}, //Sreech limosine
	{1000, 1000.0, 75.0, 100.0, 14.0, 10.0, 0}, //Manana
	{1500000, 1000.0, 100.0, 100.0, 24.0, 3.0, 0}, //Infernus
	{25000, 1000.0, 75.0, 100.0, 15.0, 6.0, 0}, //Voodo
	{17000, 1400.0, 100.0, 100.0, 32.0, 20.0, 0}, //pony
	{16000, 1700.0, 100.0, 100.0, 100.0, 17.0, 0}, //mule
	{1550000, 1000.0, 100.0, 100.0, 23.0, 4.0, 0}, // Cheetah
	{54000, 1300.0, 100.0, 100.0, 65.0, 20.0, 0}, //Ambulance
	{50000000, 1300.0, 100.0, 100.0, 100.0, 0.0, 0}, //Levetinan Heli
	{10000, 1000.0, 100.0, 100.0, 26.0, 23.0, 0}, //Moonbeam
	{15000, 1000.0, 75.0, 100.0, 16.0, 8.0, 0}, //esperanto
	{14000, 1000.0, 100.0, 100.0, 17.0, 14.0, 0}, //taxi
	{18000, 1000.0, 100.0, 100.0, 16.0, 8.0, 0}, //washington
	{15000, 1200.0, 100.0, 100.0, 25.0, 13.0, 0}, //bobcat
	{15000, 1400.0, 100.0, 100.0, 35.0, 26.0, 0}, // mr whoopee sorvete
	{35000, 1000.0, 100.0, 100.0, 9.0, 15.0, 0}, //BF Injection
	{1000000000, 1700.0, 100.0, 100.0, 100.0, 0.0, 0}, //hunter HELI
	{60000, 1000.0, 100.0, 100.0, 16.0, 8.0, 0}, //premier
	{50000000, 1650.0, 100.0, 100.0, 56.0, 15.0, 0},///enforcer
	{200000, 1800.0, 100.0, 100.0, 55.0, 10.0, 0}, //securicar
	{2000000, 1000.0, 100.0, 100.0, 23.0, 3.0, 0}, //Banshee
	{3000000, 1200.0, 100.0, 100.0, 80.0, 0.0, 0}, //Predator Barco
	{32000, 2000.0, 100.0, 100.0, 100.0, 3.0, 0}, //bus
	{50000000, 5000.0, 100.0, 100.0, 100.0, 3.0, 0}, //Rhino
	{6000000, 2200.0, 100.0, 100.0, 100.0, 7.0, 0}, //Barracks
	{50000, 1000.0, 100.0, 100.0, 10.0, 14.0, 0}, //Hotknife
	{8000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0}, //previon 
	{22000, 1000.0, 75.0, 100.0, 15.0, 9.0, 0}, //previon bus
	{14000, 2000.0, 100.0, 100.0, 100.0, 2.0, 0}, //cabbie
	{8000, 1000.0, 100.0, 100.0, 17.0, 13.0, 0}, //Stallion
	{35000, 1000.0, 100.0, 100.0, 17.0, 7.0, 0}, //rump
	{23000, 1000.0, 100.0, 100.0, 34.0, 12.0, 0}, //romero
	{22000, 1000.0, 100.0, 100.0, 100.0, 0.0, 0}, //packer
	{410000, 1000.0, 100.0, 100.0, 18.0, 10.0, 0},
	{22000, 2000.0, 100.0, 100.0, 100.0, 9.0, 0}, //packer
	{30000, 1300.0, 100.0, 100.0, 26.0, 6.0, 0}, //Remington
	{18000, 1000.00, 100.0, 100.0, 16.0, 8.0, 0},//Admiral
	{350000, 1000.00, 100.0, 100.0, 75.0, 0.0, 0},//Squalo
	{400000, 1000.00, 100.0, 100.0, 46.0, 0.0, 0},
	{420000, 1000.00, 50.0, 100.0, 2.0, 49.0, 0},
	{430000, 1200.0, 100.0, 100.0, 7.0, 12.0, 0},
	{440000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{450000, 1000.00, 100.0, 100.0, 23.0, 3.0, 0},
	{460000, 1000.00, 100.0, 100.0, 68.0, 0.0, 0},
	{320000, 1250.0, 100.0, 100.0, 100.0, 0.0, 0},//Reefer
	{300000, 1250.0, 100.0, 100.0, 100.0, 0.0, 0},//Tropic
	{28000, 2000.0, 100.0, 100.0, 100.0, 2.0, 0}, //Flatbed
	{32000, 1700.0, 100.0, 100.0, 100.0, 14.0, 0}, //Yankee
	{470000, 1000.00, 100.0, 100.0, 0.0, 0.0, 0},
	{20000, 1000.00, 100.0, 100.0, 17.0, 12.0, 0},//Solair
	{18000, 1400.0, 100.0, 100.0, 32.0, 24.0, 0}, // Berkley's rc van
	{480000, 1000.00, 100.0, 100.0, 100.0, 6.0, 0},
	{490000, 1000.00, 50.0, 100.0, 5.0, 45.0, 0},
	{1580, 1000.0, 50.0, 100.0, 2.0, 10.0, 0}, //Faggio
	{9000, 1000.0, 50.0, 100.0, 5.0, 40.0, 0}, //Freeway
	{500000, 1000.00, 100.0, 100.0, 2.0, 25.0, 0},
	{510000, 1000.00, 100.0, 100.0, 2.0, 25.0, 0},
	{39000, 1000.0, 75.0, 100.0, 14.0, 8.0, 0},//Glendale
	{20000, 1000.0, 75.0, 100.0, 15.0, 8.0, 0}, //Oceanic
	{39000, 710.0, 50.0, 100.0, 4.0, 4.0, 0}, //sanchez
	{520000, 1000.0, 100.0, 100.0, 45.0, 10.0, 0},
	{530000, 1650.0, 100.0, 100.0, 26.0, 10.0, 0},
	{55000, 1000.00, 50.0, 100.0, 4.0, 48.0, 0}, //Quad
	{9000000, 1250.0, 100.0, 100.0, 100.0, 15.0, 0},//Coastguard
	{200000, 1000.00, 50.0, 100.0, 13.0, 18.0, 0},//Dinghy
	{15000, 1000.00, 75.0, 100.0, 16.0, 8.0, 0},//Greenwood
	{28000, 1000.0, 100.0, 100.0, 17.0, 3.0, 0},//sabre
	{540000, 1000.00, 100.0, 100.0, 100.0, 6.0, 0},
	{350000, 1000.00, 100.0, 100.0, 17.0, 3.0, 0},//ZR-350
	{3500, 1200.0, 100.0, 100.0, 25.0, 25.0, 0}, //Walton
	{550000, 1000.00, 75.0, 100.0, 17.0, 14.0, 0},
	{800000, 1000.00, 100.0, 100.0, 18.0, 9.0, 0}, //Comet
	{500, 1000.00, 50.0, 100.0, 0.0, 0.0, 350}, //BMX
	{1900, 1400.0, 100.0, 100.0, 32.0, 12.0, 0}, //Burrito
	{560000, 1100.0, 100.0, 100.0, 43.0, 12.0, 0},
	{310000, 1050.0, 100.0, 100.0, 100.0, 6.0, 0},//Marquis
	{570000, 1090.0, 100.0, 100.0, 0.0, 0.0, 0},
	{580000, 1900.0, 100.0, 100.0, 21.0, 7.0, 0},
	{1300000, 1080.0, 100.0, 100.0, 48.0, 6.0, 0}, //Maverick
	{590000, 1000.0, 100.0, 100.0, 48.0, 6.0, 0},
	{38000, 1110.0, 100.0, 100.0, 23.0, 10.0, 0},//Rancher
	{600000, 1430.0, 100.0, 100.0, 28.0, 9.0, 0},
	{38000, 1000.0, 75.0, 100.0, 15.0, 8.0, 0},//Vigor
	{610000, 1000.0, 75.0, 100.0, 15.0, 8.0, 0},
	{620000, 1050.0, 100.0, 100.0, 70.0, 11.0, 0},
	{630000, 1000.0, 100.0, 100.0, 17.0, 3.0, 0},
	{640000, 1000.0, 100.0, 100.0, 23.0, 12.0, 0},
	{18500, 1000.0, 100.0, 100.0, 11.0, 4.0, 0},//blistac
	{7000000, 1000.0, 100.0, 100.0, 49.0, 6.0, 0},//Police Maverick
	{20000, 1400.0, 100.0, 100.0, 100.0, 6.0, 0}, //Bix Ville
	{23000, 1400.0, 100.0, 100.0, 100.0, 17.0, 0}, //Benson
	{40000, 1020.0, 100.0, 100.0, 19.0, 14.0, 0},//Mesa
	{650000, 1000.0, 100.0, 100.0, 0.0, 25.0, 0},
	{660000, 1000.0, 100.0, 100.0, 17.0, 3.0, 0},
	{670000, 1000.0, 100.0, 100.0, 17.0, 3.0, 0},
	{680000, 1050.0, 100.0, 100.0, 15.0, 7.0, 0},
	{690000, 1110.0, 100.0, 100.0, 15.0, 10.0, 0},
	{700000, 1000.0, 100.0, 100.0, 23.0, 3.0, 0},
	{28000, 1050.0, 100.0, 100.0, 20.0, 7.0, 0}, //Elegant
	{25000, 1200.0, 100.0, 100.0, 76.0, 17.0, 0},//Journey 
	{800, 1000.0, 50.0, 100.0, 0.0, 0.0, 500}, //bike
	{710000, 1000.0, 50.0, 100.0, 0.0, 0.0, 0},
	{150000, 1050.0, 100.0, 100.0, 100.0, 4.0, 0}, //Beagle
	{720000, 1050.0, 100.0, 100.0, 97.0, 6.0, 0},
	{730000, 1020.0, 100.0, 100.0, 73.0, 6.0, 0},
	{67000, 2000.0, 100.0, 100.0, 100.0, 4.0, 0}, //Tanker
	{60000, 2000.0, 100.0, 100.0, 100.0, 3.0, 0}, //Roadtrain
	{18000, 1000.0, 100.0, 100.0, 18.0, 9.0, 0},//nebula
	{21500, 1000.0, 75.0, 100.0, 15.0, 9.0, 0},//Majestic
	{8250, 1000.0, 75.0, 100.0, 16.0, 8.0, 0},//Buccaneer
	{740000, 1200.0, 100.0, 100.0, 100.0, 3.0, 0},
	{750000, 1300.0, 100.0, 100.0, 100.0, 4.0, 0},
	{90000, 1010.0, 75.0, 100.0, 5.0, 45.0, 0}, //FCR-900
	{760000, 1000.0, 75.0, 100.0, 5.0, 48.0, 0},
	{9000000, 1000.0, 50.0, 100.0, 7.0, 20.0, 0}, //HPV-1000
	{770000, 2000.0, 100.0, 100.0, 100.0, 3.0, 0},
	{24500, 1000.0, 100.0, 100.0, 26.0, 17.0, 0},//tow truck
	{13000, 1000.0, 100.0, 100.0, 15.0, 8.0, 0},//Fortune
	{14590, 1000.0, 75.0, 100.0, 15.0, 9.0, 0},//Cadrona
	{9000000, 1000.0, 100.0, 100.0, 29.0, 15.0, 0},//SWAT TRUCK
	{12500, 1000.0, 75.0, 100.0, 15.0, 8.0, 0},//Willard
	{780000, 1000.00, 100.0, 100.0, 0.0, 0.0, 0},
	{790000, 1000.00, 100.0, 100.0, 18.0, 23.0, 0},
	{150000, 1000.0, 100.0, 100.0, 25.0, 9.0, 0},//Combine
	{35000, 1000.00, 100.0, 100.0, 17.0, 8.0, 0}, //Feltzer
	{30000, 1300.0, 100.0, 100.0, 26.0, 6.0, 0}, //Remington
	{32000, 1000.0, 100.0, 100.0, 23.0, 6.0, 0}, //Slamvan
	{45000, 1000.00, 75.0, 100.0, 14.0, 7.0, 0}, //Blade
	{810000, 2000.0, 100.0, 100.0, 100.0, 12.0, 0},
	{820000, 2000.0, 100.0, 100.0, 100.0, 12.0, 0},
	{830000, 1000.00, 100.0, 100.0, 15.0, 12.0, 0},
	{21250, 1000.00, 75.0, 100.0, 16.0, 8.0, 0},//Vicent
	{5000000, 1000.0, 100.0, 100.0, 24.0, 4.0, 0},//Bullet
	{37900, 1000.00, 75.0, 100.0, 15.0, 8.0, 0},//Clover
	{15000, 1200.0, 100.0, 100.0, 25.0, 13.0, 0}, //Sadler
	{840000, 11000.00, 100.0, 100.0, 25.0, 11.0, 0},
	{8900, 1000.0, 100.0, 100.0, 14.0, 13.0, 0},//Huslter
	{26500, 1000.0, 75.0, 100.0, 15.0, 8.0, 0},//intruder
	{21590, 1000.0, 75.0, 100.0, 16.0, 8.0, 0}, //primo
	{850000, 1450.0, 100.0, 100.0, 100.0, 2.0, 0},
	{9980, 1000.0, 75.0, 100.0, 14.0, 8.0, 0},//Tampa
	{29990, 1000.0, 100.0, 100.0, 15.0, 8.0, 0},//Surinse
	{12000, 1000.0, 100.0, 100.0, 19.0, 8.0, 0},//Merit
	{860000, 1270.0, 100.0, 100.0, 12.0, 20.0, 0},
	{870000, 1500.0, 100.0, 100.0, 100.0, 2.0, 0},
	{10000, 1280.0, 100.0, 100.0, 26.0, 9.0, 0}, //Yosemite
	{300000, 1000.0, 75.0, 100.0, 15.0, 9.0, 0}, //Windsor
	{890000, 1300.0, 100.0, 100.0, 26.0, 6.0, 0},
	{900000, 1300.0, 100.0, 100.0, 26.0, 6.0, 0},
	{800000, 1200.0, 100.0, 100.0, 18.0, 3.0, 0},//Uranus
	{95000, 1200.0, 100.0, 100.0, 17.0, 3.0, 0},//Jester
	{350000, 1000.00, 100.0, 100.0, 16.0, 7.0, 0}, //sultan
	{100000, 1000.00, 100.0, 100.0, 18.0, 12.0, 0},//Stratum
	{120000, 1000.00, 100.0, 100.0, 18.0, 9.0, 0},//elegy
	{910000, 1350.0, 100.0, 100.0, 100.0, 4.0, 0},
	{920000, 1000.00, 100.0, 100.0, 2.0, 0.0, 0},
	{50000, 1000.0, 100.0, 100.0, 13.0, 3.0, 0},//Flash
	{25000, 1000.00, 75.0, 100.0, 15.0, 6.0, 0}, //Thoma
	{25000, 1000.0, 75.0, 100.0, 15.0, 7.0, 0},//Savanna
	{930000, 1000.00, 100.0, 100.0, 8.0, 16.0, 0},
	{25000, 1000.0, 100.0, 100.0, 0.0, 12.0, 0},//Regina
	{940000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{950000, 1000.00, 100.0, 100.0, 4.0, 22.0, 0},
	{960000, 1000.00, 100.0, 100.0, 8.0, 18.0, 0},
	{18000, 1300.0, 100.0, 100.0, 29.0, 4.0, 0},//camper
	{970000, 1000.00, 100.0, 100.0, 8.0, 18.0, 0},
	{35000, 1000.00, 75.0, 100.0, 16.0, 6.0, 0},//broaway
	{25000, 1000.00, 75.0, 100.0, 15.0, 6.0, 0},//tornado
	{980000, 1500.0, 100.0, 100.0, 100.0, 1.0, 0},
	{58000, 1800.0, 100.0, 100.0, 100.0, 12.0, 0}, //DFT-30
	{75000, 1150.0, 100.0, 100.0, 25.0, 10.0, 0},//huntley
	{100000, 1000.00, 100.0, 100.0, 22.0, 7.0, 0},//stafford
	{9000000, 1200.0, 50.0, 100.0, 4.0, 45.0, 0},//fbiranch
	{16000, 1300.0, 100.0, 100.0, 29.0, 24.0, 0}, //News Van
	{990000, 1000.00, 100.0, 100.0, 8.0, 18.0, 0},
	{2100000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{27500, 1000.0, 100.0, 100.0, 16.0, 8.0, 0},//emperor
	{12000, 1000.00, 50.0, 100.0, 7.0, 40.0, 0}, //Wayfarer
	{120000, 1000.00, 100.0, 100.0, 17.0, 3.0, 0},//Euros
	{300000, 1200.0, 100.0, 100.0, 29.0, 12.0, 0},//Hotgon
	{12000, 1000.00, 100.0, 100.0, 14.0, 3.0, 0},//Club
	{2200000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{2300000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{2400000, 1500.0, 100.0, 100.0, 100.0, 1.0, 0},
	{950000, 1000.00, 100.0, 100.0, 100.0, 6.0, 0}, // Dodo
	{2500000, 1000.00, 100.0, 100.0, 2.0, 50.0, 0},
	{2600000, 1250.0, 100.0, 100.0, 100.0, 11.0, 0},
	{9000000, 1110.0, 100.0, 100.0, 17.0, 13.0, 0}, //LSPD
	{9000000, 1110.0, 100.0, 100.0, 17.0, 13.0, 0},//SFPD
	{9000000, 1110.0, 100.0, 100.0, 17.0, 13.0, 0},//LVPD
	{9000000, 1220.0, 100.0, 100.0, 25.0, 21.0, 0},//RANCHER POLICE
	{12000, 1000.00, 100.0, 100.0, 22.0, 7.0, 0}, //Picador
	{9000000, 3500.0, 100.0, 100.0, 100.0, 13.0, 0},//SWAT
	{120000, 1000.00, 100.0, 100.0, 20.0, 3.0, 0},//Alpha
	{350000, 1000.00, 100.0, 100.0, 19.0, 3.0, 0},//Phonix
	{2700000, 1000.0, 75.0, 100.0, 14.0, 8.0, 0},
	{2800000, 1200.0, 100.0, 100.0, 25.0, 26.0, 0},
	{2900000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{3000000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{3100000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{3200000, 1650.0, 100.0, 100.0, 100.0, 12.0, 0},
	{3300000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0},
	{3400000, 1000.0, 100.0, 100.0, 0.0, 0.0, 0}

};


enum e_cldata {
	e_model,
	e_price,
	e_bone,
	e_name[32],
	Float:e_x,
	Float:e_y,
	Float:e_z,
	Float:e_rx,
	Float:e_ry,
	Float:e_rz,
	Float:e_sx,
	Float:e_sy,
	Float:e_sz
};

new const cl_SportsData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{18645, 200, 2, "(Red&White)Motorcycle Helmet", 0.059999, 0.023999, 0.005, 93.6, 75.3, 0.0, 1.0, 1.0, 1.0},
	{18976, 200, 2, "(Blue&White)DirtBike Helmet", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{18977, 200, 2, "(Red&Black)Motorcycle Helmet", 0.052999, 0.016999, 0.006999, 0.0, 91.1, 75.7, 1.0, 1.0, 1.0},
	{18978, 200, 2, "(Blue&White)Motorcycle Helmet", 0.052999, 0.032, -0.007, 74.9, 86.5, -4.60001, 1.0, 1.0, 1.0},
	{18979, 200, 2, "(Purple)Motorcycle Helmet", 0.051999, 0.028, 0.0, 93.3, 74.8, -9.6, 1.0, 1.0, 1.0},
	{19036, 157, 2, "White Hockey Mask", 0.088996, 0.043997, -0.002998, 101.3, 92.2001, -16.5, 1.0, 1.0, 1.0},
	{19037, 157, 2, "Red Hockey Mask", 0.088996, 0.043997, -0.002998, 101.3, 92.2001, -16.5, 1.0, 1.0, 1.0},
	{19038, 157, 2, "Green Hockey Mask", 0.088996, 0.043997, -0.002998, 101.3, 92.2001, -16.5, 1.0, 1.0, 1.0},
	{3026, 450, 1, "Backpack", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{11745, 660, 6, "Sports Bag", 0.209999, -0.118999, 0.0, 10.5, -91.4, -92.5, 1.0, 1.0, 1.0}
};

new const cl_ZipData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{19066, 400, 2, "Santa Hat", 0.1229, 0.0350, 0.000, 90.7, 119.2999, -2.4, 1.0, 1.0, 1.0},
	{18970, 200, 2, "Tiger Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18971, 200, 2, "Disco Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18972, 200, 2, "Lava Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18973, 200, 2, "Camo Pimp Hat", 0.1089, 0.0360, 0.0000, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{18921, 210, 2, "Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18922, 210, 2, "Red Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18923, 210, 2, "Blue Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18924, 210, 2, "Camo Beret", 0.1430, 0.0210, -0.0029, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19067, 220, 2, "Red Hoody Hat", 0.1239, 0.0290, -0.0009, 85.5999, 118.7000, 1.0000, 1.0, 1.0, 1.0},
	{19068, 220, 2, "Zebra Hoody Hat", 0.1239, 0.0290, -0.0009, 85.5999, 118.7000, 1.0000, 1.0, 1.0, 1.0},
	{19069, 220, 2, "Black Hoody Hat", 0.1239, 0.0290, -0.0009, 85.5999, 118.7000, 1.0000, 1.0, 1.0, 1.0},
	{18926, 200, 2, "Camo Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18927, 200, 2, "Blue Flame Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18928, 200, 2, "Hippie Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18929, 200, 2, "Illusion Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18930, 200, 2, "Fire Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18931, 200, 2, "Dark Flame Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18932, 200, 2, "Lava Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18933, 200, 2, "Poka Dot Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18934, 200, 2, "Red Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18935, 200, 2, "Yellow Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18941, 200, 2, "Black Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18942, 200, 2, "Dark Blue Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18943, 200, 2, "Green Hat", 0.1460, 0.0250, -0.0070, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18961, 200, 2, "Trucker Hat", 0.1370, 0.0320, 0.0030, 103.0000, 94.0000, -14.9000, 1.0, 1.0, 1.0},
	{18960, 200, 2, "Cap Rim Up", 0.1370, 0.0320, 0.0030, 103.0000, 94.0000, -14.9000, 1.0, 1.0, 1.0},
	{18936, 250, 2, "Grey Helmet", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18937, 250, 2, "Red Helmet", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18938, 250, 2, "Purple Helmet", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19101, 240, 2, "Army Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19102, 240, 2, "Navy Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19103, 240, 2, "Desert Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19104, 240, 2, "Day Camo Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19105, 240, 2, "Night Camo Helmet(Straps)", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19106, 220, 2, "Army Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19107, 220, 2, "Navy Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19108, 220, 2, "Desert Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19109, 220, 2, "Day Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19110, 220, 2, "Night Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19111, 220, 2, "Sand Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19112, 220, 2, "Pink Camo Helmet", 0.1470, 0.0260, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18911, 150, 2, "Skull Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18912, 150, 2, "Black Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18913, 150, 2, "Green Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18914, 150, 2, "Camo Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18915, 150, 2, "Funky Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18916, 150, 2, "Triangle Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18917, 150, 2, "Dark Blue Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18918, 150, 2, "Black & White Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18919, 150, 2, "Dots Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {18920, 150, 2, "Triangle & Dots Bandana", 0.0785, 0.0348, -0.0007, 268.9704, 1.5333, 269.2237, 1.0, 1.0, 1.0},
    {19469, 150, 1, "Scarf", 0.3000, 0.0550, -0.0369, -5.8999, 0.0000, 26.2000, 1.0000, 1.5519, 1.3889},
	{18944, 210, 2, "Lava Hat Boater", 0.1330, 0.0180, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18945, 210, 2, "Grey Hat Boater", 0.1330, 0.0180, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18946, 210, 2, "Casual Hat Boater", 0.1330, 0.0180, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18947, 230, 2, "Black Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18948, 230, 2, "Blue Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18949, 230, 2, "Green Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18950, 230, 2, "Red Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {18951, 230, 2, "Yellow Hat Bowler", 0.1390, 0.0180, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18953, 200, 2, "Black Cap Knit", 0.1110, 0.0340, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18954, 200, 2, "Grey Cap Knit", 0.1110, 0.0340, -0.0010, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{18955, 205, 2, "Lava Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18956, 205, 2, "Dark Flame Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18957, 205, 2, "Blue Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18958, 205, 2, "Cheetah Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18959, 205, 2, "Camo Cap Eye", 0.1030, 0.0440, 0.0009, -95.6000, 92.2001, -161.9002, 1.0, 1.0, 1.0},
	{18964, 180, 2, "Black Skully Cap", 0.1210, 0.0310, 0.0000, 95.3000, 107.1999, 0.0000, 1.0, 1.0, 1.0},
	{18965, 180, 2, "Skully Cap", 0.1210, 0.0310, 0.0000, 95.3000, 107.1999, 0.0000, 1.0, 1.0, 1.0},
	{18966, 180, 2, "Funky Skully Cap", 0.1210, 0.0310, 0.0000, 95.3000, 107.1999, 0.0000, 1.0, 1.0, 1.0},
	{18967, 180, 2, "Black Chav Hat", 0.1030, 0.0260, 0.0000, 95.7000, 87.3999, -0.3999, 1.0, 1.0, 1.0},
	{18968, 180, 2, "Chav Hat", 0.1030, 0.0260, 0.0000, 95.7000, 87.3999, -0.3999, 1.0, 1.0, 1.0},
	{18969, 180, 2, "Lava Chav Hat", 0.1030, 0.0260, 0.0000, 95.7000, 87.3999, -0.3999, 1.0, 1.0, 1.0},
	{19006, 50, 2, "Red Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19007, 50, 2, "Orange Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19008, 50, 2, "Green Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19009, 50, 2, "Blue Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19010, 50, 2, "Pink Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19011, 50, 2, "Black & White Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19012, 50, 2, "Black Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19013, 50, 2, "Dot Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19014, 50, 2, "Square Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19015, 50, 2, "Lucent Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19016, 50, 2, "X-Ray Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19017, 50, 2, "Plain Yellow Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19018, 50, 2, "Plain Orange Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19019, 50, 2, "Plain Red Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19020, 50, 2, "Plain Blue Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19021, 50, 2, "Plain Green Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19022, 50, 2, "Lucent Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19023, 50, 2, "Blue Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19024, 50, 2, "Purple Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19025, 50, 2, "Pink Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19026, 50, 2, "Red Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19027, 50, 2, "Orange Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19028, 50, 2, "Yellow Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19029, 50, 2, "Green Aviators", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19030, 50, 2, "Thick Lucent", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19031, 50, 2, "Thick Yellow", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19032, 50, 2, "Thick Red", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19033, 50, 2, "Plain Black Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
    {19024, 50, 2, "Squares Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
    {19025, 50, 2, "Dark Blue Glasses", 0.0879, 0.0460, 0.0000, 91.0999, 85.3999, 0.0000, 1.0, 1.0, 1.0},
	{19349, 50, 2, "Monocle", 0.0769, 0.1050, 0.0340, 120.9999, 2.6999, -96.3998, 1.0, 1.0, 1.0},
	{18891, 150, 2, "Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18892, 150, 2, "Red Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18893, 150, 2, "White & Red  Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18894, 150, 2, "Bob Marley Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18895, 150, 2, "Skulls Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18896, 150, 2, "Black & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18897, 150, 2, "Blue & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18898, 150, 2, "Green & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18899, 150, 2, "Purple & White Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18900, 150, 2, "Psychedelic Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18901, 150, 2, "Fall Camo Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18902, 150, 2, "Yellow Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18903, 150, 2, "Light Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18904, 150, 2, "Dark Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
    {18905, 150, 2, "Hay Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
    {18906, 150, 2, "Red & Yellow Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18907, 150, 2, "Psychedelic Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18908, 150, 2, "Waves Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18909, 150, 2, "Sky Blue Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18910, 150, 2, "Lava Bandana", 0.1149, 0.0160, -0.0029, -88.2001, 8.3999, -95.0999, 1.0, 1.0, 1.0},
	{18962, 200, 2, "Black Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19095, 200, 2, "Light Brown Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19096, 200, 2, "Dark Blue Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{19097, 200, 2, "Red Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {19098, 200, 2, "Brown Cowboy Hat", 0.1630, 0.0270, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
    {19352, 220, 2, "Top Hat", 0.1039, 0.0210, 0.0060, 93.7000, 74.3000, 0.0000, 1.0, 1.0, 1.0}
};

new const cl_GovData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{-2107, 1, 2, "Casquete", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{-2101, 1, 1, "Bodycam PMESP", 0.126001, 0.062, 0.004001, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2102, 1, 1, "Colete PMESP", 0.126001, 0.062, 0.004001, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2103, 1, 1, "Bandoleira", 0.126001, 0.062, 0.004001, 0.0000, 93.5999, 87.7999, 1.0, 1.0, 1.0},
	{-2104, 1, 2, "Capacete GRPAe", 0.0980, 0.0369, 0.0000, 0.0000, 0.0000, 0.0000, 1.0, 1.0, 1.0},
	{-2200, 1, 1, "Colete PCESP", 0.126001, 0.062, 0.004001, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2706, 1, 1, "Radio Motorola", 0.1229, 0.0350, 0.000, 90.7, 119.2999, -2.4, 1.0, 1.0, 1.0},
	{-2108, 1, 1, "Escudo CDC", 0.126001, 0.062, 0.004001, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2105, 1, 2, "Capacete CDC", 0.126001, 0.062, 0.004001, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0}
};

new const cl_NovosData[][e_cldata] = { // 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0
	{-2600, 200, 2, "Capacete 1", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2601, 200, 2, "Capacete 2", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2602, 200, 2, "Capacete 3", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2603, 200, 2, "Capacete 4", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2604, 200, 2, "Capacete 5", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2605, 200, 2, "Capacete 6", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2606, 200, 2, "Capacete 7", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2607, 200, 2, "Capacete 8", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2608, 200, 2, "Capacete 9", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2609, 200, 2, "Capacete 10", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2610, 100, 2, "Bone 1", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2611, 100, 2, "Bone 2", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2612, 100, 2, "Bone 3", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2613, 100, 2, "Bone adidas preto", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2614, 100, 2, "Bone Flamengo", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2615, 100, 2, "Bone Flamengo preto", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2616, 100, 2, "Bone oakley azul", 0.084999, 0.043999, -0.002, 82.1, 88.2999, 8.5, 1.0, 1.0, 1.0},
	{-2700, 120, 1, "Bolsa ifood", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2701, 120, 1, "Bolsa Uber Eats", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2702, 150, 1, "Bolsa simples", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2703, 150, 1, "Bolsa nike lateral", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2704, 120, 1, "Mochila 1", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2705, 150, 1, "Mochila 2", -0.147999, -0.061999, 0.006999, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0},
	{-2706, 300, 1, "Rádio Motorola", 0.059999, 0.023999, 0.005, 93.6, 75.3, 0.0, 1.0, 1.0, 1.0}
};

new Iterator:sv_houses<MAX_HOUSES>;
new Iterator:sv_vehicles<MAX_VEHICLES>;
new Iterator:sv_business<MAX_BIZZ>;
new Iterator:sv_playercar<MAX_PLAYER_VEHICLES>;
new Iterator:sv_servercar<MAX_DYNAMIC_VEHICLES>;
new Iterator:sv_industry<MAX_ITEM_STORAGE>;
new Iterator:sv_warehouse<MAX_WAREHOUSE>;
new Iterator:sv_movedoors<MAX_MOVEDOORS>;

// enum .?

enum MOVEABLE_DOORS
{
	doorID,
	doorModel,
	doorObject,
	doorName[64],
	doorInterior,
	doorVirtualWorld,
	doorFaction,
	doorOpened,
	Float:doorPosX,
	Float:doorPosY,
	Float:doorPosZ,
	Float:doorPosRX,
	Float:doorPosRY,
	Float:doorPosRZ,
	Float:doorOpenSpeed,
	Float:doorMoveX,
	Float:doorMoveY,
	Float:doorMoveZ,
	Float:doorMoveRX,
	Float:doorMoveRY,
	Float:doorMoveRZ
}
new Doors[MAX_MOVEDOORS][MOVEABLE_DOORS];

enum vehicleL {
	vLabelType,
	vLabelTime,
	vLabelCount,
	Text3D:vLabel,
}

new VehicleLabel[MAX_VEHICLES][vehicleL];

enum vehicleE {
    vVehicleID,
	vVehicleModelID,
	Float: vVehiclePosition[3],
	Float: vVehicleRotation,
	vVehicleFaction,
	vVehicleColour[2],
	vVehicleScriptID,
	// LOCAL DATA
	//Text3D:vVehicleSign,
}

enum warehouseE
{
	whID,
	Float:whX,
	Float:whY,
	Float:whZ,
	whPlayer1[MAX_PLAYER_NAME],
	whPlayer2[MAX_PLAYER_NAME],
	whType,
	whStock,
	whMaxstock,
	whPickup,
	Text3D:whLabel,
	whWorld,
	whInt

};

enum houseinteriorE
{
	aID,
	Float:aPosX,
	Float:aPosY,
	Float:aPosZ,
	aInterior,
	aMapName[32],
	aTeleOn
};

enum ident
{
	Id,
	Nome[24],
	Nascimento,
	Cpf,
	Score,
	Qualidade
};

enum houseE
{
	hID,
	Text3D:hLabel,
	//hCheckPoint,
	Float:hEntranceX,
	Float:hEntranceY,
	Float:hEntranceZ,
	Float:hExitX,
	Float:hExitY,
	Float:hExitZ,
	hInfo[128],
	hOwner[MAX_PLAYER_NAME],
	hOwned,
	hLocked,
	hPrice,
	hLevelbuy,
	hRentprice,
	hRentable,
	hInterior,
	hWorld,
	hCash,
	hWeapon[MAX_HOUSE_WEAPONS],
	hAmmo[MAX_HOUSE_WEAPONS],
	hWeaponLicense[MAX_HOUSE_WEAPONS],
	hItems[MAX_HOUSE_ITEMS],
	Float:hCheckPosX,
	Float:hCheckPosY,
	Float:hCheckPosZ,
    hRadio,
    hSubid,
    bool:hradioOn,
    hradioURL[256]
};

enum materialE
{
	mSid,
	mfID,
	mIndex,
	mModel,
	mTxd[32],
	mTexture[32],
	mColor[12],
	mOn
}

enum furnitureE
{
	fID,
	fModel,
	fObject,
	fName[48],
	fHouseID,
	fInterior,
	fVirtualWorld,
	fMarketPrice,
	Float:fPosX,
	Float:fPosY,
	Float:fPosZ,
	Float:fPosRX,
	Float:fPosRY,
	Float:fPosRZ,
	fLocked,
	fOpened,
	fOn
}

enum ebizz
{
    bID,
    bOwned,
	bOwner[24],
	bInfo[256],
	bType,
	bsubType,
	Float:bEntranceX,
	Float:bEntranceY,
	Float:bEntranceZ,
	Float:bExitX,
	Float:bExitY,
	Float:bExitZ,
	bLevelNeeded,
	bBuyPrice,
	bEntranceCost,
	bTill,
	bLocked,
	bInterior,
	bWorld,
	bProducts,
	bMaxProducts,
	bPriceProd,
	bPickup,
	Text3D:EmpText,

	bItems[MAX_BUSINESS_ITEM],

	// v buy
	Float:bBuyingCarX,
	Float:bBuyingCarY,
	Float:bBuyingCarZ,
	Float:bBuyingCarA,

	Float:bBuyingBoatX,
	Float:bBuyingBoatY,
	Float:bBuyingBoatZ,
	Float:bBuyingBoatA,

	Float:bBuyingAirX,
	Float:bBuyingAirY,
	Float:bBuyingAirZ,
	Float:bBuyingAirA,
};

enum boomboxData {
	bool:boomboxPlaced,
	bool:boomboxOn,
	Float:boomboxPos[3],
	boomboxObject,
	boomboxURL[128 char]
};

enum playerData {
	pID,
	pIP[16],
	pNomeChar,
	pCreated,
	taNoCelular,
	pLogado,
	pCpf,
	pNomeSujo,
	//pIDUCP,
	//pmotivoN,
	pTutorialStep,
	pGender,
	pBirthdate,
	pOrigin[32],
	pSecretWord[32],
	pModel,
	pPmodel,
	pCellphoneItem,
	pEditingItem,
	pPnumber,
	pChar,
	pContractTime,
	pInterior,
	pWorld,
	pInjured,
	Float:pHunger,
	Float:pHealth,
	Float:pArmour,
	Float:pSHealth,
	pTimeout,
	 pSpawnPoint,
	pSpawnType,
	pAdmin,
	pAdminName[MAX_PLAYER_NAME],
 	pTester,
	pHouseKey,
	pPlayingHours,
	pLevel,
	pExp,
	pPUpgrade,
	pDonateRank,
	pDonateUnix,
	pPayDay,
	pPayDayHad,
	pPayCheck,
	pChequeCash,
    pAccount,
    pCash,
    pSavings,
    pSavingsCollect,
  	pAlcoholPerk,
	pDrugPerk,
	pMiserPerk,
	pPainPerk,
	pTraderPerk,
	Float:pPos[4],
	pLocal,
    pOnDuty,
    pSwat,
	pFactionID,
	pFactionRank,
	pJob,
    pSideJob,
	pFishes,
	pCarLic,
	pWepLic,
	pCCWLic,
    // Checkpoint Mission
    pCP_Type,
	Float:pCP_X,
	Float:pCP_Y,
	Float:pCP_Z,

	pAttribute[128],
    pJailed,
    pJailTime,
    pJailTime2,

	pLocation[32],
	Float:pWaypointPos[3],
	pWaypoint,

    pJobRank,
    pCareer,
	pUmbrella,

    pADPoint,
    pArrested,
    pPrisoned,
    //pFines,
	pGuns[13],
	pAmmo[13],

	pDrugAddiction[MAX_DRUGS],
	pDrugAddict,
	pDrugAddictStrength,


	pGun1,
	pGun2,
	pGun3,

	pAmmo1,
	pAmmo2,
	pAmmo3,

	pPLicense,
	pSLicense,

	pPackageWP[MAX_PLAYER_WEAPON_PACKAGE],
	pPackageAmmo[MAX_PLAYER_WEAPON_PACKAGE],

    pPbiskey,
    pPCarkey,
    pPDupkey,

    pRadio,
	pRChannel,
	pRSlot,
	pRAuth[16],

	pOOCMask,
	pFightStyle,

	// LOCAL DATA
	pFaction,
	pFactionEdit,
	pFactionOffer,
	pFactionOffered,
	pSelectedSlot,

	pFreeze,
	pFreezeTimer,

	pIncomingCall,
	pCallConnect,
	pCallLine,
	pCellTime,
	pCallCost,
	pCallNumb,
	/*pLeaveTime,
	pLeaveIP[16],*/
	pShowFooter,
	pFooterTimer,
	pReport,
	pReportMessage[64],
	pHelpme,
	pHelpmeMessage[64],
	pSpectating,
	pAnimation,
    pCigarettes,
    pDrink,
	pGasCan,
	pMask_Name[MAX_PLAYER_NAME+1],
	pSprayPermission,
	pBoombox,


    pWalk,
    pTalk,

    pHUDStyle,

    pBanTeam,
	pFactionTeam,
	pPropertyTeam,


};


enum contactData {
	contactID,
	contactName[24],
	contactNumber,
};

enum smsData {
	bool:smsExist,
	smsID,
	smsOwner,
	smsReceive,
	smsText[128],
	smsRead,
	smsArchive,
	smsDate[24],

};

/*enum smsArcData {
	bool:smsExist,
	smsCount,
	smsID,
	smsOwner,
	smsReceive,
	smsText[128],
	smsDate[24],
};*/

enum carData {
	carVehicle,
	carID,
	carModel,
	carOwner,
	carPreso,
	diasPreso,
	spawnado,
	carOwnerName[MAX_PLAYER_NAME],
	Float:carPos[4],
	carColor1,
	carColor2,
	carPaintjob,
	carLocked,
	carMods[14],
	Float:carFuel,
	carLock,
	carAlarm,
	carInsurance,
	carXM,
	carDamage[4],
	Float:carHealth,
	Float:carArmour,
	carDestroyed,
	Float:carMileage,
	carImmob,
	Float:carBatteryL,
	Float:carEngineL,
	carSemPlaca[100],
	carChassi[32],
	//carTempoPlaca,
	carPlate[32],
	carComps,
	carXMOn,
	carDupKey,

	carWeapon[MAX_CAR_WEAPONS],
	carAmmo[MAX_CAR_WEAPONS],
	carWeaponLicense[MAX_CAR_WEAPONS],

	carPackageWP[MAX_CAR_WEAPON_PACKAGE],
	carPackageAmmo[MAX_CAR_WEAPON_PACKAGE],
	//Float:carWPAPos[MAX_CAR_WEAPONS][6],
	// Local
	//carWPAObj[MAX_CAR_WEAPONS][6],
	carRandomFailed,

	//Text3D:carLabel,
};

enum cp_e {
	cPobj,
	//
	Float:cPx,
	Float:cPy,
	Float:cPz,
	Float:cPrx,
	Float:cPry,
	Float:cPrz,
	cPType
};

enum paw_e {
	awID,
	awWid,
	//
	awHide,
	awBone,
	Float:aPx,
	Float:aPy,
	Float:aPz,
	Float:aPrx,
	Float:aPry,
	Float:aPrz
}

enum damagedata {
	bool:dExists,
	dSec,
	dShotType,
	dWeaponid,
	dDamage,
	bool:dArmour
};

enum chdata {
	bool:chExists,
	chSec,
	chNumber,
	bool:chRead,
	chType // - Outgoing call to %s (%d), - Incoming call from %s (%d), - Missed call from %s (%d)
};

enum accountData {
	aConnectionID,
	aUserid,
	aUsername[MAX_PLAYER_NAME+1],
	aEmail[MAX_PLAYER_NAME+1]
};

enum signalData {
	signalID,
	signalExists,
	Float:signalX,
	Float:signalY,
	Float:signalZ,
	Float:signalRange,
	signalName[64]
	//signalObject
};


enum PlayerFlags:(<<= 1) {
    IS_PLAYER_LOGGED = 1,
    IS_PLAYER_SPAWNED,
	IS_PLAYER_KICKED,
	IS_PLAYER_ACCOUNT,
	IS_PLAYER_EDITWEAPON,
	IS_PLAYER_EDITCLOTHING,
	IS_PLAYER_BUYCLOTHING,
	PLAYER_CONVO,
	PLAYER_CUFFED,
	TOGGLE_FACTION,
	TOGGLE_LOCALOOC,
	TOGGLE_JOIN,
	//TOGGLE_CHEAT,
	TOGGLE_HUD,
	TOGGLE_PMS,
	IS_PLAYER_TAZER,
	IS_PLAYER_MASK
};

enum factionData {
	factionID,
	factionExists,
	factionName[32],
	factionColor,
	factionType,
	factionRanks,
	factionChat,
	factionPickup
};

enum coreVehicles {
	Float:vehFuel,
	startup_delay,
	startup_delay_sender,
	startup_delay_random,
	Float:vehCrash,
	vehDamage[4],

    bool:vradioOn,
    vradioURL[256],

	vOwnerID,
	vUpgradeID,

	Text3D:vehSignText,
	vehSign,

	vbreakin,
	vbreaktime,
	vbreakdelay,

	vSiren,
	vSiren2,

	vehicleBadlyDamage,

	vehicleCrate[MAX_TRUCKER_ITEMS],
	vehicleObj[6],
	vehicleIsCargoLoad,
	vehicleCargoTime,
	vehicleCargoStorage,
	vehicleCargoPlayer,
	vehicleCargoAction // 0 - Buy,  1 - Sell
};

enum e_cloths {
	cl_sid,
	cl_object,
	Float:cl_x,
	Float:cl_y,
	Float:cl_z,
	Float:cl_rx,
	Float:cl_ry,
	Float:cl_rz,
	Float:cl_scalex,
	Float:cl_scaley,
	Float:cl_scalez,
	cl_bone,
	cl_slot,
	cl_equip,
	cl_name[32]
};

enum ecrate {
    cOn,
	cObject,
	Float:cX,
	Float:cY,
	Float:cZ,
	cID,
	cOwned,
	Text3D:clabel
}

enum systemE {
	vehicleCounts[3], // 0 - Server, 1 - Player, 2 - Admin
	reportSystem,
	helpmeSystem,
	OOCStatus,
}

enum eadvert
{
    ad_owner,
    ad_id,
    ad_time,
    ad_type,
	ad_text[128],
}

enum EMERGENCY_CALL
{
	callCaller,
	callSituation[128],
	callLocation[64],
	callTrace[64],
	callDate[64],
	callID,
	callType,
	callNumb,
	callTaken
}

enum ARREST_INFO
{
	arrestSuspect,
	arrestOfficer,
	arrestDate[64],
	arrestLocation[64],
	arrestTime,
	arrestTaken
}

enum e_md {
	bool:mExist,
	Float:mX,
	Float:mY,
	Float:mZ,
	mInt,
	mWorld,
	mID,

	mObject,
	mTimer,
};

// ....


new
    MySQL:dbCon, //Handle MYSQL
    szString[128],
	szQuery[256],
	largeQuery[512],
    CoreVehicles[MAX_VEHICLES][coreVehicles],
    AdvertData[MAX_AD_QUEUE][eadvert],
    vehicleVariables[MAX_DYNAMIC_VEHICLES][vehicleE],
    HouseInfo[MAX_HOUSES][houseE],
    IdentInfo[MAX_IDENT][ident],
    HouseInteriors[MAX_INTERIORS][houseinteriorE],
 	HouseFurniture[MAX_HOUSES][MAX_FURNITURE][furnitureE],
 	BizFurniture[MAX_BIZZ][MAX_FURNITURE][furnitureE],
 	BizMaterial[MAX_FURNITURE][MAX_MATERIAL][materialE],
	HouseMaterial[MAX_FURNITURE][MAX_MATERIAL][materialE],
    AdminSpawnedVehicles[MAX_ADMIN_VEHICLES],
    PlayerData[MAX_PLAYERS][playerData],
   	BoomboxData[MAX_PLAYERS][boomboxData],
   	CallInfo[MAX_EMERGENCY_CALL][EMERGENCY_CALL],
   	ToLastCallSlot = 0,
   	ArrestInfo[MAX_ARREST][ARREST_INFO],
   	ToLastArrestSlot = 0,
    CarData[MAX_PLAYER_VEHICLES][carData],
    CarPlace[MAX_PLAYER_VEHICLES][MAX_CAR_WEAPONS][cp_e],
    PlayerAttachWeapon[MAX_PLAYERS][MAX_ATTACH_WEAPON][paw_e],
    MealDrop[MAX_PLAYERS][e_md],

	//drogas
	PlayerDrug[MAX_PLAYERS][MAX_PLAYER_DRUG_PACKAGE][e_Drug],
	VehicleDrug[MAX_PLAYER_VEHICLES][MAX_VEHICLE_DRUG_PACKAGE][e_Drug],
	ItemDrug[MAX_ITEM_DRUG][e_Drug],




    //PHONE
    ContactData[MAX_PLAYERS][40][contactData],
    SmsData[MAX_PLAYERS][MAX_SMS][smsData],
    CallHistory[MAX_PLAYERS][MAX_CALLHISTORY][chdata],

    ClothingData[MAX_PLAYERS][MAX_CLOTHES][e_cloths],
    CrateInfo[MAX_CRATE][ecrate],
    WareHouseInfo[MAX_WAREHOUSE][warehouseE],
    BizInfo[MAX_BIZZ][ebizz],
    AccountData[MAX_PLAYERS][accountData],
    PlayerFlags:g_PlayerFlags[MAX_PLAYERS],
    DamageData[MAX_PLAYERS][MAX_DAMAGES][damagedata],
    SignalData[MAX_SIGNALTOWER][signalData],
    FactionData[MAX_FACTIONS][factionData],
    FactionRanks[MAX_FACTIONS][16][32],
    systemVariables[systemE],
    // Fix Time
	ghour = 0,
	gminute = 0,
	gsecond = 0,
	timeshift = 0,
	shifthour
;


// CARGO SHIP
#define NUM_SHIP_ATTACHMENTS 9
#define NUM_SHIP_ROUTE_POINTS 8
#define SPEED_CARGOSHIP  20

new gShipAttachmentModelIds[NUM_SHIP_ATTACHMENTS] = {
5166,
5167,
5156,
5157,
5165,
3724,
5154,
3724,
5155
};

new Float:gShipAttachmentPos[NUM_SHIP_ATTACHMENTS][6] = {
{0.000000,0.000000,0.000000,0.000000,0.000000,0.000000},
{-107.499977,8.080001,2.000000,0.000000,0.000000,0.000000},
{-55.660057,8.040000,5.699993,0.000000,0.000000,0.049999},
{53.039920,8.200004,11.849996,0.000000,0.000000,0.000000},
{0.000000,0.000000,0.000000,0.000000,0.000000,0.000000},
{5.000000,10.000000,24.000000,0.000000,0.000000,-180.000000},
{-32.000000,8.000000,10.000000,0.000000,0.000000,0.000000},
{-74.000000,8.560012,24.000000,0.000000,0.000000,0.000000},
{-126.000000,8.000000,15.000000,0.000000,0.000000,0.000000}
};

new Float:gShipRoutePoints[NUM_SHIP_ROUTE_POINTS][6] = {
{2829.915283, -2482.376464, 3.769995, 0.000000,   0.000000, -90.000000},
{2829.915283, -2843.347167, 3.769994, 0.000000, 0.000000, -90.000000},
{3248.907226, -2978.197998, 3.769994, 0.000000, 0.000000, -9.799991},
{3283.973876, -3070.623535, 3.769994, 0.000000, 0.000000, -9.799991},
{3356.869140, -2824.702880, 3.769994, 0.000000, 0.000000, 3.400008},
{3306.186035, -2767.182373, 3.769994, 0.000000, 0.000000, 105.200027},
{3529.560546, -2100.971435, 3.769994, 0.000000, 0.000000, 168.300140},
{2994.928222, -2480.779541, 4.028370, 0.000000, 0.000000, -90.000000}
};

new gMainShipObjectId;
new gShipDeparture;
//new gShipBoard;
new gShipRamp1, gShipRamp2;
new gShipTextLine1;
new gShipTextLine2;
new gShipTextLine3;

new gShipsAttachments[NUM_SHIP_ATTACHMENTS];
new gShipCurrentPoint = 1; // current route point the ship is at. We start at route 1

new gShipTime;

// Graffiti System

enum graff_E
{
	graffcreator[MAX_PLAYER_NAME+1],
	graffname[60],
	Float:Xpos,Float:Ypos,Float:Zpos,
	Float:XYpos,Float:YYpos,Float:ZYpos,
	graffmodel,
	grafffont[24],
	//Local Data
	graffObject,
}
new graff_Info[MAX_GRAFFITI][graff_E];

// WEAPON DROP

//=================//
enum dData
{
	DropID,
    DropGunAmmount[2],//ModelID & Bullets
    Float:DropGunPosX,
    Float:DropGunPosY,
    Float:DropGunPosZ,
    DropLicense,
    DropObj,
    //Text3D:DropLabel,
    DropTimer,
    DropSaving,
};
new GunInfo[MAX_DROP_ITEMS][dData];
//=================//
new GunObjectIDs[200] ={

   1575,  331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324, 325, 326, 342, 343, 344, -1,  -1 , -1 ,
   346, 347, 348, 349, 350, 351, 352, 353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367,
   368, 369, 1575
};

// Courier

new carryCrate[MAX_PLAYERS];


new HouseEntered[MAX_PLAYERS];
new BizEntered[MAX_PLAYERS];

new RoadBlocks[MAX_PLAYERS][10];

// ..Ã¼..?


// Graffiti System
//new	GraffiObj[MAX_PLAYERS];
new GraffiModel[MAX_PLAYERS];
//new Float:GraffiPos[MAX_PLAYERS][6];
new GraffiName[MAX_PLAYERS][60];
new GraffiFont[MAX_PLAYERS][24];

new sprayammount[MAX_PLAYERS];
//new spraytimerx[MAX_PLAYERS];
new spraytimer[MAX_PLAYERS];
new sprayammountch[MAX_PLAYERS];


new CurrentHoldingWeapon[MAX_PLAYERS];


//DROGADS
new Float:EffectDrugs[MAX_PLAYERS];
new Float:EffectDrugAmount[MAX_PLAYERS];
new Timer:EffectDrugs_Timer[MAX_PLAYERS];
new bool:SufferDrugs[MAX_PLAYERS char]; // Å§á´§
new AddictDrugs[MAX_PLAYERS];
new Timer:AddictTimer[MAX_PLAYERS];


//============================================
//	Governo
//============================================
enum govInfo {
	gCofres,

	/*gTaxa,
	gTaxaLuz,
	gTaxaHP,
	gConvenio,
	gSalarioMin,*/

	gSalarioGOV[20],
	gSalarioPM[20],
	gSalarioBOMB[20]
	//gSalarioSN[20],
	//gTollCost
};
new GovInfo[govInfo];

//============================================
//	Governo
//===========================================



//Taxi variables
new bool:TaxiDuty[MAX_PLAYERS char],
	TaxiFare[MAX_PLAYERS char],
	bool:TaxiStart[MAX_PLAYERS char],
	TaxiMoney[MAX_PLAYERS],
	TaxiMade[MAX_PLAYERS];
//Taxi variables


new
	bool:TazerActive[MAX_PLAYERS char],
	bool:BeanbagActive[MAX_PLAYERS char],
	bool:IsAFK[ MAX_PLAYERS char]
;

new FriskApprove[MAX_PLAYERS];

new fish_timer[MAX_PLAYERS];

new AFKTimer[MAX_PLAYERS];
new AFKCount[MAX_PLAYERS];

new grantboombox[MAX_PLAYERS]; //..Â¹.? Boombox
new grantbuild[MAX_PLAYERS]; //......
/*new TestObject[MAX_PLAYERS];
new videdit[MAX_PLAYERS];*/
new bool:deleyAC_Nop[MAX_PLAYERS char];

new PlayerPlaceCar[MAX_PLAYERS];
new PlayerPlaceSlot[MAX_PLAYERS];

new MealHolding[MAX_PLAYERS];
new MealObject[MAX_PLAYERS];

new Firehold[MAX_PLAYERS];
new Firetimer[MAX_PLAYERS];

new FishingPlace[MAX_PLAYERS];
new FishingBoat[MAX_PLAYERS];

new Float:gPlayerCheckpointX[MAX_PLAYERS];
new Float:gPlayerCheckpointY[MAX_PLAYERS];
new Float:gPlayerCheckpointZ[MAX_PLAYERS];

new Float:macX;
new Float:macY;
new Float:macZ;
new Float:macA;

new gPlayerCheckpointStatus[MAX_PLAYERS];
new gPlayerCheckpointValue[MAX_PLAYERS];
//new Float:player_vehicle_speed[MAX_PLAYERS];

new nearHouse_var[MAX_PLAYERS];

new
	pToAccept[MAX_PLAYERS],
	vToAccept[MAX_PLAYERS],
	tToAccept[MAX_PLAYERS],
	prToAccept[MAX_PLAYERS]
;

new
	serviceComp[MAX_PLAYERS],
	serviced[MAX_PLAYERS],
	serviceTowtruck[MAX_PLAYERS],
	serviceCustomer[MAX_PLAYERS],
	serviceFocus[MAX_PLAYERS],
	RepairTime[MAX_PLAYERS char]
;
// FARMER
new far_start[MAX_PLAYERS];
new far_veh[MAX_PLAYERS];
new far_place[MAX_PLAYERS]; // 0 - Flint County, 1 - Blueberry

// HOTWIRE
new h_vid[MAX_PLAYERS];
new h_times[MAX_PLAYERS];
new h_wid[MAX_PLAYERS];
new h_word[MAX_PLAYERS][16];
new h_score[MAX_PLAYERS];
new h_failed[MAX_PLAYERS];
// SELFIE
new Float:Degree[MAX_PLAYERS];
new Float:SelAngle[MAX_PLAYERS];
const Float: Radius = 1.4; //do not edit this
const Float: Speed  = 1.25; //do not edit this
const Float: Height = 1.0; // do not edit this
new Float:lX[MAX_PLAYERS];
new Float:lY[MAX_PLAYERS];
new Float:lZ[MAX_PLAYERS];
new selfie_timer[MAX_PLAYERS];
//================================================

new ConvoID[MAX_PLAYERS];
new SafeTime[MAX_PLAYERS];
new MedicBill[MAX_PLAYERS];

new deathmode[MAX_PLAYERS];
new deathtime[MAX_PLAYERS];
//new Text3D:DamageLabel[MAX_PLAYERS];
new LegDelay[MAX_PLAYERS];

new DamageSync[MAX_PLAYERS];
new IssueTimer[MAX_PLAYERS];

new cooldowns[MAX_PLAYERS][MAX_COOLDOWNS];
new cooldowns_expire[MAX_PLAYERS][MAX_COOLDOWNS];

new cl_selected[MAX_PLAYERS];
new cl_index[MAX_PLAYERS];
new cl_dataslot[MAX_PLAYERS][MAX_CLOTHES];

new cl_buying[MAX_PLAYERS];
new cl_buyingpslot[MAX_PLAYERS];

// Player Textdraw
new PlayerText:emptytext[MAX_PLAYERS];
new PlayerText:jail_timeleft[MAX_PLAYERS];
new PlayerText:pPT_Radio[MAX_PLAYERS];
new PlayerText:pPT_Footer[MAX_PLAYERS];
//Textdraw 03DL
new Text:panel[1];
// Restaurant Textdraw
new bool:PRestaurantOpening[MAX_PLAYERS];
new Text:TD_Restaurant[3];
new PlayerText:PTD_Restaurant[MAX_PLAYERS][9];

new bool:PCoverOpening[MAX_PLAYERS];
new PCoverColor[MAX_PLAYERS];
new Text:TD_PhoneCover[9];
new PlayerText:TD_PhoneCoverModel[MAX_PLAYERS];
// Car GUI SYSTEM
new bool:PCarOpening[MAX_PLAYERS];
new PCarPage[MAX_PLAYERS];
new PCarType[MAX_PLAYERS];
new PlayerText:PCARTextHeader[MAX_PLAYERS];
new PlayerText:PCARTextSlot[MAX_PLAYERS][6];
new PlayerText:PCARTextName[MAX_PLAYERS][6];
new PlayerText:PCARTextPrice[MAX_PLAYERS][6];
new PlayerText:PCARTextLeft[MAX_PLAYERS];
new PlayerText:PCARTextRight[MAX_PLAYERS];

// Color Selection
new
	PlayerText:ColorSelectText[MAX_PLAYERS],
	PlayerText:ColorSelectLeft[MAX_PLAYERS],
	PlayerText:ColorSelectRight[MAX_PLAYERS],
	PlayerText:ColorSelection[MAX_PLAYERS][8];

new
	PlayerText:ColorSelectText2[MAX_PLAYERS],
	PlayerText:ColorSelectLeft2[MAX_PLAYERS],
	PlayerText:ColorSelectRight2[MAX_PLAYERS],
	PlayerText:ColorSelection2[MAX_PLAYERS][8];

new ColorSelectShow[MAX_PLAYERS char],
    ColorSelectItem[MAX_PLAYERS],
	ColorSelectPage[MAX_PLAYERS],
	ColorSelectPages[MAX_PLAYERS],
	ColorSelect[MAX_PLAYERS] = -1,
	ColorSelectListener[MAX_PLAYERS][8];

new ColorSelectShow2[MAX_PLAYERS char],
    ColorSelectItem2[MAX_PLAYERS],
	ColorSelectPage2[MAX_PLAYERS],
	ColorSelectPages2[MAX_PLAYERS],
	ColorSelect2[MAX_PLAYERS] = -1,
	ColorSelectListener2[MAX_PLAYERS][8];

// Dealership
new VDealerSelectCatalog[MAX_PLAYERS];
new VDealerData[MAX_PLAYERS][6][5];

new VDealerSetting[MAX_PLAYERS char];
new VDealerVehicle[MAX_PLAYERS];
new VDealerBiz[MAX_PLAYERS];
new VDealerLock[MAX_PLAYERS];
new VDealerImmob[MAX_PLAYERS];
new VDealerAlarm[MAX_PLAYERS];
new VDealerPrice[MAX_PLAYERS];
new VDealerColor[MAX_PLAYERS][2];
new VDealerXM[MAX_PLAYERS];
// ================== [ NEW PHONE SYSTEM ] ============================

new PlayerText:TDPhone_Model[MAX_PLAYERS][14];
new PlayerText:TDPhone_Choice[MAX_PLAYERS][4];
new PlayerText:TDPhone_TFButton[MAX_PLAYERS];
new PlayerText:TDPhone_TSButton[MAX_PLAYERS];
new PlayerText:TDPhone_BigText[MAX_PLAYERS];
new PlayerText:TDPhone_ScreenText[MAX_PLAYERS];
new PlayerText:TDPhone_Signal[MAX_PLAYERS];
new PlayerText:TDPhone_Picture[MAX_PLAYERS];
new PlayerText:TDPhone_NotifyText[MAX_PLAYERS];
new bool:ph_opening[MAX_PLAYERS char];

new ph_menuid[MAX_PLAYERS];
new ph_sub_menuid[MAX_PLAYERS];
new ph_selected[MAX_PLAYERS]; // GUI select id   0 - 3
new ph_select_data[MAX_PLAYERS];
new ph_call_string[MAX_PLAYERS][64];
// PLAYER EVENT
new ph_data[MAX_PLAYERS][4];
new ph_page[MAX_PLAYERS]; // data  of rows

new ph_airmode[MAX_PLAYERS];
new ph_silentmode[MAX_PLAYERS];
new ph_speaker[MAX_PLAYERS];
new ph_TextTone[MAX_PLAYERS];
new ph_CallTone[MAX_PLAYERS];

// ================== [ NEW PHONE SYSTEM ] ============================

/*// ================== [ PHONE SYSTEM ] ============================
new PlayerText:TDPlayer_Phone[MAX_PLAYERS][23];
new bool:ph_opening[MAX_PLAYERS char];
new ph_section[MAX_PLAYERS];
new ph_subsection[MAX_PLAYERS];
new bool:ph_canupdate[MAX_PLAYERS char];

new ph_select[MAX_PLAYERS];
new ph_select_max[MAX_PLAYERS];

new ph_pages[MAX_PLAYERS];
new ph_page[MAX_PLAYERS];
new ph_selectrow[MAX_PLAYERS];
new ph_currentpage[MAX_PLAYERS];

new ph_airmode[MAX_PLAYERS];
new ph_silentmode[MAX_PLAYERS];
new ph_CallTone[MAX_PLAYERS];

new calltimer[MAX_PLAYERS];
new smstimer[MAX_PLAYERS];
// ================== [ PHONE SYSTEM ] ============================*/

// PHONE SYSTEM
new calltimer[MAX_PLAYERS];
new smstimer[MAX_PLAYERS];
// ..

// ....?
new servertime[MAX_TIME];
new Tax = 0;
new TaxValue = 0;
new adTick[MAX_PLAYERS];

new DollaPickup[2];
new NewsPickup;
new FarmerPickup;
new MechanicPickup;

new ArrestPickup;

new Menu:Guide, Menu:GuideJob1, Menu:GuideJob2;

// Vehicle Rental
new CarRent[10];
new CarDMV[4];

// LSPD DOOR
new LSPDDoorObject[4];
new LSPDDoor[2];


//new multiplyexp = 1;
//new levelexp = 3;
//new levelcost = 25000;

// Ã¶
new bool:exist_playervehicle[MAX_PLAYER_VEHICLES];
// ...
new RentCarKey[MAX_PLAYERS];

new gLastCar[MAX_PLAYERS];
new gPassengerCar[MAX_PLAYERS];

native WP_Hash(buffer[], len, const str[]);

main()
{
	mysql_log(WARNING | ERROR);


	print("\n----------------------------------     ");
	print("		Gamemode por Yur$ && iMac 			");
	print("		   São Paulo RolePlay               ");
	print("----------------------------------\n     ");
	SQL_Connect();
    SetupIndustry();

	mysql_tquery(dbCon, "SELECT * FROM `factions`", "Faction_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `faction_warehouse`", "Warehouse_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `business`", "Bizz_Load", "");
    mysql_tquery(dbCon, "SELECT * FROM `signal_tower`", "Signal_Load", "");
    mysql_tquery(dbCon, "SELECT * FROM `vehicles`", "Vehicle_Load", "");
    mysql_tquery(dbCon, "SELECT * FROM `identidades`", "Ident_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `houses`", "House_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `ateles`", "DynamicTele_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `industry` ORDER BY `industryid` ASC", "Industry_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `movedoors`", "Movedoor_Load", "");
	mysql_tquery(dbCon, "SELECT * FROM `drug_package`", "DRUG_PACKAGE_OBJECT", "");
	mysql_tquery(dbCon, "SELECT * FROM `governo` WHERE id = '1'", "CarregandoGoverno", "");


	WasteDeAMXersTime();
}
stock SetupIndustry()
{
	for(new i=0;i!=MAX_INDUSTRY;i++)
	{
		if(i > 26) {
	    	IndustryData[i][in_type] = 2;
		}
		else if(i > 15) {
		    IndustryData[i][in_type] = 1;
		}
		else IndustryData[i][in_type] = 0;

		IndustryData[i][in_close] = 0;
	}
}

new EmpresaDialogNames[20][] =
{
    "Banco",
    "Prefeitura",
    "Barzinho 1",
    "Vestiario",
    "Barzinho 2",
    "Barzinho 3",
    "Sony Shop",
    "Bar MotoClub",
    "Loja de Eletronicos",
    "Lavanderia",
    "Hospital",
	"Tattuadora - MOBILIADA",
	"Barbearia	- MOBILIADA",
	"Agencia De Empregos",
	"Igreja",
	"CluckinBell - Pequeno",
	"Box Local",
	"Prefeitura",
	"Fight Room",
	"StripClub"
};
/////////////////////////////////////////////////////
///				SISTEMA DE PALCO				 ///
///////////////////////////////////////////////////
new StatusPalco = 0;
new	ObjPalco[66];


new Float:EmpresaDialogData[20][4] =
{
    {1409.53857, 1316.47266, 1501.04822, 0.0}, 		// Banco
    {1461.6343, -1726.4952, 1051.3344, 0.0}, 		// Prefeitura
    {926.2477, 639.0723, 2399.1499, 0.0}, 			// Barzinho
    {-297.7795, 1441.8667, 1088.2208, 0.0}, 		// Vestiario
    {-452.1363, -285.7151, 4022.9924, 0.0}, 		// Barzinho 2
    {164.83, 1748.34, 615.63, 0.0}, 				// Bar 3
    {-2285.7458, -156.7833, 3346.9490, 0.0},        // Sony Shop
    {490.2410, 636.3953, 1020.8666,0.0},            // MotoClub Bar
    {1005.0934, 52.0730, 54.5856,0.0},              // Loja de Eletronicos
    {1834.1338, 1804.9091, 614.5231,0.0},           // Lavanderia
    {-204.7018, -1736.1825, 674.9832,0.0},          // Hospital
    {2639.5457, 638.7292, 616.6067,0.0}, 		// Tatuadora
    {2674.7686, 639.5853, 614.4777,0.0},        // Barbearia
    {1415.1191, -1576.1100, 19.3596,0.0},        // Agencia de Empregos
    {-2027.9401, 1019.1985, 1417.9236, 0.0},     //Igreja
    {2423.1428,-1496.6943,-52.8550, 0.0},        //Cluckint
    {2302.2561, -1647.8159, 1902.63, 0.0},     // Box Local
    {-500.8079, 293.8986, 2000.7140, 0.0},     // Prefeitura
    {2001.6118, 1105.6027, 331.0500, 0.0},     // FightRoom
    {1973.7617, 1342.8131, 246.5860, 0.0}     // StripClub_New
};
new InteriorDialogEmpresa[20][1] =
{
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
	{1},
	{1},
	{1},
	{1},
	{1},
    {1},
	{1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1},
    {1}
};

stock ShowEmpInterioresDialog(playerid)
{
    new dialog_string[2600];
    for(new i = 0; i < sizeof(EmpresaDialogNames); i++) {
        if(!i) {
            format(dialog_string, sizeof(dialog_string), EmpresaDialogNames[i]);
        }
        else {
            format(dialog_string, sizeof(dialog_string), "%s\n%s", dialog_string, EmpresaDialogNames[i]);
        }
    }
    return Dialog_Show(playerid, Dialog_Empresas_Menu, DIALOG_STYLE_LIST, "Interiores", dialog_string, "Selecionar", "Cancelar");
}

stock HoldingKey(playerid, key)
{
	new keys, ud, lr;
	GetPlayerKeys(playerid, keys, ud, lr);
	if(keys & key == key)
		return true;
	return false;
}

/*stock lowercase(string[])
{
    for(new i = 0, j = strlen(string); i != j; ++i)
    {
        string[i] = tolower(string[i]);
    }
    return string;
}*/

/*stock uppercase(string[])
{
    new i = 0;
    while ((string[i] = toupper(string[i]))) ++i;
}*/

stock ClearGameTextColor(string[])
{
	new aaa[256];
	regex_replace(string, "~.~", "+", aaa);
	format(aaa, 256, "%s", str_replaceEx("+", aaa));
	return aaa;
}

public OnGameModeInit()
{
	/*
	//(mapas.pwn)
	Remove_Objects();
	ApartamentoInt1();
	BancoMap();
	Apartamento2();
	Apartamento3();
	Barzinho1();
	Barzinho2();
	Barzinho3();
	SonyShop();
	Empresa_1();
	Complexo_1();
	Complexo_2();
	Complexo_3();
	Complexo_4();
	Complexo_5();
	Complexo_6();
	Complexo_7();
	Complexo_8();
	Complexo_9();
	StripClub_New();
	PawnShop();
	EstudioFM();
	BoxLocal();
	FightRoom();
	Lavanderia_P();
	CentralDeEmpregos();
	CoberturaComPiscina();
	IgrejaInterior();
	Interior_Estudio();
	DrugHouse_1();
	WeaponHouse_1();
	IntVazio_1();
	Loja_Eletronicos();
	Casas_Empresas_Vazios();
 	Complexo_CA1();
 	PlacasStop();*/

	CreateDynamic3DTextLabel("[EMPREGO]\nUse '/empregoagricultor'", COLOR_WHITE, -382.5893,-1426.3422,26.2217, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[EMPREGO]\nUse '/empregocaminhoneiro'", COLOR_WHITE, -78.0338,-1136.1221,1.0781, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[EMPREGO]\nUse '/empregotaxista'", COLOR_WHITE, 1752.9860,-1902.6703,13.5629, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[EMPREGO]\nUse '/empregomecanico'", COLOR_WHITE, 88.4620,-165.0116,2.5938, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    
	CreateDynamic3DTextLabel("[DELEGACIA]\nUse '/entrar'", COLOR_WHITE, 1243.7375,-1264.8912,15.6787, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 1243.7375,-1264.8912,15.6787, -1);
	CreateDynamic3DTextLabel("[2º ANDAR]\nUse '/entrar'", COLOR_WHITE, 1400.2490,-12.1037,1001.0098, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 1400.2490,-12.1037,1001.0098, -1);
	
	CreateDynamic3DTextLabel("[GARAGEM PCESP]\nUse '/sair'", COLOR_WHITE, -1628.0112,690.6479,7.1875, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[GARAGEM GBESP]\nUse '/entrar'", COLOR_WHITE, 954.6230,-1467.4749,13.5547, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[GARAGEM PMESP]\nUse '/entrar'", COLOR_WHITE, 708.0598,-573.6811,14.9958, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[GARAGEM PCESP]\nUse '/entrar'", COLOR_WHITE, 1229.5966,-1244.8976,15.6528, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[GARAGEM PMESP]\nUse '/sair'", COLOR_WHITE, 2318.3911,2446.4016,3.2734, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
	CreateDynamic3DTextLabel("[PMESP]\nUse '/entrar'", COLOR_WHITE, 706.7247,-588.8745,17.3375, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);

    CreateDynamic3DTextLabel("[PCESP]\nUse '/trabalho'\nUse '/uniforme'", COLOR_WHITE, 1372.3121,-26.7843,1000.9219, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 1372.3121,-26.7843,1000.9219, -1);
    CreateDynamic3DTextLabel("[GBESP]\nUse '/trabalho'\nUse '/uniforme'", COLOR_WHITE, 959.5063,-1440.9656,13.5387, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 959.5063,-1440.9656,13.5387, -1);
    CreateDynamic3DTextLabel("[PMESP]\nUse '/trabalho'\nUse '/uniforme'", COLOR_WHITE, 2329.7139,-650.3033,80162.4531, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, -1);
    CreatePickup(1239, 1, 2329.7139,-650.3033,80162.4531, -1);

	//CreateDynamic3DTextLabel("[BANCO]\nUse '/banco'\nUse '/sacar'\nUse '/poupanca'\nUse '/saldo'", COLOR_WHITE, 2318.3911,2446.4016,3.2734, 3.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1);
	//CreatePickup(1239, 1, 1235.8274,-1278.8701,60008.1328, -1);

	ShowNameTags(1);

	AddSimpleModel(-1, 19315, -2005, "coletepmesp.dff", "textdraw_ui.txd");

  	HUDPlayer_Ping = TextDrawCreate(612.000000, 80.000000, "mdl-2005:Ping");
    TextDrawFont(HUDPlayer_Ping, 4);
    TextDrawLetterSize(HUDPlayer_Ping, 0.600000, 2.000000);
    TextDrawTextSize(HUDPlayer_Ping, 25.000000, 32.500000);
    TextDrawSetOutline(HUDPlayer_Ping, 1);
    TextDrawSetShadow(HUDPlayer_Ping, 0);
    TextDrawAlignment(HUDPlayer_Ping, 1);
    TextDrawColor(HUDPlayer_Ping, -1);
    TextDrawBackgroundColor(HUDPlayer_Ping, 255);
    TextDrawBoxColor(HUDPlayer_Ping, 50);
    TextDrawUseBox(HUDPlayer_Ping, 1);
    TextDrawSetProportional(HUDPlayer_Ping, 1);
    TextDrawSetSelectable(HUDPlayer_Ping, 0);


    HUDMileage = TextDrawCreate(583.000000, 319.000000, "mdl-2005:Mileage");
    TextDrawFont(HUDMileage, 4);
    TextDrawLetterSize(HUDMileage, 0.600000, 2.000000);
    TextDrawTextSize(HUDMileage, 54.000000, 65.000000);
    TextDrawSetOutline(HUDMileage, 1);
    TextDrawSetShadow(HUDMileage, 0);
    TextDrawAlignment(HUDMileage, 1);
    TextDrawColor(HUDMileage, -1);
    TextDrawBackgroundColor(HUDMileage, 255);
    TextDrawBoxColor(HUDMileage, 50);
    TextDrawUseBox(HUDMileage, 1);
    TextDrawSetProportional(HUDMileage, 1);
    TextDrawSetSelectable(HUDMileage, 0);

    HUDBattery = TextDrawCreate(527.000000, 374.000000, "mdl-2005:Battery");
    TextDrawFont(HUDBattery, 4);
    TextDrawLetterSize(HUDBattery, 0.600000, 2.000000);
    TextDrawTextSize(HUDBattery, 15.000000, 15.000000);
    TextDrawSetOutline(HUDBattery, 1);
    TextDrawSetShadow(HUDBattery, 0);
    TextDrawAlignment(HUDBattery, 1);
    TextDrawColor(HUDBattery, -1);
    TextDrawBackgroundColor(HUDBattery, 255);
    TextDrawBoxColor(HUDBattery, 50);
    TextDrawUseBox(HUDBattery, 1);
    TextDrawSetProportional(HUDBattery, 1);
    TextDrawSetSelectable(HUDBattery, 0);

    HUDLights = TextDrawCreate(524.000000, 392.000000, "mdl-2005:Lights");
    TextDrawFont(HUDLights, 4);
    TextDrawLetterSize(HUDLights, 0.600000, 2.000000);
    TextDrawTextSize(HUDLights, 15.000000, 15.000000);
    TextDrawSetOutline(HUDLights, 1);
    TextDrawSetShadow(HUDLights, 0);
    TextDrawAlignment(HUDLights, 1);
    TextDrawColor(HUDLights, -1);
    TextDrawBackgroundColor(HUDLights, 255);
    TextDrawBoxColor(HUDLights, 50);
    TextDrawUseBox(HUDLights, 1);
    TextDrawSetProportional(HUDLights, 1);
    TextDrawSetSelectable(HUDLights, 0);

	ShowNameTags(1);


	panel[0] = TextDrawCreate(217.210830, -41.000000, "mdl-2000:logo_inicial");
	TextDrawTextSize(panel[0], 216.000000, 225.000000);
	TextDrawAlignment(panel[0], 1);
	TextDrawColor(panel[0], -1);
	TextDrawSetShadow(panel[0], 0);
	TextDrawBackgroundColor(panel[0], 255);
	TextDrawFont(panel[0], 4);
	TextDrawSetProportional(panel[0], 0);


	// House Interior
	//2 Room house
	CA_CreateDynamicObject_SC(14755, -79.76019, 1375.42126, 1079.20508,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, -80.68050, 1382.76636, 1077.94690,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CA_CreateDynamicObject_SC(14756, -48.48457, 1458.49207, 1086.61377,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, -47.69450, 1457.73669, 1084.60840,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house

	//3 Room house
	CA_CreateDynamicObject_SC(14748, 41.38534, 1440.95935, 1083.41199,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 46.51220, 1438.62793, 1081.40894,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//3 Room house & two story
	CA_CreateDynamicObject_SC(14750, 11.03331, 1314.19482, 1088.33093,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 6.96000, 1304.85022, 1081.82263,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house & two story

	//4 Room house & two story
	CA_CreateDynamicObject_SC(14754, 85.66241, 1280.42249, 1082.82739,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 82.19940, 1271.31091, 1078.86523,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house & two story

	//4 Room house & two story (More expensive)
	CA_CreateDynamicObject_SC(14758, 155.35648, 1409.17212, 1087.30750,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 154.62061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
	CA_CreateDynamicObject_SC(1506, 156.12061, 1409.09656, 1085.43335,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house & two story (More expensive)

	//3 Room house
	CA_CreateDynamicObject_SC(14714, 289.94763, 1509.23218, 1079.22510,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 289.17270, 1501.17688, 1077.42126,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//3 Room house
	CA_CreateDynamicObject_SC(14700, 329.35416, 1516.43005, 1086.31531,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 328.56949, 1512.34375, 1084.81165,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//2 Room house
	CA_CreateDynamicObject_SC(14711, 382.01254, 1498.42480, 1080.69409,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 391.08289, 1505.09924, 1079.09644,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house

	//3 Room house
	CA_CreateDynamicObject_SC(14710, 366.74869, 1381.78625, 1080.31787,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 376.35840, 1377.81616, 1078.80579,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//3 Room house
	CA_CreateDynamicObject_SC(14701, 448.67178, 1363.61853, 1083.28748,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 447.54770, 1353.26965, 1081.21570,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//4 Room house & 2 story
	CA_CreateDynamicObject_SC(14703, 506.95187, 1366.91003, 1080.07947,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1504, 508.85950, 1353.45654, 1075.78345,   0.00000, 0.00000, 0.00000); //Door
	CA_CreateDynamicObject_SC(14722, 510.94690, 1363.57544, 1078.67737,   0.00000, 0.00000, 0.00000); //Stairs
	CA_CreateDynamicObject_SC(14724, 510.99319, 1363.60266, 1078.67590,   0.00000, 0.00000, 0.00000); //Stairs
	CA_CreateDynamicObject_SC(14715, 510.92340, 1363.51001, 1078.70215,   0.00000, 0.00000, 0.00000); //Stairs
	CA_CreateDynamicObject_SC(14723, 510.91971, 1363.70605, 1078.84021,   0.00000, 0.00000, 0.00000); //Stairs
	//4 Room house & 2 story

	//3 Room house & strip
	CA_CreateDynamicObject_SC(14736, 755.25836, 1419.45801, 1102.58032,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(14738, 753.20190, 1415.76831, 1104.04199,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1504, 744.47321, 1411.75403, 1101.42236,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house & strip

	//2 Room house
	CA_CreateDynamicObject_SC(14713, 289.97849, 1289.53406, 1079.25183,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 294.37189, 1284.51709, 1077.43616,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CA_CreateDynamicObject_SC(14718, 188.29053, 1293.25732, 1081.13208,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 190.53439, 1288.35291, 1081.13416,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CA_CreateDynamicObject_SC(14712, 287.90448, 1249.52588, 1083.25146,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 290.09601, 1241.95874, 1081.70117,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//2 Room house
	CA_CreateDynamicObject_SC(14709, 245.01108, 1155.45520, 1081.63599,   0.00000, 0.00000, 0.00000); //Interior
	//2 Room house

	//3 Room house
	CA_CreateDynamicObject_SC(14735, 342.67169, 1081.66528, 1082.87891,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 325.45471, 1074.26355, 1081.25549,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//Richman house 5 rooms & 2 bathrooms
	CA_CreateDynamicObject_SC(14708, 200.11450, 1119.56934, 1083.97693,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms
	CA_CreateDynamicObject_SC(14706, 277.86502, 1069.62952, 1085.65552,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//Richman house 5 rooms & 2 bathrooms
	CA_CreateDynamicObject_SC(14707, 275.53461, 992.44232, 1087.27319,   0.00000, 0.00000, 0.00000); //Interior
	//Richman house 5 rooms & 2 bathrooms

	//2 Room house (Small)
	CA_CreateDynamicObject_SC(15029, 2265.87500, -1122.75220, 1049.62781,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1535, 2260.34570, -1121.88794, 1047.87683,   0.00000, 0.00000, 90.00000); //Door
	//2 Room house (Small)

	//1 Room house (Small)
	CA_CreateDynamicObject_SC(15031, 2281.78003, -1121.99768, 1049.92285,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1535, 2284.04028, -1126.90771, 1049.91650,   0.00000, 0.00000, 0.00000); //Door
	//1 Room house (Small)

	//3 Room house
	CA_CreateDynamicObject_SC(15055, 2374.03271, -1102.76465, 1049.87073,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1504, 2369.77124, -1094.13245, 1048.61951,   0.00000, 0.00000, 0.00000); //Door
	//3 Room house

	//1 Room house (Very Small)
	CA_CreateDynamicObject_SC(15042, 2318.45508, -1230.66187, 1048.40820,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1501, 2312.65112, -1231.38013, 1046.40540,   0.00000, 0.00000, 0.00000); //Door
	//1 Room house (Very Small)

	//2 Room house (Small)
	CA_CreateDynamicObject_SC(15053, 2243.98071, -1024.30042, 1048.01758,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1535, 2243.21191, -1027.78198, 1046.76501,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house (Small)

	//3 Room house
	CA_CreateDynamicObject_SC(15054, 2260.93286, -1251.45007, 1051.05786,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 2273.48657, -1243.43054, 1047.59131,   0.00000, 0.00000, 90.00000); //Door
	//3 Room house

	//4 Room house
	CA_CreateDynamicObject_SC(15041, 2158.54736, -1220.96997, 1050.11694,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 2149.11328, -1216.07935, 1048.11365,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house

	//2 Room house
	CA_CreateDynamicObject_SC(15046, 2364.22144, -1082.74231, 1048.01733,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1498, 2363.47827, -1075.46021, 1046.76379,   0.00000, 0.00000, 0.00000); //Door
	//2 Room house

	//4 Room house (Rich man big)
	CA_CreateDynamicObject_SC(15048, 2364.55444, -1179.42346, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(15059, 2364.56909, -1179.41418, 1055.79187,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1506, 2372.00317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
	CA_CreateDynamicObject_SC(1506, 2373.50317, -1184.51221, 1052.20117,   0.00000, 0.00000, 0.00000); //Door
	//4 Room house (Rich man big)

	//Only one room (TINY for las colinas)
	CA_CreateDynamicObject_SC(14859, 245.20708, 321.97745, 1000.59143,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CA_CreateDynamicObject_SC(14865, 269.22012, 322.22049, 998.14349,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CA_CreateDynamicObject_SC(14889, 363.51450, 304.98868, 998.14722,   0.00000, 0.00000, 0.00000); //Interior
	//Only one room (TINY for las colinas)

	//Only one room (TINY for las colinas)
	CA_CreateDynamicObject_SC(15033, 2177.35718, -1069.85181, 1049.47449,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1535, 2190.13110, -1074.29504, 1049.47742,   0.00000, 0.00000, 90.00000); //Door
	//Only one room (TINY for las colinas)

	//Only two rooms (TINY for las colinas)
	CA_CreateDynamicObject_SC(15034, 2254.38940, -1108.71704, 1049.87268,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(1535, 2254.09644, -1113.33044, 1048.11633,   0.00000, 0.00000, 0.00000); //Door
	//Only two rooms (TINY for las colinas)

	//Only two rooms (TINY for las colinas)
	CA_CreateDynamicObject_SC(15030, 2293.09204, -1092.09229, 1049.62341,   0.00000, 0.00000, 0.00000); //Interior
	CA_CreateDynamicObject_SC(2904, 2298.69800, -1093.70605, 1048.97290,   0.00000, 0.00000, 90.00000); //Door
	CA_CreateDynamicObject_SC(1535, 2298.64600, -1094.47375, 1047.87195,   0.00000, 0.00000, 90.00000); //Door
	//Only two rooms (TINY for las colinas)

    /*Audio_CreateTCPServer(7777);
    Audio_SetPack("default_pack");*/

	// TOLL
	/* Richman */
	CA_CreateDynamicObject_SC( 8168, 612.73895263672, -1191.4602050781, 20.294105529785, 0.000000, 5, 318.31237792969, -1 );
	CA_CreateDynamicObject_SC( 8168, 620.47265625, -1188.49609375, 20.044105529785, 0.000000, 352.99621582031, 138.94409179688, -1 );
	CA_CreateDynamicObject_SC( 966, 613.97229003906, -1197.7174072266, 17.475030899048, 0.000000, 0.000000, 23.81982421875, -1 );
	CA_CreateDynamicObject_SC( 997, 614.33209228516, -1194.3870849609, 17.709369659424, 0.000000, 0.000000, 266.70568847656, -1 );
	CA_CreateDynamicObject_SC( 973, 602.98425292969, -1202.1643066406, 18.000516891479, 0.000000, 0.000000, 19.849853515625, -1 );
	L_a_TollObject[0] = CA_CreateDynamicObject_SC( 968, 613.8935546875, -1197.7329101563, 18.109180450439, 0.000000, -90.000000, 23.81982421875, -1 );
	CA_CreateDynamicObject_SC( 966, 619.42913818359, -1181.6597900391, 18.725030899048, 0.000000, 0.000000, 214.37744140625, -1 );
	CA_CreateDynamicObject_SC( 973, 629.68823242188, -1176.0551757813, 19.500516891479, 0.000000, 0.000000, 21.831787109375, -1 );
	CA_CreateDynamicObject_SC( 997, 619.26574707031, -1181.6518554688, 18.709369659424, 0.000000, 0.000000, 268.68908691406, -1 );
	L_a_TollObject[1] = CA_CreateDynamicObject_SC( 968, 619.44201660156, -1181.6903076172, 19.525806427002, 0.000000, -90.000000, 214.37744140625, -1 );
	/* End of Richman */

	/* Flint */
	CA_CreateDynamicObject_SC( 8168, 61.256042480469, -1533.3946533203, 6.1042537689209, 0.000000, 0.000000, 9.9252624511719, -1 );
	CA_CreateDynamicObject_SC( 8168, 40.966598510742, -1529.5725097656, 6.1042537689209, 0.000000, 0.000000, 188.5712890625, -1 );
	L_a_TollObject[2] = CA_CreateDynamicObject_SC( 968, 35.838928222656, -1525.9034423828, 5.0012145042419, 0.000000, -90.000000, 270.67565917969, -1 );
	CA_CreateDynamicObject_SC( 966, 35.889751434326, -1526.0096435547, 4.2410612106323, 0.000000, 0.000000, 270.67565917969, -1 );
	CA_CreateDynamicObject_SC( 966, 67.093727111816, -1536.8275146484, 3.9910612106323, 0.000000, 0.000000, 87.337799072266, -1 );
	L_a_TollObject[3] = CA_CreateDynamicObject_SC( 968, 67.116600036621, -1536.8218994141, 4.7504549026489, 0.000000, -90.000000, 87.337799072266, -1 );
	CA_CreateDynamicObject_SC( 973, 52.9794921875, -1531.9252929688, 5.090488910675, 0.000000, 0.000000, 352.06005859375, -1 );
	CA_CreateDynamicObject_SC( 973, 49.042072296143, -1531.5065917969, 5.1758694648743, 0.000000, 0.000000, 352.05688476563, -1 );
	CA_CreateDynamicObject_SC( 997, 68.289916992188, -1546.6020507813, 4.0626411437988, 0.000000, 0.000000, 119.09942626953, -1 );
	CA_CreateDynamicObject_SC( 997, 34.5198097229, -1516.1402587891, 4.0626411437988, 0.000000, 0.000000, 292.50622558594, -1 );
	CA_CreateDynamicObject_SC( 997, 35.903915405273, -1525.8717041016, 4.0626411437988, 0.000000, 0.000000, 342.13012695313, -1 );
	CA_CreateDynamicObject_SC( 997, 63.914081573486, -1535.7126464844, 4.0626411437988, 0.000000, 0.000000, 342.130859375, -1 );
	/* End of Flint */

	/* LV */
	CA_CreateDynamicObject_SC( 8168, 1789.83203125, 703.189453125, 15.846367835999, 0.000000, 3, 99.24951171875, -1 );
	CA_CreateDynamicObject_SC( 8168, 1784.8334960938, 703.94799804688, 16.070636749268, 0.000000, 357, 278.61096191406, -1 );
	CA_CreateDynamicObject_SC( 966, 1781.4122314453, 697.32531738281, 14.636913299561, 0.000000, 0.000000, 348.09008789063, -1 );
	CA_CreateDynamicObject_SC( 996, 1767.3087158203, 700.50506591797, 15.281567573547, 0.000000, 0.000000, 346.10510253906, -1 );
	CA_CreateDynamicObject_SC( 997, 1781.6832275391, 697.34796142578, 14.698781013489, 0.000000, 3, 77.41455078125, -1 );
	CA_CreateDynamicObject_SC( 997, 1792.7745361328, 706.38543701172, 13.948781013489, 0.000000, 2.999267578125, 81.379638671875, -1 );
	CA_CreateDynamicObject_SC( 966, 1793.4289550781, 709.87982177734, 13.636913299561, 0.000000, 0.000000, 169.43664550781, -1 );
	CA_CreateDynamicObject_SC( 996, 1800.8060302734, 708.38299560547, 14.281567573547, 0.000000, 0.000000, 346.10229492188, -1 );
	L_a_TollObject[4] = CA_CreateDynamicObject_SC( 968, 1781.4133300781, 697.31750488281, 15.420023918152, 0.000000, -90.000000, 348.10229492188, -1 );
	L_a_TollObject[5] = CA_CreateDynamicObject_SC( 968, 1793.6700439453, 709.84631347656, 14.405718803406, 0.000000, -90.000000, 169.43664550781, -1 );
	/* End of LV */

	/* Blueberry right */
	CA_CreateDynamicObject_SC(966, 614.42188, 350.81711, 17.92480,   0.00000, 0.00000, 35.00000);
	CA_CreateDynamicObject_SC(966, 602.91162, 342.59781, 17.92480,   0.00000, 0.00000, 215.92000);
	L_a_TollObject[6] = CA_CreateDynamicObject_SC(968, 614.42188, 350.81711, 18.66520,   0.00000, -90.00000, 35.00000);
	L_a_TollObject[7] = CA_CreateDynamicObject_SC(968, 602.91162, 342.59781, 18.66520,   0.00000, -90.00000, 215.92000);
	/* Blueberry right */

	/* Blueberry left */
	CA_CreateDynamicObject_SC(966, -190.35580, 254.64290, 11.07090,   0.00000, 0.00000, 345.00000);
	CA_CreateDynamicObject_SC(966, -204.00880, 258.30411, 11.07090,   0.00000, 0.00000, -195.00000);
	L_a_TollObject[8] = CA_CreateDynamicObject_SC(968, -190.24850, 254.62019, 11.89360,   0.00000, -90.00000, -14.94000);
	L_a_TollObject[9] = CA_CreateDynamicObject_SC(968, -204.10410, 258.34149, 11.89360,   0.00000, -90.00000, -195.00000);
	/* Blueberry right */


	// Los Santos Police Department
	LSPDDoorObject[0] = CA_CreateDynamicObject_SC(1569, 253.2095, 107.5746, 1002.2392, 0.0000, 0.0000, 90.0000);
	LSPDDoorObject[1] = CA_CreateDynamicObject_SC(1569, 253.1822, 110.5749, 1002.2392, 0.0000, 0.0000, -90.0000);
    LSPDDoor[0] = 0;

	LSPDDoorObject[2] = CA_CreateDynamicObject_SC(1569, 239.5697, 116.1145, 1002.2392, 0.0000, 0.0000, 90.0000);
	LSPDDoorObject[3] = CA_CreateDynamicObject_SC(1569, 239.5820, 119.1149, 1002.2392, 0.0000, 0.0000, -90.0000);
	LSPDDoor[1] = 0;


    MapAndreas_Init(MAP_ANDREAS_MODE_FULL);

    SendRconCommand("hostname "SERVER_NAME"");
    SendRconCommand("weburl "SERVER_SITE"");
    SendRconCommand("mapname São Paulo");
	SendRconCommand("language Português Brasileiro");
    SetNameTagDrawDistance(25.0);
	SetGameModeText(SERVER_MODE);
	gettime(ghour, gminute, gsecond);
	FixHour(ghour);
	ghour = shifthour;
	SetWorldTime(ghour);

	ManualVehicleEngineAndLights();
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);
	CreateGuideMenus();
	BlockGarages();
	LoadGraffitis();
	//CreateBuilding();
	Create3DText();
	CreateGlobalTextDraw();
	AddVehicleRental();
	AddVehicleDMV();
	//AddHousesInteriors();

	DollaPickup[0] = CreateDynamicPickup(1274, 2, 2316.2456,-12.6722,26.7422);
	DollaPickup[1] = CreateDynamicPickup(1274, 2, 362.8532,173.7626,1008.3828);
	//DollaPickup[2] = CreateDynamicPickup(1274, 2, 362.8532,173.7626,1008.3828);

	//news pickup
	NewsPickup = CreateDynamicPickup(1239, 2, 1663.4677,-2332.1433,-2.6797);
	FarmerPickup = CreateDynamicPickup(1239, 2, -382.5893,-1426.3422,26.2217);
	MechanicPickup = CreateDynamicPickup(1239, 2, 88.4620,-165.0116,2.5938);



    ArrestPickup = CreateDynamicPickup(1239, 23, 227.4311,114.2517,999.0156, -1, 10);

	//TOLLS
	L_a_Pickup[0] = CreateDynamicPickup(1239, 14, 607.9684, -1194.2866, 19.0043, 0); //  Richman 1
	L_a_Pickup[1] = CreateDynamicPickup(1239, 14, 623.9500, -1183.9774, 19.2260, 0); // Richman 2
	L_a_Pickup[2] = CreateDynamicPickup(1239, 14, 39.7039, -1522.9891, 6.1995, 0); // Flint 1
	L_a_Pickup[3] = CreateDynamicPickup(1239, 14, 62.7378, -1539.9891, 6.0639, 0); // Flint 2
	L_a_Pickup[4] = CreateDynamicPickup(1239, 14, 1795.9447, 704.2550, 15.0006, 0); // LV 1
	L_a_Pickup[5] = CreateDynamicPickup(1239, 14, 1778.9886, 702.6728, 15.2574, 0); // LV 2
	L_a_Pickup[6] = CreateDynamicPickup(1239, 14, 612.53070, 346.59592, 17.92614, 0); // BlueberryR 1
	L_a_Pickup[7] = CreateDynamicPickup(1239, 14, 604.37152, 346.88141, 17.92614, 0); // BlueberryR 2
	L_a_Pickup[8] = CreateDynamicPickup(1239, 14, -195.2768,252.2416,12.0781, 0); // BlueberryL 1
	L_a_Pickup[9] = CreateDynamicPickup(1239, 14, -199.5153,260.3405,12.0781, 0); // BlueberryL 2

	// CARGO SHIP
	gMainShipObjectId = CreateObject(5160, gShipRoutePoints[0][0], gShipRoutePoints[0][1], gShipRoutePoints[0][2], gShipRoutePoints[0][3], gShipRoutePoints[0][4], gShipRoutePoints[0][5]);

	gShipRamp1 = CreateDynamicObject(3069, 2810.9445, -2387.2998, 12.6255, -20.4000, 0.0000, -90.3000); //d9_ramp
	gShipRamp2 = CreateDynamicObject(3069, 2810.6875, -2436.9775, 12.6250, -20.4000, 0.0000, -90.3000); //d9_ramp

	new x=0;
	while(x != NUM_SHIP_ATTACHMENTS) {
	    gShipsAttachments[x] = CreateObject(gShipAttachmentModelIds[x], 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
		AttachObjectToObject(gShipsAttachments[x], gMainShipObjectId,
					gShipAttachmentPos[x][0],
					gShipAttachmentPos[x][1],
					gShipAttachmentPos[x][2],
					gShipAttachmentPos[x][3],
					gShipAttachmentPos[x][4],
					gShipAttachmentPos[x][5]);
		x++;
	}

	SetTimer("RampsClosed",2400000, 0);

	CreateDynamicObject(3077, 2809.9897, -2392.7746, 12.6257, 0.0000, 0.0000, 90.3998);

	gShipTextLine1 = CreateDynamicObject(19482, 2809.9184, -2392.7329, 15.2910, 0.0000, 0.0000, 180.0000);
    SetDynamicObjectMaterialText(gShipTextLine1, 0, "OCEAN DOCKS SHIP", OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

    gShipTime = gettime();

 	new gShipHour, gShipMinute, gShipSecond;
    TimestampToTime(gShipTime + 2440, gShipHour, gShipMinute, gShipSecond);

	gShipTextLine2 = CreateDynamicObject(19482, 2809.9284, -2392.7329, 14.6810, 0.0000, 0.0000, 180.0000);
	format(szString, sizeof(szString), "Saida: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
	SetDynamicObjectMaterialText(gShipTextLine2, 0, szString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);
	gShipTextLine3 = CreateDynamicObject(19482, 2809.9184, -2392.7329, 14.2610, 0.0000, 0.0000, 180.0000);
	format(szString, sizeof(szString), "Proxima chegada: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
	SetDynamicObjectMaterialText(gShipTextLine3, 0, szString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

	Streamer_TickRate(60);
	Streamer_VisibleItems(STREAMER_TYPE_OBJECT, 500);

	servertime[0] = SetTimer("OtherTimer", 1000, true);
    servertime[1] = SetTimer("Spectator", 2000, true);
	servertime[2] = SetTimer("SyncUp", 240000, true);
	servertime[3] = SetTimer("Production", 300000, true); //5 mins (300000)
	//servertime[4] = SetTimer("FastTimer", 500, true);
	servertime[4] = SetTimer("VehicleListener", 1290, true);
	//servertime[5] = SetTimer("HUDUpdate", 1000, true);
	SetTimer("setAdmin", 10000, true);
	SetTimer("GlobalSaving", 5000, true);
	//SetTimer("Timer_Segundos", 1000, true);
	SetTimer("simulato", 10000, true);
	//SetTimer("gerandoFaturas", 100000, true);
	


    WasteDeAMXersTime();
    systemVariables[OOCStatus]=1;

	SetTimer("LoadHouseMaterials", 5000, false);
	SetTimer("LoadBizzMaterials", 10000, false);
/*	for(new id = 0; id != MAX_GRAFFITI; id++)
	{
		new string[20];
		format(string, sizeof(string), "/Graffitis/%d.ini", id);
		dini_Create(string);

		new rdmodel = random(sizeof(graffiti_SprayTag));

		strmid(graff_Info[id][graffname], "", 0, 60, 60);
		strmid(graff_Info[id][graffcreator], "Server", 0, 25, 25);

		graff_Info[id][graffmodel] = graffiti_SprayTag[rdmodel][0];
		graff_Info[id][Xpos] = gSprayTag[id][0];
		graff_Info[id][Ypos] = gSprayTag[id][1];
		graff_Info[id][Zpos] = gSprayTag[id][2];
		graff_Info[id][XYpos] = 0;
		graff_Info[id][YYpos] = 0;
		graff_Info[id][ZYpos] = 0;

		format(graff_Info[id][grafffont], 16, "Diploma");

		graff_Info[id][graffObject] = CreateDynamicObject(graff_Info[id][graffmodel], graff_Info[id][Xpos],graff_Info[id][Ypos],graff_Info[id][Zpos], graff_Info[id][XYpos], graff_Info[id][YYpos], graff_Info[id][ZYpos], -1, 0, -1, 200 ); //Creating the object
	}
	SaveGraffitis();*/

	CA_Init();
	return 1;
}

forward CarregandoGoverno();
public CarregandoGoverno()
{
    new Rows = cache_num_rows();
	if(Rows) {
  		new tmp[255];

		for(new i ; i < Rows; i++) {
		    cache_get_value_name_int(i, "cofres", GovInfo[gCofres]);
		    /*cache_get_value_name_int(i, "taxa", GovInfo[gTaxa]);
		    cache_get_value_name_int(i, "taxaluz", GovInfo[gTaxaLuz]);
		    cache_get_value_name_int(i, "taxahp", GovInfo[gTaxaHP]);
		    cache_get_value_name_int(i, "convenio", GovInfo[gConvenio]);
		    cache_get_value_name_int(i, "salariomin", GovInfo[gSalarioMin]);*/

		    cache_get_value(i, "salariosgov", tmp, 255);
			sscanf(tmp, "p<|>iiiiiiiiiiiiiiiiiiii",
				GovInfo[gSalarioGOV][0],
				GovInfo[gSalarioGOV][1],
				GovInfo[gSalarioGOV][2],
				GovInfo[gSalarioGOV][3],
				GovInfo[gSalarioGOV][4],
				GovInfo[gSalarioGOV][5],
				GovInfo[gSalarioGOV][6],
				GovInfo[gSalarioGOV][7],
				GovInfo[gSalarioGOV][8],
				GovInfo[gSalarioGOV][9],
				GovInfo[gSalarioGOV][10],
				GovInfo[gSalarioGOV][11],
				GovInfo[gSalarioGOV][12],
				GovInfo[gSalarioGOV][13],
				GovInfo[gSalarioGOV][14],
				GovInfo[gSalarioGOV][15],
				GovInfo[gSalarioGOV][16],
				GovInfo[gSalarioGOV][17],
				GovInfo[gSalarioGOV][18],
				GovInfo[gSalarioGOV][19]);

			cache_get_value(i, "salariospm", tmp, 255);
			sscanf(tmp, "p<|>iiiiiiiiiiiiiiiiiiii",
				GovInfo[gSalarioPM][0],
				GovInfo[gSalarioPM][1],
				GovInfo[gSalarioPM][2],
				GovInfo[gSalarioPM][3],
				GovInfo[gSalarioPM][4],
				GovInfo[gSalarioPM][5],
				GovInfo[gSalarioPM][6],
				GovInfo[gSalarioPM][7],
				GovInfo[gSalarioPM][8],
				GovInfo[gSalarioPM][9],
				GovInfo[gSalarioPM][10],
				GovInfo[gSalarioPM][11],
				GovInfo[gSalarioPM][12],
				GovInfo[gSalarioPM][13],
				GovInfo[gSalarioPM][14],
				GovInfo[gSalarioPM][15],
				GovInfo[gSalarioPM][16],
				GovInfo[gSalarioPM][17],
				GovInfo[gSalarioPM][18],
				GovInfo[gSalarioPM][19]);

			cache_get_value(i, "salariosbomb", tmp, 255);
			sscanf(tmp, "p<|>iiiiiiiiiiiiiiiiiiii",
				GovInfo[gSalarioBOMB][0],
				GovInfo[gSalarioBOMB][1],
				GovInfo[gSalarioBOMB][2],
				GovInfo[gSalarioBOMB][3],
				GovInfo[gSalarioBOMB][4],
				GovInfo[gSalarioBOMB][5],
				GovInfo[gSalarioBOMB][6],
				GovInfo[gSalarioBOMB][7],
				GovInfo[gSalarioBOMB][8],
				GovInfo[gSalarioBOMB][9],
				GovInfo[gSalarioBOMB][10],
				GovInfo[gSalarioBOMB][11],
				GovInfo[gSalarioBOMB][12],
				GovInfo[gSalarioBOMB][13],
				GovInfo[gSalarioBOMB][14],
				GovInfo[gSalarioBOMB][15],
				GovInfo[gSalarioBOMB][16],
				GovInfo[gSalarioBOMB][17],
				GovInfo[gSalarioBOMB][18],
				GovInfo[gSalarioBOMB][19]);
		}
	}
	printf("[CARREGADO] Governo | Cofres: %d", GovInfo[gCofres]);
	return 1;
}

forward SalvarGoverno();
public SalvarGoverno()
{

    new salariosgov[255];
    format(salariosgov, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",
		GovInfo[gSalarioGOV][0],
		GovInfo[gSalarioGOV][1],
		GovInfo[gSalarioGOV][2],
		GovInfo[gSalarioGOV][3],
		GovInfo[gSalarioGOV][4],
		GovInfo[gSalarioGOV][5],
		GovInfo[gSalarioGOV][6],
		GovInfo[gSalarioGOV][7],
		GovInfo[gSalarioGOV][8],
		GovInfo[gSalarioGOV][9],
		GovInfo[gSalarioGOV][10],
		GovInfo[gSalarioGOV][11],
		GovInfo[gSalarioGOV][12],
		GovInfo[gSalarioGOV][13],
		GovInfo[gSalarioGOV][14],
		GovInfo[gSalarioGOV][15],
		GovInfo[gSalarioGOV][16],
		GovInfo[gSalarioGOV][17],
		GovInfo[gSalarioGOV][18],
		GovInfo[gSalarioGOV][19]);

    new salariospm[255];
    format(salariospm, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",
		GovInfo[gSalarioPM][0],
		GovInfo[gSalarioPM][1],
		GovInfo[gSalarioPM][2],
		GovInfo[gSalarioPM][3],
		GovInfo[gSalarioPM][4],
		GovInfo[gSalarioPM][5],
		GovInfo[gSalarioPM][6],
		GovInfo[gSalarioPM][7],
		GovInfo[gSalarioPM][8],
		GovInfo[gSalarioPM][9],
		GovInfo[gSalarioPM][10],
		GovInfo[gSalarioPM][11],
		GovInfo[gSalarioPM][12],
		GovInfo[gSalarioPM][13],
		GovInfo[gSalarioPM][14],
		GovInfo[gSalarioPM][15],
		GovInfo[gSalarioPM][16],
		GovInfo[gSalarioPM][17],
		GovInfo[gSalarioPM][18],
		GovInfo[gSalarioPM][19]);

    new salariosbom[255];
    format(salariosbom, 255, "%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d",
		GovInfo[gSalarioBOMB][0],
		GovInfo[gSalarioBOMB][1],
		GovInfo[gSalarioBOMB][2],
		GovInfo[gSalarioBOMB][3],
		GovInfo[gSalarioBOMB][4],
		GovInfo[gSalarioBOMB][5],
		GovInfo[gSalarioBOMB][6],
		GovInfo[gSalarioBOMB][7],
		GovInfo[gSalarioBOMB][8],
		GovInfo[gSalarioBOMB][9],
		GovInfo[gSalarioBOMB][10],
		GovInfo[gSalarioBOMB][11],
		GovInfo[gSalarioBOMB][12],
		GovInfo[gSalarioBOMB][13],
		GovInfo[gSalarioBOMB][14],
		GovInfo[gSalarioBOMB][15],
		GovInfo[gSalarioBOMB][16],
		GovInfo[gSalarioBOMB][17],
		GovInfo[gSalarioBOMB][18],
		GovInfo[gSalarioBOMB][19]);

	new stringOn[1024];
    format(stringOn, sizeof(stringOn),"UPDATE `governo` SET `cofres`=%d",
		GovInfo[gCofres]);
		//GovInfo[gTaxa],
		//GovInfo[gTaxaLuz],
		//GovInfo[gTaxaHP],
		//GovInfo[gConvenio],
		//GovInfo[gSalarioMin],
		//GovInfo[gTollCost]);

	format(stringOn, sizeof(stringOn),"%s, `salariospm`='%s'", stringOn, salariospm);
	format(stringOn, sizeof(stringOn),"%s, `salariosgov`='%s',`salariosbomb`='%s' WHERE `id`= 1", stringOn, salariosgov,salariosbom);
	mysql_query(dbCon, stringOn);

	print("[SAVE]: Governo Salvo.");
	return 1;
}

forward LoadHouseMaterials();
public LoadHouseMaterials() {

	foreach(new houseid : sv_houses)
	{
	    for(new x=0;x!=MAX_FURNITURE;x++ ) if(HouseFurniture[houseid][x][fOn]) {
			for(new i=0;i!=MAX_MATERIAL;i++ ) if(HouseMaterial[x][i][mOn]) {
				SetDynamicObjectMaterial(HouseFurniture[houseid][x][fObject], HouseMaterial[x][i][mIndex], HouseMaterial[x][i][mModel], HouseMaterial[x][i][mTxd], HouseMaterial[x][i][mTexture], HexToInt(HouseMaterial[x][i][mColor]));
			}
		}
	}
	return 1;
}

forward LoadBizzMaterials();
public LoadBizzMaterials() {

	foreach(new houseid : sv_business)
	{
	    for(new x=0;x!=MAX_FURNITURE;x++ ) if(BizFurniture[houseid][x][fOn]) {
			for(new i=0;i!=MAX_MATERIAL;i++ ) if(BizMaterial[x][i][mOn]) {
				SetDynamicObjectMaterial(BizFurniture[houseid][x][fObject], BizMaterial[x][i][mIndex], BizMaterial[x][i][mModel], BizMaterial[x][i][mTxd], BizMaterial[x][i][mTexture], HexToInt(BizMaterial[x][i][mColor]));
			}
		}
	}
	return 1;
}

stock IncreaseTime(&hh = 0, &mm = 0, &ss = 0)
{
	if(ss > 59)
	{
	    mm++;
	    ss= ss - 60;
	}

	if(mm > 59)
	{
	    hh++;
	    mm= mm - 60;
	}

	if(hh > 23)
	{
	    hh = hh - 24;
	}
	return 1;
}

public OnGameModeExit()
{
    for(new i=0; i != MAX_TIME;++i) KillTimer(servertime[i]);

    DestroyObject(gMainShipObjectId);
    new x=0;
	while(x != NUM_SHIP_ATTACHMENTS) {
	    DestroyObject(gShipsAttachments[x]);
		x++;
	}


	return 1;
}

// Main Functions

WasteDeAMXersTime()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}

SQL_Connect() {

	dbCon = mysql_connect(SQL_HOSTNAME, SQL_USERNAME, SQL_PASSWORD, SQL_DATABASE);

	if (mysql_errno(dbCon)) printf("[SQL] conexão ao banco de dados \"%s\" falhou! Verifique as configurações...\a", SQL_HOSTNAME);
	else printf("[SQL] conexão ao banco de dados \"%s\" feita com sucesso!", SQL_HOSTNAME);

	return true;
}

SQL_CheckAccount(playerid)
{
	new
	    query[128];

    format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `charName` = '%s'", ReturnName(playerid));
	mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_FIND_CHARACTER);
}

SQL_CheckBanAccount(playerid)
{
	new
	    query[256];

 	format(query, sizeof(query), "SELECT * FROM `blacklist` WHERE (Username = '%s' AND perm = 1) OR (Username = '%s' AND Expire > NOW() AND perm = 0) OR (IP = '%s' AND perm = 1) OR (IP = '%s' AND Expire > NOW() AND perm = 0)", AccountData[playerid][aUsername], AccountData[playerid][aUsername], PlayerData[playerid][pIP], PlayerData[playerid][pIP]);
	mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_BLACKLIST_LOOKUP);
}

SQL_ForceLogin(playerid)
{
	format(largeQuery, sizeof(largeQuery), "SELECT *, UNIX_TIMESTAMP(DonateExpired) as DonateUnix FROM `characters` WHERE `charName` = '%s'", ReturnName(playerid));
    mysql_tquery(dbCon, largeQuery, "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTER);
}

SQL_AttemptLogin(playerid, const password[])
{
	new
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `charName` = '%s' AND `Password` = '%s'", ReturnName(playerid), buffer);
    mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);
}

SQL_SecretLogin(playerid, password[])
{
	new
		query[256];

	new clean_password[32];
	mysql_escape_string(password,clean_password);

	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `charName` = '%s' AND `Secret` = '%s'", ReturnName(playerid), clean_password);
	mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_SECRET_CONFIRM);
}

SQL_LogConnection(playerid)
{
	new query[128];
	format(query,sizeof(query),"INSERT INTO logs_connection (name,ip) VALUES ('%s','%s')",ReturnName(playerid),PlayerData[playerid][pIP]);
	mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_LOG_CON);

}

SQL_LogPlayerDeath(playerid,killerid,reason)
{

	new name[MAX_PLAYER_NAME], oname[MAX_PLAYER_NAME];
	ReturnCharacterName(playerid,name);
	if(SQL_IsLogged(killerid)) ReturnCharacterName(killerid,oname);

	new clean_name[MAX_PLAYER_NAME], clean_oname[MAX_PLAYER_NAME];
	mysql_escape_string(name,clean_name);
	if(SQL_IsLogged(playerid)) { mysql_escape_string(oname,clean_oname); } else { format(clean_oname,sizeof(clean_oname),"No-one"); }

	new str[128];
	format(str,sizeof(str),"INSERT INTO logs_death (killer,victim,reason) VALUES ('%s','%s','%d')",clean_oname,clean_name,reason);

	mysql_query(dbCon, str);

}

stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_escape_string(string, entry);
	return entry;
}

stock SQL_IsLogged(playerid) {
	if(playerid != INVALID_PLAYER_ID && BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED) && IsPlayerConnected(playerid)) return 1;
	return 0;
}

// valstr fix by Slice
stock Int32(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value), pack && strpack(dest, dest, 12);
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 1.5, fX, fY, fZ);
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 1.5, fX, fY, fZ);
}

stock IsPlayerNearDriverDoor(playerid, vehicleid)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleDriverDoor(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 2.0, fX, fY, fZ);
}

/*stock GetVehicleFromBehind(vehicleid)
{
	new
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}*/

/*GetXYFrontVehicle(vehicleid, &Float:q, &Float:w, Float:distance)
{
    new Float:a;
    GetVehiclePos(vehicleid, q, w, a);
    GetVehicleZAngle(vehicleid, a);
    q += (distance * -floatsin(-a+180, degrees));
    w += (distance * -floatcos(-a+180, degrees));
}

stock GetPosBehindVehicle(vehicleid, &Float:x, &Float:y, &Float:z, Float:offset=0.5)
{
    new Float:vehicleSize[3], Float:vehiclePos[3];
    GetVehiclePos(vehicleid, vehiclePos[0], vehiclePos[1], vehiclePos[2]);
    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);
    GetXYBehindVehicle(vehicleid, vehiclePos[0], vehiclePos[1], (vehicleSize[1]/2)+offset);
    x = vehiclePos[0];
    y = vehiclePos[1];
    z = vehiclePos[2];
    return 1;
}
*/
stock GetVehicleDriverDoor(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;

	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);
	//Front wheel
	/*x = pos[3] + (((pos[0]/2)+1.0) * -floatsin(-pos[6]+135, degrees));
	y = pos[4] + (((pos[0]/2)+1.0) * -floatcos(-pos[6]+135, degrees));*/

	//Driver's door 1.0 150
	//
	switch(GetVehicleModel(vehicleid))
	{
	    case 431, 407, 408, 437:
	    {
		 	x = pos[3] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[1]))) * floatsin(-pos[6]+315.0+floatsqroot(pos[1] + pos[1]), degrees));
			y = pos[4] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[1]))) * floatcos(-pos[6]+315.0+floatsqroot(pos[1] + pos[1]), degrees));
	    }
	    default:
	    {
			x = pos[3] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[0]))) * floatsin(-pos[6]+300.0+floatsqroot(pos[1] + pos[1]), degrees));
			y = pos[4] + ((floatsqroot(pos[1] + pos[1])/(floatsqroot(pos[1]))*floatsqroot(pos[1] + pos[1])/(pos[1]/floatsqroot(pos[0]))) * floatcos(-pos[6]+300.0+floatsqroot(pos[1] + pos[1]), degrees));
	    }
	}

	z = pos[5];

	return 1;
}

/*CMD:vset(playerid, params[])
{
	new vid;

	if (sscanf(params, "dff", vid, vvvg, vvvb))
		return SendSyntaxMessage(playerid, "/vset [vehicleid] [vvvg] [vvvb]");

	new Float:x, Float:y, Float:z;
    GetVehicleDriverDoor(vid, x, y, z);
    SetPlayerCheckpoint(playerid, x, y, z, 1.0);

	return 1;
}*/

stock GetVehicleBootInside(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/2.3)) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/2.3)) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}





stock GetVehicleHoodInside(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/1.5)) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1] - ((pos[1]+pos[1])/1.5)) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleInside(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	new
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (-0.25 * floatsin(-pos[6], degrees));
	y = pos[4] - (-0.25 * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
     PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock ConvertTime(&cts, &ctm=-1,&cth=-1,&ctd=-1,&ctw=-1,&ctmo=-1,&cty=-1)
{
    #define PLUR(%0,%1,%2) (%0),((%0) == 1)?((#%1)):((#%2))

    #define CTM_cty 31536000
    #define CTM_ctmo 2628000
    #define CTM_ctw 604800
    #define CTM_ctd 86400
    #define CTM_cth 3600
    #define CTM_ctm 60

    #define CT(%0) %0 = cts / CTM_%0; cts %= CTM_%0

    new strii[128];

    if(cty != -1 && (cts/CTM_cty))
    {
        CT(cty); CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, %d %s, e %d %s",PLUR(cty,"ano","anos"),PLUR(ctmo,"mês","meses"),PLUR(ctw,"semana","semanas"),PLUR(ctd,"dia","dias"),PLUR(cth,"hora","horas"),PLUR(ctm,"minuto","minutos"),PLUR(cts,"segundo","segundos"));
        return strii;
    }
    if(ctmo != -1 && (cts/CTM_ctmo))
    {
        cty = 0; CT(ctmo); CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, %d %s, e %d %s",PLUR(ctmo,"mês","meses"),PLUR(ctw,"semana","semanas"),PLUR(ctd,"dia","dias"),PLUR(cth,"hora","horas"),PLUR(ctm,"minuto","minutos"),PLUR(cts,"segundo","segundos"));
        return strii;
    }
    if(ctw != -1 && (cts/CTM_ctw))
    {
        cty = 0; ctmo = 0; CT(ctw); CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, %d %s, e %d %s",PLUR(ctw,"semana","semanas"),PLUR(ctd,"dia","dias"),PLUR(cth,"hora","horas"),PLUR(ctm,"minuto","minutos"),PLUR(cts,"segundo","segundos"));
        return strii;
    }
    if(ctd != -1 && (cts/CTM_ctd))
    {
        cty = 0; ctmo = 0; ctw = 0; CT(ctd); CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, %d %s, e %d %s",PLUR(ctd,"dia","dias"),PLUR(cth,"hora","horas"),PLUR(ctm,"minuto","minutos"),PLUR(cts,"segundo","segundos"));
        return strii;
    }
    if(cth != -1 && (cts/CTM_cth))
    {
        cty = 0; ctmo = 0; ctw = 0; ctd = 0; CT(cth); CT(ctm);
        format(strii, sizeof(strii), "%d %s, %d %s, e %d %s",PLUR(cth,"hora","horas"),PLUR(ctm,"minuto","minutos"),PLUR(cts,"segundo","segundos"));
        return strii;
    }
    if(ctm != -1 && (cts/CTM_ctm))
    {
        cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; CT(ctm);
        format(strii, sizeof(strii), "%d %s, e %d %s",PLUR(ctm,"minuto","minutos"),PLUR(cts,"segundo","segundos"));
        return strii;
    }
    cty = 0; ctmo = 0; ctw = 0; ctd = 0; cth = 0; ctm = 0;
    format(strii, sizeof(strii), "%d %s", PLUR(cts,"segundo","segundos"));
    return strii;
}


// ================== [ PHONE SYSTEM ] ============================
stock PlayPlayerCallTone(playerid)
{
	switch(ph_CallTone[playerid])
	{
	    case 0: PlayerPlaySoundEx(playerid, 23000);
	    case 1: PlayerPlaySoundEx(playerid, 20600);
	    case 2: PlayerPlaySoundEx(playerid, 20804);
	}
}

stock PlayPlayerTextTone(playerid)
{
	switch(ph_TextTone[playerid])
	{
	    case 0: PlayerPlaySound(playerid, 41603, 0.0, 0.0, 0.0);
	    case 1: PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
	    case 2: PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);
	    case 3: PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);
	}
}
// ================== [ PHONE SYSTEM ] ============================

ReturnVehicleModelNameEx(model)
{
	new
	    name[32] = "não possui";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);

	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == ' ') name[i] = '_';

	return name;
}

ReturnVehicleModelName(model)
{
	new
	    name[32] = "não possui";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

stock GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

stock GetWeaponByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 0 && strval(name) <= 43))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrWeaponNames); i ++)
	{
	    if (strfind(g_arrWeaponNames[i], name, true) != -1)
	    {
	        return i;
		}
	}
	return -1;
}

stock IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

stock IsPlayerIdle(playerid) {
	new
	    index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192) || (index == 1151));
}

ReturnWeaponName(weaponid)
{
	static
		name[24];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "não possui";

	else if (weaponid == 30)
	    name = "AK-47";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

ReturnWeaponNameEx(weaponid)
{
	static
		name[24];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "Punch";

	else if (weaponid == 30)
	    name = "AK-47";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

GetWeaponPackageName(weaponid)
{
	static
		name[24];

	if (weaponid == 47) {
	    name = "Colete";
	    return name;
	}
	else if (weaponid == 48) {
	    name = "veículo bomba";
	    return name;
	}
	else {

		GetWeaponName(weaponid, name, sizeof(name));

		if (!weaponid)
		    name = "Vazio";

		else if (weaponid == 23)
		    name = "Silenced Pistol";

		else if (weaponid == 30)
		    name = "AK47";

        return name;
	}
}


ReturnName(playerid, underscore=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_MASK)) {
            format(name, sizeof(name), "[Mascarado %s]", PlayerData[playerid][pMask_Name]);
        }
        else {
        	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' '; // RP
        }
	}
	return name;
}

ReturnNameEx(playerid)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' '; // RP

	return name;
}

ReturnCharacterName(playerid,formatme[])
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

    for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

	return format(formatme,MAX_PLAYER_NAME + 1, name);
}

ReturnIP(playerid)
{
	static
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

stock ReturnSiteDate()
{
	new date[128];
	new year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	format(date, sizeof(date), "%d-%02d-%02d %02d:%02d:%02d", year, month, day, hour, minute, second);
	return date;
}

ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnDateTime()
{
 	static
	    szDay[64],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(szDay, sizeof(szDay), "%d%s %s %d, %02d:%02d:%02d", date[0], returnOrdinal(date[0]), MonthDay[date[1] - 1], date[2], date[3], date[4], date[5]);

	return szDay;
}

ReturnPhoneDateTime()
{
 	static
	    szDay[64],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(szDay, sizeof(szDay), "%s %d %d, %02d:%02d", szMonthDay[date[1] - 1], date[0], date[2], date[3], date[4]);

	return szDay;
}

stock returnOrdinal(number)
{
	new
	    ordinal[4][3] = { " ", " ", " ", " " }
	;
	number = number < 0 ? -number : number;
	return (((10 < (number % 100) < 14)) ? ordinal[3] : (0 < (number % 10) < 4) ? ordinal[((number % 10) - 1)] : ordinal[3]);
}

KickEx(playerid)
{
	if (BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_KICKED)) return 0;

	BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_KICKED);


	/*if(IsValidDynamic3DTextLabel(cNametag[playerid]))
              DestroyDynamic3DTextLabel(cNametag[playerid]);*/

	return SetTimerEx("KickTimer", 400, false, "d", playerid);
}

stock Kicklog_Add(ip[], character[], kicker[], reason[])
{
	new
	    str[128];

	format(str, sizeof(str), "INSERT INTO `logs_kick` (`IP`, `charName`, `KickedBy`, `Reason`, `Date`) VALUES('%s', '%s', '%s', '%s', '%s')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(charName),
		SQL_ReturnEscaped(kicker),
		SQL_ReturnEscaped(reason),
		ReturnDate()
	);
	mysql_query(dbCon, str);
}

stock ClearChatBox(playerid) for (new i = 0; i < 100; i ++) SendClientMessage(playerid, -1, "");

forward KickTimer(playerid);
public KickTimer(playerid)
{
	if (BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_KICKED)) return Kick(playerid);
	return 0;
}

/*forward Minutos();
public Minutos(){
	SalvamentoPlayer();
	return 1;
}*/

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++)
		ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);

	return 1;
}

stock ProxDetector(playerid, Float:radius, const str[])
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach (new i : Player)
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);

			if (((tempposx < radius/16) && (tempposx > -radius/16)) && ((tempposy < radius/16) && (tempposy > -radius/16)) && ((tempposz < radius/16) && (tempposz > -radius/16)))
			{
				SendClientMessage(i, COLOR_FADE1, str);
			}
			else if (((tempposx < radius/8) && (tempposx > -radius/8)) && ((tempposy < radius/8) && (tempposy > -radius/8)) && ((tempposz < radius/8) && (tempposz > -radius/8)))
			{
				SendClientMessage(i, COLOR_FADE2, str);
			}
			else if (((tempposx < radius/4) && (tempposx > -radius/4)) && ((tempposy < radius/4) && (tempposy > -radius/4)) && ((tempposz < radius/4) && (tempposz > -radius/4)))
			{
				SendClientMessage(i, COLOR_FADE3, str);
			}
			else if (((tempposx < radius/2) && (tempposx > -radius/2)) && ((tempposy < radius/2) && (tempposy > -radius/2)) && ((tempposz < radius/2) && (tempposz > -radius/2)))
			{
				SendClientMessage(i, COLOR_FADE4, str);
			}
			else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
			{
				SendClientMessage(i, COLOR_FADE5, str);
			}
		}
	}
	return 1;
}

stock ProxDetectorOOC(playerid, Float:radius, const str[])
{
	new Float:posx, Float:posy, Float:posz;
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;

	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach (new i : Player)
	{
		if(GetPlayerInterior(playerid) == GetPlayerInterior(i) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && !BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_LOCALOOC))
		{
			GetPlayerPos(i, posx, posy, posz);
			tempposx = (oldposx -posx);
			tempposy = (oldposy -posy);
			tempposz = (oldposz -posz);

			if (((tempposx < radius/16) && (tempposx > -radius/16)) && ((tempposy < radius/16) && (tempposy > -radius/16)) && ((tempposz < radius/16) && (tempposz > -radius/16)))
			{
				SendClientMessage(i, COLOR_FADE1, str);
			}
			else if (((tempposx < radius/8) && (tempposx > -radius/8)) && ((tempposy < radius/8) && (tempposy > -radius/8)) && ((tempposz < radius/8) && (tempposz > -radius/8)))
			{
				SendClientMessage(i, COLOR_FADE2, str);
			}
			else if (((tempposx < radius/4) && (tempposx > -radius/4)) && ((tempposy < radius/4) && (tempposy > -radius/4)) && ((tempposz < radius/4) && (tempposz > -radius/4)))
			{
				SendClientMessage(i, COLOR_FADE3, str);
			}
			else if (((tempposx < radius/2) && (tempposx > -radius/2)) && ((tempposy < radius/2) && (tempposy > -radius/2)) && ((tempposz < radius/2) && (tempposz > -radius/2)))
			{
				SendClientMessage(i, COLOR_FADE4, str);
			}
			else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
			{
				SendClientMessage(i, COLOR_FADE5, str);
			}
		}
	}
	return 1;
}

stock ProxJoinServer(playerid, Float:radius, const str[])
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	GetPlayerPos(playerid, oldposx, oldposy, oldposz);

	foreach (new i : Player)
	{
		if(playerid == i) continue;

        new Float:posx, Float:posy, Float:posz;
		GetPlayerPos(i, posx, posy, posz);
		new Float:tempposx = (oldposx -posx), Float:tempposy = (oldposy -posy), Float:tempposz = (oldposz -posz);

		if (((tempposx < radius/16) && (tempposx > -radius/16)) && ((tempposy < radius/16) && (tempposy > -radius/16)) && ((tempposz < radius/16) && (tempposz > -radius/16)))
		{
			SendClientMessage(i, COLOR_GRAD1, str);
		}
		else if (((tempposx < radius/8) && (tempposx > -radius/8)) && ((tempposy < radius/8) && (tempposy > -radius/8)) && ((tempposz < radius/8) && (tempposz > -radius/8)))
		{
			SendClientMessage(i, COLOR_GRAD2, str);
		}
		else if (((tempposx < radius/4) && (tempposx > -radius/4)) && ((tempposy < radius/4) && (tempposy > -radius/4)) && ((tempposz < radius/4) && (tempposz > -radius/4)))
		{
			SendClientMessage(i, COLOR_GRAD3, str);
		}
		else if (((tempposx < radius/2) && (tempposx > -radius/2)) && ((tempposy < radius/2) && (tempposy > -radius/2)) && ((tempposz < radius/2) && (tempposz > -radius/2)))
		{
			SendClientMessage(i, COLOR_GRAD4, str);
		}
		else if (((tempposx < radius) && (tempposx > -radius)) && ((tempposy < radius) && (tempposy > -radius)) && ((tempposz < radius) && (tempposz > -radius)))
		{
			SendClientMessage(i, COLOR_GRAD5, str);
		}
		else if (BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_JOIN))
		{
			SendClientMessage(i, COLOR_GRAD1, str);
		}
	}
	return 1;
}

stock SendRadioMessage(playerid, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {

			if (PlayerData[i][pRChannel] == PlayerData[playerid][pRChannel] && PlayerData[i][pRSlot] == PlayerData[playerid][pRSlot])
				SendClientMessage(i, 0xEED77BFF, string);

			/*if(PlayerData[i][pMole] == playerid)
        	{
        	    strins(string,"[MOLE] ",0, 12);
        	    SendClientMessage(i, 0xEED77BFF, string);
        	}*/
		}
		return 1;
	}
	foreach (new i : Player) {

	    if (PlayerData[i][pRChannel] == PlayerData[playerid][pRChannel] && PlayerData[i][pRSlot] == PlayerData[playerid][pRSlot])
 			SendClientMessage(i, 0xEED77BFF, str);

		/*if(PlayerData[i][pMole] == playerid)
      	{
			format(string, sizeof(string), str);
        	strins(string,"[MOLE] ",0, 12);
        	SendClientMessage(i, 0xEED77BFF, string);
       	}*/
	}
	return 1;
}

stock SendRadioMessageEx(slot, playerid, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) {

			if (PlayerData[i][pRChannel] == PlayerData[playerid][pRChannel] && PlayerData[i][pRSlot] == slot)
				SendClientMessage(i, 0xEED77BFF, string);

			/*if(PlayerData[i][pMole] == playerid)
        	{
        	    strins(string,"[MOLE] ",0, 12);
        	    SendClientMessage(i, 0xEED77BFF, string);
        	}*/
		}
		return 1;
	}
	foreach (new i : Player) {

	    if (PlayerData[i][pRChannel] == PlayerData[playerid][pRChannel] && PlayerData[i][pRSlot] == slot)
 			SendClientMessage(i, 0xEED77BFF, str);

		/*if(PlayerData[i][pMole] == playerid)
      	{
			format(string, sizeof(string), str);
        	strins(string,"[MOLE] ",0, 12);
        	SendClientMessage(i, 0xEED77BFF, string);
       	}*/
	}
	return 1;
}

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !BitFlag_Get(g_PlayerFlags[i], TOGGLE_FACTION)) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !BitFlag_Get(g_PlayerFlags[i], TOGGLE_FACTION)) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pJob] == jobid || PlayerData[i][pSideJob] == jobid) {
		    if(jobid == JOB_TAXI) {
		        if(TaxiDuty{i}) {
		            SendClientMessage(i, color, string);
		        }
		    }
		    else SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pJob] == jobid || PlayerData[i][pSideJob] == jobid) {
		    if(jobid == JOB_TAXI) {
		        if(TaxiDuty{i}) {
		            SendClientMessage(i, color, str);
		        }
		    }
		    else SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !BitFlag_Get(g_PlayerFlags[i], TOGGLE_FACTION)) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !BitFlag_Get(g_PlayerFlags[i], TOGGLE_FACTION)) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}


stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendTesterAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pTester] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pTester] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	if ((args = numargs()) == 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Warning: Directory \"%s\" doesn't exist.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

stock randomEx(min, max)
{
    new rand = random(max-min)+min;
    return rand;
}





showVehicleHUD(playerid) {
    if (!HUDtoggle[playerid][HUD_MI]) {
        TextDrawShowForPlayer(playerid, HUDMileage);
        PlayerTextDrawShow(playerid, HUDMileageRate[playerid]);
    }

    if (!HUDtoggle[playerid][HUD_FUEL])
        PlayerTextDrawShow(playerid, HUDFuel[playerid]);

    PlayerTextDrawShow(playerid, HUDZone[playerid]);
    
    if (!HUDtoggle[playerid][HUD_SPEED]) {
        PlayerTextDrawShow(playerid, HUDSpeedoRate[playerid]);
        PlayerTextDrawShow(playerid, HUDSpeedoMPH[playerid]);
    }

    if (!HUDtoggle[playerid][HUD_NOS])
        PlayerTextDrawShow(playerid, HUDNos[playerid]);

    if (!HUDtoggle[playerid][HUD_LOCK])
        PlayerTextDrawShow(playerid, HUDLock[playerid]);

}

hideVehicleHUD(playerid) {

    TextDrawHideForPlayer(playerid, HUDMileage);
    TextDrawHideForPlayer(playerid, HUDBattery);
    TextDrawHideForPlayer(playerid, HUDLights);

    PlayerTextDrawHide(playerid, HUDFuel[playerid]);
    PlayerTextDrawHide(playerid, HUDZone[playerid]);
    PlayerTextDrawHide(playerid, HUDSpeedoRate[playerid]);
    PlayerTextDrawHide(playerid, HUDNos[playerid]);

    PlayerTextDrawHide(playerid, HUDLock[playerid]);
    PlayerTextDrawHide(playerid, HUDEngine[playerid]);
    PlayerTextDrawHide(playerid, HUDSpeedoMPH[playerid]);
    PlayerTextDrawHide(playerid, HUDMileageRate[playerid]);
}

/*CMD:toghud(playerid, params[])
{
    ShowDialogTogHUD(playerid);
	return 1;
}*/



/*Dialog:DialogTogHUD(playerid, response, listitem, inputtext[])
{
	if(response)
	{
        HUDtoggle[playerid][listitem] = !HUDtoggle[playerid][listitem];
        hidePlayerHUD(playerid);
        showPlayerHUD(playerid);
        ShowDialogTogHUD(playerid);
	}
	return 1;
}*/

/*CMD:toghuds(playerid, params[])
{
	if(!bf_get(player_bf[playerid], TOGGLE_HUD))
	{
		bf_on(player_bf[playerid], TOGGLE_HUD);
		hidePlayerHUD(playerid);
 		GameTextForPlayer(playerid, "~r~HUD OFF", 2000, 4);
	}
	else
	{
		bf_off(player_bf[playerid], TOGGLE_HUD);
		showPlayerHUD(playerid);
		GameTextForPlayer(playerid, "~g~HUD ON", 2000, 4);
	}
	return 1;
}*/

/*FormatHUDSettings(playerid)
{
	new wstr[256];
	new tmp[64];
	for(new a = 0; a != MAX_HUD; a++)
	{
		if(a == 0) format(tmp,sizeof(tmp),"%d",HUDtoggle[playerid][a] ? 1 : 0);
		else format(tmp,sizeof(tmp),"|%d",HUDtoggle[playerid][a] ? 1 : 0);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

AssignHUDSettings(playerid, const str[])
{
	new wtmp[MAX_HUD][64];
	strexplode(wtmp,str,"|");
	for(new z = 0; z != MAX_HUD; z++)
	{
		HUDtoggle[playerid][z] = strval(wtmp[z]) ? true : false;
	}
}*/

forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid)) TogglePlayerControllable(playerid, 1);
	return 1;
}

forward FixHour(hour);
public FixHour(hour)
{
	hour = timeshift+hour;
	if (hour < 0) hour = hour+24;
	else if (hour > 23) hour = hour-24;
	shifthour = hour;
	return 1;
}

stock RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		new
		    Float:fX,
	    	Float:fY,
	    	Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
	    PlayerTextDrawHide(playerid, pPT_Footer[playerid]);
		KillTimer(PlayerData[playerid][pFooterTimer]);
	}
 	PlayerTextDrawSetString(playerid, pPT_Footer[playerid], string);
	PlayerTextDrawShow(playerid, pPT_Footer[playerid]);

	PlayerData[playerid][pShowFooter] = true;

	if(time != -1)
		PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	    return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, pPT_Footer[playerid]);
}

// ================== [ PHONE SYSTEM ] ============================

stock ShowEmo_Phone(playerid, emo)
{
	if(ph_opening{ playerid }) {
		switch(emo)
		{
		    case 1: PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0), PlayerTextDrawSetString(playerid, TDPhone_Picture[playerid], "ld_chat:thumbup");
		    case 2: PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0), PlayerTextDrawSetString(playerid, TDPhone_Picture[playerid], "ld_chat:thumbdn");
		    case 3: PlayPlayerTextTone(playerid), PlayerTextDrawSetString(playerid, TDPhone_Picture[playerid], "ld_chat:goodcha");
		}
		PlayerTextDrawShow(playerid, TDPhone_Picture[playerid]);
		SetTimerEx("HideEmo_Phone", 5000, false, "d", playerid);
	}
	return 1;
}

forward HideEmo_Phone(playerid);
public HideEmo_Phone(playerid)
{
	PlayerTextDrawSetString(playerid, TDPhone_Picture[playerid], "_");
	PlayerTextDrawHide(playerid, TDPhone_Picture[playerid]);
	return 1;
}

// ================== [ PHONE SYSTEM ] ============================

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
    if (PlayerData[playerid][pLocal] != 255)
	{
		if(PlayerData[playerid][pLocal] == 101) // LSPD
		{
			fX = 1554.4711;
			fY = -1675.6097;
			fZ = 16.1953;
		}
		else if(PlayerData[playerid][pLocal] == 102) // City Hall
		{
			fX = 1481.0662;
			fY = -1771.306;
			fZ = 18.7958;
		}
		else if(PlayerData[playerid][pLocal] == 103) // Hospital
		{
			fX = 1173.1841;
			fY = -1323.3143;
			fZ = 15.3952;
		}
		else if(PlayerData[playerid][pLocal] == 104) // Santa Maria HQ
		{
			fX = 533.4344;
			fY = -1812.9364;
			fZ = 6.5781;
		}
		else
		{
		    /*for (new i = 0; i != MAX_BIZZ; i ++) if (PlayerData[playerid][pLocal]-LOCAL_BIZZ == i && GetPlayerInterior(playerid) == BizInfo[i][bInterior]) {
				fX = BizInfo[i][bEntranceX];
				fY = BizInfo[i][bEntranceY];
				fZ = BizInfo[i][bEntranceZ];
			}*/
			new i;
			if(HouseEntered[playerid] != -1)
			{
   				i = HouseEntered[playerid];
				fX = HouseInfo[i][hEntranceX];
				fY = HouseInfo[i][hEntranceY];
				fZ = HouseInfo[i][hEntranceZ];
			}
			else if(BizEntered[playerid] != -1)
			{
			    i = BizEntered[playerid];
				fX = BizInfo[i][bEntranceX];
				fY = BizInfo[i][bEntranceY];
				fZ = BizInfo[i][bEntranceZ];
			}
		}
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

stock GetPlayerLocation(playerid)
{
	new
	    Float:fX,
	    Float:fY,
		Float:fZ,
		string[32];

    if (PlayerData[playerid][pLocal] != 255)
	{
		if(PlayerData[playerid][pLocal] == 101)
		{
			fX = 1554.4711;
			fY = -1675.6097;
			fZ = 16.1953;
		}
		else if(PlayerData[playerid][pLocal] == 102) // City Hall
		{
			fX = 1481.0662;
			fY = -1771.306;
			fZ = 18.7958;
		}
		else if(PlayerData[playerid][pLocal] == 103) // Hospital
		{
			fX = 1173.1841;
			fY = -1323.3143;
			fZ = 15.3952;
		}
		else if(PlayerData[playerid][pLocal] == 104) // Santa Maria HQ
		{
			fX = 533.4344;
			fY = -1812.9364;
			fZ = 6.5781;
		}
		else
		{
		    /*for (new i = 0; i != MAX_BIZZ; i ++) if (PlayerData[playerid][pLocal]-LOCAL_BIZZ == i && GetPlayerInterior(playerid) == BizInfo[i][bInterior]) {
				fX = BizInfo[i][bEntranceX];
				fY = BizInfo[i][bEntranceY];
				fZ = BizInfo[i][bEntranceZ];
			}*/
			new i;
			if(HouseEntered[playerid] != -1)
			{
   				i = HouseEntered[playerid];
				fX = HouseInfo[i][hEntranceX];
				fY = HouseInfo[i][hEntranceY];
				fZ = HouseInfo[i][hEntranceZ];
			}
			else if(BizEntered[playerid] != -1)
			{
			    i = BizEntered[playerid];
				fX = BizInfo[i][bEntranceX];
				fY = BizInfo[i][bEntranceY];
				fZ = BizInfo[i][bEntranceZ];
			}
		}
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

FormatNumber(number, prefix[] = "R$")
{
	new
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

FormatNumberEx(number, prefix[] = "{33AA33}R${FFFF00}")
{
	new
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

stock FormatTextLowSignal(text[])
{
	new str[128];

	format(str, 128, text);

	new
		start,
		nosignal,
		signallen = strlen(str);

    if(signallen > 6) nosignal = signallen / (signallen / 7);
    else nosignal = signallen - (signallen / 2);

    start = nosignal;

	if(nosignal)
	{
		for(new i = 0; i != nosignal; ++i)
		{
		    if(start > signallen)
				break;

			format(str, sizeof(str), "%s", str_oncereplace(substr(str, start, 2), "..", str));

			start += start/2 + random(start/2);
		}
	}
	return str;
}

forward Float:GetPlayerMileage(vehicleid);
public Float:GetPlayerMileage(vehicleid)
{
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;


	GetVehicleVelocity(vehicleid,xx,yy,zz);

	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return floatround((pSpeed * 190.5)) * 0.621371192 / 3600.0;
}

////////////////////////////////////////////////////////////////////////////////////
/////////////////////////DROGAS//////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
forward Float:DrugObject_Size(objectid);
public Float:DrugObject_Size(objectid)
{
	new Float:drug_size = 0.0;
	new data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID])
	{
		if(ItemDrug[i][drugQTY] > 0) {
			drug_size += (DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE]) ? ItemDrug[i][drugQTY] / 2.285714 : ItemDrug[i][drugQTY];
		}
	}
	return drug_size;
}

DrugObject_StockDrug(objectid, drugtype)
{
	new data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID] && ItemDrug[i][drugQTY] > 0)
	{
		if(ItemDrug[i][drugType] == drugtype) {
			return true;
		}
	}
	return false;
}

DrugObject_IsEmpty(objectid)
{
	new data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID] && ItemDrug[i][drugQTY] > 0)
	{
		return false;
	}
	return true;
}

DrugObject_Delete(objectid, objectsid)
{
	new str[60];
	format(str, sizeof(str), "DELETE FROM `drug_package` WHERE `drugSID` = '%d'", objectsid);
	mysql_tquery(dbCon, str);

	DestroyDynamicObject(objectid);

	return 1;
}

DrugObject_Count(playersid)
{
	new count=0, data[e_objectDrug];

	for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
		if(!IsValidDynamicObject(x)) continue;

		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
		if(data[drugOwner] == playersid) {
			count++;
		}
	}
	return count;
}
//////////////////////////////////////////////
/////////////////////////////////////////
/////////////////////////////////////////////






stock GetVehicleSpeed(vehicleid, bool:kmh = true)
{
    /*new Float:V[3];
    GetVehicleVelocity(vehicleid, V[0], V[1], V[2]);
    return floatround(floatsqroot(V[0] * V[0] + V[1] * V[1] + V[2] * V[2]) * 180.00);*/
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;


	GetVehicleVelocity(vehicleid,xx,yy,zz);

	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return kmh ? floatround((pSpeed * 190.5)) : floatround((pSpeed * 118.2));
}

stock GetPlayerSpeed(playerid, bool:kmh = true)
{
	new
		Float:xx,
		Float:yy,
		Float:zz,
		Float:pSpeed;

	if(IsPlayerInAnyVehicle(playerid))
	{
		GetVehicleVelocity(GetPlayerVehicleID(playerid),xx,yy,zz);
	}
	else
	{
		GetPlayerVelocity(playerid,xx,yy,zz);
	}

	pSpeed = floatsqroot((xx * xx) + (yy * yy) + (zz * zz));
	return kmh ? floatround((pSpeed * 190.5)) : floatround((pSpeed * 118.2));


}

stock GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

Float:GetVehicleConsumptionPerSecond(vehicleid)
{
	new Float:vSpeed = GetVehicleSpeed(vehicleid, true);
	new Float:MPG = GetVehicleDataFuelRate(GetVehicleModel(vehicleid)) * 0.41213142;
	return (((vSpeed < 5.0 ? 5.0 : vSpeed) / 2300.0) * MPG / 12.16);
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

stock GetLockStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (doors != 1)
		return 0;

	return 1;
}

stock SetLockStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, status, bonnet, boot, objective);
}

stock GetLightStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

stock SetLightStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock GetEngineStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}

stock SetEngineStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock GetHoodStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

stock SetHoodStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

stock GetTrunkStatus(vehicleid)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

stock SetTrunkStatus(vehicleid, bool:status)
{
	new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}
// General functions

stock GetContactName(playerid, number)
{
	new name[24], success = false;

	for (new x = 0; x < 40; x ++)
	{
		if(ContactData[playerid][x][contactNumber] == number)
		{
			format(name, 24, "%s", ContactData[playerid][x][contactName]);
			success = true;
			break;
		}
	}
	if(!success) format(name, 24, "%06d", number);
	return name;
}

stock GetContactID(playerid, number)
{
	new id = -1;

	for (new x = 0; x < 40; x ++)
	{
		if(ContactData[playerid][x][contactNumber] == number)
		{
			id = x;
			break;
		}
	}
	return id;
}

stock FIX_valstr(dest[], value, bool:pack = false)
{
    // format can't handle cellmin properly
    static const cellmin_value[] = !"-2147483648";

    if (value == cellmin)
        pack && strpack(dest, cellmin_value, 12) || strunpack(dest, cellmin_value, 12);
    else
        format(dest, 12, "%d", value), pack && strpack(dest, dest, 12);
}
/*// ================== [ PHONE SYSTEM ] ============================
forward SendPlayerSMS(playerid, phonenumb);
public SendPlayerSMS(playerid, phonenumb)
{
	new targetid, query[256], text[128];
    GetPVarString(playerid, "SMSPhoneText", text, 128);
	if (phonenumb != PlayerData[playerid][pPnumber] && GetPhoneSignal(playerid) && GetUserHasNumber(phonenumb) && PlayerData[playerid][pCash]-1 >= 0) {

		format(query, sizeof(query), "INSERT INTO `cellphone_message` (`PhoneReceive`, `PhoneOwner`, `PhoneSMS`, `ReadSMS`, `Archive`, `Date`) VALUES ('%d', '%d', '%s', '0', '0', '%s');", phonenumb, PlayerData[playerid][pPnumber], text, ReturnPhoneDateTime());
		mysql_query(dbCon, query);

		if ((targetid = GetNumberOwner(phonenumb)) != INVALID_PLAYER_ID) // if number Online
		{
		    if(ph_section[targetid] != PH_OFF && !ph_airmode[targetid] && !ph_silentmode[targetid] && ph_canupdate{ playerid })
		    {
			    if(!ph_opening{ targetid }) ShowPlayerPhone(targetid);
			    Refreash_Phone(targetid);
		    	ShowEmo_Phone(targetid, 3);
		    }
		}
        ShowEmo_Phone(playerid, 1);
        PlayerData[playerid][pSendSMS] = 2;
		GameTextForPlayer(playerid, "~r~R$-1", 5000, 1);
		PlayerData[playerid][pCash] -= 1;
	}
	else
	{
        ShowEmo_Phone(playerid, 2);
	    PlayerData[playerid][pSendSMS] = 3;
	}
	DeletePVar(playerid, "SMSPhoneText");
    Refreash_Phone(playerid);
	return 1;
}

stock IsPlayerUnreadSMS(playerid)
{
	new str[128];
	format(str, sizeof(str), "SELECT id FROM `phone_sms` WHERE `PhoneReceive` = %d AND `Archive` = 0 AND `ReadSMS` = 0", PlayerData[playerid][pPnumber]);
	mysql_query(dbCon, str);
	return cache_get_value_index_count();
}


stock GetPhoneNumb(playerid, number[])
{
	new phonenumb;

	if (IsNumeric(number)) phonenumb = strval(number);
	else
	{
		new query[256];

		format(query, sizeof(query), "SELECT `contactAddee` FROM `phone_contacts` WHERE `contactAdded` = %d AND `contactName` LIKE '%%%s%%' ORDER BY `contactName` ASC", PlayerData[playerid][pPnumber], number);
		mysql_query(dbCon, query);

		if(cache_num_rows()) {
cache_get_value_index_int(0, 0, phonenumb);
		}
		else phonenumb = -1;
	}
	return phonenumb;
}

stock GetPhoneContactName(playerid, phonenumb, phonenum = 0)
{
	new query[128], name[64];

	format(query, sizeof(query), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d AND `contactAddee` = %d", PlayerData[playerid][pPnumber], phonenumb);
	mysql_query(dbCon, query);

	if(cache_num_rows()) {
		cache_get_value_name(0, "contactName", name);

		if(phonenum)
			format(name, sizeof(name), "%s (%d)", name, phonenumb);
	}
	else format(name, sizeof(name), "%d", phonenumb);

	return name;
}

stock GetPhoneNumberSelected(playerid, rows)
{
	new query[128], name[32];
	format(name, sizeof(name), "null");

	format(query, sizeof(query), "SELECT contactAddee FROM `phone_contacts` WHERE `contactAdded` = %d ORDER BY `contactName` ASC", PlayerData[playerid][pPnumber]);
	mysql_query(dbCon, query);

	if(cache_num_rows()) format(name, sizeof(name), "%d", cache_get_value_index_int(rows, 0));

	return name;
}

stock GetPhoneRevNumberSMSID(id)
{
	new query[128];

	format(query, sizeof(query), "SELECT PhoneOwner FROM `phone_sms` WHERE `id` = %d", id);
	mysql_query(dbCon, query);

	return cache_get_value_index_int(0, 0);
}

stock GetPhoneForwardSMSID(id)
{
	new query[128];

	format(query, sizeof(query), "SELECT PhoneSMS FROM `phone_sms` WHERE `id` = %d", id);
	mysql_query(dbCon, query);

	if(cache_num_rows()) cache_get_value_name(0, "PhoneSMS", query);
	else format(query, sizeof(query), "null");

	return query;
}


stock GetUserHasNumber(phonenumber)
{
	new query[128];

	format(query, sizeof(query), "SELECT PhoneNumbr FROM `characters` WHERE `PhoneNumbr` = %d", phonenumber);
	mysql_query(dbCon, query);

	if(cache_num_rows())
	{
	    return 1;
	}
	return 0;
}


stock IsPlayerHasContact(playerid, phonenumber)
{
	new query[128];

	format(query, sizeof(query), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d AND `contactAddee` = %d", PlayerData[playerid][pPnumber], phonenumber);
	mysql_query(dbCon, query);
	return cache_num_rows();
}*/


stock GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pPnumber] == number) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

/*
stock CancelCall(playerid)
{
    if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
		if(PlayerData[playerid][pCallLine] != 911)
		{
			PlayerData[PlayerData[playerid][pCallLine]][pCallState] = 0;
	 		PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
	   		PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;
		    PlayerData[PlayerData[playerid][pCallLine]][pCellTime] = 0;
		    PlayerData[PlayerData[playerid][pCallLine]][pCallType] = 0;
			Refreash_Phone(PlayerData[playerid][pCallLine]);
			if(ph_section[PlayerData[playerid][pCallLine]] != PH_OFF) SetPhoneSection(PlayerData[playerid][pCallLine], PH_MAIN, 0);
			if(GetPlayerSpecialAction(PlayerData[playerid][pCallLine]) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(PlayerData[playerid][pCallLine],SPECIAL_ACTION_STOPUSECELLPHONE);
		}
    }
	PlayerData[playerid][pCallState] = 0;
  	PlayerData[playerid][pCellTime] = 0;
 	PlayerData[playerid][pCallType] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pIncomingCall] = 0;
  	if(ph_section[playerid] != PH_OFF) SetPhoneSection(playerid, PH_MAIN, 0);
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);

	return 1;
}

// ================== [ PHONE SYSTEM ] ============================*/
stock CancelCall(playerid)
{
	new callerid = PlayerData[playerid][pCallConnect]; // .....?
	if(callerid != INVALID_PLAYER_ID) // ..........?
	{
		ph_menuid[callerid]=0;
		ph_sub_menuid[callerid]=0;
		RenderPlayerPhone(callerid, ph_menuid[callerid], ph_sub_menuid[callerid]);
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(callerid,SPECIAL_ACTION_STOPUSECELLPHONE);

		PlayerData[callerid][pCallConnect] = INVALID_PLAYER_ID;
	   	PlayerData[callerid][pCallLine] = INVALID_PLAYER_ID;
	   	PlayerData[callerid][pCellTime] = 0;
	}
	ph_menuid[playerid]=0;
	ph_sub_menuid[playerid]=0;
	RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);

	PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCellTime] = 0;
}
stock cl_DressPlayer(playerid)
{
	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
	    if(ClothingData[playerid][id][cl_object] && ClothingData[playerid][id][cl_equip]) {
			SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone], ClothingData[playerid][id][cl_x], ClothingData[playerid][id][cl_y],
			ClothingData[playerid][id][cl_z], ClothingData[playerid][id][cl_rx], ClothingData[playerid][id][cl_ry], ClothingData[playerid][id][cl_rz], ClothingData[playerid][id][cl_scalex], ClothingData[playerid][id][cl_scaley], ClothingData[playerid][id][cl_scalez]);
		}
	}
}

stock cl_ResetDressPlayer(playerid)
{
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
		RemovePlayerAttachedObject(playerid, i);

	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
	    if(ClothingData[playerid][id][cl_object] && ClothingData[playerid][id][cl_equip]) {
			ClothingData[playerid][id][cl_equip] = 0;
		}
	}
}

/*stock GetUserid(charactername[]) { // Search for account IDs from character names.

	new
		szPlayerName[MAX_PLAYER_NAME+1];

	mysql_escape_string(charactername, szPlayerName);
	mysql_format(dbCon, szQuery, sizeof(szQuery), "SELECT `Userid` FROM `characters` WHERE `charName` = '%s'", szPlayerName);
	mysql_query(dbCon,szQuery);

	if(cache_num_rows()) {
        return cache_get_value_index_int(0, 0);
	} else return -1;
}*/

/*stock GetUsername(userid) { // Find the account name from the account ID.

	new
		szPlayerName[MAX_PLAYER_NAME+1];

	mysql_format(dbCon, szQuery, sizeof(szQuery), "SELECT `Username` FROM `accounts` WHERE `ID` = '%d'", userid);
	mysql_query(dbCon,szQuery);

	if(cache_num_rows()) {
	    cache_get_value_index(0, 0, szPlayerName);
	}
	return szPlayerName;
}*/

RemovePlayerClothing(playerid)
{
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++)
		RemovePlayerAttachedObject(playerid, i);
}

/*cl_ShowClothingMenu(playerid)
{
	new query[128];
	format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", PlayerData[playerid][pID]);
 	mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_CHECKCLOTHES);
}*/

cl_ShowClothingMenu(playerid)
{
	new str[256], count;
	for (new i = 0; i < MAX_CLOTHES; i ++)
	{
	    if(ClothingData[playerid][i][cl_object])
	    {
		    cl_dataslot[playerid][count] = i;
			format(str, sizeof(str), "%s%s (Index:%d)\n", str, ClothingData[playerid][i][cl_name], ClothingData[playerid][i][cl_slot] + 1);
			count++;
		}
	}
	if(count) Dialog_Show(playerid, ClothingList, DIALOG_STYLE_LIST, "O que Você está procurando?", str, "Selecionar", "<<");
}

// Faction

stock ViewFactions(playerid)
{
	new string[1024], menu[10], count;

	format(string, sizeof(string), "%s{B4B5B7}Pagina 1{FFFFFF}\n", string);

	SetPVarInt(playerid, "page", 1);

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
		if(count == 10)
		{
			format(string, sizeof(string), "%s{B4B5B7}Pagina 2{FFFFFF}\n", string);
			break;
		}
		format(menu, 10, "menu%d", ++count);
		SetPVarInt(playerid, menu, i);
		format(string, sizeof(string), "%s{FFFFFF}facção ({FFBF00}%i{FFFFFF}) | %s\n", string, i, FactionData[i][factionName]);
	}
	if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lista de Facções", "Nenhuma informação para a facção.", "Continuar", "Cancelar");
	else Dialog_Show(playerid, FactionsList, DIALOG_STYLE_LIST, "Lista de Facções [SP:RP]", string, "Editar", "Sair");
	return 1;
}

Faction_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "não possui";

 	if (factionid == -1)
	    return name;

	format(name, 32, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "não possui";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}

stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		//PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
		return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

	return 0;
}

GetFactionColor(factionid)
{
	new color[8] = "FFFFFF";

	if (factionid == -1)
		return color;

	format(color, sizeof(color), "%06x", FactionData[factionid][factionColor] >>> 8);

	return color;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
 			if (GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
			 	SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Save(factionid)
{
	new
	    query[2048];

/*	new clean_name[64];
	mysql_escape_string(name,clean_name);*/

	format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d'",
		SQL_ReturnEscaped(FactionData[factionid][factionName]),
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks]
	);
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
		query,
		FactionData[factionid][factionID]
	);
	return mysql_tquery(dbCon, query);
}

stock Faction_SaveRanks(factionid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s', `factionRank16` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][0],
	    FactionRanks[factionid][1],
	    FactionRanks[factionid][2],
	    FactionRanks[factionid][3],
	    FactionRanks[factionid][4],
	    FactionRanks[factionid][5],
	    FactionRanks[factionid][6],
	    FactionRanks[factionid][7],
	    FactionRanks[factionid][8],
	    FactionRanks[factionid][9],
	    FactionRanks[factionid][10],
	    FactionRanks[factionid][11],
	    FactionRanks[factionid][12],
	    FactionRanks[factionid][13],
	    FactionRanks[factionid][14],
	    FactionRanks[factionid][15],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(dbCon, query);
}

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(dbCon, string);

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(dbCon, string);

		foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionID] = -1;
		    	PlayerData[i][pFactionRank] = 0;
			}
			if (PlayerData[i][pFactionEdit] == factionid) {
			    PlayerData[i][pFactionEdit] = -1;
			}
		}
		if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
  			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

	    FactionData[factionid][factionExists] = false;
	    FactionData[factionid][factionType] = 0;
	    FactionData[factionid][factionID] = 0;
	}
	return 1;
}

stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_ShowRanks(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		new
		    string[640];

		//string = '\0';

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%sRank %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Alterar", "Cancelar");
	}
	return 1;
}

Faction_Create(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 32, name);

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;

	    for (new j = 0; j < 16; j ++) {
			format(FactionRanks[i][j], 32, "Rank %d", j + 1);
	    }
	    mysql_tquery(dbCon, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}

ResetFaction(playerid)
{
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
}

stock Vehicle_Save(id) {
	if(Iter_Contains(sv_servercar, id)) {
	    new
	        queryString[255];

	    GetVehiclePos(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
	    GetVehicleZAngle(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleRotation]);

	    format(queryString, sizeof(queryString), "UPDATE vehicles SET vehicleModelID = '%d', vehiclePosX = '%.4f', vehiclePosY = '%.4f', vehiclePosZ = '%.4f', vehiclePosRotation = '%.4f', vehicleFaction = '%d', vehicleCol1 = '%d', vehicleCol2 = '%d' WHERE vehicleID = '%d'", vehicleVariables[id][vVehicleModelID],	vehicleVariables[id][vVehiclePosition][0],
		vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2], vehicleVariables[id][vVehicleRotation], vehicleVariables[id][vVehicleFaction], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1], vehicleVariables[id][vVehicleID]);
		mysql_query(dbCon,queryString);
	}
	return 1;
}

stock Vehicle_GetID(id)
{
	foreach(new i : sv_servercar) if (vehicleVariables[i][vVehicleScriptID] == id) {
		return i;
	}
	return -1;
}

forward OnPlayerVehicleScrap(playerid, scrap_price);
public OnPlayerVehicleScrap(playerid, scrap_price)
{
	if(cache_affected_rows())
	{
		Car_DespawnEx(PlayerData[playerid][pPCarkey]);
		PlayerData[playerid][pPCarkey] = 9999;
		SendClientMessageEx(playerid, COLOR_GREEN, "Você destruiu seu veículo em uma sucata. %s E não será mais.", FormatNumber(scrap_price));
		SendClientMessageEx(playerid, 0xADFF2FFF, "PROCESSADO: Novos ajustes %s", (GetNumberOwnerCar(playerid)) ? (""):("Você não tem veículo restantes."));
		PlayerData[playerid][pCash]+=scrap_price;

		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
		mysql_query(dbCon, szQuery);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_RED, "Ocorreu um erro, entre em contato com o administrador do sistema.");
	}
	return 1;
}

forward Vehicle_Load();
public Vehicle_Load()
{
    new
	    rows,
	    bool: success = true;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++)
	{
        if(systemVariables[vehicleCounts][0] + systemVariables[vehicleCounts][1] + systemVariables[vehicleCounts][2] < MAX_VEHICLES) {

			cache_get_value_name_int(i, "vehicleID", vehicleVariables[i][vVehicleID]);
			cache_get_value_name_int(i, "vehicleModelID", vehicleVariables[i][vVehicleModelID]);
			cache_get_value_name_float(i, "vehiclePosX", vehicleVariables[i][vVehiclePosition][0]);
			cache_get_value_name_float(i, "vehiclePosY", vehicleVariables[i][vVehiclePosition][1]);
			cache_get_value_name_float(i, "vehiclePosZ", vehicleVariables[i][vVehiclePosition][2]);
			cache_get_value_name_float(i, "vehiclePosRotation", vehicleVariables[i][vVehicleRotation]);

			cache_get_value_name_int(i, "vehicleFaction", vehicleVariables[i][vVehicleFaction]);

			cache_get_value_name_int(i, "vehicleCol1", vehicleVariables[i][vVehicleColour][0]);
			cache_get_value_name_int(i, "vehicleCol2", vehicleVariables[i][vVehicleColour][1]);

			Iter_Add(sv_servercar, i);

			if(vehicleVariables[i][vVehicleColour][0] < 0) {
				vehicleVariables[i][vVehicleColour][0] = random(126);
			}
			if(vehicleVariables[i][vVehicleColour][1] < 0) {
				vehicleVariables[i][vVehicleColour][1] = random(126);
			}

			vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000);
			ResetVehicle(vehicleVariables[i][vVehicleScriptID]);


			if(vehicleVariables[i][vVehicleFaction] != -1) {
				SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], GetInitials(FactionData[vehicleVariables[i][vVehicleFaction]][factionName]));
			}
			else {
				new plate[9];
				format(plate, 9, "%s-%s", placaiMacLTR(), placaiMacNUM());
				SetVehicleNumberPlate(vehicleVariables[i][vVehicleScriptID], plate);
			}


    		Iter_Add(sv_vehicles, vehicleVariables[i][vVehicleScriptID]);

			SetVehicleHealth(vehicleVariables[i][vVehicleScriptID], GetVehicleDataHealth(vehicleVariables[i][vVehicleModelID]));

			systemVariables[vehicleCounts][0]++;
		}
		else {
			success = false;
			printf("ERRO: Limite de veículos atingido (MODEL %d, VEHICLEID %d, MAXIMUM %d, TYPE STATIC) [01x08]", vehicleVariables[i][vVehicleModelID], i, MAX_VEHICLES);
		}
	}

	if(success) printf("[script] %d veículos carregados.", systemVariables[vehicleCounts][0]);

	return 1;
}

stock ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
	    CoreVehicles[vehicleid][startup_delay_sender] = INVALID_PLAYER_ID;
	    CoreVehicles[vehicleid][startup_delay] = 0;
	    CoreVehicles[vehicleid][startup_delay_random] = 0;
	    CoreVehicles[vehicleid][vehCrash] = 0;

	    CoreVehicles[vehicleid][vehicleBadlyDamage] = 0;

		CoreVehicles[vehicleid][vOwnerID] = INVALID_PLAYER_ID;
		CoreVehicles[vehicleid][vUpgradeID] = 0;
        for(new i=0;i<MAX_TRUCKER_ITEMS;i++) CoreVehicles[vehicleid][vehicleCrate][i] = 0;
      	for(new i=0;i<6;i++) {
      	    if(i < 4) CoreVehicles[vehicleid][vehDamage][i]=0;

 			if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
		}

		if(IsValidDynamicObject(CoreVehicles[vehicleid][vSiren])) DestroyDynamicObject(CoreVehicles[vehicleid][vSiren]);
		if(IsValidDynamicObject(CoreVehicles[vehicleid][vSiren2])) DestroyDynamicObject(CoreVehicles[vehicleid][vSiren2]);

		if(CoreVehicles[vehicleid][vehSign]) {
			Delete3DTextLabel(CoreVehicles[vehicleid][vehSignText]);
			CoreVehicles[vehicleid][vehSign]=0;
 		}
		CoreVehicles[vehicleid][vehicleIsCargoLoad] = 0;
		CoreVehicles[vehicleid][vehicleCargoTime] = 0;
		CoreVehicles[vehicleid][vehicleCargoStorage] = 0;
		CoreVehicles[vehicleid][vehicleCargoPlayer] = INVALID_PLAYER_ID;
		CoreVehicles[vehicleid][vehicleCargoAction]= 0;

		CoreVehicles[vehicleid][vbreakin] = 0;
		CoreVehicles[vehicleid][vbreaktime] = 0;
		CoreVehicles[vehicleid][vbreakdelay] = 0;

		new bool:global_vehicle = false;

		foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] == -1) {
                global_vehicle = true;
                break;
			}
		}

		if(!global_vehicle) {
			CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(GetVehicleModel(vehicleid));
			SetVehicleHealth(vehicleid, GetVehicleDataHealth(GetVehicleModel(vehicleid)));
		}
		else {
			CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(GetVehicleModel(vehicleid)) / 2.0;
			SetVehicleHealth(vehicleid, GetVehicleDataHealth(GetVehicleModel(vehicleid)));
		}
  		/*for (new i = 0; i != MAX_DYNAMIC_VEHICLES; i ++)
		{
			if (vehicleVariables[i][vVehicleExists] && vehicleid == i) break;
			else {
				CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(GetVehicleModel(vehicleid));
				SetVehicleHealth(vehicleid, GetVehicleDataHealth(GetVehicleModel(vehicleid)));
				break;
			}
		}*/
		//printf("RESET %d", vehicleid);
	}
	return 1;
}

forward Ident_Load();
public Ident_Load()
{
	new rows, totals;
	
	cache_get_row_count(rows);
	
	new nome[24];
	
	if(rows)
	{
		for(new i = 0; i < rows; i ++)
		{
			cache_get_value_index_int(i, 0, IdentInfo[i][Id]);

			cache_get_value_index(i, 1, nome);
			format(IdentInfo[i][Nome], 128, "%s", nome);
			
			cache_get_value_index_int(i, 2, IdentInfo[i][Nascimento]);
			cache_get_value_index_int(i, 3, IdentInfo[i][Cpf]);
			cache_get_value_index_int(i, 4, IdentInfo[i][Score]);
			cache_get_value_index_int(i, 5, IdentInfo[i][Qualidade]);
			
			totals++;
		}
	}
	new manda[1024];
	format(manda,sizeof(manda), "Carregados %d identidades do MySQL.", totals);
	printf(manda);
    return 1;
}

forward House_Load();
public House_Load()
{
    new rows, totals;

    cache_get_row_count(rows);

    new msg[128];
	new weapons[256];
	new items[64];

    if(rows)
    {
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_index_int(i, 0, HouseInfo[i][hID]);
			cache_get_value_index_float(i, 1, HouseInfo[i][hEntranceX]);
			cache_get_value_index_float(i, 2, HouseInfo[i][hEntranceY]);
			cache_get_value_index_float(i, 3, HouseInfo[i][hEntranceZ]);
			cache_get_value_index_float(i, 4, HouseInfo[i][hExitX]);
			cache_get_value_index_float(i, 5, HouseInfo[i][hExitY]);
			cache_get_value_index_float(i, 6, HouseInfo[i][hExitZ]);

			cache_get_value_index(i, 7, msg);
			format(HouseInfo[i][hInfo], 128, "%s", msg);

			cache_get_value_index(i, 8, msg);
			format(HouseInfo[i][hOwner], MAX_PLAYER_NAME, "%s", msg);

			cache_get_value_index_int(i, 9, HouseInfo[i][hOwned]);
			cache_get_value_index_int(i, 10, HouseInfo[i][hLocked]);
			cache_get_value_index_int(i, 11, HouseInfo[i][hPrice]);
			cache_get_value_index_int(i, 12, HouseInfo[i][hLevelbuy]);
			cache_get_value_index_int(i, 13, HouseInfo[i][hRentprice]);
			cache_get_value_index_int(i, 14, HouseInfo[i][hRentable]);
			cache_get_value_index_int(i, 15, HouseInfo[i][hInterior]);
			cache_get_value_index_int(i, 16, HouseInfo[i][hWorld]);
			cache_get_value_index_int(i, 17, HouseInfo[i][hCash]);
			cache_get_value_index(i, 18, weapons);
			cache_get_value_index_float(i, 19, HouseInfo[i][hCheckPosX]);
			cache_get_value_index_float(i, 20, HouseInfo[i][hCheckPosY]);
			cache_get_value_index_float(i, 21, HouseInfo[i][hCheckPosZ]);
			cache_get_value_index_int(i, 22, HouseInfo[i][hRadio]);
			//cache_get_value_index_int(i, 23, HouseInfo[i][hRadhSubidio]);
            cache_get_value_index(i, 24, items);

			AssignHouseWeapons(i, weapons);
			AssignHouseItems(i, items);
			/*if(!HouseInfo[i][hOwned])
				format(msg, sizeof(msg), ""EMBED_YELLOW"House[%d] For Sale:\nPrice: R$%d\nLevel: %d", i, HouseInfo[i][hPrice], HouseInfo[i][hLevelbuy]);
			else
				format(msg, sizeof(msg), ""EMBED_YELLOW"House[%d]\n%s", i, HouseInfo[i][hInfo]);*/

            if(!HouseInfo[i][hOwned]) {
                format(msg, sizeof(msg), ""EMBED_YELLOW"Casa[%d] a venda:\npreço: R$%d\nLevel: %d", i, HouseInfo[i][hPrice], HouseInfo[i][hLevelbuy]);
                HouseInfo[i][hLabel] = CreateDynamic3DTextLabel(msg, -1, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			}
			//HouseInfo[i][hCheckPoint] = CreateDynamicCP(HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ], 3, 0, 0, -1, 3.5);

            Iter_Add(sv_houses, i);

			LoadHouseFurnitures(i);

			totals++;
		}
    }
	format(msg,sizeof(msg), "Carregado %d casas dinamicas de MySQL.", totals);
	printf(msg);
    return 1;
}

// The function has changed..

stock GetGunObjectID(wpid)
{
    if (wpid < 0 || wpid > 64)
    {
        return 1575;
    }
    return GunObjectIDs[wpid];
}

//forward DropGun(playerid, GunID, GunAmmo, Float:X, Float:Y, Float:Z);
stock DropGun(playerid, GunID, GunAmmo, license = 0, Float:X, Float:Y, Float:Z, saving = true)
{
    if(GunID != 0 && GunAmmo != 0)
    {
        for(new i = 0; i != sizeof(GunInfo); ++i)
        {
            if(GunInfo[i][DropGunPosX] == 0.0 && GunInfo[i][DropGunPosY] == 0.0 && GunInfo[i][DropGunPosZ] == 0.0)
            {
                GunInfo[i][DropGunAmmount][0] = GunID;
                GunInfo[i][DropGunAmmount][1] = GunAmmo;
                GunInfo[i][DropGunPosX] = X;
                GunInfo[i][DropGunPosY] = Y;
                GunInfo[i][DropGunPosZ] = Z;
                GunInfo[i][DropLicense] = license;
                GunInfo[i][DropID] = i;
                GunInfo[i][DropSaving] = saving;
                //GunInfo[i][DropLabel] = CreateDynamic3DTextLabel(ReturnWeaponName(GunID), 0x2E9AFEFF, X, Y, Z - 0.8, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);
                GunInfo[i][DropObj] = CreateDynamicObject(GetGunObjectID(GunID), X, Y, Z-1, 80.0, 0.0, 0.0, 0, 0);
                GunInfo[i][DropTimer] = SetTimerEx("ResetDropGun", 600000, false, "d", i);

                Log_Write("logs/dropgun.txt", "[%s] %s: %s(%d)", ReturnDate(), ReturnName(playerid), ReturnWeaponName(GunID), GunAmmo);

                if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) drop %s(%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(GunID), GunAmmo, license);
                return 1;
            }
        }
        return 1;
    }
    return 1;
}

/*stock ThrowGun(playerid, GunID, GunAmmo, saving = true)
{
    if(GunID != 0 && GunAmmo != 0)
    {
        for(new i = 0; i != sizeof(GunInfo); ++i)
        {
            if(GunInfo[i][DropGunPosX] == 0.0 && GunInfo[i][DropGunPosY] == 0.0 && GunInfo[i][DropGunPosZ] == 0.0)
            {
            	#define SPEED (2.0)
				#define Z_SPEED (4.0)
				#define GRAVITY (13.0)
                //GunInfo[i][DropLabel] = CreateDynamic3DTextLabel(ReturnWeaponName(GunID), 0x2E9AFEFF, X, Y, Z - 0.8, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0, -1);

				//GunInfo[i][DropObj] = CreateDynamicObject(GetGunObjectID(GunID), X, Y, Z-1, 80.0, 0.0, 0.0, 0, 0);

				new Float:x, Float:y, Float:z, Float:ang;
				GetPlayerPos(playerid, x, y, z);
                GunInfo[i][DropGunPosX] = x;
                GunInfo[i][DropGunPosY] = y;
                GunInfo[i][DropGunPosZ] = z;

				GetPlayerFacingAngle(playerid, ang);
				GunInfo[i][DropObj] = CreateObject(GetGunObjectID(GunID), x, y - 0.5 * floatcos(-(ang + 90.0), degrees), z, 93.7, 120.0, ang + 60.0);
				PHY_InitObject(GunInfo[i][DropObj]);
				PHY_SetObjectVelocity(GunInfo[i][DropObj], SPEED * floatsin(-ang, degrees), SPEED * floatcos(-ang, degrees), Z_SPEED);
				PHY_SetObjectFriction(GunInfo[i][DropObj], 100); // This will stop the object when it touchs the ground.
				PHY_SetObjectGravity(GunInfo[i][DropObj], GRAVITY);
				PHY_SetObjectZBound(GunInfo[i][DropObj], z - 1.0, _, 0.0);

                GunInfo[i][DropGunAmmount][0] = GunID;
                GunInfo[i][DropGunAmmount][1] = GunAmmo;
                GunInfo[i][DropID] = i;
                GunInfo[i][DropSaving] = saving;

				ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);

				GunInfo[i][DropTimer] = SetTimerEx("ResetThrowGun", 600000, false, "d", i);
				Log_Write("logs/dropgun.txt", "[%s] %s: %s %s (%d)", ReturnDate(), ReturnName(playerid), GunID, GunAmmo);
                return 1;
            }
        }
        return 1;
    }
    return 1;
}*/

forward ResetDropGun(gunid);
public ResetDropGun(gunid)
{
 	for(new i = 0; i != sizeof(GunInfo); ++i)
  	{
      	if(GunInfo[i][DropID] == gunid)
     	{
      		GunInfo[i][DropGunAmmount][0] = 0;
          	GunInfo[i][DropGunAmmount][1] = 0;
           	GunInfo[i][DropGunPosX] = 0.0;
          	GunInfo[i][DropGunPosY] = 0.0;
          	GunInfo[i][DropGunPosZ] = 0.0;
          	GunInfo[i][DropLicense] = 0;
          	GunInfo[i][DropID] = -1;
          	KillTimer(GunInfo[i][DropTimer]);
			DestroyDynamicObject(GunInfo[i][DropObj]);
            //DestroyDynamic3DTextLabel(GunInfo[i][DropLabel]);
           	return 1;
      	}
 	}
 	return 1;
}

/*forward ResetThrowGun(gunid);
public ResetThrowGun(gunid)
{
 	for(new i = 0; i != sizeof(GunInfo); ++i)
  	{
      	if(GunInfo[i][DropID] == gunid)
     	{
      		GunInfo[i][DropGunAmmount][0] = 0;
          	GunInfo[i][DropGunAmmount][1] = 0;
           	GunInfo[i][DropGunPosX] = 0.0;
          	GunInfo[i][DropGunPosY] = 0.0;
          	GunInfo[i][DropGunPosZ] = 0.0;
          	GunInfo[i][DropID] = -1;
          	KillTimer(GunInfo[i][DropTimer]);
			DestroyObject(GunInfo[i][DropObj]);
            //DestroyDynamic3DTextLabel(GunInfo[i][DropLabel]);
           	return 1;
      	}
 	}
 	return 1;
}
*/

DropGun_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROP_ITEMS; i ++) if (GunInfo[i][DropID] != -1 && IsPlayerInRangeOfPoint(playerid, 1.5, GunInfo[i][DropGunPosX], GunInfo[i][DropGunPosY], GunInfo[i][DropGunPosZ])) return i;

	return -1;
}

RemoveWeapon(playerid, weaponid)
{
    deleyAC_Nop{ playerid } = true;

	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		else {
            PlayerData[playerid][pGuns][i] = 0;
            PlayerData[playerid][pAmmo][i] = 0;
	    }
	}

    cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));

	deleyAC_Nop{ playerid } = false;
	return 1;
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
    	PlayerData[playerid][pGuns][i] = 0;
    	PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 5000)
{
	if (PlayerData[playerid][pFreeze])
	{
	    KillTimer(PlayerData[playerid][pFreezeTimer]);
	    PlayerData[playerid][pFreeze] = 0;
	    TogglePlayerControllable(playerid, 1);
	}
	SetPlayerPos(playerid, x, y, z + 0.5);
	TogglePlayerControllable(playerid, 0);

	PlayerData[playerid][pFreeze] = 1;
	PlayerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerToUnfreeze", time, false, "dfff", playerid, x, y, z);
	return 1;
}


forward SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z);
public SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
	if (!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
	    return 0;

	PlayerData[playerid][pFreeze] = 0;

	SetPlayerPos(playerid, x, y, z);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock CheckFallInAir(playerid)
{
    new index = GetPlayerAnimationIndex(playerid);
    return (index == 1130||
	index == 1132||
	index == 1129||
	index == 1133||
	index == 1134 ||
	index == 958); //FALL_FALL, FALL_GLIDE, FALL_COLLAPSE, FALL_LAND, FALL_SKYDIVE
}


stock SetCooldown(playerid,type,amount)
{

	cooldowns[playerid][type] = gettime();
	cooldowns_expire[playerid][type] = amount;

}

stock HasCooldown(playerid,type)
{

	new diff = (gettime() - cooldowns[playerid][type]);
	if(diff >= cooldowns_expire[playerid][type]) return false;
	return true;

}

stock ResetCooldowns(playerid) for(new i = 0; i != MAX_COOLDOWNS; ++i) cooldowns[playerid][i] = 0;

stock GetCooldownLevel(playerid,type)
{

	new diff = (cooldowns_expire[playerid][type] - (gettime() - cooldowns[playerid][type]));
	return diff;

}

stock RemoveBuilding(playerid)
{
   //Treino PM
    RemoveBuildingForPlayer(playerid, 6935, 2686.1953, 2663.4063, 23.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 6936, 2729.4375, 2685.6328, 35.1641, 0.25);
    RemoveBuildingForPlayer(playerid, 6938, 2693.4844, 2696.6641, 19.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 6940, 2505.9141, 2690.5000, 43.7344, 0.25);
    RemoveBuildingForPlayer(playerid, 6941, 2717.9453, 2773.6250, 43.7344, 0.25);
    RemoveBuildingForPlayer(playerid, 6942, 2593.2578, 2638.3359, 61.9219, 0.25);
    RemoveBuildingForPlayer(playerid, 6943, 2632.5547, 2832.2500, 75.6719, 0.25);
    RemoveBuildingForPlayer(playerid, 960, 2565.6016, 2820.4766, 10.1953, 500.0);
    RemoveBuildingForPlayer(playerid, 961, 2566.4453, 2819.5469, 10.2031, 500.0);
    RemoveBuildingForPlayer(playerid, 985, 2497.4063, 2777.0703, 11.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 986, 2497.4063, 2769.1094, 11.5313, 0.25);
    RemoveBuildingForPlayer(playerid, 7170, 2706.4531, 2762.9141, 13.2500, 0.25);
    RemoveBuildingForPlayer(playerid, 7201, 2615.5000, 2740.6719, 85.7188, 0.25);
    RemoveBuildingForPlayer(playerid, 7237, 2692.0703, 2784.8984, 35.1641, 0.25);
    RemoveBuildingForPlayer(playerid, 7239, 2592.2578, 2660.4453, 23.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 7276, 2686.1953, 2663.4063, 23.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 6932, 2505.9141, 2690.5000, 43.7344, 0.25);
    RemoveBuildingForPlayer(playerid, 3474, 2523.9688, 2818.4922, 16.7422, 0.25);
    RemoveBuildingForPlayer(playerid, 7172, 2546.0313, 2828.7344, 11.5391, 0.25);
    RemoveBuildingForPlayer(playerid, 6934, 2593.2578, 2638.3359, 61.9219, 0.25);
    RemoveBuildingForPlayer(playerid, 7238, 2592.2578, 2660.4453, 23.3984, 0.25);
    RemoveBuildingForPlayer(playerid, 7040, 2594.3750, 2680.0234, 13.2500, 0.25);
    RemoveBuildingForPlayer(playerid, 6931, 2686.1953, 2663.4063, 23.4766, 0.25);
    RemoveBuildingForPlayer(playerid, 6928, 2729.4375, 2685.6328, 35.1641, 0.25);
    RemoveBuildingForPlayer(playerid, 7229, 2629.2188, 2742.9922, 14.8906, 0.25);
    RemoveBuildingForPlayer(playerid, 7039, 2629.2891, 2742.9219, 10.8203, 0.25);
    RemoveBuildingForPlayer(playerid, 6930, 2693.4844, 2696.6641, 19.0234, 0.25);
    RemoveBuildingForPlayer(playerid, 3474, 2664.7969, 2704.4141, 16.7422, 0.25);
    RemoveBuildingForPlayer(playerid, 7104, 2706.4531, 2762.9141, 13.2500, 0.25);
    RemoveBuildingForPlayer(playerid, 6933, 2717.9453, 2773.6250, 43.7344, 0.25);
    RemoveBuildingForPlayer(playerid, 7236, 2692.0703, 2784.8984, 35.1641, 0.25);
    RemoveBuildingForPlayer(playerid, 7291, 2632.5547, 2832.2500, 75.6719, 0.25);
    //Predio em Construção Pista de Skate
    RemoveBuildingForPlayer(playerid, 5466, 1881.7969, -1315.5391, 37.9453, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 1861.7422, -1330.8906, 12.8672, 0.25);
    RemoveBuildingForPlayer(playerid, 1308, 1861.7891, -1305.2109, 12.8672, 0.25);
    RemoveBuildingForPlayer(playerid, 5463, 1881.7969, -1315.5391, 37.9453, 0.25);
    RemoveBuildingForPlayer(playerid, 5464, 1902.4297, -1309.5391, 29.9141, 0.25); // 78
    //Bar #3 desbugado // 681.557861 -455.680053 -25.609874 // INT 1
    RemoveBuildingForPlayer(playerid, 14656, 681.5000, -447.3750, -25.0234, 0.25);
    //Unity Station
    RemoveBuildingForPlayer(playerid, 4961, 1745.2031, -1882.8516, 26.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 5033, 1745.2031, -1882.8516, 26.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 5055, 1745.2031, -1882.8516, 26.1406, 0.25);
    RemoveBuildingForPlayer(playerid, 4821, 1745.2031, -1882.8516, 26.1406, 0.25);
    //Semaforos
    RemoveBuildingForPlayer(playerid, 1283, 1822.5703, -1763.2578, 15.5859, 10000.0);
    RemoveBuildingForPlayer(playerid, 1315, 2535.6406, -1738.6016, 15.7578, 10000.0);
    RemoveBuildingForPlayer(playerid, 1350, 1291.8359, -1702.4609, 12.2500, 10000.0);
	//Igreja
    RemoveBuildingForPlayer(playerid, 4070, 1719.7422, -1770.7813, 23.4297, 0.25);
    RemoveBuildingForPlayer(playerid, 3986, 1719.7422, -1770.7813, 23.4297, 0.25);
	//Patio
	RemoveBuildingForPlayer(playerid, 1530, 2820.340, -1190.979, 25.671, 0.250);
	RemoveBuildingForPlayer(playerid, 17947, 2815.409, -1188.500, 26.601, 0.250);
	RemoveBuildingForPlayer(playerid, 1498, 2807.290, -1175.489, 24.390, 0.250);
	RemoveBuildingForPlayer(playerid, 17575, 2815.020, -1183.229, 27.921, 0.250);
	RemoveBuildingForPlayer(playerid, 17948, 2815.020, -1183.229, 27.921, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2814.949, -1158.439, 22.140, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2823.699, -1157.800, 20.367, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 2825.899, -1157.209, 18.781, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2798.929, -1178.869, 23.648, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2796.459, -1187.000, 22.562, 0.250);
	RemoveBuildingForPlayer(playerid, 714, 2823.780, -1213.089, 23.742, 0.250);

	//Bombeiros
	RemoveBuildingForPlayer(playerid, 620, 930.242, -1442.979, 12.281, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 929.937, -1447.800, 12.491, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 930.242, -1451.800, 12.491, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 950.125, -1420.270, 12.100, 0.250);
	RemoveBuildingForPlayer(playerid, 621, 950.445, -1476.947, 12.328, 0.250);
	RemoveBuildingForPlayer(playerid, 1529, 947.484, -1466.718, 17.242, 0.250);
	RemoveBuildingForPlayer(playerid, 6148, 941.250, -1447.770, 21.420, 0.250);
	RemoveBuildingForPlayer(playerid, 6155, 941.250, -1447.770, 21.420, 0.250);
	RemoveBuildingForPlayer(playerid, 6152, 990.085, -1450.088, 12.772, 0.250);
	RemoveBuildingForPlayer(playerid, 6156, 990.085, -1450.088, 12.772, 0.250);
	RemoveBuildingForPlayer(playerid, 6192, 988.906, -1487.910, 24.538, 0.250);
	//Palco Prefeitura
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1716.7031, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.6953, -1702.5313, 15.6250, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1692.3906, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1468.9844, -1682.7188, 13.4531, 0.25);
    RemoveBuildingForPlayer(playerid, 1231, 1479.3828, -1682.3125, 15.6328, 0.25);
    RemoveBuildingForPlayer(playerid, 1280, 1488.7656, -1682.6719, 13.4531, 0.25);
	//Prefeitura
	RemoveBuildingForPlayer(playerid, 3980, 1481.189, -1785.069, 22.382, 0.250);
	RemoveBuildingForPlayer(playerid, 4044, 1481.189, -1785.069, 22.382, 0.250);
	RemoveBuildingForPlayer(playerid, 4003, 1481.079, -1747.030, 33.523, 0.250);
	RemoveBuildingForPlayer(playerid, 4002, 1479.869, -1790.400, 56.023, 0.250);
	RemoveBuildingForPlayer(playerid, 4024, 1479.869, -1790.400, 56.023, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 1464.089, -1831.880, 12.398, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1447.099, -1832.500, 12.914, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1456.400, -1832.530, 11.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1231, 1432.300, -1832.910, 15.289, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1417.979, -1832.530, 11.984, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 1405.579, -1831.699, 12.398, 0.250);
	RemoveBuildingForPlayer(playerid, 1294, 1385.239, -1833.270, 16.906, 0.250);
	RemoveBuildingForPlayer(playerid, 713, 1405.229, -1821.119, 13.101, 0.250);
	RemoveBuildingForPlayer(playerid, 4174, 1435.770, -1823.660, 15.179, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 1499.050, -1832.270, 12.882, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1504.839, -1832.530, 11.984, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1512.949, -1832.349, 13.468, 0.250);
	RemoveBuildingForPlayer(playerid, 1231, 1529.290, -1832.910, 15.289, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1549.530, -1832.310, 12.882, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 1555.660, -1830.589, 13.023, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1554.819, -1816.160, 13.476, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 1553.260, -1764.810, 12.796, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1553.699, -1747.939, 13.406, 0.250);
	RemoveBuildingForPlayer(playerid, 4172, 1534.770, -1756.180, 15.000, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1533.270, -1749.020, 12.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1516.000, -1748.599, 13.007, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 1522.160, -1748.569, 13.023, 0.250);
	RemoveBuildingForPlayer(playerid, 4030, 1536.140, -1743.689, 6.710, 0.250);
	RemoveBuildingForPlayer(playerid, 4138, 1536.140, -1743.689, 6.710, 0.250);
	RemoveBuildingForPlayer(playerid, 1527, 1448.229, -1755.900, 14.523, 0.250);
	RemoveBuildingForPlayer(playerid, 4173, 1427.270, -1756.180, 15.000, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1438.030, -1747.939, 13.445, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1447.910, -1748.229, 12.906, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1429.530, -1748.420, 12.906, 0.250);
	RemoveBuildingForPlayer(playerid, 673, 1415.310, -1748.560, 12.398, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 1461.130, -1687.560, 11.835, 0.250);
	RemoveBuildingForPlayer(playerid, 713, 1407.199, -1749.310, 13.093, 0.250);
	RemoveBuildingForPlayer(playerid, 700, 1404.910, -1765.270, 12.914, 0.250);
	RemoveBuildingForPlayer(playerid, 3997, 1479.339, -1802.290, 12.546, 0.250);
	RemoveBuildingForPlayer(playerid, 4045, 1479.339, -1802.290, 12.546, 0.250);
	RemoveBuildingForPlayer(playerid, 4175, 1524.410, -1823.849, 15.179, 0.250);
	RemoveBuildingForPlayer(playerid, 1231, 1480.030, -1832.910, 15.289, 0.250);
	RemoveBuildingForPlayer(playerid, 1265, 1465.479, -1848.250, 12.992, 0.250);
	RemoveBuildingForPlayer(playerid, 1372, 1466.949, -1847.839, 12.664, 0.250);
	RemoveBuildingForPlayer(playerid, 1372, 1468.060, -1847.790, 12.664, 0.250);
	//Floricultura
	RemoveBuildingForPlayer(playerid, 5585, 2116.320, -1342.859, 26.734, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2089.234, -1371.617, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2089.234, -1366.164, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2089.234, -1360.710, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2089.234, -1355.257, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2089.234, -1349.812, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2110.375, -1371.617, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2110.375, -1366.164, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1408, 2110.367, -1360.710, 23.421, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 2111.625, -1362.640, 23.500, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2111.453, -1364.609, 23.335, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2111.500, -1360.531, 23.265, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2112.210, -1360.125, 23.335, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2113.671, -1362.507, 23.265, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2112.171, -1359.531, 23.265, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2114.335, -1361.515, 23.265, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2097.773, -1344.242, 23.281, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2098.765, -1344.914, 23.281, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2098.367, -1344.210, 23.351, 0.250);
	RemoveBuildingForPlayer(playerid, 1230, 2100.750, -1342.742, 23.281, 0.250);
	RemoveBuildingForPlayer(playerid, 1220, 2099.750, -1342.078, 23.281, 0.250);
	RemoveBuildingForPlayer(playerid, 1224, 2100.882, -1344.789, 23.507, 0.250);
	RemoveBuildingForPlayer(playerid, 1221, 2102.843, -1344.960, 23.351, 0.250);
	RemoveBuildingForPlayer(playerid, 5425, 2116.320, -1342.859, 26.734, 0.250);
	RemoveBuildingForPlayer(playerid, 5635, 2182.289, -1324.750, 28.601, 0.250);
	//Comunidade 1
	RemoveBuildingForPlayer(playerid, 5182, 2115.000, -1921.520, 15.390, 0.250);
	RemoveBuildingForPlayer(playerid, 5208, 2115.000, -1921.520, 15.390, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2122.659, -1916.790, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2121.510, -1909.530, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2123.360, -1928.069, 6.843, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2116.929, -1916.079, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2115.669, -1922.770, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2113.399, -1925.040, 10.804, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2114.550, -1928.189, 5.031, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2110.270, -1906.589, 5.031, 0.250);
	RemoveBuildingForPlayer(playerid, 1226, 2118.290, -1939.400, 16.390, 0.250);
	RemoveBuildingForPlayer(playerid, 5374, 2085.280, -1909.709, 23.000, 0.250);
   //lombadas
    RemoveBuildingForPlayer(playerid, 1283, 1530.119, -1717.010, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1513.229, -1732.920, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1441.859, -1733.010, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1414.410, -1731.430, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1403.369, -1733.010, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1388.359, -1745.447, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1376.520, -1731.848, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1357.520, -1732.937, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1335.197, -1731.780, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1325.708, -1732.828, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1311.270, -1746.119, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1291.838, -1702.458, 12.250, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1286.260, -1718.250, 12.444, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1430.170, -1719.468, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1428.937, -1605.817, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1428.900, -1577.130, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1416.588, -1591.739, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1443.197, -1592.947, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1516.160, -1591.660, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1544.630, -1593.030, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1528.947, -1605.859, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1568.880, -1745.479, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1582.670, -1733.130, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1672.020, -1731.520, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1701.989, -1732.880, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1688.869, -1745.468, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1736.530, -1731.800, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1750.270, -1719.630, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1762.790, -1732.828, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1820.838, -1741.150, 15.578, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1832.838, -1751.510, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1822.567, -1763.260, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1702.910, -1813.109, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1690.088, -1796.848, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1688.910, -1826.510, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1690.208, -1718.578, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1690.280, -1607.838, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1676.780, -1591.609, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1664.910, -1593.130, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1646.598, -1591.687, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1658.530, -1583.317, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1703.910, -1593.670, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1744.489, -1598.338, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1765.078, -1604.187, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1810.197, -1612.910, 15.640, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1833.020, -1611.479, 15.640, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1940.910, -1741.150, 15.600, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1952.520, -1751.380, 15.553, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1930.380, -1753.098, 15.593, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1960.609, -1802.010, 15.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1962.598, -1823.520, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1972.989, -1811.447, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2070.208, -1812.880, 15.600, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2082.270, -1823.910, 15.600, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2080.937, -1800.947, 15.616, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2094.677, -1762.947, 15.725, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2104.479, -1751.828, 15.593, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2093.530, -1744.588, 15.616, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2081.166, -1740.900, 15.616, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2069.260, -1752.910, 15.694, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2013.290, -1751.770, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1990.609, -1752.838, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2001.040, -1740.810, 15.616, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2001.920, -1683.619, 15.538, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2001.359, -1665.540, 15.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2013.067, -1671.869, 15.694, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2070.340, -1672.729, 15.694, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2082.030, -1683.670, 15.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2081.208, -1660.947, 15.538, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2082.270, -1623.880, 15.609, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2083.800, -1611.750, 15.609, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2092.989, -1604.160, 15.600, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2103.840, -1612.729, 15.600, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2186.135, -1640.369, 17.444, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2208.895, -1644.660, 17.375, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2235.166, -1659.280, 17.607, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2236.040, -1650.420, 17.600, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2350.156, -1664.687, 15.750, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2335.375, -1653.290, 15.578, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2221.840, -1659.119, 17.600, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2078.625, -1883.328, 15.812, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2084.530, -1905.489, 15.812, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2092.906, -1891.380, 15.812, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1545.770, -1731.670, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1568.930, -1855.109, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1553.979, -1873.067, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1539.930, -1871.640, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1530.880, -1883.229, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1518.800, -1873.380, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1442.937, -1871.420, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1411.218, -1872.930, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1405.160, -1871.598, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1373.458, -1872.229, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1388.390, -1855.670, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1193.130, -1851.468, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1174.098, -1835.500, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1071.410, -1847.078, 12.380, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1066.890, -1863.780, 12.380, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1041.479, -1800.280, 12.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1029.598, -1789.550, 12.928, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1042.838, -1722.530, 12.444, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1047.900, -1706.790, 12.250, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1032.150, -1701.729, 12.444, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1053.150, -1505.598, 12.475, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1047.640, -1485.430, 12.420, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1038.790, -1499.119, 12.420, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 927.976, -1768.578, 12.444, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1345.770, -1740.619, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1160.540, -1706.770, 12.444, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1144.790, -1701.708, 12.250, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1155.598, -1582.550, 12.281, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1163.989, -1566.760, 12.475, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1139.500, -1577.270, 12.397, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1206.270, -1567.078, 12.397, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1190.170, -1561.800, 12.281, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1286.680, -1577.930, 12.656, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1292.260, -1562.150, 12.460, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1184.588, -1577.588, 12.475, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 922.906, -1500.088, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 912.265, -1478.609, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 820.585, -1763.880, 12.397, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 804.664, -1759.197, 11.755, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 1139.729, -1717.458, 12.444, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 841.164, -1602.650, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 826.539, -1610.270, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 834.585, -1624.719, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 804.843, -1664.839, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 799.773, -1680.400, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 815.656, -1682.589, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 781.734, -1581.400, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 765.593, -1576.329, 12.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 760.000, -1591.910, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 743.226, -1591.839, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 756.343, -1596.550, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 762.742, -1760.199, 11.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 749.632, -1753.630, 11.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 504.359, -1450.310, 17.304, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 918.007, -1337.780, 15.539, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 907.976, -1319.550, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 927.945, -1327.880, 15.585, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 951.445, -1327.949, 15.492, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1093.069, -1140.250, 25.906, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1072.260, -1140.199, 25.789, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1045.609, -1140.160, 25.859, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 973.109, -1140.239, 25.835, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 954.671, -1149.859, 25.835, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 932.382, -1149.859, 25.835, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 961.921, -1130.449, 25.835, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1053.160, -1159.699, 25.906, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1083.390, -1130.270, 25.906, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1083.439, -1050.050, 33.890, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1084.130, -1029.280, 34.281, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1072.050, -1040.050, 33.851, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1094.709, -1038.699, 34.078, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2187.060, -1120.810, 26.820, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2200.820, -1127.660, 27.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2225.659, -1129.930, 27.843, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2259.909, -1145.839, 29.054, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2271.949, -1160.890, 28.726, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2269.979, -1209.349, 26.039, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2272.149, -1231.479, 26.000, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2270.060, -1289.689, 26.015, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2271.770, -1311.819, 26.000, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2260.149, -1301.650, 26.007, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2259.750, -1385.119, 26.250, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2224.129, -1383.780, 26.148, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2201.179, -1385.079, 26.039, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2178.239, -1383.910, 26.203, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2155.689, -1384.920, 26.250, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2139.300, -1383.579, 26.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2123.570, -1384.089, 25.992, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2101.159, -1384.839, 26.085, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2113.260, -1395.650, 25.992, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2111.760, -1449.989, 26.085, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2129.949, -1397.020, 26.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2166.209, -1373.109, 26.125, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2167.810, -1311.819, 25.921, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2178.040, -1300.020, 25.992, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2072.419, -1312.160, 26.039, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2082.889, -1300.270, 26.046, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2066.360, -1290.260, 26.007, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2066.159, -1329.969, 26.031, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2055.719, -1341.500, 26.109, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2072.449, -1351.869, 26.015, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2072.399, -1271.699, 26.015, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2066.260, -1249.800, 26.031, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2072.620, -1232.459, 26.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2066.139, -1210.560, 26.039, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2072.739, -1146.729, 26.031, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2066.080, -1124.839, 25.968, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2055.350, -1136.689, 26.125, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2072.530, -1103.089, 26.968, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2084.340, -1095.130, 27.140, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2058.280, -1085.300, 26.921, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1995.040, -1052.040, 26.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1981.430, -1038.369, 26.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1969.300, -1053.890, 26.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2535.639, -1738.599, 15.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2520.030, -1729.189, 15.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2444.709, -1729.449, 15.968, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2423.719, -1726.349, 15.968, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2421.070, -1738.599, 15.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2407.570, -1756.640, 15.781, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2436.739, -1496.989, 26.210, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1984.290, -1066.040, 26.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2113.570, -1477.699, 26.085, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2100.969, -1466.719, 26.046, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1998.339, -1460.290, 15.562, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1975.130, -1466.709, 15.484, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1986.219, -1449.500, 15.718, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1871.660, -1147.410, 26.101, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1862.109, -1123.489, 26.101, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1878.410, -1131.099, 26.101, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2082.370, -1220.229, 26.101, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2259.909, -1221.770, 26.023, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2155.780, -1301.599, 25.984, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2166.129, -1289.689, 25.992, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2178.040, -1300.020, 25.992, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2316.370, -1147.430, 29.179, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2310.479, -1158.819, 29.195, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2190.469, -1105.719, 27.070, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2218.270, -1112.520, 27.835, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2378.439, -1159.520, 29.804, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2382.110, -1167.709, 29.906, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 2856.979, -1140.869, 13.101, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2864.139, -1393.189, 13.335, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2743.260, -1481.819, 32.531, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2716.860, -1514.979, 32.531, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2716.729, -1632.489, 15.484, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2815.760, -1651.849, 13.125, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2648.270, -1063.750, 71.757, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2848.050, -1664.010, 13.125, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2820.340, -2038.589, 13.375, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2812.149, -2052.020, 13.375, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1427.300, -1890.290, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1284, -1572.449, 852.601, 9.367, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1585.680, -1871.670, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2425.050, -2006.839, 15.812, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2410.770, -1998.800, 15.812, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2416.659, -2020.969, 15.812, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1821.030, -1601.229, 15.640, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1822.160, -1623.520, 15.640, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 838.601, -875.890, 70.804, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2364.090, -1378.810, 26.273, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2349.800, -1390.050, 26.257, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2336.820, -1491.349, 26.289, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2347.929, -1516.800, 25.890, 0.250);
    RemoveBuildingForPlayer(playerid, 1315, 2420.580, -1526.969, 26.289, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1753.449, -1610.829, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1731.219, -1441.329, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1781.390, -1450.560, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1667.469, -1441.369, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1646.439, -1441.449, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1657.599, -1449.579, 15.625, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1140.900, -1280.119, 15.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1150.510, -1269.939, 15.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1161.589, -1281.359, 15.710, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1216.319, -1281.410, 15.593, 0.250);
    RemoveBuildingForPlayer(playerid, 1283, 1269.550, -1280.319, 15.710, 0.250);
	//pcesp ext
	RemoveBuildingForPlayer(playerid, 5967, 1259.437, -1246.812, 17.108, 0.250);
	RemoveBuildingForPlayer(playerid, 1388, 1238.375, -1258.281, 57.202, 0.250);
	RemoveBuildingForPlayer(playerid, 1391, 1238.375, -1258.272, 44.664, 0.250);
	RemoveBuildingForPlayer(playerid, 5857, 1259.437, -1246.812, 17.108, 0.250);
	RemoveBuildingForPlayer(playerid, 2121, 2815.379, -1172.479, 1025.089, 0.250);
	RemoveBuildingForPlayer(playerid, 2121, 2813.949, -1172.459, 1025.089, 0.250);
	RemoveBuildingForPlayer(playerid, 2116, 2814.300, -1173.420, 1024.550, 0.250);
	RemoveBuildingForPlayer(playerid, 2059, 2814.840, -1173.479, 1025.359, 0.250);
	RemoveBuildingForPlayer(playerid, 2156, 2813.649, -1167.000, 1024.569, 0.250);
	RemoveBuildingForPlayer(playerid, 2160, 2815.899, -1164.910, 1024.560, 0.250);
	RemoveBuildingForPlayer(playerid, 2159, 2817.270, -1164.910, 1024.560, 0.250);
	RemoveBuildingForPlayer(playerid, 2157, 2818.639, -1164.910, 1024.560, 0.250);
	RemoveBuildingForPlayer(playerid, 2157, 2820.629, -1167.310, 1024.569, 0.250);
	RemoveBuildingForPlayer(playerid, 2157, 2818.709, -1173.949, 1024.569, 0.250);
	RemoveBuildingForPlayer(playerid, 2046, 2819.449, -1174.000, 1026.359, 0.250);
	RemoveBuildingForPlayer(playerid, 1502, 2813.260, -1168.959, 1024.560, 0.250);
	RemoveBuildingForPlayer(playerid, 1765, 2811.479, -1168.410, 1024.560, 0.250);
	RemoveBuildingForPlayer(playerid, 2053, 2810.610, -1167.579, 1024.630, 0.250);
	RemoveBuildingForPlayer(playerid, 2297, 2811.020, -1165.060, 1024.560, 0.250);
	RemoveBuildingForPlayer(playerid, 2058, 2809.639, -1165.339, 1024.579, 0.250);
	RemoveBuildingForPlayer(playerid, 1764, 2808.659, -1166.949, 1024.569, 0.250);
	RemoveBuildingForPlayer(playerid, 1821, 2810.590, -1167.619, 1024.560, 0.250);
	RemoveBuildingForPlayer(playerid, 2069, 2806.389, -1166.819, 1024.630, 0.250);
	RemoveBuildingForPlayer(playerid, 2100, 2805.510, -1165.560, 1024.569, 0.250);
	RemoveBuildingForPlayer(playerid, 2276, 2809.209, -1165.270, 1026.689, 0.250);
	RemoveBuildingForPlayer(playerid, 2272, 2811.340, -1165.270, 1026.790, 0.250);
	RemoveBuildingForPlayer(playerid, 2275, 2812.610, -1168.109, 1026.449, 0.250);
	RemoveBuildingForPlayer(playerid, 2051, 2813.129, -1171.290, 1026.339, 0.250);
	RemoveBuildingForPlayer(playerid, 1736, 2812.830, -1172.300, 1027.050, 0.250);
	RemoveBuildingForPlayer(playerid, 16340, -952.609, 1943.420, 11.273, 0.250);
	RemoveBuildingForPlayer(playerid, 2050, 2813.129, -1173.339, 1026.339, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2810.300, -1172.849, 1025.209, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2810.300, -1172.849, 1025.050, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2810.300, -1172.849, 1024.880, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2810.300, -1172.849, 1024.699, 0.250);
	RemoveBuildingForPlayer(playerid, 2064, 2810.840, -1171.900, 1025.199, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2810.020, -1171.229, 1024.699, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2811.600, -1172.849, 1025.209, 0.250);
	RemoveBuildingForPlayer(playerid, 16344, -950.109, 1921.800, 14.992, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2811.600, -1172.849, 1025.050, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2811.600, -1172.849, 1024.880, 0.250);
	RemoveBuildingForPlayer(playerid, 2060, 2811.600, -1172.849, 1024.699, 0.250);
	RemoveBuildingForPlayer(playerid, 2046, 2806.229, -1174.569, 1026.359, 0.250);
	RemoveBuildingForPlayer(playerid, 2049, 2805.209, -1173.489, 1026.520, 0.250);
	RemoveBuildingForPlayer(playerid, 2241, 2805.689, -1173.520, 1025.069, 0.250);
	RemoveBuildingForPlayer(playerid, 2048, 2805.209, -1172.050, 1026.890, 0.250);
	RemoveBuildingForPlayer(playerid, 2055, 2805.199, -1170.540, 1026.510, 0.250);
	RemoveBuildingForPlayer(playerid, 2241, 2811.689, -1168.510, 1028.680, 0.250);
	RemoveBuildingForPlayer(playerid, 2091, 2819.800, -1165.660, 1028.160, 0.250);
	RemoveBuildingForPlayer(playerid, 2047, 2817.310, -1170.969, 1031.170, 0.250);
	RemoveBuildingForPlayer(playerid, 2255, 2814.570, -1169.290, 1029.910, 0.250);
	RemoveBuildingForPlayer(playerid, 2300, 2818.649, -1166.510, 1028.170, 0.250);
	RemoveBuildingForPlayer(playerid, 1502, 2813.899, -1165.920, 1028.160, 0.250);
	RemoveBuildingForPlayer(playerid, 2068, 2809.199, -1169.369, 1027.530, 0.250);
	RemoveBuildingForPlayer(playerid, 14383, 2817.360, -1169.319, 1026.319, 0.250);
	//posto sul
	RemoveBuildingForPlayer(playerid, 5409, 1918.849, -1776.329, 16.976, 0.250);
	RemoveBuildingForPlayer(playerid, 5535, 1918.849, -1776.329, 16.976, 0.250);
	RemoveBuildingForPlayer(playerid, 1524, 1910.160, -1779.660, 18.750, 0.250);
	RemoveBuildingForPlayer(playerid, 5681, 1921.479, -1778.910, 18.578, 0.250);
	RemoveBuildingForPlayer(playerid, 955, 1928.729, -1772.449, 12.945, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1767.290, 14.140, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1771.339, 14.140, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1774.310, 14.140, 0.250);
	RemoveBuildingForPlayer(playerid, 1676, 1941.660, -1778.449, 14.140, 0.250);
	//Navio do Porto
	RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5154, 2838.1406, -2447.8438, 15.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.25);
    //Porto
    RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2417.7891, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3710, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3744, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3770, 2795.8281, -2394.2422, 14.1719, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2534.9531, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2520.5469, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2501.8359, 14.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2493.9844, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2486.9609, 14.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2455.8828, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2425.3516, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2774.7969, -2386.8516, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2771.0703, -2372.4453, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2783.7813, -2410.2109, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3624, 2788.1563, -2417.7891, 16.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 3574, 2789.2109, -2377.6250, 15.2188, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2501.8359, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2486.8281, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2486.9609, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2463.8203, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2448.3438, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2448.4766, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2425.3516, 14.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2791.9531, -2410.2109, 14.6563, 0.25);
	RemoveBuildingForPlayer(playerid, 3761, 2797.5156, -2410.0781, 14.6328, 0.25);
	RemoveBuildingForPlayer(playerid, 3626, 2795.8281, -2394.2422, 14.1719, 0.25);
	//caixa economica
	RemoveBuildingForPlayer(playerid, 4552, 1391.130, -1318.089, 24.664, 0.250);
	RemoveBuildingForPlayer(playerid, 4632, 1391.130, -1318.089, 24.664, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1403.380, -1299.270, 17.109, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1417.020, -1282.890, 16.890, 0.250);
	RemoveBuildingForPlayer(playerid, 4711, 1392.189, -1336.800, 15.984, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1403.380, -1328.869, 15.796, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1403.380, -1342.410, 15.796, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1398.890, -1250.599, 25.445, 0.250);
	RemoveBuildingForPlayer(playerid, 1617, 1398.890, -1250.599, 16.546, 0.250);
	RemoveBuildingForPlayer(playerid, 1533, 1369.400, -1278.280, 12.539, 0.250);
	RemoveBuildingForPlayer(playerid, 1537, 1369.400, -1281.300, 12.539, 0.250);
	RemoveBuildingForPlayer(playerid, 4588, 1405.880, -1254.790, 34.000, 0.250);
	RemoveBuildingForPlayer(playerid, 4757, 1404.1406, -1309.1328, 43.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1266, 1371.4688, -1268.2188, 37.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 4736, 1404.1406, -1309.1328, 43.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 1260, 1371.4688, -1268.2188, 37.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 4752, 1430.8516, -1340.7500, 23.0469, 0.25);
    //posto norte
    RemoveBuildingForPlayer(playerid, 5853, 1018.159, -908.976, 43.648, 0.250);
    RemoveBuildingForPlayer(playerid, 5898, 1018.159, -908.976, 43.648, 0.250);
    RemoveBuildingForPlayer(playerid, 1522, 1000.880, -919.109, 41.289, 0.250);
	//Shopping
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1050.1328, -1566.4375, 12.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1117.6094, -1536.9766, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1111.5625, -1533.9609, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1105.6016, -1531.1563, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1141.5781, -1566.4375, 12.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1545.6016, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1137.9297, -1537.0625, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1143.7891, -1534.7031, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1148.6016, -1532.2578, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1097.4766, -1523.9766, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1093.4219, -1519.8281, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1089.5781, -1515.7891, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1087.1953, -1510.4922, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1084.9688, -1504.4219, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1101.1406, -1527.9688, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1128.7344, -1518.4922, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1111.2578, -1512.3594, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1077.8594, -1499.8672, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1083.6719, -1499.4922, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1106.4375, -1501.3750, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1134.0781, -1500.3750, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1123.2500, -1500.5313, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1124.3672, -1476.9844, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 712, 1133.2266, -1476.2266, 22.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1144.3984, -1512.7891, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1152.3828, -1502.5391, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1153.5391, -1529.8047, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1157.8203, -1525.4844, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1161.3281, -1521.5781, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1165.1563, -1517.2109, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1167.7813, -1513.1797, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1169.1641, -1509.3359, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1170.8047, -1503.5547, 30.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1503.3906, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 955, 1154.7266, -1460.8906, 15.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1467.4688, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1456.4375, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1445.1016, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1139.9219, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1118.0156, -1434.0703, 15.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1458.7344, 12.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 792, 1190.2578, -1426.3516, 12.6641, 0.25);
	//parque gleen
	RemoveBuildingForPlayer(playerid, 620, 2367.601, -1706.289, 11.289, 0.250);
	RemoveBuildingForPlayer(playerid, 620, 2375.062, -1715.796, 11.289, 0.250);
	RemoveBuildingForPlayer(playerid, 17876, 2393.062, -1677.523, 20.820, 0.250);
	//pmesp
	RemoveBuildingForPlayer(playerid, 1690, 702.531, -546.609, 21.007, 0.250);
	RemoveBuildingForPlayer(playerid, 1690, 694.640, -571.492, 21.007, 0.250);
	RemoveBuildingForPlayer(playerid, 1688, 705.343, -576.140, 21.328, 0.250);
	RemoveBuildingForPlayer(playerid, 12863, 701.710, -565.132, 15.335, 0.250);
	RemoveBuildingForPlayer(playerid, 13242, 701.710, -565.132, 15.335, 0.250);
	RemoveBuildingForPlayer(playerid, 1690, 702.531, -546.609, 21.006, 0.250);
	RemoveBuildingForPlayer(playerid, 1690, 694.640, -571.492, 21.006, 0.250);
	RemoveBuildingForPlayer(playerid, 1688, 705.343, -576.140, 21.327, 0.250);
	RemoveBuildingForPlayer(playerid, 12863, 701.710, -565.132, 15.335, 0.250);
	//Cargo Ship
	RemoveBuildingForPlayer(playerid, 5156, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5159, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5160, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5161, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5162, 2838.0391, -2423.8828, 10.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 5163, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5164, 2838.1406, -2447.8438, 15.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 5165, 2838.0313, -2520.1875, 18.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 5166, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5167, 2838.0313, -2371.9531, 7.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 5335, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5336, 2829.9531, -2479.5703, 5.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 5352, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5157, 2838.0391, -2532.7734, 17.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 5154, 2838.1406, -2447.8438, 15.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2488.6641, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5155, 2838.0234, -2358.4766, 21.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 3724, 2838.1953, -2407.1406, 29.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 5158, 2837.7734, -2334.4766, 11.9922, 0.25);


	//YURI MANDO
 	//cracolandia
    RemoveBuildingForPlayer(playerid, 17944, 2674.020, -1382.550, 52.695, 0.250);
    RemoveBuildingForPlayer(playerid, 17945, 2674.020, -1382.550, 52.695, 0.250);
    RemoveBuildingForPlayer(playerid, 17592, 2697.500, -1451.420, 35.492, 0.250);
    RemoveBuildingForPlayer(playerid, 17955, 2717.4922, -1416.1875, 50.4297, 0.25);
    //posto norte

    //ammu nation
    RemoveBuildingForPlayer(playerid, 620, 1305.670, -1583.699, 12.585, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1305.560, -1614.829, 12.289, 0.250);
    RemoveBuildingForPlayer(playerid, 6253, 1305.469, -1619.739, 13.398, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1305.560, -1641.530, 12.289, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1305.670, -1669.900, 12.585, 0.250);
    RemoveBuildingForPlayer(playerid, 620, 1304.119, -1696.800, 12.289, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1729.939, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1753.589, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1780.109, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1808.489, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 713, 1304.770, -1839.869, 12.437, 0.250);
    RemoveBuildingForPlayer(playerid, 6127, 1306.520, -1630.359, 12.468, 0.250);
    RemoveBuildingForPlayer(playerid, 6172, 1306.520, -1630.359, 12.468, 0.250);
    RemoveBuildingForPlayer(playerid, 1350, 928.140, -1484.130, 12.500, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1380.349, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1366.689, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1355.979, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1343.260, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 1290, 1349.989, -1348.670, 18.289, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1331.660, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1317.890, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1305.160, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1293.560, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1267.130, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1261.020, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1255.050, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.119, -1228.040, 13.093, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.109, -1215.390, 15.375, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.050, -1208.229, 16.867, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.160, -1187.290, 20.648, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1350.000, -1170.199, 23.179, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1360.579, -1012.409, 26.265, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1362.589, -992.664, 27.960, 0.250);
    RemoveBuildingForPlayer(playerid, 716, 1369.010, -965.523, 32.789, 0.250);
    RemoveBuildingForPlayer(playerid, 5859, 1350.150, -1353.369, 12.476, 0.250);
    RemoveBuildingForPlayer(playerid, 5903, 1350.150, -1353.369, 12.476, 0.250);
    RemoveBuildingForPlayer(playerid, 5750, 1350.160, -1250.839, 14.132, 0.250);
    RemoveBuildingForPlayer(playerid, 5902, 1350.160, -1250.839, 14.132, 0.250);
    RemoveBuildingForPlayer(playerid, 5799, 1350.160, -1170.819, 19.460, 0.250);
    RemoveBuildingForPlayer(playerid, 5901, 1350.160, -1170.819, 19.460, 0.250);
    RemoveBuildingForPlayer(playerid, 5793, 1365.479, -998.265, 30.328, 0.250);
    RemoveBuildingForPlayer(playerid, 5825, 1365.479, -998.265, 30.328, 0.250);
}

CreateGlobalTextDraw()
{





	TD_Restaurant[0] = TextDrawCreate(93.899887, 140.222320, "box");
	TextDrawLetterSize(TD_Restaurant[0], 0.000000, 24.239885);
	TextDrawTextSize(TD_Restaurant[0], 549.000000, 0.000000);
	TextDrawAlignment(TD_Restaurant[0], 1);
	TextDrawColor(TD_Restaurant[0], -1);
	TextDrawUseBox(TD_Restaurant[0], 1);
	TextDrawBoxColor(TD_Restaurant[0], 255);
	TextDrawSetShadow(TD_Restaurant[0], 0);
	TextDrawSetOutline(TD_Restaurant[0], 0);
	TextDrawBackgroundColor(TD_Restaurant[0], 255);
	TextDrawFont(TD_Restaurant[0], 1);
	TextDrawSetProportional(TD_Restaurant[0], 1);
	TextDrawSetShadow(TD_Restaurant[0], 0);

	TD_Restaurant[1] = TextDrawCreate(115.999969, 172.577804, "Este restaurante oferece várias refeições.~n~Escolha uma clicando na imagem.");
	TextDrawLetterSize(TD_Restaurant[1], 0.248797, 1.346132);
	TextDrawAlignment(TD_Restaurant[1], 1);
	TextDrawColor(TD_Restaurant[1], -1);
	TextDrawSetShadow(TD_Restaurant[1], 0);
	TextDrawSetOutline(TD_Restaurant[1], 0);
	TextDrawBackgroundColor(TD_Restaurant[1], 255);
	TextDrawFont(TD_Restaurant[1], 1);
	TextDrawSetProportional(TD_Restaurant[1], 1);
	TextDrawSetShadow(TD_Restaurant[1], 0);

	TD_Restaurant[2] = TextDrawCreate(531.199890, 142.711166, "X");
	TextDrawLetterSize(TD_Restaurant[2], 0.456398, 1.739377);
	TextDrawAlignment(TD_Restaurant[2], 1);
	TextDrawColor(TD_Restaurant[2], -1);
	TextDrawSetShadow(TD_Restaurant[2], 0);
	TextDrawSetOutline(TD_Restaurant[2], 0);
	TextDrawBackgroundColor(TD_Restaurant[2], 255);
	TextDrawFont(TD_Restaurant[2], 2);
	TextDrawSetProportional(TD_Restaurant[2], 1);
	TextDrawSetShadow(TD_Restaurant[2], 0);
	TextDrawSetSelectable(TD_Restaurant[2], true);

	TD_PhoneCover[0] = TextDrawCreate(333.600036, 121.804512, "SELECIONAR COR");
	TextDrawLetterSize(TD_PhoneCover[0], 0.279599, 1.465599);
	TextDrawTextSize(TD_PhoneCover[0], -0.149999, 139.000000);
	TextDrawAlignment(TD_PhoneCover[0], 2);
	TextDrawColor(TD_PhoneCover[0], -1);
	TextDrawUseBox(TD_PhoneCover[0], 1);
	TextDrawBoxColor(TD_PhoneCover[0], 80);
	TextDrawSetShadow(TD_PhoneCover[0], 0);
	TextDrawSetOutline(TD_PhoneCover[0], 0);
	TextDrawBackgroundColor(TD_PhoneCover[0], 255);
	TextDrawFont(TD_PhoneCover[0], 2);
	TextDrawSetProportional(TD_PhoneCover[0], 1);
	TextDrawSetShadow(TD_PhoneCover[0], 0);

	TD_PhoneCover[1] = TextDrawCreate(269.399841, 146.537796, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[1], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[1], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[1], 1);
	TextDrawColor(TD_PhoneCover[1], 286331391);
	TextDrawSetShadow(TD_PhoneCover[1], 0);
	TextDrawSetOutline(TD_PhoneCover[1], 0);
	TextDrawBackgroundColor(TD_PhoneCover[1], 255);
	TextDrawFont(TD_PhoneCover[1], 4);
	TextDrawSetProportional(TD_PhoneCover[1], 0);
	TextDrawSetShadow(TD_PhoneCover[1], 0);
	TextDrawSetSelectable(TD_PhoneCover[1], true);

	TD_PhoneCover[2] = TextDrawCreate(302.999847, 146.537841, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[2], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[2], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[2], 1);
	TextDrawColor(TD_PhoneCover[2], 1628113919);
	TextDrawSetShadow(TD_PhoneCover[2], 0);
	TextDrawSetOutline(TD_PhoneCover[2], 0);
	TextDrawBackgroundColor(TD_PhoneCover[2], 255);
	TextDrawFont(TD_PhoneCover[2], 4);
	TextDrawSetProportional(TD_PhoneCover[2], 0);
	TextDrawSetShadow(TD_PhoneCover[2], 0);
	TextDrawSetSelectable(TD_PhoneCover[2], true);

	TD_PhoneCover[3] = TextDrawCreate(268.999877, 181.880020, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[3], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[3], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[3], 1);
	TextDrawColor(TD_PhoneCover[3], 2104099071);
	TextDrawSetShadow(TD_PhoneCover[3], 0);
	TextDrawSetOutline(TD_PhoneCover[3], 0);
	TextDrawBackgroundColor(TD_PhoneCover[3], 255);
	TextDrawFont(TD_PhoneCover[3], 4);
	TextDrawSetProportional(TD_PhoneCover[3], 0);
	TextDrawSetShadow(TD_PhoneCover[3], 0);
	TextDrawSetSelectable(TD_PhoneCover[3], true);

	TD_PhoneCover[4] = TextDrawCreate(302.599945, 181.880142, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[4], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[4], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[4], 1);
	TextDrawColor(TD_PhoneCover[4], 405561855);
	TextDrawSetShadow(TD_PhoneCover[4], 0);
	TextDrawSetOutline(TD_PhoneCover[4], 0);
	TextDrawBackgroundColor(TD_PhoneCover[4], 255);
	TextDrawFont(TD_PhoneCover[4], 4);
	TextDrawSetProportional(TD_PhoneCover[4], 0);
	TextDrawSetShadow(TD_PhoneCover[4], 0);
	TextDrawSetSelectable(TD_PhoneCover[4], true);

	TD_PhoneCover[5] = TextDrawCreate(269.399963, 217.222259, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[5], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[5], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[5], 1);
	TextDrawColor(TD_PhoneCover[5], 388831231);
	TextDrawSetShadow(TD_PhoneCover[5], 0);
	TextDrawSetOutline(TD_PhoneCover[5], 0);
	TextDrawBackgroundColor(TD_PhoneCover[5], 255);
	TextDrawFont(TD_PhoneCover[5], 4);
	TextDrawSetProportional(TD_PhoneCover[5], 0);
	TextDrawSetShadow(TD_PhoneCover[5], 0);
	TextDrawSetSelectable(TD_PhoneCover[5], true);

	TD_PhoneCover[6] = TextDrawCreate(303.000061, 216.724502, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[6], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[6], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[6], 1);
	TextDrawColor(TD_PhoneCover[6], 0xce9100ff);
	TextDrawSetShadow(TD_PhoneCover[6], 0);
	TextDrawSetOutline(TD_PhoneCover[6], 0);
	TextDrawBackgroundColor(TD_PhoneCover[6], 255);
	TextDrawFont(TD_PhoneCover[6], 4);
	TextDrawSetProportional(TD_PhoneCover[6], 0);
	TextDrawSetShadow(TD_PhoneCover[6], 0);
	TextDrawSetSelectable(TD_PhoneCover[6], true);

	TD_PhoneCover[7] = TextDrawCreate(269.400024, 253.560089, "LD_SPAC:white");
	TextDrawLetterSize(TD_PhoneCover[7], 0.000000, 0.000000);
	TextDrawTextSize(TD_PhoneCover[7], 29.000000, 30.000000);
	TextDrawAlignment(TD_PhoneCover[7], 1);
	TextDrawColor(TD_PhoneCover[7], -2063576577);
	TextDrawSetShadow(TD_PhoneCover[7], 0);
	TextDrawSetOutline(TD_PhoneCover[7], 0);
	TextDrawBackgroundColor(TD_PhoneCover[7], 255);
	TextDrawFont(TD_PhoneCover[7], 4);
	TextDrawSetProportional(TD_PhoneCover[7], 0);
	TextDrawSetShadow(TD_PhoneCover[7], 0);
	TextDrawSetSelectable(TD_PhoneCover[7], true);

	TD_PhoneCover[8] = TextDrawCreate(364.400238, 262.177764, "Comprar");
	TextDrawLetterSize(TD_PhoneCover[8], 0.279599, 1.465599);
	TextDrawTextSize(TD_PhoneCover[8], 10.0, 77.000000);
	TextDrawAlignment(TD_PhoneCover[8], 2);
	TextDrawColor(TD_PhoneCover[8], -1);
	TextDrawUseBox(TD_PhoneCover[8], 1);
	TextDrawBoxColor(TD_PhoneCover[8], 80);
	TextDrawSetShadow(TD_PhoneCover[8], 0);
	TextDrawSetOutline(TD_PhoneCover[8], 0);
	TextDrawBackgroundColor(TD_PhoneCover[8], 255);
	TextDrawFont(TD_PhoneCover[8], 2);
	TextDrawSetProportional(TD_PhoneCover[8], 1);
	TextDrawSetShadow(TD_PhoneCover[8], 0);
	TextDrawSetSelectable(TD_PhoneCover[8], true);
}

Create3DText()
{
    CreateDynamic3DTextLabel("Use {FE9A2E}/comprar{FFFFFF} comprar uma capa.", COLOR_WHITE, 1086.8405,-1449.5437,22.7434, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("/comprar\nPara ver uma lista de disponíveis de artigos esportivos.", COLOR_WHITE, 1112.4480,-1527.4012,15.7981, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("/comprar\nPara ver uma lista de disponíveis de roupas e acessorios.\n{F2EB35}/itens para editar os itens.", COLOR_WHITE, 1096.2791,-1439.8060,15.7981, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
	CreateDynamic3DTextLabel("/comprar\nPara ver uma lista de disponíveis de acessorios.\n{F2EB35}/itens para editar os itens.", COLOR_WHITE, 2332.8999,-650.1297,80162.4531, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1); //pmesp
	CreateDynamic3DTextLabel("/comprar\nPara ver uma lista de disponíveis de acessorios.\n{F2EB35}/itens para editar os itens.", COLOR_WHITE, 1373.8729,-29.9260,1000.9219, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1); //pcesp
    CreateDynamic3DTextLabel("/comprar\nPara ver uma lista de disponíveis de acessorios.\n{F2EB35}/itens para editar os itens.", COLOR_WHITE, 1094.7468,-1434.9844,15.7981, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1); //novos objetos
    CreateDynamic3DTextLabel("/comprar\nPara comprar novas roupas.\n{F2EB35}R$50,00", COLOR_WHITE, 1095.7863,-1447.4539,15.8016, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);
}

//////////////////////////////////////////////////////////////////////////////
/////////////////////SISTEMA BINCO BY IMAC/////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////

static g_aMaleSkins[185] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

static g_aModificadaskin[100] = {
	20500, 
	20501, 20502, 20503, 20504, 20505, 20506, 20507, 20508, 20509, 20510, 20511, 20512, 20620,
	20513, 20514, 20515, 20516, 20517, 20518, 20519, 20520, 20521, 20522, 20523, 20524, 20525, 
	20526, 20527, 20528, 20529, 20530, 20531, 20532, 20533, 20534, 20535, 20536, 20537, 20538, 
	20539, 20540, 20541, 20542, 20543, 20544, 20545, 20546, 20547, 20548, 20549, 20550, 20551, 
	20552, 20553, 20553, 20554, 20555, 20556, 20557, 20558, 20559, 20560, 20561, 20562, 20563, 
	20564, 20565, 20566, 20567, 20568, 20569, 20570, 20571, 50572, 20600, 20601, 20602, 20603, 
	20604, 20605, 20606, 20607, 20608, 20609, 20610, 20611, 20612, 20613, 20614, 20615, 20616, 
	20617, 20618, 20619
};

static g_aFemaleSkins[91] = {
    9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
    75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
    145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
    226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
    298
};


//////////////////////////////////////////////////////////////////////////////////////////////

stock AddVehicleRental()
{
    CarRent[0] = AddStaticVehicleEx(492,1664.2168,-2248.0488,-2.9842,90.2306,223,0, -1); // Green 1
    CarRent[1] = AddStaticVehicleEx(492,1653.5485,-2313.4810,-2.9741,269.5144,223,0, -1); // Green 2
	CarRent[2] = AddStaticVehicleEx(492,1560.7415,-2308.8511,13.3286,269.5454,223,0, -1); // 1
	CarRent[3] = AddStaticVehicleEx(492,1560.7153,-2312.1589,13.3285,269.5454,223,0, -1); // 2
	CarRent[4] = AddStaticVehicleEx(492,1560.6952,-2315.5034,13.3498,269.5466,223,0, -1); // 3
	CarRent[5] = AddStaticVehicleEx(422,1560.6693,-2318.7683,13.3567,269.5466,223,0, -1); // 4
	CarRent[6] = AddStaticVehicleEx(422,1560.6440,-2321.9934,13.3636,269.5466,223,0, -1); // 5
	CarRent[7] = AddStaticVehicleEx(422,1560.6185,-2325.2891,13.3706,269.5466,223,0, -1); // 6
	CarRent[8] = AddStaticVehicleEx(492,1560.5928,-2328.5264,13.3775,269.5466,223,0, -1); // 7
	CarRent[9] = AddStaticVehicleEx(492,1560.5668,-2331.8062,13.3845,269.5466,223,0, -1); // 8
    for(new c=0;c<sizeof(CarRent);c++)
    {
		ResetVehicle(CarRent[c]);
		SetVehicleNumberPlate(CarRent[c], "ALUGADO");
		SetVehicleHealth(CarRent[c], GetVehicleDataHealth(GetVehicleModel(CarRent[c])));

        Iter_Add(sv_vehicles, CarRent[c]);
        systemVariables[vehicleCounts][0]++;
    }
}

stock AddVehicleDMV() {

    CarDMV[0] = AddStaticVehicle(516,1274.8179,-1551.0402,13.2833,270.4145,1,1); //  Nebula
	CarDMV[1] = AddStaticVehicle(516,1274.6558,-1560.1385,13.2891,269.5308,1,1); //  Nebula
	CarDMV[2] = AddStaticVehicle(438,1286.9663,-1529.9735,13.5456,270.5405,1,1); // cabbie license exam1
	CarDMV[3] = AddStaticVehicle(438,1272.5927,-1534.6504,13.5632,269.5325,1,1); // cabbie license exam2

    for(new c=0;c<sizeof(CarDMV);c++)
    {
		ResetVehicle(CarDMV[c]);
		SetVehicleNumberPlate(CarDMV[c], "AUTO ESCOLA");
		SetVehicleHealth(CarDMV[c], GetVehicleDataHealth(GetVehicleModel(CarRent[c])));

        Iter_Add(sv_vehicles, CarDMV[c]);
        systemVariables[vehicleCounts][0]++;
    }
}

/*stock CreateBuilding()
{

}*/

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	if(PlayerData[playerid][pInjured])
	    return 0;

	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);
	return 1;
}

ResetPlayer(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	DisablePlayerRaceCheckpoint(playerid);
	DisablePlayerCheckpoint(playerid);
	HidePlayerFooter(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);
}

ResetStatistics(playerid) // Clear player Status
{
    ResetDamages(playerid);
    ResetCooldowns(playerid);
    ResetPlayerMoney(playerid);
    CancelSelectTextDraw(playerid);
	// 0 - ???? (????)
	g_PlayerFlags[playerid] = PlayerFlags:0;

	for(new x = 0; x != 40; ++x) {
		ContactData[playerid][x][contactNumber] = 0;
		if(x < MAX_SMS) SmsData[playerid][x][smsExist] = false;
	}

	for(new i=0;i!=MAX_CLOTHES; ++i) cl_dataslot[playerid][i] = -1, ClothingData[playerid][i][cl_object] = 0;


    PlayerAttachWeapon[playerid][0][awWid] = 3;
    PlayerAttachWeapon[playerid][1][awWid] = 4;
    PlayerAttachWeapon[playerid][2][awWid] = 5;
    PlayerAttachWeapon[playerid][3][awWid] = 8;
    PlayerAttachWeapon[playerid][4][awWid] = 22;
    PlayerAttachWeapon[playerid][5][awWid] = 23;
    PlayerAttachWeapon[playerid][6][awWid] = 24;
    PlayerAttachWeapon[playerid][7][awWid] = 25;
    PlayerAttachWeapon[playerid][8][awWid] = 26;
    PlayerAttachWeapon[playerid][9][awWid] = 27;
    PlayerAttachWeapon[playerid][10][awWid] = 28;
    PlayerAttachWeapon[playerid][11][awWid] = 29;
    PlayerAttachWeapon[playerid][12][awWid] = 30;
    PlayerAttachWeapon[playerid][13][awWid] = 31;
    PlayerAttachWeapon[playerid][14][awWid] = 32;
    PlayerAttachWeapon[playerid][15][awWid] = 33;
    PlayerAttachWeapon[playerid][16][awWid] = 34;

	for(new i=0;i!=MAX_ATTACH_WEAPON; ++i) {
		PlayerAttachWeapon[playerid][i][awID] = 0;
		PlayerAttachWeapon[playerid][i][awHide] = 0;
		PlayerAttachWeapon[playerid][i][awBone] = 1;
		PlayerAttachWeapon[playerid][i][aPx] = 0.0;
		PlayerAttachWeapon[playerid][i][aPy] = 0.0;
		PlayerAttachWeapon[playerid][i][aPz] = 0.0;
		PlayerAttachWeapon[playerid][i][aPrx] = 0.0;
		PlayerAttachWeapon[playerid][i][aPry] = 0.0;
		PlayerAttachWeapon[playerid][i][aPrz] = 0.0;
	}
	PlayerData[playerid][pSprayPermission] = 0;

	cl_selected[playerid]=-1; cl_index[playerid]=-1;
	cl_buying[playerid]=0; cl_buyingpslot[playerid]=-1;

	if(EffectDrugs[playerid] != 0.0) {
		//stop EffectDrugs_Timer[playerid];
		EffectDrugs_Timer[playerid] = Timer:0;
	}

    FishingPlace[playerid]=-1; TazerActive{playerid} = false; BeanbagActive{playerid} = false;
	ConvoID[playerid]=INVALID_PLAYER_ID; MedicBill[playerid] = 0; gLastCar[playerid] = 0;
	SafeTime[playerid] = 60; deathmode[playerid] = 0; deathtime[playerid] = 300;
	SufferDrugs{playerid}=false; EffectDrugs[playerid]=0.0;
    TaxiDuty{playerid} = false; TaxiFare{playerid} = 0; TaxiStart{playerid} = false; TaxiMoney[playerid] = 0; TaxiMade[playerid] = 0;

    HouseEntered[playerid]=-1;
    BizEntered[playerid]=-1;
	grantbuild[playerid]=-1;

    gPlayerCheckpointValue[playerid]=-1;
    gPlayerCheckpointStatus[playerid]=CHECKPOINT_NONE;

    nearHouse_var[playerid]=-1;

	serviceComp[playerid] = 0;
	serviceTowtruck[playerid] = 0;
	serviceCustomer[playerid] = 0;
	serviceFocus[playerid] = 0;
	serviced[playerid] = 0;
	RepairTime{playerid}=0;

	PlayerData[playerid][pHUDStyle]=0;

	//-----------------------------------------------------------------
	for(new i = 0; i != 10; i++)
		RoadBlocks[playerid][i] = INVALID_OBJECT_ID;
	//-----------------------------------------------------------------

    RepairTime{playerid} = 0;
    //Courier
    carryCrate[playerid]=-1;

    RentCarKey[playerid]=9999;

    PlayerPlaceCar[playerid]=-1;
    PlayerPlaceSlot[playerid]=-1;

    deleyAC_Nop{ playerid } = false;

    selfie_timer[playerid]=0;
    // ================== [ Farmer ] ===================
    far_start[playerid]=0; far_place[playerid]=0; far_veh[playerid]=INVALID_VEHICLE_ID;
	// ================== [ Hotwire ] ==================
	h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
    h_word[playerid][0]='\0';

    // ================== [ Phone Cover ] ================================
    PCoverOpening{ playerid } = false; PCoverColor[playerid]=0;
	// ================== [ Car GUI System ] =============================
	PCarOpening{ playerid } = false;
	PCarPage[playerid] = 1;
    PCarType[playerid] = 0;
	// Dealership
	VDealerSelectCatalog[playerid] = -1;
	for(new i = 0; i != 6; i++)
	{
		VDealerData[playerid][i][0] = 0;
		VDealerData[playerid][i][1] = -1;
		VDealerData[playerid][i][2] = -1;
		VDealerData[playerid][i][3] = 0;
		VDealerData[playerid][i][4] = 0;
	}
	// ================== [ NEW PHONE SYSTEM ] ============================
	ph_opening{ playerid }= false;

	ph_menuid[playerid]=0;
	ph_sub_menuid[playerid]=0;
	ph_select_data[playerid]=-1;
	ph_selected[playerid]=0;

	ph_page[playerid]=0;

	ph_airmode[playerid] = 0;
	ph_silentmode[playerid] = 0;
    ph_CallTone[playerid] = 0;
    ph_TextTone[playerid] = 0;
    ph_speaker[playerid] = 0;

    calltimer[playerid] = 0;
    smstimer[playerid] = 0;

    // v sell
    pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = 9999; prToAccept[playerid] = 0; tToAccept[playerid] = 0;
    // ================== [ NEW PHONE SYSTEM ] ============================

    PRestaurantOpening{ playerid }=false;
	MealHolding[playerid]=0;
	MealObject[playerid]=-1;

	/*// ================== [ PHONE SYSTEM ] ============================
	ph_opening{ playerid }= false;
    ph_section[playerid] = 0;
    ph_subsection[playerid] = 0;
    ph_canupdate{ playerid }= true;

	ph_select[playerid] = 0; ph_selectrow[playerid] = -1;
	ph_select_max[playerid] = 0;
	ph_pages[playerid] = 0;
	ph_page[playerid] = 0;
	ph_currentpage[playerid] = 0;
	ph_airmode[playerid] = 0;
	ph_silentmode[playerid] = 0;
    ph_CallTone[playerid] = 0;
    // ================== [ PHONE SYSTEM ] ============================*/
    fish_timer[playerid]=0;
    adTick[playerid]=0;

	BoomboxData[playerid][boomboxPlaced] = false;
	BoomboxData[playerid][boomboxOn] = false;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;
	PlayerData[playerid][pBoombox] = 0;

	PlayerData[playerid][pGasCan]=0;
	PlayerData[playerid][pCigarettes]=0;
	PlayerData[playerid][pDrink]=0;

	PlayerData[playerid][pID]=-1;
	PlayerData[playerid][pCreated]=0;
	PlayerData[playerid][pTutorialStep]=0;
	PlayerData[playerid][pGender]=0;
	PlayerData[playerid][pBirthdate] = 1958;
	PlayerData[playerid][pOrigin][0] = 0;
    PlayerData[playerid][pModel] = 1;
    PlayerData[playerid][pCpf] = 0;
 	PlayerData[playerid][pNomeSujo] = 0;
    PlayerData[playerid][pPmodel] = 0;
    PlayerData[playerid][pPnumber] = 0;
    PlayerData[playerid][pChar] = 0;
	PlayerData[playerid][pContractTime]=0;
	PlayerData[playerid][pPos] = 0.0;
	PlayerData[playerid][pSHealth] = 0.0;
	PlayerData[playerid][pArmour] = 0.0;
	PlayerData[playerid][pHealth] = 100.0;
    PlayerData[playerid][pInterior] = 0;
    PlayerData[playerid][pWorld] = 0;
    PlayerData[playerid][pHunger] = 0;
    PlayerData[playerid][pInjured] = 0;
    PlayerData[playerid][pTimeout] = 0;
    PlayerData[playerid][pSpawnPoint] = 0;
    PlayerData[playerid][pSpawnType] = 0;
    PlayerData[playerid][pOnDuty] = 0;
    PlayerData[playerid][pLocal] = 255;
    PlayerData[playerid][pHouseKey] = -1;
    PlayerData[playerid][pAdmin] = 0;
    PlayerData[playerid][pTester] = 0;
    //PlayerData[playerid][pPosX] = 0,
    //PlayerData[playerid][pPosY] = 0,
    //PlayerData[playerid][pPosZ] = 0,
    //PlayerData[playerid][pIDUCP] = 0;
    PlayerData[playerid][pJob] = 0;
    PlayerData[playerid][pSideJob] = 0;
    PlayerData[playerid][pJobRank] = 0;
    PlayerData[playerid][pADPoint] = 0;
    PlayerData[playerid][pCareer] = 0;
    PlayerData[playerid][pPlayingHours] = 0;
    PlayerData[playerid][pLevel] = 0;
    PlayerData[playerid][pExp] = 0;
    PlayerData[playerid][pPUpgrade] = 0;
    PlayerData[playerid][pDonateRank] = 0;
	PlayerData[playerid][pDonateUnix] = 0;
 	PlayerData[playerid][pPayDay] = 0;
	PlayerData[playerid][pPayDayHad] = 0;
	PlayerData[playerid][pPayCheck] = 0;
	PlayerData[playerid][pChequeCash] = 0;
	PlayerData[playerid][pAccount] = 0;
	PlayerData[playerid][pCash] = 0;
	PlayerData[playerid][pSavings] = 0;
	PlayerData[playerid][pSavingsCollect] = 0;
	PlayerData[playerid][pAlcoholPerk] = 0;
	PlayerData[playerid][pDrugPerk] = 0;
	PlayerData[playerid][pMiserPerk] = 0;
	PlayerData[playerid][pPainPerk] = 0;
	PlayerData[playerid][pTraderPerk] = 0;

	PlayerData[playerid][pFishes] = 0;
 	PlayerData[playerid][pJailed] = 0;
 	PlayerData[playerid][pJailTime] = 0;
 	PlayerData[playerid][pJailTime2] = 0;
    // Checkpoint Mission
    PlayerData[playerid][pCP_Type] = -1;
    PlayerData[playerid][pCP_X] = 0.0;
    PlayerData[playerid][pCP_Y] = 0.0;
    PlayerData[playerid][pCP_Z] = 0.0;

  	PlayerData[playerid][pCellTime] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;

	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[playerid][pCallNumb] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSwat] = 0;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pFreeze] = 0;
	PlayerData[playerid][pPCarkey]=9999;
	PlayerData[playerid][pPDupkey]=9999;

    //PlayerData[playerid][pMask_Name] = randomEx(100000, 999999);
    PlayerData[playerid][pOOCMask] = 0;
    PlayerData[playerid][pFightStyle] = 0;

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;

		if(i < MAX_PLAYER_WEAPON_PACKAGE) {
			PlayerData[playerid][pPackageWP][i]=0;
			PlayerData[playerid][pPackageAmmo][i]=0;
		}
	}

	///drogas
	for (new i=0;i!=MAX_PLAYER_DRUG_PACKAGE;i++) {
		PlayerDrug[playerid][i][drugQTY]=0.0;
	}

	for (new i=0;i!=MAX_DRUGS;i++) {
		PlayerData[playerid][pDrugAddiction][i]=0;
	}
	PlayerData[playerid][pDrugAddict] = 0;
	PlayerData[playerid][pDrugAddictStrength] = 0;

	PlayerData[playerid][pGun1] = 0;
	PlayerData[playerid][pGun2] = 0;
	PlayerData[playerid][pGun3] = 0;

	PlayerData[playerid][pAmmo1] = 0;
	PlayerData[playerid][pAmmo2] = 0;
	PlayerData[playerid][pAmmo3] = 0;

	PlayerData[playerid][pPLicense] = 0;
	PlayerData[playerid][pSLicense] = 0;

	PlayerData[playerid][pSpectating] = INVALID_PLAYER_ID;

	PlayerData[playerid][pReport] = 0;
	format(PlayerData[playerid][pReportMessage], 64, "(null)");
	PlayerData[playerid][pHelpme] = 0;
	format(PlayerData[playerid][pReportMessage], 64, "(null)");

	format(PlayerData[playerid][pAttribute], 128, "");
	format(PlayerData[playerid][pAdminName], MAX_PLAYER_NAME, "(null)");
	format(PlayerData[playerid][pMask_Name], MAX_PLAYER_NAME, "%d_%d", randomEx(100000,999999), randomEx(10,99));

	PlayerData[playerid][pBanTeam] = 0;
	PlayerData[playerid][pFactionTeam] = 0;
	PlayerData[playerid][pPropertyTeam] = 0;

	GraffiModel[playerid]=0;
	strmid(GraffiName[playerid], "", 0, 60, 60);
	strmid(GraffiFont[playerid], "Diploma", 0, 24, 24);
}

CreateTextdraws(playerid)
{
	emptytext[playerid] = CreatePlayerTextDraw(playerid, 0.0, 0.0, "_");
	PlayerTextDrawLetterSize(playerid, emptytext[playerid], 1.0, 1.0);
	PlayerTextDrawTextSize(playerid, emptytext[playerid], 597.000000, 0.119998);
	PlayerTextDrawAlignment(playerid, emptytext[playerid], 1);
	PlayerTextDrawColor(playerid, emptytext[playerid], -1);
	PlayerTextDrawUseBox(playerid, emptytext[playerid], 1);
	PlayerTextDrawBoxColor(playerid, emptytext[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, emptytext[playerid], 255);
	PlayerTextDrawFont(playerid, emptytext[playerid], 0);
	PlayerTextDrawSetProportional(playerid, emptytext[playerid], 1);


	jail_timeleft[playerid] = CreatePlayerTextDraw(playerid, 277.000000,371.000000,"~p~Tempo restante: ~w~Carregando...");
	PlayerTextDrawAlignment(playerid,jail_timeleft[playerid],0);
	PlayerTextDrawBackgroundColor(playerid,jail_timeleft[playerid],0x000000ff);
	PlayerTextDrawFont(playerid,jail_timeleft[playerid],3);
	PlayerTextDrawLetterSize(playerid,jail_timeleft[playerid],0.299999,1.200000);
	PlayerTextDrawColor(playerid,jail_timeleft[playerid],0xffffffff);
	PlayerTextDrawSetOutline(playerid,jail_timeleft[playerid],1);
	PlayerTextDrawSetProportional(playerid,jail_timeleft[playerid],1);
	PlayerTextDrawSetShadow(playerid,jail_timeleft[playerid],1);

	PTD_Restaurant[playerid][0] = CreatePlayerTextDraw(playerid,103.800018, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][0], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][0], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][0], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][0], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][0], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][0], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][0], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][0], 2218);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][0], -60.000000, 30.000000, 50.000000, 0.879998);
	//103.19999
	PTD_Restaurant[playerid][1] = CreatePlayerTextDraw(playerid,207.000008, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][1], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][1], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][1], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][1], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][1], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][1], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][1], 2219);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][1], -60.000000, 30.000000, 50.000000, 0.879998);

	PTD_Restaurant[playerid][2] = CreatePlayerTextDraw(playerid,310.199998, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][2], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][2], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][2], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][2], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][2], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][2], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][2], 2220);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][2], -60.000000, 30.000000, 50.000000, 0.879998);

	PTD_Restaurant[playerid][3] = CreatePlayerTextDraw(playerid,413.399988, 177.369842, "");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, PTD_Restaurant[playerid][3], 94.000000, 88.000000);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][3], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][3], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][3], 5);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, PTD_Restaurant[playerid][3], true);
	PlayerTextDrawSetPreviewModel(playerid, PTD_Restaurant[playerid][3], 2355);
	PlayerTextDrawSetPreviewRot(playerid, PTD_Restaurant[playerid][3], -60.000000, 30.000000, 50.000000, 0.879998);

	PTD_Restaurant[playerid][4] = CreatePlayerTextDraw(playerid,119.600013, 277.389923, "Buster~n~~r~Vida: +30~n~Remove a fome~n~~b~preço: R$170");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][4], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][4], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][4], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][4], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][4], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][4], 65535);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][4], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][4], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][4], 0);

	PTD_Restaurant[playerid][5] = CreatePlayerTextDraw(playerid,222.800003, 277.389923, "Double D-Luxe~n~~r~Vida: +60~n~Remove a fome~n~~b~preço: R$270");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][5], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][5], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][5], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][5], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][5], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][5], 65535);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][5], 0);
	//103.19999

	PTD_Restaurant[playerid][6] = CreatePlayerTextDraw(playerid,325.999993, 277.389923, "Full Rack~n~~r~Vida: +100~n~Remove a fome~n~~b~preço: R$400");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][6], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][6], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][6], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][6], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][6], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][6], -1061109505);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][6], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][6], 0);

	PTD_Restaurant[playerid][7] = CreatePlayerTextDraw(playerid,429.199983, 277.389923, "Salad Meal~n~~r~Vida: +100~n~Remove a fome~n~~b~preço: R$400");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][7], 0.292400, 1.609953);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][7], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][7], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][7], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][7], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][7], -1061109505);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][7], 1);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][7], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][7], 0);

	PTD_Restaurant[playerid][8] = CreatePlayerTextDraw(playerid, 112.000015, 145.199874, "] Idlewood Pizza Stack ]");
	PlayerTextDrawLetterSize(playerid, PTD_Restaurant[playerid][8], 0.743197, 2.112709);
	PlayerTextDrawAlignment(playerid, PTD_Restaurant[playerid][8], 1);
	PlayerTextDrawColor(playerid, PTD_Restaurant[playerid][8], -1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, PTD_Restaurant[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, PTD_Restaurant[playerid][8], 255);
	PlayerTextDrawFont(playerid, PTD_Restaurant[playerid][8], 0);
	PlayerTextDrawSetProportional(playerid, PTD_Restaurant[playerid][8], 1);
	PlayerTextDrawSetShadow(playerid, PTD_Restaurant[playerid][8], 0);

	TD_PhoneCoverModel[playerid] = CreatePlayerTextDraw(playerid, 325.400177, 140.0, "");
	PlayerTextDrawLetterSize(playerid, TD_PhoneCoverModel[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TD_PhoneCoverModel[playerid], 90.000000, 119.000000);
	PlayerTextDrawAlignment(playerid, TD_PhoneCoverModel[playerid], 1);
	PlayerTextDrawColor(playerid, TD_PhoneCoverModel[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawFont(playerid, TD_PhoneCoverModel[playerid], 5);
	PlayerTextDrawSetProportional(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawSetShadow(playerid, TD_PhoneCoverModel[playerid], 0);
	PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18868);
	PlayerTextDrawSetPreviewRot(playerid, TD_PhoneCoverModel[playerid], 80.000000, -30.000000, 0.000000, 0.600000);

	// NEW PHONE SYSTEM
	TDPhone_Model[playerid][0] = CreatePlayerTextDraw(playerid, 499.499816, 317.032318, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][0], 0.407599, 14.487455);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][0], 597.000000, 0.119998);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][0], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][0], -1);
	PlayerTextDrawUseBox(playerid, TDPhone_Model[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], 286331391);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][0], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, TDPhone_Model[playerid][0], 1);

	TDPhone_Model[playerid][1] = CreatePlayerTextDraw(playerid, 496.199707, 314.288909, "ld_spac:tvcorn");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][1], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][1], 55.000000, 135.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][1], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], -858993409);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][1], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][1], 4);
	PlayerTextDrawSetOutline(playerid, TDPhone_Model[playerid][1], 0);
	PlayerTextDrawSetShadow(playerid, TDPhone_Model[playerid][1], 0);

	TDPhone_Model[playerid][2] = CreatePlayerTextDraw(playerid, 601.802307, 314.288909, "ld_spac:tvcorn");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][2], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][2], -55.000000, 135.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][2], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], -858993409);
	PlayerTextDrawSetShadow(playerid, TDPhone_Model[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TDPhone_Model[playerid][2], 0);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][2], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][2], 4);
	PlayerTextDrawSetProportional(playerid, TDPhone_Model[playerid][2], 0);
	PlayerTextDrawSetOutline(playerid, TDPhone_Model[playerid][2], 0);
	PlayerTextDrawSetShadow(playerid, TDPhone_Model[playerid][2], 0);

	TDPhone_Model[playerid][3] = CreatePlayerTextDraw(playerid, 575.401733, 328.651336, "ld_pool:ball");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][3], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][3], 5.000000, 5.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][3], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][3], -1);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][3], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][3], 4);
	PlayerTextDrawSetProportional(playerid, TDPhone_Model[playerid][3], 0);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][3], true);

	TDPhone_Model[playerid][4] = CreatePlayerTextDraw(playerid, 580.200073, 322.751281, "ld_beat:circle");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][4], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][4], 15.000000, 15.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][4], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][4], -1);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][4], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][4], 4);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][4], true);

	TDPhone_Model[playerid][5] = CreatePlayerTextDraw(playerid, 529.599975, 332.862396, "SP_Telefonica");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][5], 0.211594, 0.758750);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][5], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][5], -1);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][5], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][5], 1);
	PlayerTextDrawSetProportional(playerid, TDPhone_Model[playerid][5], 1);
	PlayerTextDrawSetShadow(playerid, TDPhone_Model[playerid][5], 0);

	TDPhone_Model[playerid][6] = CreatePlayerTextDraw(playerid, 508.601379, 351.677886, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][6], 0.019598, 5.817771);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][6], 590.000000, 0.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][6], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][6], -1);
	PlayerTextDrawUseBox(playerid, TDPhone_Model[playerid][6], 1);
	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][6], -1);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][6], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][6], 1);
	PlayerTextDrawSetProportional(playerid, TDPhone_Model[playerid][6], 1);

	TDPhone_Model[playerid][7] = CreatePlayerTextDraw(playerid, 507.000091, 407.871215, "ld_dual:white"); // B1
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][7], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][7], 22.000000, 8.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][7], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][7], -1717986902);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][7], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][7], 4);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][7], true);

	TDPhone_Model[playerid][8] = CreatePlayerTextDraw(playerid, 543.999633, 409.339843, "ld_beat:up");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][8], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][8], 12.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][8], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][8], -690563841);
	PlayerTextDrawSetShadow(playerid, TDPhone_Model[playerid][8], 0);
	PlayerTextDrawSetOutline(playerid, TDPhone_Model[playerid][8], 0);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][8], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][8], 4);
	PlayerTextDrawSetProportional(playerid, TDPhone_Model[playerid][8], 0);
	PlayerTextDrawSetShadow(playerid, TDPhone_Model[playerid][8], 0);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][8], true);

	TDPhone_Model[playerid][9] = CreatePlayerTextDraw(playerid, 543.999633, 429.138793, "ld_beat:down");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][9], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][9], 12.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][9], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][9], -690563841);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][9], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][9], 4);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][9], true);

	TDPhone_Model[playerid][10] = CreatePlayerTextDraw(playerid, 533.999877, 419.002044, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][10], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][10], 12.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][10], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][10], -690563841);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][10], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][10], 4);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][10], true);

	TDPhone_Model[playerid][11] = CreatePlayerTextDraw(playerid, 553.299804, 418.992980, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][11], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][11], 12.000000, 12.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][11], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][11], -690563841);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][11], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][11], 4);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][11], true);

	TDPhone_Model[playerid][12] = CreatePlayerTextDraw(playerid, 596.699890, 423.302307, "ld_dual:white"); // Selfie
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][12], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][12], 5.000000, 18.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][12], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][12], 1145324799);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][12], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][12], 4);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][12], true);

	TDPhone_Model[playerid][13] = CreatePlayerTextDraw(playerid, 569.100585, 407.871215, "ld_dual:white");
	PlayerTextDrawLetterSize(playerid, TDPhone_Model[playerid][13], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Model[playerid][13], 22.000000, 8.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Model[playerid][13], 1);
	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][13], -1717986902);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Model[playerid][13], 255);
	PlayerTextDrawFont(playerid, TDPhone_Model[playerid][13], 4);
	PlayerTextDrawSetSelectable(playerid, TDPhone_Model[playerid][13], true);

	TDPhone_TFButton[playerid] = CreatePlayerTextDraw(playerid, 508.599182, 393.690673, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_TFButton[playerid], 0.189996, 0.883198);
	PlayerTextDrawTextSize(playerid, TDPhone_TFButton[playerid], 526.0000, 10.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_TFButton[playerid], 1);
	PlayerTextDrawColor(playerid, TDPhone_TFButton[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_TFButton[playerid], 255);
	PlayerTextDrawFont(playerid, TDPhone_TFButton[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TDPhone_TFButton[playerid], 0);

	TDPhone_TSButton[playerid] = CreatePlayerTextDraw(playerid, 588.999450, 393.690673, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_TSButton[playerid], 0.189996, 0.883198);
	PlayerTextDrawTextSize(playerid, TDPhone_TSButton[playerid], 0.0000, 0.00000);
	PlayerTextDrawAlignment(playerid, TDPhone_TSButton[playerid], 3);
	PlayerTextDrawColor(playerid, TDPhone_TSButton[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_TSButton[playerid], 255);
	PlayerTextDrawFont(playerid, TDPhone_TSButton[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TDPhone_TSButton[playerid], 0);

	TDPhone_BigText[playerid] = CreatePlayerTextDraw(playerid, 549.300231, 357.344482, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_BigText[playerid], 0.296398, 1.286399);
	PlayerTextDrawAlignment(playerid, TDPhone_BigText[playerid], 2);
	PlayerTextDrawColor(playerid, TDPhone_BigText[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_BigText[playerid], 255);
	PlayerTextDrawFont(playerid, TDPhone_BigText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDPhone_BigText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TDPhone_BigText[playerid], 0);

	TDPhone_ScreenText[playerid] = CreatePlayerTextDraw(playerid, 549.300231, 358.797149, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_ScreenText[playerid], 0.200398, 0.937954);
	PlayerTextDrawAlignment(playerid, TDPhone_ScreenText[playerid], 2);
	PlayerTextDrawColor(playerid, TDPhone_ScreenText[playerid], 255);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_ScreenText[playerid], 255);
	PlayerTextDrawFont(playerid, TDPhone_ScreenText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDPhone_ScreenText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TDPhone_ScreenText[playerid], 0);

	TDPhone_Signal[playerid] = CreatePlayerTextDraw(playerid, 590.000000, 349.288848, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_Signal[playerid], 0.167998, 0.918043);
	PlayerTextDrawAlignment(playerid, TDPhone_Signal[playerid], 3);
	PlayerTextDrawColor(playerid, TDPhone_Signal[playerid], 255);
	PlayerTextDrawSetShadow(playerid, TDPhone_Signal[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDPhone_Signal[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Signal[playerid], 255);
	PlayerTextDrawFont(playerid, TDPhone_Signal[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDPhone_Signal[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TDPhone_Signal[playerid], 0);

	TDPhone_Picture[playerid] = CreatePlayerTextDraw(playerid, 488.199890, 296.000000, "_"); // Emo
	PlayerTextDrawLetterSize(playerid, TDPhone_Picture[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, TDPhone_Picture[playerid], -50.000000, 50.000000);
	PlayerTextDrawAlignment(playerid, TDPhone_Picture[playerid], 1);
	PlayerTextDrawColor(playerid, TDPhone_Picture[playerid], -1);
	PlayerTextDrawSetShadow(playerid, TDPhone_Picture[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDPhone_Picture[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_Picture[playerid], 255);
	PlayerTextDrawFont(playerid, TDPhone_Picture[playerid], 4);
	PlayerTextDrawSetProportional(playerid, TDPhone_Picture[playerid], 0);
	PlayerTextDrawSetShadow(playerid, TDPhone_Picture[playerid], 0);

	TDPhone_NotifyText[playerid] = CreatePlayerTextDraw(playerid, 578.799987, 351.280090, "_");
	PlayerTextDrawLetterSize(playerid, TDPhone_NotifyText[playerid], 0.139199, 0.659200);
	PlayerTextDrawTextSize(playerid, TDPhone_NotifyText[playerid], 598.799987, 15.0);
	PlayerTextDrawAlignment(playerid, TDPhone_NotifyText[playerid], 3);
	PlayerTextDrawColor(playerid, TDPhone_NotifyText[playerid], -16776961);
	PlayerTextDrawSetShadow(playerid, TDPhone_NotifyText[playerid], 0);
	PlayerTextDrawSetOutline(playerid, TDPhone_NotifyText[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, TDPhone_NotifyText[playerid], 255);
	PlayerTextDrawFont(playerid, TDPhone_NotifyText[playerid], 1);
	PlayerTextDrawSetProportional(playerid, TDPhone_NotifyText[playerid], 1);
	PlayerTextDrawSetShadow(playerid, TDPhone_NotifyText[playerid], 0);
	PlayerTextDrawSetSelectable(playerid, TDPhone_NotifyText[playerid], true);

    for (new i = 0, Float:y = 354.812500; i < 4; i ++) {

		TDPhone_Choice[playerid][i] = CreatePlayerTextDraw(playerid, 510.400054, y, "_");
		PlayerTextDrawLetterSize(playerid, TDPhone_Choice[playerid][i], 0.1911, 0.8);
		PlayerTextDrawTextSize(playerid, TDPhone_Choice[playerid][i], 588.099975, 8.000000);
		PlayerTextDrawAlignment(playerid, TDPhone_Choice[playerid][i], 1);
		PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][i], -1);
		PlayerTextDrawUseBox(playerid, TDPhone_Choice[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][i], 255);
		PlayerTextDrawSetShadow(playerid, TDPhone_Choice[playerid][i], 0);
		PlayerTextDrawSetOutline(playerid, TDPhone_Choice[playerid][i], 0);
		PlayerTextDrawBackgroundColor(playerid, TDPhone_Choice[playerid][i], 255);
		PlayerTextDrawFont(playerid, TDPhone_Choice[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, TDPhone_Choice[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid, TDPhone_Choice[playerid][i], 0);
		PlayerTextDrawSetSelectable(playerid, TDPhone_Choice[playerid][i], true);

		y += 12.8;
	}


	new
	    Float:x = 160.0,
	    Float:y = 280.0;

	for (new i = 0; i < 8; i ++)
	{
		if (i > 0 && (i == 4))
		{
		    x = 160.0;
			y = 280.0+14.0;
		}
		else if(i > 0)
		{
			x += 13;
		}
 		ColorSelection[playerid][i] = CreatePlayerTextDraw(playerid, x, y, "_");
		PlayerTextDrawBackgroundColor(playerid, ColorSelection[playerid][i], 0);
		PlayerTextDrawFont(playerid, ColorSelection[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid, ColorSelection[playerid][i], 13, 14);
		PlayerTextDrawColor(playerid, ColorSelection[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawUseBox(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, ColorSelection[playerid][i], 0);
		PlayerTextDrawTextSize(playerid, ColorSelection[playerid][i], 13.0000, 14.000000);
		PlayerTextDrawSetSelectable(playerid, ColorSelection[playerid][i], 1);
		PlayerTextDrawSetPreviewModel(playerid, ColorSelection[playerid][i], 19300);

		ColorSelection2[playerid][i] = CreatePlayerTextDraw(playerid, 260+x, y, "_");
		PlayerTextDrawBackgroundColor(playerid, ColorSelection2[playerid][i], 0);
		PlayerTextDrawFont(playerid, ColorSelection2[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid, ColorSelection2[playerid][i], 13, 14);
		PlayerTextDrawColor(playerid, ColorSelection2[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawUseBox(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid, ColorSelection2[playerid][i], 0);
		PlayerTextDrawTextSize(playerid, ColorSelection2[playerid][i], 13.0000, 14.000000);
		PlayerTextDrawSetSelectable(playerid, ColorSelection2[playerid][i], 1);
		PlayerTextDrawSetPreviewModel(playerid, ColorSelection2[playerid][i], 19300);
	}
	ColorSelectText[playerid] = CreatePlayerTextDraw(playerid, 185.599990, 311.795379, "Cores primarias");
	PlayerTextDrawAlignment(playerid,ColorSelectText[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,ColorSelectText[playerid], 255);
	PlayerTextDrawFont(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawLetterSize(playerid,ColorSelectText[playerid], 0.389999, 1.699998);
	PlayerTextDrawColor(playerid,ColorSelectText[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ColorSelectText[playerid], 0);
	PlayerTextDrawSetProportional(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawSetShadow(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawUseBox(playerid,ColorSelectText[playerid], 1);
	PlayerTextDrawBoxColor(playerid,ColorSelectText[playerid], 0);
	PlayerTextDrawTextSize(playerid,ColorSelectText[playerid], 190.000000, 128.000000);
	PlayerTextDrawSetSelectable(playerid,ColorSelectText[playerid], 1);


	ColorSelectLeft[playerid] = CreatePlayerTextDraw(playerid, 145.599945, 287.422149, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, ColorSelectLeft[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectLeft[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectLeft[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectLeft[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectLeft[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectLeft[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectLeft[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, ColorSelectLeft[playerid], true);


	ColorSelectRight[playerid] = CreatePlayerTextDraw(playerid, 212.200164, 287.422149, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, ColorSelectRight[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectRight[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectRight[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectRight[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectRight[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectRight[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectRight[playerid], 4);
	PlayerTextDrawSetProportional(playerid, ColorSelectRight[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ColorSelectRight[playerid], true);

	ColorSelectText2[playerid] = CreatePlayerTextDraw(playerid, 260+185.599990, 311.795379, "Cores secundarias");
	PlayerTextDrawAlignment(playerid,ColorSelectText2[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,ColorSelectText2[playerid], 255);
	PlayerTextDrawFont(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawLetterSize(playerid,ColorSelectText2[playerid], 0.389999, 1.699998);
	PlayerTextDrawColor(playerid,ColorSelectText2[playerid], -1);
	PlayerTextDrawSetOutline(playerid,ColorSelectText2[playerid], 0);
	PlayerTextDrawSetProportional(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawSetShadow(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawUseBox(playerid,ColorSelectText2[playerid], 1);
	PlayerTextDrawBoxColor(playerid,ColorSelectText2[playerid], 0);
	PlayerTextDrawTextSize(playerid,ColorSelectText2[playerid], 190.000000, 128.000000);
	PlayerTextDrawSetSelectable(playerid,ColorSelectText2[playerid], 1);

	ColorSelectLeft2[playerid] = CreatePlayerTextDraw(playerid, 260+145.599945, 287.422149, "ld_beat:left");
	PlayerTextDrawLetterSize(playerid, ColorSelectLeft2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectLeft2[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectLeft2[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectLeft2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectLeft2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectLeft2[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectLeft2[playerid], 4);
	PlayerTextDrawSetSelectable(playerid, ColorSelectLeft2[playerid], true);

	ColorSelectRight2[playerid] = CreatePlayerTextDraw(playerid, 260+212.200164, 287.422149, "ld_beat:right");
	PlayerTextDrawLetterSize(playerid, ColorSelectRight2[playerid], 0.000000, 0.000000);
	PlayerTextDrawTextSize(playerid, ColorSelectRight2[playerid], 14.399991, 14.933345);
	PlayerTextDrawAlignment(playerid, ColorSelectRight2[playerid], 1);
	PlayerTextDrawColor(playerid, ColorSelectRight2[playerid], -1);
	PlayerTextDrawSetShadow(playerid, ColorSelectRight2[playerid], 0);
	PlayerTextDrawSetOutline(playerid, ColorSelectRight2[playerid], 0);
	PlayerTextDrawFont(playerid, ColorSelectRight2[playerid], 4);
	PlayerTextDrawSetProportional(playerid, ColorSelectRight2[playerid], 1);
	PlayerTextDrawSetSelectable(playerid, ColorSelectRight2[playerid], true);

	pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
	PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.45, 1.05);
	PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
	PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 2);
	PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 0);
	PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
	PlayerTextDrawFont(playerid, pPT_Radio[playerid], 3);
	PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
/*// 1
	pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
	PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.320000, 1.604979);
	PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
	PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
	PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
	PlayerTextDrawFont(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
*/

/*// 2
	pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
	PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.540798, 2.535822);
	PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 2);
	PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
	PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
	PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
	PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], -2139062017);
	PlayerTextDrawFont(playerid, pPT_Radio[playerid], 2);
	PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
*/


	pPT_Footer[playerid] = CreatePlayerTextDraw(playerid,118.000000, 283.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,pPT_Footer[playerid], 255);
	PlayerTextDrawFont(playerid,pPT_Footer[playerid], 2);
	PlayerTextDrawLetterSize(playerid,pPT_Footer[playerid], 0.220000, 1.199999);
	PlayerTextDrawColor(playerid,pPT_Footer[playerid], -1);
	PlayerTextDrawSetOutline(playerid,pPT_Footer[playerid], 1);
	PlayerTextDrawSetProportional(playerid,pPT_Footer[playerid], 1);
}

stock TerminateConnection(playerid)
{
   /*if(IsValidDynamic3DTextLabel(cNametag[playerid]))
              DestroyDynamic3DTextLabel(cNametag[playerid]);*/


	if(TaxiMoney[playerid] > 0 && IsPlayerInAnyVehicle(playerid))
	{
    	gPassengerCar[playerid] = GetPlayerVehicleID(playerid);
		ChargePerson(playerid);
	}

	/*if(PlayerData[playerid][pPCarkey] != 99999)
	{
	    if(CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID]) {
			for(new i=0;i<sizeof(removelist_playervehicle);i++) {
				if(!removelist_playervehicle[i]) {
					removelist_playervehicle[i] = PlayerData[playerid][pPCarkey] + 1;
					break;
				}
			}
		}
	}*/

	UnSetLastCaller(playerid);
	UnSetLastArrest(playerid);
	//========================================
	for(new i = 0; i < 10; i++)
	{
		if(RoadBlocks[playerid][i] != INVALID_OBJECT_ID)
		{
			DestroyDynamicObject(RoadBlocks[playerid][i]);
		}
	}
	//========================================

	if (BoomboxData[playerid][boomboxPlaced]) {
		Boombox_Destroy(playerid);

		foreach (new i : Player)
		{
			if(grantboombox[i]==playerid) grantboombox[i] = INVALID_PLAYER_ID;
		}
	}
	//kill time
	if (PlayerData[playerid][pShowFooter])
	    KillTimer(PlayerData[playerid][pFooterTimer]);

	if (PlayerData[playerid][pFreeze])
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	//Kill other player variables that are used to connect to this player.
	foreach (new i : Player)
	{
		if (PlayerData[i][pFactionOffer] == playerid) {
		    PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pFactionOffered] = -1;
		}

		if(PlayerData[i][pSpectating] == playerid) {

			PlayerData[i][pSpectating] = INVALID_PLAYER_ID;

			TogglePlayerSpectating(i, false);

			SetCameraBehindPlayer(i);

			SetPlayerPos(i, PlayerData[i][pPos][0], PlayerData[i][pPos][1], PlayerData[i][pPos][2]);
			SetPlayerInterior(i, PlayerData[i][pInterior]);
			SetPlayerVirtualWorld(i, PlayerData[i][pWorld]);

			SendClientMessage(i, COLOR_GREY, "O jogador perdeu a conexão com o servidor.");
		}
	}

	foreach (new i : sv_vehicles)// if(IsValidVehicle(i))
	{
		if(CoreVehicles[i][vOwnerID] == playerid)
		{
			if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime])
			{
				VehicleLabel[i][vLabelCount] = 0;
				VehicleLabel[i][vLabelTime] = 0;
				VehicleLabel[i][vLabelType] = 0;

				DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
			}
			CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;
			CoreVehicles[i][vUpgradeID] = 0;
			break;
		}
	}

	/*if(RentCarKey[playerid] != 9999)
	{
		new driver = GetVehicleDriver(RentCarKey[playerid]);
		if(driver == INVALID_PLAYER_ID)
		{

		}
		RentCarKey[playerid] = 9999;
	}*/

    ExitSettingVehicle(playerid);

	new callerid = PlayerData[playerid][pCallConnect];
	if(callerid != INVALID_PLAYER_ID)
	{
		SendClientMessage(callerid, COLOR_GRAD2, "O player desconectou do servidor.");

	 	ph_menuid[callerid]=0;
	 	ph_sub_menuid[callerid]=0;
		RenderPlayerPhone(callerid, ph_menuid[callerid], ph_sub_menuid[callerid]);
		if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(callerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	   	PlayerData[callerid][pCallConnect] = INVALID_PLAYER_ID;
	   	PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;
	}

	if (SQL_IsLogged(playerid))
	{
		GetPlayerPos(playerid, macX, macY, macZ);

		SQL_SaveCharacter(playerid);
		RunDisconnect(playerid);
	}
	ResetStatistics(playerid);
	return 1;
}

stock RunDisconnect(playerid)
{
	if(AccountData[playerid][aConnectionID])
	{

		new query[128];
		GetPlayerPos(playerid, macX, macY, macZ);
		format(query,sizeof(query),"UPDATE logs_connection SET disconnected = NOW() WHERE id = '%d'",AccountData[playerid][aConnectionID]);
		mysql_query(dbCon, query);

	}

}


AntiImac(playerid)
{
	if (!SQL_IsLogged(playerid))
		return 0;

	new
	    query[2048];

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && PlayerData[playerid][pTimeout] || PlayerData[playerid][pInjured] || PlayerData[playerid][pJailed])
	{
	    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		format(query, sizeof(query), "UPDATE `characters` SET `OnDuty` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Interior` = '%d', `World` = '%d', `Local` = '%d' WHERE `ID` = '%d'",
		PlayerData[playerid][pOnDuty],
		PlayerData[playerid][pPos][0],
		PlayerData[playerid][pPos][1],
		PlayerData[playerid][pPos][2],
		PlayerData[playerid][pPos][3],
		PlayerData[playerid][pInterior],
		PlayerData[playerid][pWorld],
		PlayerData[playerid][pLocal],
		PlayerData[playerid][pID]
		);

		mysql_query(dbCon, query);
		printf("posição do Player Salva ID %d: %d, %f, %f, %f", playerid, strlen(query), PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	}
	return 1;
}

SQL_SaveCharacter(playerid)
{
	if (!SQL_IsLogged(playerid))
		return 0;

	new
	    query[2048];

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && PlayerData[playerid][pTimeout] || PlayerData[playerid][pInjured] || PlayerData[playerid][pJailed])
	{
	    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		format(query, sizeof(query), "UPDATE `characters` SET `OnDuty` = '%d', `Interior` = '%d', `World` = '%d', `Local` = '%d'",
		PlayerData[playerid][pOnDuty],
		PlayerData[playerid][pInterior],
		PlayerData[playerid][pWorld],
		PlayerData[playerid][pLocal]
		);

        if(GetPVarInt(playerid, "WeaponSlot2")) {
            PlayerData[playerid][pGuns][2] = 24;
            PlayerData[playerid][pAmmo][2] = GetPVarInt(playerid, "WeaponSlot2");
            DeletePVar(playerid, "WeaponSlot2");
        }

		for (new i = 0; i < 13; i ++) {
			format(query, sizeof(query), "%s, `WpGun%d` = '%d', `WpAmmo%d` = '%d'", query, i + 1, PlayerData[playerid][pGuns][i], i + 1, PlayerData[playerid][pAmmo][i]);
		}

		format(query, sizeof(query), "%s WHERE `ID` = '%d'",
		    query,
			PlayerData[playerid][pID]
		);
		mysql_query(dbCon, query);
	}
	if(PlayerData[playerid][pOOCMask] && !PlayerData[playerid][pDonateRank]) PlayerData[playerid][pOOCMask] = 0;

   	GetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
  	//GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);

	format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Gender` = '%d', `Birthdate` = '%d', `Origin` = '%s', `Model` = '%d', `Char` = '%d', `PhoneNumbr` = '%d', `PhoneModel` = '%d', `SpawnPoint` = '%d', `SpawnType` = '%d', `Admin` = '%d', `Level` = '%d', `Exp` = '%d', `PayDay` = '%d', `PayDayHad` = '%d', `PayCheck` = '%d', `ChequeCash` = '%d', `Injured` = '%d', `playerTimeout` = '%d', `MedicBill` = '%d', `Armour` = '%f', `Health` = '%f', `Hunger` = '%f', `FightStyle` = '%d'",
		PlayerData[playerid][pCreated],
		PlayerData[playerid][pGender],
		PlayerData[playerid][pBirthdate],
		PlayerData[playerid][pOrigin],
		PlayerData[playerid][pModel],
		PlayerData[playerid][pChar],
		PlayerData[playerid][pPnumber],
		PlayerData[playerid][pPmodel],
		PlayerData[playerid][pSpawnPoint],
		PlayerData[playerid][pSpawnType],
		PlayerData[playerid][pAdmin],
		PlayerData[playerid][pLevel],
		PlayerData[playerid][pExp],
		PlayerData[playerid][pPayDay],
		PlayerData[playerid][pPayDayHad],
		PlayerData[playerid][pPayCheck],
		PlayerData[playerid][pChequeCash],
		PlayerData[playerid][pInjured],
		PlayerData[playerid][pTimeout],
		MedicBill[playerid],
 		PlayerData[playerid][pArmour],
		PlayerData[playerid][pHealth],
		PlayerData[playerid][pHunger],
		PlayerData[playerid][pFightStyle]
	);


	format(query, sizeof(query), "%s, `BankAccount` = '%d', `Cash` = '%d', `Savings` = '%d', `PlayingHours` = '%d', `plaUpgrade` = '%d', `DonateRank` = '%d', `AlcoholPerk` = '%d', `DrugPerk` = '%d', `MiserPerk` = '%d', `PainPerk` = '%d', `TraderPerk` = '%d', `SpawnHealth` = '%f', `PhoneSilent` = '%d', `PhoneAir` = '%d', `PhoneRingtone` = '%d', `PhoneTextRingtone` = '%d', `Faction` = '%d', `FactionRank` = '%d', `Gun1` = '%d', `Gun2` = '%d', `Gun3` = '%d', `Ammo1` = '%d', `Ammo2` = '%d', `Ammo3` = '%d'",
	    query,
		PlayerData[playerid][pAccount],
		PlayerData[playerid][pCash],
		PlayerData[playerid][pSavings],
		PlayerData[playerid][pPlayingHours],
		PlayerData[playerid][pPUpgrade],
		PlayerData[playerid][pDonateRank],
		PlayerData[playerid][pAlcoholPerk],
		PlayerData[playerid][pDrugPerk],
		PlayerData[playerid][pMiserPerk],
		PlayerData[playerid][pPainPerk],
		PlayerData[playerid][pTraderPerk],
		PlayerData[playerid][pSHealth],
		// ================== [ PHONE SYSTEM ] ============================ , `PhoneSilent` = '%d', `PhoneAir` = '%d', `PhoneRingtone` = '%d'
		ph_silentmode[playerid],
		ph_airmode[playerid],
		ph_CallTone[playerid],
		ph_TextTone[playerid],
		// ================== [ PHONE SYSTEM ] ============================
		PlayerData[playerid][pFactionID],
		PlayerData[playerid][pFactionRank],
		PlayerData[playerid][pGun1],
		PlayerData[playerid][pGun2],
        PlayerData[playerid][pGun3],
        PlayerData[playerid][pAmmo1],
        PlayerData[playerid][pAmmo2],
        PlayerData[playerid][pAmmo3]
	);

	format(query, sizeof(query), "%s, `Radio` = '%d', `RadioChannel` = '%d', `RadioSlot` = '%d', `RadioAuth` = '%s', `playerJob` = '%d', `playerSideJob` = '%d', `playerJobRank` = '%d', `playerCareer` = '%d', `playerHouseKey` = '%d', `PlayerBusinessKey` = '%d', `PlayerCarkey` = '%d', `Checkpoint_Type` = '%d', `Checkpoint_X` = '%f', `Checkpoint_Y` = '%f', `Checkpoint_Z` = '%f', `Fishes` = '%d', `SavingsCollect` = '%d', `ContractTime` = '%d', `OOCMask` = '%d',`Jailed` = %d, `Jailtime` = %d, `CarLic` = %d",
	    query,
	    PlayerData[playerid][pRadio],
	    PlayerData[playerid][pRChannel],
	    PlayerData[playerid][pRSlot],
	    PlayerData[playerid][pRAuth],
	    PlayerData[playerid][pJob],
	    PlayerData[playerid][pSideJob],
	    PlayerData[playerid][pJobRank],
	    PlayerData[playerid][pCareer],
	    PlayerData[playerid][pHouseKey],
	    PlayerData[playerid][pPbiskey],
	    PlayerData[playerid][pPCarkey],
	  	PlayerData[playerid][pCP_Type],
	    PlayerData[playerid][pCP_X],
	    PlayerData[playerid][pCP_Y],
	    PlayerData[playerid][pCP_Z],
	    PlayerData[playerid][pFishes],
	    PlayerData[playerid][pSavingsCollect],
		PlayerData[playerid][pContractTime],
		PlayerData[playerid][pOOCMask],
 		PlayerData[playerid][pJailed],
		PlayerData[playerid][pJailTime],
		PlayerData[playerid][pCarLic]
	);

	GetPlayerPos(playerid, macX, macY, macZ);
	GetPlayerFacingAngle(playerid, macA);

	format(query, sizeof(query), "%s, `Jailtime2` = '%d', `ADPoint` = '%d', `WepLic` = '%d', `PrimaryLicense` = '%d', `SecondaryLicense` = '%d', `CCWLicense` = '%d', `playerSWAT` = '%d',`Tester` = '%d', `PosX` = '%f', `PosY` = '%f', `PosZ` = '%f', `PosA` = '%f', `DrugAddiction` = '%s', `DrugAddictStrength` = '%d', `DrugAddict` = '%d', `BanTeam` = '%d', `FactionTeam` = '%d', `PropertyTeam` = '%d', `cpf` = '%d', `pNomeSujo` = '%d'",
	    query,
	    PlayerData[playerid][pJailTime2],
	    PlayerData[playerid][pADPoint],
	    PlayerData[playerid][pWepLic],
	 	PlayerData[playerid][pPLicense],
		PlayerData[playerid][pSLicense],
		PlayerData[playerid][pCCWLic],
		PlayerData[playerid][pSwat],
		PlayerData[playerid][pTester],
		//PlayerData[playerid][pIDUCP],
		macX,
		macY,
		macZ,
		macA,
		FormatDrugAddiction(playerid),
		PlayerData[playerid][pDrugAddictStrength],
		PlayerData[playerid][pDrugAddict],
		PlayerData[playerid][pBanTeam],
		PlayerData[playerid][pFactionTeam],
		PlayerData[playerid][pPropertyTeam],
		PlayerData[playerid][pCpf],
		PlayerData[playerid][pNomeSujo]
	);


	format(query, sizeof(query), "%s WHERE `ID` = '%d'",
	    query,
		PlayerData[playerid][pID]
	);
	mysql_query(dbCon, query);
	//printf("Save Player ID %d: %d", playerid, strlen(query));

	for (new x = 0; x < MAX_SMS; x ++)
	{
		if(SmsData[playerid][x][smsExist])
		{
			format(query, sizeof(query), "UPDATE `phone_sms` SET `Archive` = %d,`ReadSMS` = %d WHERE `id` = %d", SmsData[playerid][x][smsArchive], SmsData[playerid][x][smsRead], SmsData[playerid][x][smsID]);
			mysql_query(dbCon, query);
		}
	}

	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
	    if(ClothingData[playerid][id][cl_object])
	    {
		 	format(query,sizeof(query),"UPDATE clothing SET object = '%d', bone = '%d', slot = '%d', equip = '%d', name = '%s' WHERE id = '%d' AND owner = '%d' LIMIT 1",
		    ClothingData[playerid][id][cl_object],
		    ClothingData[playerid][id][cl_bone],
		    ClothingData[playerid][id][cl_slot],
			ClothingData[playerid][id][cl_equip],
			ClothingData[playerid][id][cl_name],
			ClothingData[playerid][id][cl_sid],
			PlayerData[playerid][pID]);
			mysql_query(dbCon, query);
		}
	}

	/*new housekey = PlayerData[playerid][pHouseKey];
	if(housekey != -1) UpdateHouseInfo(housekey);*/
	//printf("%d",strlen(query));
	return 1;
}

ResetDamages(playerid)
{
	/*if(IsValidDynamic3DTextLabel(DamageLabel[playerid])) DestroyDynamic3DTextLabel(DamageLabel[playerid]);
    DamageLabel[playerid] = Text3D:INVALID_3DTEXT_ID;*/
    SetPlayerChatBubble(playerid, " ", COLOR_WHITE, 10.0, 100);

	for(new i = 0; i != MAX_DAMAGES; ++i)
	{
	    DamageData[playerid][i][dExists] = false;
		DamageData[playerid][i][dSec] = 0;
		DamageData[playerid][i][dDamage] = 0;
		DamageData[playerid][i][dShotType] = 0;
		DamageData[playerid][i][dWeaponid] = 0;
		DamageData[playerid][i][dArmour] = false;
	}
}

AddPlayerDamage(playerid, weaponid, Float:damage, bool:armour, bodypart)
{
	for(new i = 0; i != MAX_DAMAGES; ++i)
	{
	    if(!DamageData[playerid][i][dExists])
	    {
	        DamageData[playerid][i][dExists] = true;
	        DamageData[playerid][i][dSec] = gettime();
	        DamageData[playerid][i][dDamage] = floatround(damage);
	        DamageData[playerid][i][dShotType] = bodypart;
	        DamageData[playerid][i][dArmour] = armour;
	        DamageData[playerid][i][dWeaponid] = weaponid;
	    	break;
	    }
	}
}

AddPlayerCallHistory(playerid, number, type)
{
	for(new i = MAX_CALLHISTORY - 1; i >= 0; --i)
	{
	    if(!CallHistory[playerid][i][chExists])
	    {
	        CallHistory[playerid][i][chExists] = true;
	        CallHistory[playerid][i][chSec] = gettime();
	        CallHistory[playerid][i][chType] = type;
	        CallHistory[playerid][i][chNumber] = number;
	        CallHistory[playerid][i][chRead] = false;
	    	break;
	    }
	}
}

CountPlayerDamage(playerid)
{
	new count = 0;
	for(new i = 0; i != MAX_DAMAGES; ++i)
	{
	    if(DamageData[playerid][i][dExists])
			count++;
	}
	return count;
}

GetBodyPartName(bodypart)
{
	static name[16];
	switch(bodypart)
	{
		case 3: name = "Tronco";
		case 4: name = "Virilia";
		case 5: name = "braço esquerdo";
		case 6: name = "braço direito";
		case 7: name = "Perna esquerda";
		case 8: name = "Perna direita";
		case 9: name = "cabeça";
	}
	return name;
}


/*forward OnCheatDetected(playerid, ip_address[], type, code);
public OnCheatDetected(playerid, ip_address[], type, code)
{
	if (!SQL_IsLogged(playerid))
		return 0;

	new hacking[64], Float:extrafloat;
	switch(code)
	{
		case 0: format(hacking, sizeof(hacking), "AirBreak (a pé)");
  		case 1: format(hacking, sizeof(hacking), "AirBreak (no veículo)");
		case 2: format(hacking, sizeof(hacking), "teleport hack (a pé)");
		case 3: format(hacking, sizeof(hacking), "teleport hack (no veículo)");
		case 4: format(hacking, sizeof(hacking), "teleport hack (em veículos)");
		case 5: format(hacking, sizeof(hacking), "teleport hack (veículo para jogador)");
		case 6: format(hacking, sizeof(hacking), "teleport hack (pickups)");
		case 7: format(hacking, sizeof(hacking), "FlyHack (a pé)");
		case 8: format(hacking, sizeof(hacking), "FlyHack (no veículo)");
		case 9: {
			format(hacking, sizeof(hacking), "SpeedHack (a pé)");
		}
		case 10: {
			format(hacking, sizeof(hacking), "SpeedHack (no veículo)");
		}
		case 11: {
      		new vehicleid = GetPlayerVehicleID(playerid), d1, d2, d3, d4;
			AntiCheatGetVehicleHealth(vehicleid, extrafloat);
			SetVehicleHealth(vehicleid, extrafloat);
			//SetVehicleDamage(vehicleid);

			//AntiCheatGetVehicleDamage(vehicleid, d1, d2, d3, d4);
			SetVehicleDamageStatus(vehicleid, d1, d2, d3, d4);

			format(hacking, sizeof(hacking), "Health hack (no veículo)");
		}
		case 12: {
		    AntiCheatGetHealth(playerid, extrafloat);
		    SetPlayerHealthEx(playerid, extrafloat);
			format(hacking, sizeof(hacking), "Health hack (Personagem)");
		}
		case 13: {
		    AntiCheatGetArmour(playerid, extrafloat);
		    SetPlayerArmour(playerid, extrafloat);
			format(hacking, sizeof(hacking), "Armour hack");
		}
		case 14: format(hacking, sizeof(hacking), "Money hack");
		case 15: {
			format(hacking, sizeof(hacking), "Weapon hack");
			ResetPlayerWeapons(playerid);
			for (new i = 0; i < 13; i ++) GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		case 16: format(hacking, sizeof(hacking), "Ammo hack (add)");
		case 17: format(hacking, sizeof(hacking), "Ammo hack (infinite)");
		case 18: format(hacking, sizeof(hacking), "Special actions hack");
		case 19: format(hacking, sizeof(hacking), "GodMode from bullets (onfoot)");
		case 20: format(hacking, sizeof(hacking), "GodMode from bullets (in vehicle)");
		case 21: format(hacking, sizeof(hacking), "Invisible hack");
		case 22: format(hacking, sizeof(hacking), "lagcomp-spoof");
		case 23: format(hacking, sizeof(hacking), "Tuning hack");
		case 24: format(hacking, sizeof(hacking), "Parkour mod");
		case 25: format(hacking, sizeof(hacking), "Quick turn");
		case 26: format(hacking, sizeof(hacking), "Rapid fire");
		case 27: format(hacking, sizeof(hacking), "FakeSpawn");
		case 28: format(hacking, sizeof(hacking), "FakeKill");
		case 29: format(hacking, sizeof(hacking), "Pro Aim");
		case 30: format(hacking, sizeof(hacking), "CJ run");
		case 31: format(hacking, sizeof(hacking), "CarShot");
		case 32: format(hacking, sizeof(hacking), "CarJack");
		case 33: format(hacking, sizeof(hacking), "UnFreeze");
		case 34: format(hacking, sizeof(hacking), "AFK Ghost");
		case 35: format(hacking, sizeof(hacking), "Full Aiming");
		case 36: format(hacking, sizeof(hacking), "Fake NPC");
		case 37: format(hacking, sizeof(hacking), "Reconnect");
		case 38: format(hacking, sizeof(hacking), "High ping");
		case 39: format(hacking, sizeof(hacking), "Dialog hack");
		case 40: format(hacking, sizeof(hacking), "Protection from the sandbox");
		case 41: format(hacking, sizeof(hacking), "Protection against an invalid version");
		case 42: format(hacking, sizeof(hacking), "Rcon hack");
		case 43: format(hacking, sizeof(hacking), "Tuning crasher");
		case 44: format(hacking, sizeof(hacking), "Invalid seat crasher");
		case 45: format(hacking, sizeof(hacking), "Dialog crasher");
		case 46: format(hacking, sizeof(hacking), "Attached object crasher");
		case 47: format(hacking, sizeof(hacking), "Weapon Crasher");
		case 48: format(hacking, sizeof(hacking), "Flood protection connects to one slot");
		case 49: format(hacking, sizeof(hacking), "flood callback functions");
		case 50: format(hacking, sizeof(hacking), "flood change seat");
		case 51: format(hacking, sizeof(hacking), "Ddos");
		case 52: format(hacking, sizeof(hacking), "NOP's");
	}
	if(PlayerData[playerid][pInjured] && code == 19) return 1;

	if(PlayerData[playerid][pAdmin] < 2) {

		if(deleyAC_Nop{ playerid } && code == 52) return 1;
		if(GetPVarInt(playerid,"SilentLight") && code == 49) return 1;

		if(!BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_CHEAT)) SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s existe uma possibilidade. %s %s", playerid, ReturnName(playerid), hacking);

		SQL_LogCheat(playerid, "OnCheatDetected", hacking);

    }

	return 1;
}*/
/*public AC_OnCheatDetected(playerid, type, extraint, Float:extrafloat, extraint2)
{
	switch(type)
	{
		case CHEAT_WEAPON:
		{
			ResetPlayerWeapons(playerid);
			for (new i = 0; i < 13; i ++) GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);

			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use Weapon Cheat (%s)", playerid, ReturnName(playerid), ReturnWeaponName(extraint));
		}
		case CHEAT_SPEED:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use Speed Hack (%s)", playerid, ReturnName(playerid), g_arrVehicleNames[GetVehicleModel(extraint) - 400]);
		}
		case CHEAT_HEALTHARMOUR:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use %s (%.2f)", playerid, ReturnName(playerid), (extraint) ? ("Armour Hack") : ("Health Hack"), g_arrVehicleNames[GetVehicleModel(extraint) - 400], extrafloat);
		}
		case CHEAT_MASSCARTELEPORT:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use MASSCAR Teleport", playerid, ReturnName(playerid));
		}
		case CHEAT_CARJACKHACK:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use CarJack Hack", playerid, ReturnName(playerid));
		}
		case CHEAT_TELEPORT:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use Teleport(%d%%) ????? %.2f", playerid, ReturnName(playerid), extraint, extrafloat);
		}
		case CHEAT_AIRBREAK:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use Airbreak(%d%%) ????? %.2f", playerid, ReturnName(playerid), extraint, extrafloat);

		}
		case CHEAT_INACTIVITY:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use INACTIVITY", playerid, ReturnName(playerid));

		}
		case CHEAT_SPOOFKILL:
		{
			SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use Spoof Kill %s (%d%%)", playerid, ReturnName(playerid), ReturnName(extraint), extrafloat);
		}
	}
	return 1;
	//if(PlayerData[playerid][pAdmin] < 2)
//SendAdminAlert(COLOR_YELLOW, "AdmWarn: [%d]%s is possible to use %d", playerid, ReturnName(playerid), type);
}*/

public OnPlayerRequestClass(playerid, classid)
{
	if (IsPlayerNPC(playerid))
	    return 1;

	if (BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_ACCOUNT) && !BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_KICKED))
	{
	    TogglePlayerSpectating(playerid, true);
		SetPlayerColor(playerid, 0xB4B5B700);
		SetTimerEx("AccountCheck", 400, false, "d", playerid); // 400 ms
		RemovePlayerClothing(playerid);
	}
	return 1;
}

forward AccountCheck(playerid);
public AccountCheck(playerid)
{
	switch(random(3))
	{
	    case 0:
	    {
		 	SetPlayerPos(playerid, 290.4137,-1555.2571,-15.9629);
			SetPlayerCameraPos(playerid, 189.4343,-1600.7451,74.6708);
			SetPlayerCameraLookAt(playerid, 290.4137,-1555.2571,67.9629);
	    }
	    case 1:
	    {
		 	SetPlayerPos(playerid, 1044.0846,-1621.3650,-38.9547);
			SetPlayerCameraPos(playerid, 1044.0846,-1621.3650,108.2995);
			SetPlayerCameraLookAt(playerid, 1154.1254,-1770.6908,16.5938);
	    }
	    case 2:
	    {
		 	SetPlayerPos(playerid, 2170.4578,-1674.4376,-78.3328);
			SetPlayerCameraPos(playerid, 2161.3362,-1687.6860,143.4194);
			SetPlayerCameraLookAt(playerid, 2537.1755,-1705.1808,13.3828);
	    }
	}
	SQL_CheckBanAccount(playerid);
}
new SERVER_DOWNLOAD[] = "http://sp-roleplay.com.br/down!2342";
forward OnRequestDownload(playerid, type, crc);
public OnRequestDownload(playerid, type, crc)
{
    if(!IsPlayerConnected(playerid)) return 0;

    if (IsPlayerNPC(playerid)) return 1;
    new filename[64], filefound, url_final[256];

	if(type == DOWNLOAD_REQUEST_TEXTURE_FILE)
		filefound = FindTextureFileNameFromCRC(crc, filename, sizeof(filename));
	else if(type == DOWNLOAD_REQUEST_MODEL_FILE)
		filefound = FindModelFileNameFromCRC(crc, filename, sizeof(filename));

	if(filefound) {
		format(url_final, sizeof(url_final), "%s/%s", SERVER_DOWNLOAD, filename);
		RedirectDownload(playerid, url_final);
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	if (IsPlayerNPC(playerid))
	    return 1;
	/*if ((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), PlayerData[playerid][pLeaveIP]))
	{
	    return SendAdminAlert(COLOR_YELLOW, "AdmWarn: %s (%s) was kicked because it is possible to Rejoin hacks.", ReturnName(playerid), ReturnIP(playerid)), Kick(playerid);
	}*/

	
	new str[128];
    format(str,sizeof(str),"*** %s juntou-se ao servidor.", ReturnName(playerid));
    ProxJoinServer(playerid, 20.0, str);
 	displayHUD{ playerid } = false;
    isHideHUD{ playerid } = false;
    isVehicleHUD { playerid } = false;

    for (new i=0; i!=MAX_HUD; i++) {
        HUDtoggle[playerid][i] = false;
    }

	new mecSet[256];
	format(mecSet, sizeof(mecSet), "INSERT INTO player_on (`Nome`, `idPlayer`) VALUES ('%s', '%d')", ReturnName(playerid), playerid);
	mysql_tquery(dbCon, mecSet);



    HUDPlayer_Armor[playerid] = CreatePlayerTextDraw(playerid, 612.000000, 20.000000, "mdl-2004:Armor-0");
    PlayerTextDrawFont(playerid, HUDPlayer_Armor[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDPlayer_Armor[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDPlayer_Armor[playerid], 25.000000, 32.500000);
    PlayerTextDrawSetOutline(playerid, HUDPlayer_Armor[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDPlayer_Armor[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDPlayer_Armor[playerid], 1);
    PlayerTextDrawColor(playerid, HUDPlayer_Armor[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDPlayer_Armor[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDPlayer_Armor[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDPlayer_Armor[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDPlayer_Armor[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDPlayer_Armor[playerid], 0);

    HUDPlayer_Health[playerid] = CreatePlayerTextDraw(playerid, 612.000000, 50.000000, "mdl-2004:Health-0");
    PlayerTextDrawFont(playerid, HUDPlayer_Health[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDPlayer_Health[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDPlayer_Health[playerid], 25.000000, 32.500000);
    PlayerTextDrawSetOutline(playerid, HUDPlayer_Health[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDPlayer_Health[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDPlayer_Health[playerid], 1);
    PlayerTextDrawColor(playerid, HUDPlayer_Health[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDPlayer_Health[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDPlayer_Health[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDPlayer_Health[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDPlayer_Health[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDPlayer_Health[playerid], 0);


    HUDPlayer_PingRate[playerid] = CreatePlayerTextDraw(playerid, 625.000000, 99.000000, "0");
    PlayerTextDrawFont(playerid, HUDPlayer_PingRate[playerid], 1);
    PlayerTextDrawLetterSize(playerid, HUDPlayer_PingRate[playerid], 0.208333, 1.100000);
    PlayerTextDrawTextSize(playerid, HUDPlayer_PingRate[playerid], 400.000000, 17.000000);
    PlayerTextDrawSetOutline(playerid, HUDPlayer_PingRate[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDPlayer_PingRate[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDPlayer_PingRate[playerid], 2);
    PlayerTextDrawColor(playerid, HUDPlayer_PingRate[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDPlayer_PingRate[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDPlayer_PingRate[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDPlayer_PingRate[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDPlayer_PingRate[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDPlayer_PingRate[playerid], 0);

	TelinhaPreta = TextDrawCreate(-30.000000, -5.000000, "_");
	TextDrawBackgroundColor(TelinhaPreta, 100);
	TextDrawFont(TelinhaPreta, 1);
	TextDrawLetterSize(TelinhaPreta, 0.700000, 53.099998);
	TextDrawColor(TelinhaPreta, -1);
	TextDrawSetOutline(TelinhaPreta, 0);
	TextDrawSetProportional(TelinhaPreta, 1);
	TextDrawSetShadow(TelinhaPreta, 1);
	TextDrawUseBox(TelinhaPreta, 1);
	TextDrawBoxColor(TelinhaPreta, 0x1D1B1AFF);
	TextDrawTextSize(TelinhaPreta, 650.000000, 30.000000);

    /*HUDPlayer_Clock[playerid] = CreatePlayerTextDraw(playerid, 547.000000, 27.000000, "00:00:00 AM");
    PlayerTextDrawFont(playerid, HUDPlayer_Clock[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HUDPlayer_Clock[playerid], 0.216664, 1.749999);
    PlayerTextDrawTextSize(playerid, HUDPlayer_Clock[playerid], 605.500000, 17.000000);
    PlayerTextDrawSetOutline(playerid, HUDPlayer_Clock[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDPlayer_Clock[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDPlayer_Clock[playerid], 1);
    PlayerTextDrawColor(playerid, HUDPlayer_Clock[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDPlayer_Clock[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDPlayer_Clock[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDPlayer_Clock[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDPlayer_Clock[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDPlayer_Clock[playerid], 0);*/


    // Vehicle

    HUDFuel[playerid] = CreatePlayerTextDraw(playerid, 589.000000, 366.000000, "mdl-2005:Fuel-0");
    PlayerTextDrawFont(playerid, HUDFuel[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDFuel[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDFuel[playerid], 60.000000, 65.000000);
    PlayerTextDrawSetOutline(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDFuel[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawColor(playerid, HUDFuel[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDFuel[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDFuel[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDFuel[playerid], 0);

    HUDZone[playerid] = CreatePlayerTextDraw(playerid, 635.000000, 428.000000, "São Paulo");
    PlayerTextDrawFont(playerid, HUDZone[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HUDZone[playerid], 0.258329, 1.499994);
    PlayerTextDrawTextSize(playerid, HUDZone[playerid], 431.500000, 0.500000);
    PlayerTextDrawSetOutline(playerid, HUDZone[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDZone[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDZone[playerid], 3);
    PlayerTextDrawColor(playerid, HUDZone[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDZone[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDZone[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDZone[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDZone[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDZone[playerid], 0);

    HUDSpeedoRate[playerid] = CreatePlayerTextDraw(playerid, 543.000000, 361.000000, "mdl-2005:Speedo-0");
    PlayerTextDrawFont(playerid, HUDSpeedoRate[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDSpeedoRate[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDSpeedoRate[playerid], 65.000000, 75.000000);
    PlayerTextDrawSetOutline(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDSpeedoRate[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawColor(playerid, HUDSpeedoRate[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDSpeedoRate[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDSpeedoRate[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDSpeedoRate[playerid], 0);

    HUDLock[playerid] = CreatePlayerTextDraw(playerid, 557.000000, 350.000000, "mdl-2005:Locks-Unlocked");
    PlayerTextDrawFont(playerid, HUDLock[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDLock[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDLock[playerid], 15.000000, 15.500000);
    PlayerTextDrawSetOutline(playerid, HUDLock[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDLock[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDLock[playerid], 1);
    PlayerTextDrawColor(playerid, HUDLock[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDLock[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDLock[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDLock[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDLock[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDLock[playerid], 0);

    HUDEngine[playerid] = CreatePlayerTextDraw(playerid, 540.000000, 358.000000, "mdl-2005:Engine-Broken");
    PlayerTextDrawFont(playerid, HUDEngine[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDEngine[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDEngine[playerid], 15.000000, 15.000000);
    PlayerTextDrawSetOutline(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDEngine[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawColor(playerid, HUDEngine[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDEngine[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDEngine[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDEngine[playerid], 0);


    HUDSpeedoMPH[playerid] = CreatePlayerTextDraw(playerid, 575.000000, 409.000000, "0 KM");
    PlayerTextDrawFont(playerid, HUDSpeedoMPH[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HUDSpeedoMPH[playerid], 0.262497, 1.349997);
    PlayerTextDrawTextSize(playerid, HUDSpeedoMPH[playerid], 405.000000, 94.500000);
    PlayerTextDrawSetOutline(playerid, HUDSpeedoMPH[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDSpeedoMPH[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDSpeedoMPH[playerid], 2);
    PlayerTextDrawColor(playerid, HUDSpeedoMPH[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDSpeedoMPH[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDSpeedoMPH[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDSpeedoMPH[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDSpeedoMPH[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDSpeedoMPH[playerid], 0);

    HUDMileageRate[playerid] = CreatePlayerTextDraw(playerid, 611.000000, 347.000000, "0 MI");
    PlayerTextDrawFont(playerid, HUDMileageRate[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HUDMileageRate[playerid], 0.204162, 1.349995);
    PlayerTextDrawTextSize(playerid, HUDMileageRate[playerid], 400.500000, 94.500000);
    PlayerTextDrawSetOutline(playerid, HUDMileageRate[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDMileageRate[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDMileageRate[playerid], 2);
    PlayerTextDrawColor(playerid, HUDMileageRate[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDMileageRate[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDMileageRate[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDMileageRate[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDMileageRate[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDMileageRate[playerid], 0);
    /*HUDZone[playerid] = CreatePlayerTextDraw(playerid, 635.000000, 424.000000, "San Andreas");
    PlayerTextDrawFont(playerid, HUDZone[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HUDZone[playerid], 0.549996, 2.149996);
    PlayerTextDrawTextSize(playerid, HUDZone[playerid], 434.000000, 0.000000);
    PlayerTextDrawSetOutline(playerid, HUDZone[playerid], 2);
    PlayerTextDrawSetShadow(playerid, HUDZone[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDZone[playerid], 3);
    PlayerTextDrawColor(playerid, HUDZone[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDZone[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDZone[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDZone[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDZone[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDZone[playerid], 0);

    HUDFuel[playerid] = CreatePlayerTextDraw(playerid, 541.000000, 309.000000, "mdl-2004:Fuel-0");
    PlayerTextDrawFont(playerid, HUDFuel[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDFuel[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDFuel[playerid], 120.000000, 120.000000);
    PlayerTextDrawSetOutline(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDFuel[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawColor(playerid, HUDFuel[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDFuel[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDFuel[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDFuel[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDFuel[playerid], 0);

    HUDSpeedoRate[playerid] = CreatePlayerTextDraw(playerid, 456.000000, 310.000000, "mdl-2004:Speedo-0");
    PlayerTextDrawFont(playerid, HUDSpeedoRate[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDSpeedoRate[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDSpeedoRate[playerid], 120.000000, 120.000000);
    PlayerTextDrawSetOutline(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDSpeedoRate[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawColor(playerid, HUDSpeedoRate[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDSpeedoRate[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDSpeedoRate[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDSpeedoRate[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDSpeedoRate[playerid], 0);


    HUDNos[playerid] = CreatePlayerTextDraw(playerid, 448.000000, 305.000000, "mdl-2004:NOS-0");
    PlayerTextDrawFont(playerid, HUDNos[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDNos[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDNos[playerid], 120.000000, 120.000000);
    PlayerTextDrawSetOutline(playerid, HUDNos[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDNos[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDNos[playerid], 1);
    PlayerTextDrawColor(playerid, HUDNos[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDNos[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDNos[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDNos[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDNos[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDNos[playerid], 0);

    HUDLock[playerid] = CreatePlayerTextDraw(playerid, 490.000000, 301.000000, "mdl-2004:Locks-Locked");
    PlayerTextDrawFont(playerid, HUDLock[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDLock[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDLock[playerid], 20.000000, 20.000000);
    PlayerTextDrawSetOutline(playerid, HUDLock[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDLock[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDLock[playerid], 1);
    PlayerTextDrawColor(playerid, HUDLock[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDLock[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDLock[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDLock[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDLock[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDLock[playerid], 0);

    HUDEngine[playerid] = CreatePlayerTextDraw(playerid, 463.000000, 310.000000, "mdl-2004:Engine-Damaged");
    PlayerTextDrawFont(playerid, HUDEngine[playerid], 4);
    PlayerTextDrawLetterSize(playerid, HUDEngine[playerid], 0.600000, 2.000000);
    PlayerTextDrawTextSize(playerid, HUDEngine[playerid], 20.000000, 20.000000);
    PlayerTextDrawSetOutline(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawSetShadow(playerid, HUDEngine[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawColor(playerid, HUDEngine[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDEngine[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDEngine[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawSetProportional(playerid, HUDEngine[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDEngine[playerid], 0);

    HUDSpeedoMPH[playerid] = CreatePlayerTextDraw(playerid, 515.000000, 387.000000, "0 MPH");
    PlayerTextDrawFont(playerid, HUDSpeedoMPH[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HUDSpeedoMPH[playerid], 0.512498, 2.399996);
    PlayerTextDrawTextSize(playerid, HUDSpeedoMPH[playerid], 405.000000, 94.500000);
    PlayerTextDrawSetOutline(playerid, HUDSpeedoMPH[playerid], 2);
    PlayerTextDrawSetShadow(playerid, HUDSpeedoMPH[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDSpeedoMPH[playerid], 2);
    PlayerTextDrawColor(playerid, HUDSpeedoMPH[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDSpeedoMPH[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDSpeedoMPH[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDSpeedoMPH[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDSpeedoMPH[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDSpeedoMPH[playerid], 0);

    HUDMileageRate[playerid] = CreatePlayerTextDraw(playerid, 584.000000, 274.000000, "000 MI");
    PlayerTextDrawFont(playerid, HUDMileageRate[playerid], 2);
    PlayerTextDrawLetterSize(playerid, HUDMileageRate[playerid], 0.429165, 2.149996);
    PlayerTextDrawTextSize(playerid, HUDMileageRate[playerid], 400.500000, 94.500000);
    PlayerTextDrawSetOutline(playerid, HUDMileageRate[playerid], 2);
    PlayerTextDrawSetShadow(playerid, HUDMileageRate[playerid], 0);
    PlayerTextDrawAlignment(playerid, HUDMileageRate[playerid], 2);
    PlayerTextDrawColor(playerid, HUDMileageRate[playerid], -1);
    PlayerTextDrawBackgroundColor(playerid, HUDMileageRate[playerid], 255);
    PlayerTextDrawBoxColor(playerid, HUDMileageRate[playerid], 50);
    PlayerTextDrawUseBox(playerid, HUDMileageRate[playerid], 0);
    PlayerTextDrawSetProportional(playerid, HUDMileageRate[playerid], 1);
    PlayerTextDrawSetSelectable(playerid, HUDMileageRate[playerid], 0);*/


	SetPVarInt(playerid, "TelinhaPretaa", 0);


    SetPlayerColor(playerid, 0xB4B5B700);

	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

    GetPlayerIp(playerid, PlayerData[playerid][pIP], 16);
    ResetStatistics(playerid);
	EffectDrugs_Timer[playerid] = Timer:0;
	AddictTimer[playerid] = Timer:0;

    SQL_LogConnection(playerid);
    SQL_CheckAccount(playerid);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	new str[128];

	/*PlayerData[playerid][pLeaveTime] = GetTickCount();
	format(PlayerData[playerid][pLeaveIP], 16, PlayerData[playerid][pIP]);
*/
    GetPlayerPos(playerid, macX, macY, macZ);
 	new szDisconnectReason[3][] = {"Caiu/Crashou","Desconectou-se","Kickado/Banido"};
 	format(str, sizeof str, "*** %s Deslogou do servidor (%s)", ReturnName(playerid), szDisconnectReason[reason]);
    ProxJoinServer(playerid, 20.0, str);
	if(reason == 0) PlayerData[playerid][pTimeout]= gettime();
	new macUCP[256];
	format(macUCP, sizeof(macUCP), "DELETE FROM `player_on` WHERE `idPlayer` = '%d'", playerid);
	mysql_tquery(dbCon, macUCP);
 	TerminateConnection(playerid);

    /*if(IsValidDynamic3DTextLabel(cNametag[playerid])) 
              DestroyDynamic3DTextLabel(cNametag[playerid]);*/

	return 1;
}



stock SetPlayerWeaponSkill(playerid, skill) {
	switch(skill) {
	    case NORMAL_SKILL: {
            for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 200);
            SetPlayerSkillLevel(playerid, 0, 40);
            SetPlayerSkillLevel(playerid, 6, 50);
	    }
	    case MEDIUM_SKILL: {
            for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 500);
            SetPlayerSkillLevel(playerid, 0, 500);
            SetPlayerSkillLevel(playerid, 6, 500);
	    }
	    case FULL_SKILL: {
            for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 999);
            SetPlayerSkillLevel(playerid, 0, 998);
            SetPlayerSkillLevel(playerid, 6, 998);
	    }
	}
}

/*forward UpdateNametag(playerid);
public UpdateNametag(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		new nametag[128];
		if (GetPVarInt(playerid, "AdminDuty") == 1){
			format(nametag, sizeof(nametag), "{666666}((Administrador))\n %s (%d)\n%s\n%s", ReturnName(playerid), playerid, GetArmorDots(playerid), GetHealthDots(playerid));
		}else{
			format(nametag, sizeof(nametag), "%s (%d)\n%s\n%s", ReturnName(playerid), playerid,GetArmorDots(playerid), GetHealthDots(playerid));
		}
		UpdateDynamic3DTextLabelText(cNametag[playerid], 0xFFFFFFFF, nametag);
	}
	return 1;
}*/

public OnPlayerSpawn(playerid)
{
    // Skill levels
    if (!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_SPAWNED))
	{
        BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_SPAWNED);

		//SetPlayerWeaponSkill(playerid, FULL_SKILL);
	    //for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 999);



		new nomePlayer[100];

		format(nomePlayer, sizeof(nomePlayer), "%s (%d)\n%s\n%s", ReturnName(playerid), playerid, GetArmorDots(playerid), GetHealthDots(playerid));

    	//cNametag[playerid] = CreateDynamic3DTextLabel(nomePlayer, 0xFFFFFFFF, 0.0, 0.0, 0.1, NT_DISTANCE, .attachedplayer = INVALID_PLAYER_ID, .testlos = 1);

		if(PlayerData[playerid][pChar] > 0 && PlayerData[playerid][pOnDuty]) SetPlayerSkin(playerid, PlayerData[playerid][pChar]);
		else SetPlayerSkin(playerid, PlayerData[playerid][pModel]);

		Streamer_ToggleIdleUpdate(playerid, true);
		ResetPlayerWeapons(playerid);
		SetPlayerTeam(playerid, 1);
		//SetPlayerSpawn(playerid);
		SetTimerEx("SetPlayerSpawn", 400, false, "d", playerid); // 400 ms
	    if(!PlayerData[playerid][pJailed]) cl_DressPlayer(playerid);

		displayHUD{playerid} = true;
		showPlayerHUD(playerid);
		SetTimer("hudAtt", 1500, true, "d", playerid);
		//SetTimer("UpdateNametag", 5000, true, "d", playerid);
		PlayerData[playerid][pLogado] = 1;
		

		//SetPlayerChatBubble(playerid, PlayerData[playerid][pNomeChar], 0xFF6347FF, 20.0, 60*1000);

    }
	return 1;
}
/*ReturnRealName(playerid)
{
    new pname[MAX_PLAYER_NAME];
    GetPlayerName(playerid, pname, MAX_PLAYER_NAME);

    if(bf_get(player_bf[playerid], IS_MASKED)) {
 	    new mname[MAX_MASK_NAME];
	    GetPVarString(playerid, "MaskedName", mname, sizeof mname);
        format(pname, sizeof(pname), "[Mask %s]", mname);
    }
    else {
    	for (new i = 0, len = strlen(pname); i < len; i ++) if (pname[i] == '_') pname[i] = ' ';
    }
    return pname;
}*/


forward SetPlayerSpawn(playerid);
public SetPlayerSpawn(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    new house = PlayerData[playerid][pHouseKey];

		if(MedicBill[playerid])
		{
		    new cut = deathcost + PlayerData[playerid][pLevel]*50; //PlayerData[playerid][pLevel]*deathcost;
			PlayerData[playerid][pCash] -= cut;

			format(szString, sizeof(szString), "UNIMED: Suas despesas médicas chegaram. R$%d boa sorte!", cut);
			SendClientMessage(playerid, TEAM_CYAN_COLOR, szString);
			MedicBill[playerid] = 0;

			if(PlayerData[playerid][pDonateRank] > 0) SetPlayerHealthEx(playerid, 100.0 + PlayerData[playerid][pSHealth]);
			else SetPlayerHealthEx(playerid, 50.0+PlayerData[playerid][pSHealth]);
		}
	  	if(PlayerData[playerid][pJailed] == 1)
		{
		    SetPlayerToTeamColor(playerid);
		    SetSpawnInfo(playerid, 0, PlayerData[playerid][pModel], 2576.7861,2712.2004,22.9507, 1.0, -1, -1, -1, -1, -1, -1);
		    SetPlayerPos(playerid,  2576.7861,2712.2004,22.9507);
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
		    SendClientMessage(playerid, COLOR_YELLOW, "Você ainda está na prisão.");
	  	}
		else if(PlayerData[playerid][pJailed] == 2)
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			SendClientMessage(playerid, COLOR_YELLOW, "Você ainda está na prisão.");
		}
		else if(PlayerData[playerid][pTimeout] || PlayerData[playerid][pInjured])
		{
			SetPlayerToTeamColor(playerid);
			SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
			SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
			SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

			if(PlayerData[playerid][pTimeout]) {
				if(PlayerData[playerid][pOnDuty])
				{
					if (GetFactionType(playerid) == FACTION_POLICE)
						SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "** COPOM: %s %s retornou ao serviço! [CRASH] **", Faction_GetRank(playerid), ReturnName(playerid, 0));
					
					else if (GetFactionType(playerid) == FACTION_SASD)
						SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "** CEPOL: %s %s retornou ao serviço! [CRASH] **", Faction_GetRank(playerid), ReturnName(playerid, 0));
					
					else if(GetFactionType(playerid) == FACTION_MEDIC)
					    SendFactionMessageEx(FACTION_MEDIC, COLOR_RADIO, "** COBOM: %s %s retornou ao serviço! [CRASH] **", Faction_GetRank(playerid), ReturnName(playerid, 0));
				}

				if(PlayerData[playerid][pHealth]) SetPlayerHealthEx(playerid, PlayerData[playerid][pHealth]);
				if(PlayerData[playerid][pArmour]) SetPlayerArmour(playerid, PlayerData[playerid][pArmour]);

				SetWeapons(playerid);

				GameTextForPlayer(playerid, "~r~Crashou.~w~voltando para a ultima posição", 5000, 1);
				PlayerData[playerid][pTimeout] = 0;
			}
			if(!deathmode[playerid] && PlayerData[playerid][pInjured])
			{
				SetPlayerHealthEx(playerid, 25.0);
				deathtime[playerid] = 300;

				new countdamage;
				if((countdamage = CountPlayerDamage(playerid)) != 0)
				{
					format(szString, sizeof(szString), "(( Se machucou em %d lugar(es), use /ferimentos %d Para ver mais ))", countdamage, playerid);
                    SetPlayerChatBubble(playerid, szString, 0xFF6347FF, 20.0, 300*1000);
				}
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você foi gravemente ferido agora se o seu médico. Ou se alguém não puder te ajudar, Você vai morrer.");
				SendClientMessage(playerid, COLOR_LIGHTRED, "Para aceitar a morte /aceitarmorte");
				if(countdamage) SendClientMessageEx(playerid, COLOR_LIGHTRED, szString);
				GameTextForPlayer(playerid, "~b~Brutalmente ferido", 5000, 4);
				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
			}

			/*printf("PlayerData[playerid][pTimeout] %d", PlayerData[playerid][pTimeout]);
			printf("PlayerData[playerid][pInjured] %d", PlayerData[playerid][pInjured]);
			printf("deathmode[playerid] %d", deathmode[playerid]);*/
		}
		else
		{

			/*format(string, sizeof(string), "~w~Welcome ~n~~y~   %s", ReturnName(playerid, 0));
			GameTextForPlayer(playerid, string, 5000, 1);*/

		    switch(PlayerData[playerid][pSpawnPoint])
		    {
				case 0: // airport
				{
				    SetPlayerToTeamColor(playerid);
					SetPlayerPos(playerid, PlayerData[playerid][pPos][0],PlayerData[playerid][pPos][1],PlayerData[playerid][pPos][2]);
					//SetPlayerFacingAngle(playerid,359.8919);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);

					PlayerData[playerid][pInterior] = 0;
					PlayerData[playerid][pWorld] = 0;
					PlayerData[playerid][pLocal] = 255;
				}
				case 1:
				{
				    SetPlayerToTeamColor(playerid);

				    new faction = PlayerData[playerid][pFaction];
				    new type = FactionData[faction][factionType];

				    if(faction == -1)
				    {
						SetPlayerPos(playerid, 1643.0010,-2331.7056,-2.6797);
						SetPlayerFacingAngle(playerid,359.8919);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						PlayerData[playerid][pSpawnPoint] = 0;

						PlayerData[playerid][pInterior] = 0;
						PlayerData[playerid][pWorld] = 0;
						PlayerData[playerid][pLocal] = 255;
					}
					else
					{
					    if(type == FACTION_POLICE) // LSPD
					    {
							if(PlayerData[playerid][pSpawnType] == 0) { // 1CIA
								SetPlayerPosEx(playerid, 706.7247,-588.8745,17.3375);
								SetPlayerFacingAngle(playerid,176.7817);
								SetPlayerInterior(playerid, 10);
								SetPlayerVirtualWorld(playerid, 10001);
								PlayerData[playerid][pInterior] = 10;
								PlayerData[playerid][pWorld] = 10001;
								PlayerData[playerid][pLocal] = 101;
							}
							else if(PlayerData[playerid][pSpawnType] == 1) { // 1CIA
								SetPlayerPosEx(playerid, 706.7247,-588.8745,17.3375);
								SetPlayerFacingAngle(playerid,269.7302);
								SetPlayerInterior(playerid, 10);
								SetPlayerVirtualWorld(playerid, 10004);
								PlayerData[playerid][pInterior] = 10;
								PlayerData[playerid][pWorld] = 10004;
								PlayerData[playerid][pLocal] = 104;
							}
					    }
					    else if(type == FACTION_MEDIC) // CBESP
					    {
							if(PlayerData[playerid][pSpawnType] == 0) {
								SetPlayerPosEx(playerid, 542.2574,218.4133,1019.9844);
								SetPlayerFacingAngle(playerid,179.5279);
								SetPlayerInterior(playerid, 1);
								SetPlayerVirtualWorld(playerid, 10003);
								PlayerData[playerid][pInterior] = 1;
								PlayerData[playerid][pWorld] = 10003;
								PlayerData[playerid][pLocal] = 103;
							}
					    }
					    else if(type == FACTION_SASD) // PCESP
					    {
							if(PlayerData[playerid][pSpawnType] == 0) {
								SetPlayerPosEx(playerid, 1372.3121,-26.7843,1000.9219);
								SetPlayerFacingAngle(playerid,179.5279);
								SetPlayerInterior(playerid, 1);
								SetPlayerVirtualWorld(playerid, 10003);
								PlayerData[playerid][pInterior] = 1;
								PlayerData[playerid][pWorld] = 10003;
								PlayerData[playerid][pLocal] = 103;
							}
					    }
					}
				}
				case 2: // House
				{

                    SetPlayerToTeamColor(playerid);

				    if(house == -1 || !HouseInfo[house][hOwned])
				    {
						SetPlayerPos(playerid, 1643.0010,-2331.7056,-2.6797);
						SetPlayerFacingAngle(playerid,359.8919);
						SetPlayerInterior(playerid, 0);
						SetPlayerVirtualWorld(playerid, 0);
						PlayerData[playerid][pSpawnPoint] = 0;

						PlayerData[playerid][pInterior] = 0;
						PlayerData[playerid][pWorld] = 0;
						PlayerData[playerid][pLocal] = 255;

						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Você não possui uma casa ou não tem uma chave de casa.");
				    }
				    else
				    {
				        if(strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true))
				        {
				            SendClientMessage(playerid, COLOR_LIGHTRED, "Esta casa está alugada:");
				            format(szString, sizeof(szString), "R$%d", HouseInfo[house][hRentprice]);
				            SendClientMessageEx(playerid, COLOR_WHITE, szString);
				        }

						SetPlayerPosEx(playerid, HouseInfo[house][hExitX], HouseInfo[house][hExitY],HouseInfo[house][hExitZ]);
						SetPlayerFacingAngle(playerid, 0);
						SetPlayerInterior(playerid, HouseInfo[house][hInterior]);
						SetPlayerVirtualWorld(playerid, HouseInfo[house][hWorld]);

						PlayerData[playerid][pInterior] = HouseInfo[house][hInterior];
						PlayerData[playerid][pWorld] = HouseInfo[house][hWorld];
						PlayerData[playerid][pLocal] = house + LOCAL_HOUSE;
						HouseEntered[playerid]=house;
				    }
				}
				default: {
				    SetPlayerToTeamColor(playerid);
					SetPlayerPos(playerid, 1241.1783,-1266.0981, 15.1068);
					SetPlayerFacingAngle(playerid,183.8091);
					SetPlayerInterior(playerid, 0);
					SetPlayerVirtualWorld(playerid, 0);

					PlayerData[playerid][pInterior] = 0;
					PlayerData[playerid][pWorld] = 0;
					PlayerData[playerid][pLocal] = 255;

					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Seu ponto de spawn está incorreto, por favor, altere o spawn no UCP.");
				}
		    }

      		SetPlayerWeapons(playerid);
      		SetPlayerHealthEx(playerid, PlayerData[playerid][pHealth]);
      		SetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
      		SetCameraBehindPlayer(playerid);
		}
	}
	return 1;
}

forward ShowStats(playerid,targetid);
public ShowStats(playerid,targetid)
{
    if(IsPlayerConnected(playerid) && IsPlayerConnected(targetid))
	{

		new atext[20];
		if(PlayerData[targetid][pGender] == 0) { atext = "Homem"; }
		else if(PlayerData[targetid][pGender] == 1) { atext = "Mulher"; }

		new ttext[32], rtext[32], factionid = PlayerData[targetid][pFaction];
		if(factionid == -1) ttext = "Civil", rtext = "Sem cargo";
		else format(ttext, 32, "%s",Faction_GetName(targetid)), format(rtext, 32, "%s",Faction_GetRank(targetid));

		new carkey[16];
		if(PlayerData[targetid][pPCarkey] != 9999) format(carkey, 16, "%d", CarData[PlayerData[targetid][pPCarkey]][carVehicle]);
		else format(carkey, 16, "N/A");

        new houses[64];
		new hcount;
		for(new i = 0; i != sizeof(HouseInfo); ++i)
		{
		    if(HouseInfo[i][hOwned] == 1 && !strcmp(ReturnName(targetid), HouseInfo[i][hOwner], true))
			//if(HouseInfo[i][hOwned] == 1 && ((housekey == i) || !strcmp(ReturnName(targetid), HouseInfo[i][hOwner], true)))
			//if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnName(playerid), true))
			{
				if(hcount != 0) format(houses, sizeof(houses), "%s,%d", houses, i);
                else format(houses, sizeof(houses), "%s%d", houses, i);
                hcount++;
			}
		}

		new coordsstring[128];
		format(coordsstring, sizeof(coordsstring),"|____________________%s [%s]____________________|", ReturnName(targetid), ReturnDateTime());
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
		format(coordsstring, sizeof(coordsstring), "|Personagem| facção: [%d][%s] Cargo:[%s] Emprego:[%s] Cel:[%d]", factionid + 1, ttext, rtext, ReturnJobName(targetid, PlayerData[targetid][pJob]), PlayerData[targetid][pPnumber]);
		SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Inventario | Radio:[%s] Faca:[%s]", (PlayerData[targetid][pRadio]) ? ("Sim") : ("não"), ReturnWeaponName(PlayerData[targetid][pGun1]));
		SendClientMessage(playerid, COLOR_STAT2,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Armas | Arma 1:[%s] munição:[%d] Arma 2:[%s] munição:[%d]",
		(!PlayerData[targetid][pGun2] && PlayerData[targetid][pGun3]) ? ReturnWeaponName(PlayerData[targetid][pGun3]) : ReturnWeaponName(PlayerData[targetid][pGun2]),
		(!PlayerData[targetid][pGun2] && PlayerData[targetid][pGun3]) ? PlayerData[targetid][pAmmo3] : PlayerData[targetid][pAmmo2],
		(!PlayerData[targetid][pGun2] && PlayerData[targetid][pGun3]) ? ("não possui") : ReturnWeaponName(PlayerData[targetid][pGun3]),
		(!PlayerData[targetid][pGun2] && PlayerData[targetid][pGun3]) ? 0 : PlayerData[targetid][pAmmo3]);

		SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Level | Level:[%d] Experiencia:[%d/%d] Premium:[%s]",PlayerData[targetid][pLevel],PlayerData[targetid][pExp], (PlayerData[targetid][pLevel]+1)*levelexp,ReturnDonateRank(PlayerData[targetid][pDonateRank]));
		SendClientMessage(playerid, COLOR_STAT2,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Habilidade | Vida:[%.1f/%.1f] Força:[%d] Horas jogadas:[%d]", PlayerData[targetid][pHealth], PlayerData[targetid][pSHealth]+100.0, floatround(PlayerData[targetid][pSHealth]/5.0), PlayerData[targetid][pPlayingHours]);
		SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Dinheiro | Dinheiro:[%s] Banco:[%s] poupança:[%s] PayCheck:[%s]", FormatNumber(PlayerData[targetid][pCash]), FormatNumber(PlayerData[targetid][pAccount]), FormatNumber(PlayerData[targetid][pSavingsCollect]), FormatNumber(PlayerData[targetid][pPayCheck]));
		SendClientMessage(playerid, COLOR_STAT2,coordsstring);
		format(coordsstring, sizeof(coordsstring), "| Outros | Chave veículos(s):[%s] Trabalha em:[%s] Segundo emprego:[None]", carkey, ReturnJobName(playerid, PlayerData[targetid][pSideJob]));
		SendClientMessage(playerid, COLOR_STAT1,coordsstring);

		if(PlayerData[playerid][pAdmin])
		{
			format(coordsstring, sizeof(coordsstring), "| Administrador | Chave empresa:[%d] Interior:[%d] Mundo:[%d] Local:[%d]", 0, PlayerData[targetid][pInterior], PlayerData[targetid][pWorld], PlayerData[targetid][pLocal]);
			SendClientMessage(playerid, COLOR_STAT2,coordsstring);
			format(coordsstring, sizeof(coordsstring), "Casas compradas: %s", houses);
			SendClientMessage(playerid, COLOR_STAT1,coordsstring);
		}
		format(coordsstring, sizeof(coordsstring),"|____________________%s [%s]____________________|", ReturnName(targetid), ReturnDateTime());
		SendClientMessage(playerid, COLOR_GREEN,coordsstring);
	}
}

forward SetPlayerToTeamColor(playerid);
public SetPlayerToTeamColor(playerid)
{
	if(IsPlayerConnected(playerid)) {
		SetPlayerColor(playerid, DEFAULT_COLOR);

		if(isAdminDuty(playerid)) SetPlayerColor(playerid, TEAM_ADMIN_COLOR);
		//if(TaxiDuty{playerid}) SetPlayerColor(playerid, TAXI_DUTY);
	}
}

stock CountPlayerOwnHouse(playerid)
{
	new hcount;
	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnName(playerid), true))
		{
      		hcount++;
		}
	}
	return hcount;
}


stock OwnBusiness(playerid)
{
	if(PlayerData[playerid][pPbiskey] != -1 && !strcmp(BizInfo[PlayerData[playerid][pPbiskey]][bOwner], ReturnName(playerid)))
		return true;
	return false;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if(!PlayerData[playerid][pInjured] && !PlayerData[playerid][pJailed])
	{
		PlayerData[playerid][pInjured] = 1;
		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		deathtime[playerid] = 300;
	}
    BitFlag_Off(g_PlayerFlags[playerid], IS_PLAYER_SPAWNED);
    if(killerid != INVALID_PLAYER_ID) SQL_LogPlayerDeath(playerid,killerid,reason);
    else if(!PlayerData[playerid][pJailed])
	{
		//?????
        if(!PlayerData[playerid][pInjured]) {
			PlayerData[playerid][pInjured] = 1;
			PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
			deathtime[playerid] = 300;
		}
		else {
	     	SetPlayerChatBubble(playerid, "(( ESTE JOGADOR está MORTO ))", 0xFF6347FF, 20.0, 60*1000);

	     	SendClientMessage(playerid, COLOR_YELLOW, "-> Você está morto agora. Você precisa esperar 60 segundos, e então Você pode /respawnhosp.");

			deathmode[playerid] = 1;
			deathtime[playerid] = 60;

			ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
		}
    }
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
    if(!VehicleLabel[vehicleid][vLabelTime]) ResetVehicle(vehicleid);
    else SetVehicleDamage(vehicleid);

	/*new
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	if(IsABicycle(vehicleid)) SetVehicleParamsEx(vehicleid, 1, lights, alarm, 0, bonnet, boot, objective);*/

	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	new id = -1;

	if((id = Car_GetID(vehicleid)) != -1)
	{
		if(CarData[id][carOwner] == PlayerData[killerid][pID])
		{
			CarData[id][carDestroyed]++;

			CarData[id][carEngineL]-=float(10+random(5));
			CarData[id][carBatteryL]-=float(10);

			SendClientMessageEx(killerid, COLOR_LIGHTRED, "%s sua destruição.", g_arrVehicleNames[CarData[id][carModel] - 400]);
			SendClientMessageEx(killerid, COLOR_LIGHTRED, "VIDA UTIL: saúde do motor diminuida {FFFFFF}%.2f{FF6347} saúde da bateria diminuida {FFFFFF}%.2f{FF6347}", CarData[id][carEngineL], CarData[id][carBatteryL]);

			GetVehicleDamageStatus(vehicleid,CarData[id][carDamage][0],CarData[id][carDamage][1],CarData[id][carDamage][2],CarData[id][carDamage][3]);
			GetVehicleHealth(vehicleid,CarData[id][carHealth]);

            CarData[id][carArmour]=0;

			/*if(CarData[id][carInsurance] > 0)
			{
                CarData[id][carHealth] = VehicleData[CarData[id][carModel] - 400][c_maxhp];
			}
			if(CarData[id][carInsurance] > 1)
			{
                CarData[id][carDamage][0]=0;
                CarData[id][carDamage][1]=0;
                CarData[id][carDamage][2]=0;
                CarData[id][carDamage][3]=0;
			}

			if(CarData[id][carInsurance] < 3) {
			    CarData[id][carXM]=0;
				for(new x = 0; x < 14; x++) CarData[id][carMods][x]=0;
			}
			else for (new i = 0; i < 14; i ++) CarData[id][carMods][i] = GetVehicleComponentInSlot(vehicleid, i);
			*/
			CarData[id][spawnado] = 0;
			Car_SaveID(id);
			Car_DespawnEx(id);
			//PlayerData[killerid][pPCarkey] = 9999;
		}
		else
		{


			if((IsCharacterOnline(CarData[id][carOwner])) == -1) {

				CarData[id][carDestroyed]++;

				CarData[id][carEngineL]-=float(10+random(5));
				CarData[id][carBatteryL]-=float(10);

				SendClientMessageEx(killerid, COLOR_LIGHTRED, "%s sua destruição", g_arrVehicleNames[CarData[id][carModel] - 400]);
				SendClientMessageEx(killerid, COLOR_LIGHTRED, "VIDA UTIL: saúde do motor diminuida {FFFFFF}%.2f{FF6347} saúde da bateria diminuida {FFFFFF}%.2f{FF6347}", CarData[id][carEngineL], CarData[id][carBatteryL]);

				GetVehicleDamageStatus(vehicleid,CarData[id][carDamage][0],CarData[id][carDamage][1],CarData[id][carDamage][2],CarData[id][carDamage][3]);
				GetVehicleHealth(vehicleid,CarData[id][carHealth]);

				if(CarData[id][carInsurance] > 0)
				{
	                CarData[id][carHealth] = VehicleData[CarData[id][carModel] - 400][c_maxhp];
				}
				if(CarData[id][carInsurance] > 1)
				{
	                CarData[id][carDamage][0]=0;
	                CarData[id][carDamage][1]=0;
	                CarData[id][carDamage][2]=0;
	                CarData[id][carDamage][3]=0;
				}

				if(CarData[id][carInsurance] < 3) {
				    CarData[id][carXM]=0;
					for(new x = 0; x < 14; x++) CarData[id][carMods][x]=0;
				}
				else for (new i = 0; i < 14; i ++) CarData[id][carMods][i] = GetVehicleComponentInSlot(vehicleid, i);

				Car_SaveID(id);
				Car_DespawnEx(PlayerData[killerid][pPCarkey]);
				PlayerData[killerid][pPCarkey] = 9999;
			}
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
    //printf("OnPlayerText %s", text);
	if(!SQL_IsLogged(playerid)) return 0;

	new str[128];
	/*format(str, sizeof(str), "Sarah Candy says (phone): %s", FormatTextLowSignal(text));
	SendClientMessage(playerid, COLOR_YELLOW, str);*/

	if(BitFlag_Get(g_PlayerFlags[playerid], PLAYER_CONVO)) format(str, sizeof(str), "%d %s", ConvoID[playerid], text), cmd_pm(playerid, str);
	else
	{
     	/*if(deathmode[playerid] || PlayerData[playerid][pInjured])
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode falar.");
			return 0;
		}*/

		if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall])
		{
		    new signal = GetPhoneSignal(playerid);
			if(IsPlayerConnected(PlayerData[playerid][pCallLine]))
			{
				if(PlayerData[PlayerData[playerid][pCallLine]][pCallLine] == playerid)
				{
				    // ================== [ PHONE SYSTEM ] ============================

				    /*format(str, sizeof(str), "%s says (phone): %s", ReturnName(playerid, 0), text);
					SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, str);*/
                    if(ph_speaker[PlayerData[playerid][pCallLine]])
					{
					    format(str, sizeof(str), "%s diz [Alto-falante] (Celular): %s", ReturnName(playerid, 0), (signal > 1) ? (text) : FormatTextLowSignal(text));
					    ProxDetector(PlayerData[playerid][pCallLine], 20.0, str);
					}

					format(str, sizeof(str), "%s diz (Celular): %s", ReturnName(playerid, 0), (signal > 1) ? (text) : FormatTextLowSignal(text));
                   	SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, str);
				}
			}
			format(str, sizeof(str), "%s diz (Celular): %s", ReturnName(playerid, 0), text);
			ProxDetector(playerid, 20.0, str);

			SQL_LogChat(playerid, "cellphone", text);


			if(PlayerData[playerid][pCallLine] == 190)
			{
				if(!strcmp(text, "Policia", true) || !strcmp(text, "policia", true))
				{
					format(str, sizeof(str), "Ok, os serviços de aplicação da lei seráo notificados. Qual a sua posição atual?");
				}
				else if(!strcmp(text, "Medico", true) || !strcmp(text, "medico", true))
				{
					format(str, sizeof(str), "Ok, os serviços medicos seráo notificados. Qual a sua posição atual?");
				}
				else if(!strcmp(text, "Ambos", true) || !strcmp(text, "ambos", true))
				{
					format(str, sizeof(str), "Ok, tanto a polícia quanto os serviços medicos seráo notificados. Qual a sua posição atual?");
			 	}
			 	else {
					SendClientMessage(playerid, COLOR_YELLOW, "O Despacho de Emergência diz (telefone): Desculpe, não entendemos. quais serviços Você quer?");
					return 0;
				}

                SetPVarString(playerid,"CallEmergencyType", text);

      			if (strlen(str) > 80) {
         			SendClientMessageEx(playerid, COLOR_YELLOW, "COPOM diz (telefone): %.80s", str);
	    			SendClientMessageEx(playerid, COLOR_YELLOW, "COBOM diz (telefone): %s", str[80]);
				}
				else SendClientMessageEx(playerid, COLOR_YELLOW, "COPOM/COBOM diz (telefone): %s", str);

				// ================== [ PHONE SYSTEM ] ============================
				SetPVarString(playerid,"CallEmergency",(signal > 1) ? (text) : FormatTextLowSignal(text));
				// ================== [ PHONE SYSTEM ] ============================
				//SetPVarString(playerid,"CallEmergency",text);
				PlayerData[playerid][pCallLine] = 192;
			}
			else if(PlayerData[playerid][pCallLine] == 192)
			{
			    if(strlen(text) < 32)
			    {
			        // ================== [ PHONE SYSTEM ] ============================
				    SetPVarString(playerid,"CallEmergencyLoc",(signal > 1) ? (text) : FormatTextLowSignal(text));
				    // ================== [ PHONE SYSTEM ] ============================
				    //SetPVarString(playerid,"CallEmergencyLoc",text);

					SendClientMessage(playerid, COLOR_YELLOW, "COPOM (telefone): Explique a situação brevemente.");
					PlayerData[playerid][pCallLine] = 193;
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "COPOM (telefone): Desculpe, não entendemos. Qual a sua posição atual?");
			}
			else if(PlayerData[playerid][pCallLine] == 193)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "COPOM (telefone): Obrigado pela sua chamada. A polícia foi enviada para sua localização.");

		        PlayerData[playerid][pCellTime] = 0;
				PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
				PlayerData[playerid][pIncomingCall] = 0;
				// ================== [ PHONE SYSTEM ] ============================
              	ph_menuid[playerid]=0;
         		ph_sub_menuid[playerid]=0;
				//if(ph_opening{ playerid })
				RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		  		// ================== [ PHONE SYSTEM ] ============================
			    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);

				SetPVarString(playerid,"CallEmergencyTrace", GetPlayerLocation(playerid));

                SendFactionMessageEx(FACTION_POLICE, COLOR_LIGHTBLUE, "|_________________COPOM_________________|");
   				SendFactionMessageEx(FACTION_POLICE, COLOR_LIGHTBLUE, "Chamada: [%s] Celular: %d Vestigio: %s", ReturnName(playerid, 0), PlayerData[playerid][pPnumber], GetPlayerLocation(playerid));
                GetPVarString(playerid, "CallEmergency", str, sizeof(str));
				SendFactionMessageEx(FACTION_POLICE, COLOR_LIGHTBLUE, "serviço: %s", str);
				GetPVarString(playerid, "CallEmergencyLoc", str, sizeof(str));
        		SendFactionMessageEx(FACTION_POLICE, COLOR_LIGHTBLUE, "Local: %s", str);

        		// ================== [ PHONE SYSTEM ] ============================
				SendFactionMessageEx(FACTION_POLICE, COLOR_LIGHTBLUE, "Descrição: %s", (signal > 1) ? (text) : FormatTextLowSignal(text));
                // ================== [ PHONE SYSTEM ] ============================
                //SendFactionMessageEx(FACTION_POLICE, COLOR_LIGHTBLUE, "Situation: %s", text);


                SendFactionMessageEx(FACTION_MEDIC, COLOR_LIGHTRED, "|_________________COBOM_________________|");
   				SendFactionMessageEx(FACTION_MEDIC, COLOR_LIGHTRED, "Chamada: [%s] Celular: %d Vestigio: %s", ReturnName(playerid, 0), PlayerData[playerid][pPnumber], GetPlayerLocation(playerid));
                GetPVarString(playerid, "CallEmergency", str, sizeof(str));
				SendFactionMessageEx(FACTION_MEDIC, COLOR_LIGHTRED, "serviço: %s", str);
				GetPVarString(playerid, "CallEmergencyLoc", str, sizeof(str));
        		SendFactionMessageEx(FACTION_MEDIC, COLOR_LIGHTRED, "Local: %s", str);

        		// ================== [ PHONE SYSTEM ] ============================
				SendFactionMessageEx(FACTION_MEDIC, COLOR_LIGHTRED, "Descrição: %s", (signal > 1) ? (text) : FormatTextLowSignal(text));
				// ================== [ PHONE SYSTEM ] ============================
				//SendFactionMessageEx(FACTION_MEDIC, COLOR_LIGHTRED, "Situation: %s", text);
				SetLastCaller(playerid);

			}

			if(PlayerData[playerid][pCallLine] == 191)
			{
			    if(strlen(text) < 32)
			    {
			        SetPVarString(playerid,"CallEmergencyType", "policia");
			        // ================== [ PHONE SYSTEM ] ============================
				    SetPVarString(playerid,"CallEmergencyLoc",(signal > 1) ? (text) : FormatTextLowSignal(text));
				    // ================== [ PHONE SYSTEM ] ============================
				    //SetPVarString(playerid,"CallEmergencyLoc",text);

					SendClientMessage(playerid, COLOR_YELLOW, "CEPOL (telefone): Explique a situação brevemente.");
					PlayerData[playerid][pCallLine] = 1912;
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "COBOM (telefone): Desculpe, não entendemos. Qual a sua posição atual?");
			}
			else if(PlayerData[playerid][pCallLine] == 1912)
			{
				SendClientMessage(playerid, COLOR_YELLOW, "CEPOL (telefone): Aviso: A polícia Civil foi notificado e chegará o mais breve possível.");
                SetPVarString(playerid,"CallEmergencySituation", (signal > 1) ? (text) : FormatTextLowSignal(text));
		        PlayerData[playerid][pCellTime] = 0;
				PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
				PlayerData[playerid][pIncomingCall] = 0;
				// ================== [ PHONE SYSTEM ] ============================
              	ph_menuid[playerid]=0;
         		ph_sub_menuid[playerid]=0;
				RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		  		// ================== [ PHONE SYSTEM ] ============================
			    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);

                SetPVarString(playerid,"CallEmergencyTrace", "policia");

                SendFactionMessageEx(FACTION_SASD, COLOR_LIGHTBLUE, "|_________________DISQUE DENUNCIA_________________|");
   				SendFactionMessageEx(FACTION_SASD, COLOR_LIGHTBLUE, "Chamado: [%s] Celular: %d", ReturnName(playerid, 0), PlayerData[playerid][pPnumber]);
				GetPVarString(playerid, "CallEmergencyLoc", str, sizeof(str));
        		SendFactionMessageEx(FACTION_SASD, COLOR_LIGHTBLUE, "Local: %s", str);

        		// ================== [ PHONE SYSTEM ] ============================
				SendFactionMessageEx(FACTION_SASD, COLOR_LIGHTBLUE, "Descrição: %s", (signal > 1) ? (text) : FormatTextLowSignal(text));
                // ================== [ PHONE SYSTEM ] ============================
                SendFactionMessageEx(FACTION_SASD, COLOR_LIGHTBLUE, "* Para aceitar esta chamada, digite /rne %d", SetLastCaller(playerid));
			}

			if(PlayerData[playerid][pCallLine] == 555)
			{
			    if(strlen(text) < 32)
			    {
					SendClientMessage(playerid, COLOR_YELLOW, "Central dos mecanicos(telefone): Um mecanico está de plantão para receber uma notificação de sua solicitação.");

			        PlayerData[playerid][pCellTime] = 0;
					PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
					PlayerData[playerid][pIncomingCall] = 0;
					// ================== [ PHONE SYSTEM ] ============================
	              	ph_menuid[playerid]=0;
	         		ph_sub_menuid[playerid]=0;
					RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			  		// ================== [ PHONE SYSTEM ] ============================
				    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);


					SendJobMessage(JOB_MECHANIC, COLOR_GREEN, "|_________Central mecanicos_________|");
					SendJobMessage(JOB_MECHANIC, COLOR_WHITE, "Chamada: %s número: [%d]", ReturnName(playerid, 0), PlayerData[playerid][pPnumber]);
					SendJobMessage(JOB_MECHANIC, COLOR_WHITE, "Evento: %s", (signal > 1) ? (text) : FormatTextLowSignal(text));

				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Central dos mecanicos(telefone): Desculpe, não entendemos, pode repetir?");
			}

			if(PlayerData[playerid][pCallLine] == 544)
			{
			    if(strlen(text) < 32)
			    {
			        DeletePVar(playerid, "ResponseTaxi");

			        SendClientMessage(playerid, COLOR_WHITE, "** Digite /taxi ID para ver quanto ele está cobrando. **");
					SendClientMessage(playerid, COLOR_YELLOW, "Taxistas (telefone): Entendi, enviaremos alguém assim que possível.");

			        PlayerData[playerid][pCellTime] = 0;
					PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
					PlayerData[playerid][pIncomingCall] = 0;
					// ================== [ PHONE SYSTEM ] ============================
	              	ph_menuid[playerid]=0;
	         		ph_sub_menuid[playerid]=0;
					RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

					SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			  		// ================== [ PHONE SYSTEM ] ============================
				    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);

					SendJobMessage(JOB_TAXI, COLOR_GREEN, "|_________Chamada táxi_________|");

				/*	if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_MASK))
						SendJobMessage(JOB_TAXI, COLOR_WHITE, "** (ID:%s) %s called taxi", PlayerData[playerid][pMask_Name], ReturnName(playerid, 0));
					else
					*/
					if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_MASK)) SendJobMessage(JOB_TAXI, COLOR_WHITE, "** (ID:%s) %s precisa de um táxi.",  PlayerData[playerid][pMask_Name], ReturnName(playerid, 0));
					else SendJobMessage(JOB_TAXI, COLOR_WHITE, "** (ID:%d) %s precisa de um táxi.",  playerid, ReturnName(playerid, 0));
					SendJobMessage(JOB_TAXI, COLOR_WHITE, "Destino: %s", (signal > 1) ? (text) : FormatTextLowSignal(text));

					SendJobMessage(JOB_TAXI, COLOR_WHITE, "** Digite /taxi aceitar ID, para pegar a corrida.");

					SetPVarInt(playerid, "NeedTaxi", 1);
					SetPVarString(playerid,"CallTaxiLoc", (signal > 1) ? (text) : FormatTextLowSignal(text));
/*
					SendJobMessage(JOB_TAXI, COLOR_GREEN, "|_________Taxi Central_________|");
					SendJobMessage(JOB_TAXI, COLOR_WHITE, "Caller: %s number: [%d]", ReturnName(playerid, 0), PlayerData[playerid][pPnumber]);
					SendJobMessage(JOB_TAXI, COLOR_WHITE, "destination: %s", (signal > 1) ? (text) : FormatTextLowSignal(text));
*/

				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "Taxistas (telefone): Desculpe, não entendemos para onde Você deseja ir, pode repetir?");
			}
		}
		else
		{
			format(str, sizeof(str), "%s diz: %s", ReturnName(playerid, 0), text);
			ProxDetector(playerid, 20.0, str);

			/*ApplyAnimationEx(playerid, "PED", "IDLE_CHAT",4.1,0,0,0,1,1);
			SetTimerEx("StopChatting", strlen(text) * 100, false, "d", playerid);*/

			ChatAnimation(playerid, strlen(text));

			SQL_LogChat(playerid, "localchat", text);
		}
    }
	return 0;
}

forward StopChatting(playerid);
public StopChatting(playerid) ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0), PlayerData[playerid][pAnimation] = 0;

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if (!SQL_IsLogged(playerid)) {
	    SendClientMessage(playerid, COLOR_LIGHTRED, "ACESSO NEGADO:{FFFFFF} Você deve estar logado para usar este comando.");
	    return 0;
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
    if(!success) return SendClientMessage(playerid, COLOR_GENANNOUNCE, "ERRO:  Desculpe, o comando que você digitou não existe. {A9C4E4}/ajuda{FFFFFF} ou {A9C4E4}/sos{FFFFFF} se Você precisar de ajuda.");  //If the command was wrong/invalid
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	new str[128];

	if ((!ispassenger && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured]) {
	    ClearAnimations(playerid);

	    return 0;
	}

	if(RepairTime{playerid} || serviced[playerid])
	{
		serviceComp[playerid] = 0;
		serviceTowtruck[playerid] = 0;
		serviceCustomer[playerid] = 0;
		serviceFocus[playerid] = 0;
		serviced[playerid] = 0;
		RepairTime{playerid}=0;

		RemoveWeapon(playerid, 41);
		if(IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) RemovePlayerAttachedObject(playerid, FREESLOT9);

		HidePlayerFooter(playerid);
	}

	foreach(new i : sv_servercar) {
		if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] != PlayerData[playerid][pFaction]) {

			if(PlayerData[playerid][pAdmin] >= 1 && isAdminDuty(playerid)) {
				format(str, sizeof(str), "%s (model %d, ID %d) não sei oq é aqui %s (%d)", g_arrVehicleNames[GetVehicleModel(vehicleVariables[i][vVehicleScriptID]) - 400], GetVehicleModel(vehicleVariables[i][vVehicleScriptID]), vehicleVariables[i][vVehicleScriptID], FactionData[vehicleVariables[i][vVehicleFaction]][factionName], vehicleVariables[i][vVehicleFaction]);
				SendClientMessage(playerid, COLOR_GREY, str);
				return 1;
			}
			else {
                if (GetLockStatus(vehicleid) || !ispassenger) {
				    SetVehicleLabel(vehicleid, VLT_TYPE_PERMITFACTION, 5);
				    ClearAnimations(playerid);
                }
				return 1;
			}
		}
	}

	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    gPassengerCar[playerid] = vehicleid;

	if(CoreVehicles[vehicleid][vradioOn])
	{
		StopAudioStreamForPlayer(playerid);
	}

	if(RepairTime{playerid} && serviced[playerid])
	{
		if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) SetPlayerAttachedObject(playerid,FREESLOT9,18693,5,-0.081999,0.239,-1.152,-18.0001,2.1,12.2,0.173998,0.18,0.560998);

		serviceFocus[playerid]=0;
		ShowPlayerFooter(playerid, "~h~~p~COMEÇA A PULVERIZAR O veículo.", -1);
		GivePlayerWeaponEx(playerid, 41, 9999);
	}

    if(GetPVarInt(playerid, "InDriveTest")) {
		DeletePVar(playerid, "LessonStarted");
		DeletePVar(playerid, "LessonSeconds");
		DeletePVar(playerid, "InDriveTest");
		SendClientMessage(playerid, COLOR_GREEN, "Se Você sair do veículo de teste, Você irá falhar.");

		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		gPlayerCheckpointValue[playerid]=-1;
		SetVehicleToRespawn(vehicleid);
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if (newstate == PLAYER_STATE_DRIVER) {
        isVehicleHUD { playerid } = true;
        showVehicleHUD(playerid);
        
    }
    else {
        isVehicleHUD { playerid } = false;
        hideVehicleHUD(playerid);
    }


	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER) {
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (PlayerData[playerid][pInjured] && GetVehicleModel(vehicleid) != 416 && newstate != PLAYER_STATE_DRIVER) RemoveFromVehicle(playerid);

		if(Boombox_Nearest(playerid) != INVALID_PLAYER_ID) {
		    StopAudioStreamForPlayer(playerid);
		}

		if(CoreVehicles[vehicleid][vradioOn])
		{
			PlayAudioStreamForPlayer(playerid, CoreVehicles[vehicleid][vradioURL]);
		}

		/*foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] != PlayerData[playerid][pFaction]) {

				if(PlayerData[playerid][pAdmin] >= 1 && isAdminDuty(playerid)) {
					return 1;
				}
				else {
	                if (GetLockStatus(vehicleid) || newstate == PLAYER_STATE_PASSENGER) {
					    RemoveFromVehicle(playerid);
	                }
					return 1;
				}
			}
		}*/
	}

	if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) {

		new id=-1, str[128];

		if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID && BoomboxData[id][boomboxOn]) {
			strunpack(str, BoomboxData[id][boomboxURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
	}

	if(newstate == PLAYER_STATE_SPAWNED)
	{
		/*if (!PlayerData[playerid][pInjured] && !PlayerData[playerid][pTimeout]) {
			MedicBill[playerid] = 1;
			if(PlayerData[playerid][pDonateRank] > 0) { SetPlayerHealthEx(playerid, 100.0 + PlayerData[playerid][pSHealth]); }
			else { SetPlayerHealthEx(playerid, 50.0+PlayerData[playerid][pSHealth]); }
		}
		else
		{
			if(PlayerData[playerid][pDonateRank] > 0) { SetPlayerHealthEx(playerid, 100.0); }
			else { SetPlayerHealthEx(playerid, PlayerData[playerid][pHealth]); }

			if(PlayerData[playerid][pArmour]) SetPlayerArmour(playerid, PlayerData[playerid][pArmour]);
		}*/
		SafeTime[playerid] = 60;

		if(!BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_HUD) && PlayerData[playerid][pHUDStyle] != 2)
			PlayerTextDrawShow(playerid, pPT_Radio[playerid]);

        CheckFightStyle(playerid);
	}

	if (newstate == PLAYER_STATE_WASTED)
	{
	    ResetPlayer(playerid);

	    PlayerTextDrawHide(playerid, pPT_Radio[playerid]);

		if (deathmode[playerid] && PlayerData[playerid][pInjured] || PlayerData[playerid][pJailed])
		{
 		    ResetDamages(playerid);
		    PlayerData[playerid][pInjured] = 0;
		    deathmode[playerid] = 0;
		    deathtime[playerid] = 0;
		    MedicBill[playerid] = 1;

		    //printf("go to medic");

		}

		new callerid = PlayerData[playerid][pCallConnect]; // People who call
		if(callerid != INVALID_PLAYER_ID) // The person who is calling is not blank.
		{
			SendClientMessage(callerid, COLOR_GRAD2, "Chamadas perdidas....");

	   		ph_menuid[callerid]=0;
	     	ph_sub_menuid[callerid]=0;
			RenderPlayerPhone(callerid, ph_menuid[callerid], ph_sub_menuid[callerid]);
			if(GetPlayerSpecialAction(callerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(callerid,SPECIAL_ACTION_STOPUSECELLPHONE);

			PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;
	       	PlayerData[callerid][pCallConnect] = INVALID_PLAYER_ID;
		}
	 	ph_menuid[playerid]=0;
	 	ph_sub_menuid[playerid]=0;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		/*if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
      		SendClientMessage(PlayerData[playerid][pCallLine],  COLOR_GRAD2, "Dropped calls....");
		    CancelCall(playerid);
		}*/
	}

	if (oldstate == PLAYER_STATE_DRIVER)
	{
		if(h_vid[playerid] != -1) {
		    ShowPlayerFooter(playerid, "~r~Você deixou o veículo.~n~~w~Processo de cabos encerrado.");
			h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
			h_word[playerid][0]='\0';
		}
	}

	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

        if (GetLockStatus(vehicleid)) {

			SetVehicleLabel(vehicleid, VLT_TYPE_LOCK, 5);
			RemovePlayerFromVehicle(playerid);
		}
	}

	if (newstate == PLAYER_STATE_DRIVER)
	{
	    new str[128], vehicleid, oldcar = gLastCar[playerid], id = -1, model;
		vehicleid = GetPlayerVehicleID(playerid);
		model = GetVehicleModel(vehicleid);

		if (!IsEngineVehicle(vehicleid)) SetEngineStatus(vehicleid, true);

		if(PlayerData[playerid][pCarLic] == 0) {
			//SendClientMessage(playerid, COLOR_LIGHTRED,"Você não possui habilitação! Deve passar no teste de direção para obte-la.");
			if(IsVehicleDMV(vehicleid)) {
			    if(model == 516) SendClientMessage(playerid, COLOR_WHITE,"Exame: Para iniciar o teste da CNH, digite: /comprarlicenca se tiver sucesso, irá lhe custar: R$1,250");
				else if(model == 438) SendClientMessage(playerid, COLOR_WHITE,"Exame Taxistas: Experimente um táxi. /comprarlicenca se tiver sucesso, irá lhe custar: R$1,250");
				return 1;
			}
		}

		if (!PlayerData[playerid][pDonateRank] && model == 481 || model == 510) { // BMX Permission
			SendClientMessage(playerid, COLOR_LIGHTRED, "Apenas para jogadores premium.");
			RemovePlayerFromVehicle(playerid);
		}
		
		if((id = Car_GetID(vehicleid)) != -1)
		{
			if(CarData[id][carPreso] == 1)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Este veiculo está preso, você não pode entrar nele.");
				RemovePlayerFromVehicle(playerid);
			}
		}

		if(!GetEngineStatus(vehicleid) && IsEngineVehicle(vehicleid)) SendClientMessage(playerid, COLOR_GREEN, "Motor desligado (/motor)");

		if((id = Car_GetID(vehicleid)) != -1)
		{
			if(CarData[id][carOwner] == PlayerData[playerid][pID])
			{
				format(str, sizeof(str), "Bem vindo ao seu %s.", g_arrVehicleNames[CarData[id][carModel] - 400]);
				SendClientMessage(playerid, COLOR_WHITE, str);
			}
		}

		if(IsVehicleRental(vehicleid) && !IsVehicleRented(vehicleid))
		{
            SendClientMessageEx(playerid, COLOR_WHITE, "serviço de aluguel de veículos: renda %s para %s (/alugarveiculo).", g_arrVehicleNames[model - 400], FormatNumber(GetVehicleRentalPrice(model)));
            SendClientMessage(playerid, COLOR_GREEN, "Com os carros alugados, Você pode digitar /trancar para tranca-los.");
		}
		/*if(PlayerData[playerid][pPCarkey] != 9999 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && (CarData[PlayerData[playerid][pPCarkey]][carVehicle] == vehicleid || PlayerData[playerid][pPDupkey] == CarData[id][carDupKey]))
		{
			if(!GetEngineStatus(vehicleid) && IsEngineVehicle(vehicleid)) SendClientMessage(playerid, COLOR_GREEN, "Engine off (/motor)");

			if(CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID])
			{
				format(str, sizeof(str), "Welcome to your %s", g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
				SendClientMessage(playerid, COLOR_WHITE, str);
			}
			return 1;
		}*/

		if(oldcar != 0)
		{
			if(Car_GetID(oldcar) == -1)
			{
				if(oldcar != vehicleid)
				{
			 		new
					    engine,
					    lights,
					    alarm,
					    doors,
					    bonnet,
					    boot,
					    objective;

					GetVehicleParamsEx(oldcar, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(oldcar, engine, lights, alarm, 0, bonnet, boot, objective);
				}
			}
		}

        gLastCar[playerid] = vehicleid;


	   	if(IsTrucker(vehicleid))
	 	{
		 	new trailerid = GetVehicleTrailer(vehicleid);
			if(GetVehicleCargoLoad((!trailerid) ? vehicleid : trailerid) != -1 && !IsVehicleCargoSkill(model, PlayerData[playerid][pJobRank])) RemovePlayerFromVehicle(playerid), SendClientMessage(playerid, COLOR_WHITE, "Você precisa de um trailer. - ERRO #423");
		}
	}

	if (newstate == PLAYER_STATE_ONFOOT)
	{
		if(TaxiMoney[playerid] > 0)
		{
			ChargePerson(playerid);
		}
	}

	foreach (new x : Player) {
		if(PlayerData[x][pSpectating] != INVALID_PLAYER_ID && PlayerData[x][pSpectating] == playerid) {
			if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT || newstate == PLAYER_STATE_PASSENGER && oldstate == PLAYER_STATE_ONFOOT) {
				PlayerSpectateVehicle(x, GetPlayerVehicleID(playerid));
			}
			else {
				PlayerSpectatePlayer(x, playerid);
			}
		}
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(GetPlayerVisibleDynamicCP(playerid)) return 1;

	//new string[128];
	switch (gPlayerCheckpointStatus[playerid])
	{
	    case CHECKPOINT_HOUSE: {
			if(gPlayerCheckpointValue[playerid] != -1)
			{
			    new i = nearHouse_var[playerid];

				if(i == -1) return 1;

				if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnName(playerid), true))
				{
					SendClientMessage(playerid, COLOR_GREEN, "Bem vindo a sua casa!");
					SendClientMessage(playerid, COLOR_WHITE, "Comandos disponíveis: /entrar, /ds(hout), /ddo, /bater.");
				}
				else if(HouseInfo[i][hOwned] == 1)
				{
					if(HouseInfo[i][hRentable] == 1)
					{
					    SendClientMessage(playerid, COLOR_WHITE, "Deseja alugar está casa? /alugarcasa.");
						format(szString, sizeof(szString), "%d %s, %s,",HouseInfo[i][hID], HouseInfo[i][hInfo], HouseInfo[i][hInfo]);
						SendClientMessage(playerid, COLOR_GREEN, szString);
						SendClientMessage(playerid, COLOR_WHITE, "Comandos disponíveis: /entrar, /ds(hout), /ddo, /bater.");
					}
					else
					{
						format(szString, sizeof(szString), "%d %s, %s",HouseInfo[i][hID], HouseInfo[i][hInfo], HouseInfo[i][hInfo]);
						SendClientMessage(playerid, COLOR_GREEN, szString);
						SendClientMessage(playerid, COLOR_WHITE, "Comandos disponíveis: /entrar, /ds(hout), /ddo, /bater.");
					}
				}
				if(HouseInfo[i][hOwned] == 0)
				{
					SendClientMessage(playerid, COLOR_GREEN, "Você gostaria de comprar?.");
					format(szString, sizeof(szString), "preço: R$%d.",HouseInfo[i][hPrice]);
					SendClientMessage(playerid, COLOR_GREEN, szString);
					SendClientMessage(playerid, COLOR_WHITE, "Comando: /comprarcasa.");
				}
			    gPlayerCheckpointValue[playerid] = -1;
			}
	    }
	    case CHECKPOINT_NEWSPAPER: {
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	    }
		case CHECKPOINT_VEH:
		{
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
			GameTextForPlayer(playerid, "~p~Você encontrou", 4000, 3);
			//Streamer_ToggleIdleUpdate(playerid, false);
		}
		case CHECKPOINT_UNLOADFISHING:
		{
		    if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return 1;

		    if (IsPlayerInRangeOfPoint(playerid, 2.5, 2475.2932,-2710.7759,3.1963))
		    {
			    new str[128], earn = PlayerData[playerid][pFishes], rand = PlayerData[playerid][pFishes]/2;
			    if(rand) earn+=random(rand);

			    PlayerData[playerid][pCash]+=earn;

			    format(str, sizeof(str), "~p~PESO DOS PEIXES VENDIDOS ~w~%d PARA %d", PlayerData[playerid][pFishes], earn);
			    GameTextForPlayer(playerid, str, 8000, 4);

			    PlayerData[playerid][pFishes] = 0;

				gPlayerCheckpointX[playerid]=0.0;
				gPlayerCheckpointY[playerid]=0.0;
				gPlayerCheckpointZ[playerid]=0.0;

				DisablePlayerCheckpoint(playerid);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

			}
		}
		case CHECKPOINT_GOFISHING:
		{
		    if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && gPlayerCheckpointValue[playerid] != 3) {
		    	SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 30.0);
		        return 1;
		    }
		    else if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT && gPlayerCheckpointValue[playerid] == 3) {
		        SetPlayerCheckpoint(playerid, 383.6021,-2061.7881,7.6140, 30.0);
		        return 1;
		    }

			FishingPlace[playerid] = gPlayerCheckpointValue[playerid];

			SendClientMessage(playerid, COLOR_WHITE, "Comece a pescar aqui (/pescar) quando Você terminar, Você pode digitar /pararpesca e /venderpeixe");

			gPlayerCheckpointX[playerid]=0.0;
			gPlayerCheckpointY[playerid]=0.0;
			gPlayerCheckpointZ[playerid]=0.0;

			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
            gPlayerCheckpointValue[playerid]=-1;
		}
		case CHECKPOINT_CAREXAM: {
		 	new vehicleid = GetPlayerVehicleID(playerid);
			if(IsVehicleDMV(vehicleid) && GetPVarInt(playerid, "InDriveTest") == 1 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);

				if(gPlayerCheckpointValue[playerid] == 1)
				{
				    GameTextForPlayer(playerid, "~w~75", 1200, 3);
					SetPVarInt(playerid, "LessonStarted", 1);
					DisablePlayerCheckpoint(playerid);

                    SendClientMessage(playerid, COLOR_GREEN, "Lembre-se de dirigir na faixa certa da estrada.");

					SetPlayerCheckpointEx(playerid, 1142.9375,-1569.5576,12.9785, 4.0, CHECKPOINT_CAREXAM, 2);
				}
				else if(gPlayerCheckpointValue[playerid] == 2)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1040.8793,-1569.6158,13.0935, 4.0, CHECKPOINT_CAREXAM, 3);
				}
				else if(gPlayerCheckpointValue[playerid] == 3)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1048.6573,-1492.2428,13.0935, 4.0, CHECKPOINT_CAREXAM, 4);
				}
				else if(gPlayerCheckpointValue[playerid] == 4)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 930.3591,-1486.9060,13.0795, 4.0, CHECKPOINT_CAREXAM, 5);
				}
				else if(gPlayerCheckpointValue[playerid] == 5)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 915.2392,-1524.6128,13.0875, 4.0, CHECKPOINT_CAREXAM, 6);
				}
				else if(gPlayerCheckpointValue[playerid] == 6)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 915.0828,-1574.5353,13.0882, 4.0, CHECKPOINT_CAREXAM, 7);
				}
				else if(gPlayerCheckpointValue[playerid] == 7)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 907.6953,-1769.6998,13.0873, 4.0, CHECKPOINT_CAREXAM, 8);
				}
				else if(gPlayerCheckpointValue[playerid] == 8)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 813.3115,-1764.1138,13.1047, 4.0, CHECKPOINT_CAREXAM, 9);
				}
				else if(gPlayerCheckpointValue[playerid] == 9)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 813.3115,-1764.1138,13.1047, 4.0, CHECKPOINT_CAREXAM, 10);
				}
				else if(gPlayerCheckpointValue[playerid] == 10)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 876.8595,-1580.0282,13.0877, 4.0, CHECKPOINT_CAREXAM, 11);
				}
				else if(gPlayerCheckpointValue[playerid] == 11)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1012.6880,-1574.8156,13.0875, 4.0, CHECKPOINT_CAREXAM, 12);
				}
				else if(gPlayerCheckpointValue[playerid] == 12)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1249.2765,-1574.5369,13.0878, 4.0, CHECKPOINT_CAREXAM, 13);
				}
				else if(gPlayerCheckpointValue[playerid] == 13)
				{
					DisablePlayerCheckpoint(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		            gPlayerCheckpointValue[playerid]=-1;

					if(GetPVarInt(playerid, "LessonSeconds") <= 10)
					{
						if(GetPVarInt(playerid, "InDriveTest") == 1)
						{
							PlayerData[playerid][pCarLic] = 1;
    						GameTextForPlayer(playerid, "~w~Parabéns! aqui está sua CNH!", 5000, 1);
			    			PlayerData[playerid][pCash]-=5000;
							DeletePVar(playerid, "LessonStarted");
							DeletePVar(playerid, "LessonSeconds");
							DeletePVar(playerid, "InDriveTest");
						}
					}
					else
					{
						SendClientMessage(playerid, COLOR_GREEN, "Dirigir muito rápido não é aceitável.");
						DeletePVar(playerid, "LessonStarted");
						DeletePVar(playerid, "LessonSeconds");
						DeletePVar(playerid, "InDriveTest");
					}

					SetVehicleToRespawn(vehicleid);
				}
			}
			else if(IsVehicleDMV(vehicleid) && GetPVarInt(playerid, "InDriveTest") == 2 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				PlayerPlaySound(playerid, 1138, 0.0, 0.0, 0.0);

				if(gPlayerCheckpointValue[playerid] == 1)
				{
				    GameTextForPlayer(playerid, "~w~75", 1200, 3);
					SetPVarInt(playerid, "LessonStarted", 1);
					DisablePlayerCheckpoint(playerid);

                    SendClientMessage(playerid, COLOR_GREEN, "Lembre-se de dirigir na faixa certa da estrada.");

					SetPlayerCheckpointEx(playerid, 1288.9124,-1573.6912,13.3828, 4.0, CHECKPOINT_CAREXAM, 2); // Go 2

					SendClientMessage(playerid, COLOR_WHITE, "Bem-vindo ao teste para taxista! Por favor, fique atento a mensagem.");
					SendClientMessage(playerid, COLOR_WHITE, "Isso vai acontecer.");
				}
				else if(gPlayerCheckpointValue[playerid] == 2) // 2
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1359.0680,-1419.6614,13.3828, 4.0, CHECKPOINT_CAREXAM, 3); // Go 3

					SendClientMessage(playerid, COLOR_WHITE, "não há muitas rotas nesta jornada.");
					SendClientMessage(playerid, COLOR_WHITE, "Receba um táxi ao concluir o teste.");
				}
				else if(gPlayerCheckpointValue[playerid] == 3)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1333.9957,-1398.6868,13.3542, 4.0, CHECKPOINT_CAREXAM, 4);

                    SendClientMessage(playerid, COLOR_WHITE, "O objetivo ao longo deste caminho é dirigir seu carro desde o ponto.");
                    SendClientMessage(playerid, COLOR_WHITE, "A ao ponto B permite conhecer os percursos de São Paulo!");
				}
				else if(gPlayerCheckpointValue[playerid] == 4)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1211.2808,-1322.8888,13.5589, 4.0, CHECKPOINT_CAREXAM, 5);

					SendClientMessage(playerid, COLOR_YELLOW, "|_________Chamada táxi_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "Chamada: Instrutor número: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "posição: Em frente ao hospital All Saints!");
					SendClientMessage(playerid, COLOR_WHITE, "Dica: Dirija com cuidado e mantenha a calma na estrada.");
				}
				else if(gPlayerCheckpointValue[playerid] == 5)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1072.5366,-1278.2339,13.3828, 4.0, CHECKPOINT_CAREXAM, 6);
					SendClientMessage(playerid, COLOR_WHITE, "Passageiro(a): Por favor me leve ao estÃºdio de cinema.");
				}
				else if(gPlayerCheckpointValue[playerid] == 6)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 952.7286,-1218.6337,16.7341, 4.0, CHECKPOINT_CAREXAM, 7);
				}
				else if(gPlayerCheckpointValue[playerid] == 7)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 937.3082,-1281.0801,14.9837, 4.0, CHECKPOINT_CAREXAM, 8);
                    SendClientMessage(playerid, COLOR_WHITE, "Passageiro(a): Obrigado(a) por me ajudar!");
				}
				else if(gPlayerCheckpointValue[playerid] == 8)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1132.1293,-1411.0457,13.6248, 4.0, CHECKPOINT_CAREXAM, 9);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 50);
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Chamada táxi_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "Cahamda: Instrutor número: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "localização: Shopping!");

				}
				else if(gPlayerCheckpointValue[playerid] == 9)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1193.5734,-1561.8549,13.3828, 4.0, CHECKPOINT_CAREXAM, 10);

					SendClientMessage(playerid, 0xF8E0ECFF, "Passageiro(a): Por favor, vai ao mercado!");
				}
				else if(gPlayerCheckpointValue[playerid] == 10)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1206.1475,-1717.4045,13.5469, 4.0, CHECKPOINT_CAREXAM, 11);
				}
				else if(gPlayerCheckpointValue[playerid] == 11)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1534.5322,-1657.3186,13.3828, 4.0, CHECKPOINT_CAREXAM, 12);

                    SendClientMessage(playerid, 0xF8E0ECFF, "Passageiro(a): Obrigado(a) por me ajudar!");
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 100);
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Central_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "Chamada: Instrutor número: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "localização: Delegacia, rápido!");
				}
				else if(gPlayerCheckpointValue[playerid] == 12)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1437.5542,-1553.3374,13.5469, 4.0, CHECKPOINT_CAREXAM, 13);
					SendClientMessage(playerid, COLOR_STAT2, "Passageiro(a): Eu irei para a pista de skate.");
				}
				else if(gPlayerCheckpointValue[playerid] == 13)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1457.3812,-1314.1404,13.3828, 4.0, CHECKPOINT_CAREXAM, 14);

				}
				else if(gPlayerCheckpointValue[playerid] == 14)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1703.0131,-1304.3083,13.4166, 4.0, CHECKPOINT_CAREXAM, 15);
					SendClientMessage(playerid, COLOR_STAT2, "Passageiro(a): não, eu não vou!");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[Passageiros com raiva - Tempo esgotado.]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 10);

				}
				else if(gPlayerCheckpointValue[playerid] == 15)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1655.6829,-1456.3467,13.3837, 4.0, CHECKPOINT_CAREXAM, 16);

					SendClientMessage(playerid, COLOR_STAT2, "Passageiro(a): Me leve devolta para a delegacia");

				}
				else if(gPlayerCheckpointValue[playerid] == 16)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1524.3076,-1663.1096,13.5469, 4.0, CHECKPOINT_CAREXAM, 17);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 5);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Você superou as expectativas.](Add time)");

				}
				else if(gPlayerCheckpointValue[playerid] == 17)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1827.0012,-1680.2316,13.5469, 4.0, CHECKPOINT_CAREXAM, 18);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 100);

					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Central_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "Chamada: Instrutor número: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "posição: Alhambra");
				}
				else if(gPlayerCheckpointValue[playerid] == 18)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1968.9856,-1622.3890,15.9688, 4.0, CHECKPOINT_CAREXAM, 19);

                    SendClientMessage(playerid, COLOR_WHITE, "Passageiro(a): Pizzaria em Idlewood.");

				}
				else if(gPlayerCheckpointValue[playerid] == 19)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2079.0129,-1658.8647,13.3906, 4.0, CHECKPOINT_CAREXAM, 20);

					SendClientMessage(playerid, COLOR_WHITE, "Passageiro(a): Estou com muita fome ...");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[Passageiros com raiva - Tempo esgotado.]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 15);
				}
				else if(gPlayerCheckpointValue[playerid] == 20)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2115.4177,-1778.2894,13.3903, 4.0, CHECKPOINT_CAREXAM, 21);

                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 5);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Você superou as expectativas.](Add time)");


				}
				else if(gPlayerCheckpointValue[playerid] == 21)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2648.0222,-1676.4285,10.8086, 4.0, CHECKPOINT_CAREXAM, 22);


					SendClientMessage(playerid, COLOR_WHITE, "Passageiro(a): Graças a Deus a gente conseguiu.");
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 50);
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Central_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "Chamada: Instrutor número: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "posição: No estádio, meu amigo e eu precisamos de um Onibus!");

				}
				else if(gPlayerCheckpointValue[playerid] == 22)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2645.4697,-1234.8927,49.8451, 4.0, CHECKPOINT_CAREXAM, 23);

					SendClientMessage(playerid, 0xF8E0ECFF, "Passageiro(a): Eu quero ficar em casa. Meu velho amigo poderia vai-lo novamente.");
				}
				else if(gPlayerCheckpointValue[playerid] == 23)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2607.1348,-1037.3793,69.6366, 4.0, CHECKPOINT_CAREXAM, 24);

					SendClientMessage(playerid, 0xF8E0ECFF, "Passageiro(a): Fico com raiva quando penso nela.");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[Passageiro com raiva-O tempo acabou.]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 40);
				}
				else if(gPlayerCheckpointValue[playerid] == 24)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2501.7471,-972.1787,82.2425, 4.0, CHECKPOINT_CAREXAM, 25);
				}
				else if(gPlayerCheckpointValue[playerid] == 25)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2647.6921,-1672.7454,10.7948, 4.0, CHECKPOINT_CAREXAM, 26);

					SendClientMessage(playerid, 0xF8E0ECFF, "Passageiro: Você pode me ajudar a conseguir? Estou muito preocupada...");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 200);
				}
				else if(gPlayerCheckpointValue[playerid] == 26)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 2229.6445,-1729.9596,13.3828, 4.0, CHECKPOINT_CAREXAM, 27);
					SendClientMessage(playerid, 0xF8E0ECFF, "Passageiro 2: vai ao Shopping!");
				}
				else if(gPlayerCheckpointValue[playerid] == 27)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1962.4601,-1749.5858,13.3828, 4.0, CHECKPOINT_CAREXAM, 28);
				}
				else if(gPlayerCheckpointValue[playerid] == 28)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1936.6576,-1772.4995,13.3828, 4.0, CHECKPOINT_CAREXAM, 29);
				}
				else if(gPlayerCheckpointValue[playerid] == 29)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1762.6610,-1729.7421,13.3828, 4.0, CHECKPOINT_CAREXAM, 30);

                    SendClientMessage(playerid, 0xF8E0ECFF, "Passageiro 2: Você não pode ir até o Alhambra?");
				}
				else if(gPlayerCheckpointValue[playerid] == 30)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1762.2166,-1606.8145,13.3797, 4.0, CHECKPOINT_CAREXAM, 31);
				}
				else if(gPlayerCheckpointValue[playerid] == 31)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1816.7012,-1682.6655,13.3828, 4.0, CHECKPOINT_CAREXAM, 32);
				}
				else if(gPlayerCheckpointValue[playerid] == 32)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1279.2948,-1398.0652,13.0750, 4.0, CHECKPOINT_CAREXAM, 33);
					SendClientMessage(playerid, COLOR_STAT2, "Passageiro 2: *Suspiro* Por favor, leve-me ao shopping.");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[Passageiro com raiva - Tempo esgotado.]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 10);
				}
				else if(gPlayerCheckpointValue[playerid] == 33)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1120.0308,-1390.4103,13.4627, 4.0, CHECKPOINT_CAREXAM, 34);
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 10);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Você superou as expectativas.](Add time)");
				}
				else if(gPlayerCheckpointValue[playerid] == 34)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 642.6805,-1355.8063,13.5621, 4.0, CHECKPOINT_CAREXAM, 35);
					SendClientMessage(playerid, COLOR_STAT2, "Passageiro 2: Obrigado(a).");
					SendClientMessage(playerid, COLOR_YELLOW, "|_________Taxi Central_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "Chamada: Instrutor número: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "posição: Me leve ao estÃºdio de cinema.");

					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 145);
				}
				else if(gPlayerCheckpointValue[playerid] == 35)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1375.0747,-2287.1389,13.3530, 4.0, CHECKPOINT_CAREXAM, 36);
					SendClientMessage(playerid, COLOR_STAT2, "Passageiro: Aeroporto!");
     				SendClientMessage(playerid, COLOR_LIGHTRED, "[Passageiro com raiva - Tempo esgotado.]");
					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") - 15);
				}
				else if(gPlayerCheckpointValue[playerid] == 36)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1540.4331,-2287.9326,13.3828, 4.0, CHECKPOINT_CAREXAM, 37);
                    SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 5);
					SendClientMessage(playerid, COLOR_LIGHTRED, "[Você superou as expectativas.](Add time)");
				}
				else if(gPlayerCheckpointValue[playerid] == 37)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1683.5861,-2248.6130,-2.6732, 4.0, CHECKPOINT_CAREXAM, 38);

				}
				else if(gPlayerCheckpointValue[playerid] == 38)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1680.6915,-2324.1389,-2.8516, 4.0, CHECKPOINT_CAREXAM, 39);

					SendClientMessage(playerid, COLOR_STAT2, "Passageiro: Obrigado(a)!");

					SendClientMessage(playerid, COLOR_YELLOW, "|_________Chamada táxi_________|");
					SendClientMessage(playerid, COLOR_YELLOW, "Chama: Taxi_Instructor número: 90210");
					SendClientMessage(playerid, COLOR_YELLOW, "posição: Aeroporto");

					SetPVarInt(playerid, "LessonSeconds", GetPVarInt(playerid, "LessonSeconds") + 100);

				}
				else if(gPlayerCheckpointValue[playerid] == 39)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1556.8877,-2284.6323,13.3828, 4.0, CHECKPOINT_CAREXAM, 40);

					SendClientMessage(playerid, COLOR_STAT2, "Passageiro: Por favor, vai para a autoescola ...");

				}
				else if(gPlayerCheckpointValue[playerid] == 40)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1383.1172,-2285.7288,13.3110, 4.0, CHECKPOINT_CAREXAM, 41);

				}
				else if(gPlayerCheckpointValue[playerid] == 41)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1837.4260,-1558.3635,13.3704, 4.0, CHECKPOINT_CAREXAM, 42);


				}
				else if(gPlayerCheckpointValue[playerid] == 42)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1441.3636,-1590.0765,13.3828, 4.0, CHECKPOINT_CAREXAM, 43);

				}
				else if(gPlayerCheckpointValue[playerid] == 43)
				{
					DisablePlayerCheckpoint(playerid);
					SetPlayerCheckpointEx(playerid, 1280.8734,-1567.3806,13.3828, 4.0, CHECKPOINT_CAREXAM, 44);


				}
				else if(gPlayerCheckpointValue[playerid] == 44)
				{
					DisablePlayerCheckpoint(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		            gPlayerCheckpointValue[playerid]=-1;

					if(GetPVarInt(playerid, "InDriveTest") == 2)
					{
							SendClientMessage(playerid, COLOR_STAT2, "Passageiro: Obrigado(a)!");

							if(PlayerData[playerid][pJob] == JOB_NONE)
							{
						        PlayerData[playerid][pJob] = JOB_TAXI;

								if(PlayerData[playerid][pSideJob] == JOB_NONE) SendClientMessage(playerid, COLOR_GRAD6, "/jobswitch to make it an extra career.");
							}
							else
							{
							    if(PlayerData[playerid][pSideJob] == JOB_NONE)
							    {
							        PlayerData[playerid][pSideJob] = JOB_TAXI;
							    }
							    else
							    {
                                    SendClientMessage(playerid, COLOR_LIGHTRED, "Você tem que deixar o seu trabalho primeiro, digite: (/leavejob ou /leavesidejob)");
							    }
							}

    						GameTextForPlayer(playerid, "~w~Parabéns! Você é um taxista agora!", 5000, 1);
			    			PlayerData[playerid][pCash]-=5000;
							DeletePVar(playerid, "LessonStarted");
							DeletePVar(playerid, "LessonSeconds");
							DeletePVar(playerid, "InDriveTest");
					}

					SetVehicleToRespawn(vehicleid);
				}
			}
			else {
			    SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 4.0);
			}
		}
		case CHECKPOINT_COMP: {
			DisablePlayerCheckpoint(playerid);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
		}

		case CHECKPOINT_FARMER: { // harvest
		    new vehicleid = GetPlayerVehicleID(playerid);
			if(far_start[playerid] && far_veh[playerid] == vehicleid)
			{
                if(far_place[playerid])
                {
				    if(gPlayerCheckpointValue[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 5.0, BlueFarm[gPlayerCheckpointValue[playerid]][0],BlueFarm[gPlayerCheckpointValue[playerid]][1],BlueFarm[gPlayerCheckpointValue[playerid]][2])) {

						PlayerPlaySoundEx(playerid, 17803);
						SetPlayerCheckpointEx(playerid, -53.5525,70.3079,4.0933, 5.0, CHECKPOINT_FARMER2);
					}
                }
                else
                {
				    if(gPlayerCheckpointValue[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 5.0, FlintFarm[gPlayerCheckpointValue[playerid]][0],FlintFarm[gPlayerCheckpointValue[playerid]][1],FlintFarm[gPlayerCheckpointValue[playerid]][2])) {

						PlayerPlaySoundEx(playerid, 17803);
						SetPlayerCheckpointEx(playerid, -377.8374,-1433.8853,25.7266, 5.0, CHECKPOINT_FARMER2);
					}
				}
			}
		}
		case CHECKPOINT_FARMER2: { // Harvest
			new vehicleid = GetPlayerVehicleID(playerid);
			if(far_start[playerid] && far_veh[playerid] == vehicleid) {
	            new randmoney = 20 + random(50);

	            format(szString, sizeof(szString), "~w~Você pegou um pouco de trigo e vendeu por~n~~y~para %dR$", randmoney);
	            GameTextForPlayer(playerid, szString, 5000, 1);

	            PlayerData[playerid][pPayCheck] += randmoney;

	            PlayerPlaySoundEx(playerid, 17803);

				//Next Harvesting
				if(PlayerData[playerid][pLevel] > 3) {

					gPlayerCheckpointX[playerid]=0.0;
					gPlayerCheckpointY[playerid]=0.0;
					gPlayerCheckpointZ[playerid]=0.0;

					DisablePlayerCheckpoint(playerid);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

					far_start[playerid]=0; far_veh[playerid]=INVALID_VEHICLE_ID;
				}
				else StartHarvesting(playerid);
			}
		}
	}
	return 1;
}

public OnPlayerLeaveCheckpoint(playerid)
{
	switch (gPlayerCheckpointStatus[playerid])
	{
	    case CHECKPOINT_HOUSE: {
	        DisablePlayerCheckpoint(playerid);
	        gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;
	        gPlayerCheckpointValue[playerid] = -1;
	        nearHouse_var[playerid] = -1;
		}
	}
	return 1;
}

public OnPlayerEnterRaceCheckpoint(playerid)
{
    if(GetPlayerVisibleDynamicCP(playerid)) return 1;

	switch (PlayerData[playerid][pCP_Type])
	{
	    case RCHECKPOINT_TRUCKER: {
		    PlayerData[playerid][pCP_Type] = -1;
		    PlayerData[playerid][pCP_X] = 0.0;
		    PlayerData[playerid][pCP_Y] = 0.0;
		    PlayerData[playerid][pCP_Z] = 0.0;

			DisablePlayerRaceCheckpoint(playerid);
	    }

	    case RCHECKPOINT_TRUCKERJOB: {
		    PlayerData[playerid][pCP_Type] = -1;
		    PlayerData[playerid][pCP_X] = 0.0;
		    PlayerData[playerid][pCP_Y] = 0.0;
		    PlayerData[playerid][pCP_Z] = 0.0;

			DisablePlayerRaceCheckpoint(playerid);

			SendClientMessage(playerid, COLOR_LIGHTRED, "Você chegou no checkpoint.");
	    }
	}

	return 1;
}

public OnPlayerLeaveRaceCheckpoint(playerid)
{
	return 1;
}

public OnRconCommand(cmd[])
{
	return 1;
}

public OnPlayerRequestSpawn(playerid)
{
	return 1;
}

public OnPlayerObjectMoved(playerid, objectid)
{
	return 1;
}

public OnPlayerPickUpPickup(playerid, pickupid)
{
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	return 0;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	return 1;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
    new Menu:Current = GetPlayerMenu(playerid);
	if(Current == Guide)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            HideMenuForPlayer(Guide, playerid);
	            ShowMenuForPlayer(GuideJob1, playerid);
	            return 1;
			}
			case 1: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Como chamar um táxi:___________");
				SendClientMessage(playerid, COLOR_WHITE,"/ligar 544");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"To stand up /stopanim");
			}
			case 2: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Rotas de Onibus:___________");
				SendClientMessage(playerid, COLOR_WHITE,"ROTA NEGRA: Aeroporto SP -> Centro de Licenças -> Alhambra -> Caixa Economica -> Motel");
                SendClientMessage(playerid, COLOR_WHITE,"ROTA VERMELHA: Food Mart -> Marina -> Rodeo -> Vinewood -> Hospital");
                SendClientMessage(playerid, COLOR_WHITE,"ROTA VERDE: Vinewood 24/7 -> Dillimore -> Blueberry -> Montgomery -> Palomino Creek");
                SendClientMessage(playerid, COLOR_WHITE,"ROTA AMARELA: Restaurante -> Market st. -> Banco -> Glen Park -> East LS -> Red Pen -> Grove st. -> SP Gym");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"To stand up /stopanim");
			}
			case 3: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Onde morar:___________");
				SendClientMessage(playerid, COLOR_WHITE,"- Pague para alugar um quarto no hotel.");
                SendClientMessage(playerid, COLOR_WHITE,"- Aluga-se quarto na casa de tras.");
                SendClientMessage(playerid, COLOR_WHITE,"- Ou morar no Motel do aeroporto de SP");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"To stand up /stopanim");
			}
			case 4: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Chamar médico:___________");
				SendClientMessage(playerid, COLOR_WHITE,"/ligar 911");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"To stand up /stopanim");
			}
			case 5: {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Chamar polícia:___________");
				SendClientMessage(playerid, COLOR_WHITE,"/ligar 911");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"To stand up /stopanim");
			}
			case 6: {
			    SendClientMessage(playerid, COLOR_GREEN,"_____sp Roleplay Server Forums:_____");
				SendClientMessage(playerid, COLOR_WHITE,"(Leia as regras e instruções no.)");
                SendClientMessage(playerid, COLOR_WHITE,"forum.sp-roleplay.com.br");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");

				//SendClientMessage(playerid, COLOR_WHITE,"To stand up /stopanim");
			}
		}
        SendClientMessage(playerid, COLOR_WHITE,"Levantar-se /stopanim");

	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(Guide, playerid);
	}

	if(Current == GuideJob1)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            HideMenuForPlayer(GuideJob1, playerid);
	            ShowMenuForPlayer(GuideJob2, playerid);
	            return 1;
			}
	        case 2: // Farmer
	        {
			    SendClientMessage(playerid, COLOR_GREEN,"___________Agricultor:___________");
				SendClientMessage(playerid, COLOR_WHITE,"O fazendeiro colheu os produtos da fazenda.");
                SendClientMessage(playerid, COLOR_WHITE,"/colhedor");
                SendClientMessage(playerid, COLOR_YELLOW,"> A localização desta ocupação está marcada no mapa.");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");
				SetPlayerCheckpoint(playerid, -382.5893,-1426.3422,26.2217, 3.5);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NEWSPAPER;

			}
		}
        SendClientMessage(playerid, COLOR_WHITE,"Levantar-se /stopanim");

	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(GuideJob1, playerid);
	}


	if(Current == GuideJob2)
	{
	    switch(row)
	    {
	        case 0:
	        {
	            HideMenuForPlayer(GuideJob2, playerid);
	            ShowMenuForPlayer(Guide, playerid);
	            return 1;
			}

	        case 2: // Car mechanic
	        {
		    	SendClientMessage(playerid, COLOR_GREEN,"___________mecanico:___________");
				SendClientMessage(playerid, COLOR_WHITE,"Repare e pinte o carro usando");
				SendClientMessage(playerid, COLOR_WHITE,"peças de Automoveis e reboques");
                SendClientMessage(playerid, COLOR_WHITE,"/paintcar /repararcarro /carparts /refillcar");
                SendClientMessage(playerid, COLOR_YELLOW,"> A localização desta ocupação está marcada no mapa.");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");
				SetPlayerCheckpoint(playerid, 88.4620,-165.0116,2.5938, 3.5);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NEWSPAPER;
	            return 1;
			}
	        case 3: // Trucker
	        {
		    	SendClientMessage(playerid, COLOR_GREEN,"___________Caminhoneiro:___________");
				SendClientMessage(playerid, COLOR_WHITE,"SP Caminhoneiros; A economia da cidade.");
				SendClientMessage(playerid, COLOR_WHITE,"esteja pronto para dirigir! (/caminhoneiro)");
                SendClientMessage(playerid, COLOR_YELLOW,"> A localização desta ocupação está marcada no mapa.");
				SendClientMessage(playerid, COLOR_GREEN,"______________________");
				SetPlayerCheckpoint(playerid, -78.0338,-1136.1221,1.0781, 3.5);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_NEWSPAPER;
	            return 1;
			}

		}

	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(GuideJob1, playerid);
	}

	return 1;
}

public OnPlayerExitedMenu(playerid)
{
	TogglePlayerControllable(playerid,1);
	return 1;
}

public OnPlayerInteriorChange(playerid, newinteriorid, oldinteriorid)
{
	return 1;
}

stock UpdatePlayerAttachWeapon(playerid, slot) {

    if(!PlayerAttachWeapon[playerid][slot][awID]) {
		format(largeQuery, sizeof(largeQuery), "INSERT INTO `weapon` (weaponid, x, y, z, rx, ry, rz, bone, hide, owner) VALUES(%d, %f, %f, %f, %f, %f, %f, %d, %d, %d)", PlayerAttachWeapon[playerid][slot][awWid],
		PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz],
		PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz],
		PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][awHide], PlayerData[playerid][pID]);
		mysql_tquery(dbCon, largeQuery, "OnPlayerAttachWeaponInsert", "dd", playerid, slot);
	}
	else
	{
	    format(largeQuery, sizeof(largeQuery), "UPDATE weapon SET x='%f',y='%f',z='%f',rx='%f',ry='%f',rz='%f',bone='%d',hide='%d' WHERE id = '%d'",
		PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz],
		PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz],
		PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][awHide], PlayerAttachWeapon[playerid][slot][awID]);
		mysql_query(dbCon,largeQuery);
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_EDITWEAPON))
	{
		if(response)
		{
			new i = GetPVarInt(playerid, "AttachSlot");

			PlayerAttachWeapon[playerid][i][awBone] = boneid;
			PlayerAttachWeapon[playerid][i][aPx] = fOffsetX;
			PlayerAttachWeapon[playerid][i][aPy] = fOffsetY;
			PlayerAttachWeapon[playerid][i][aPz] = fOffsetZ;
			PlayerAttachWeapon[playerid][i][aPrx] = fRotX;
			PlayerAttachWeapon[playerid][i][aPry] = fRotY;
			PlayerAttachWeapon[playerid][i][aPrz] = fRotZ;

			UpdatePlayerAttachWeapon(playerid, i);
			//PlayerAttachWeapon[playerid][i][awID] = 0;
			cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));

		    SendClientMessage(playerid, COLOR_YELLOW, "Atualizado");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "Cancelado");

		BitFlag_Off(g_PlayerFlags[playerid], IS_PLAYER_EDITWEAPON);
        RemovePlayerAttachedObject(playerid, FREESLOT9);

        DeletePVar(playerid, "AttachSlot");
	}

	if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_EDITCLOTHING))
	{
		if(response)
		{
		    new str[1024];

		    format(str,sizeof(str),"UPDATE clothing SET x = '%f', y = '%f', z = '%f', rx = '%f', ry = '%f', rz = '%f', scalex = '%f', scaley = '%f', scalez = '%f' WHERE id = '%d' AND owner = '%d' LIMIT 1",
		    fOffsetX,
		    fOffsetY,
		    fOffsetZ,
			fRotX,
			fRotY,
			fRotZ,
			fScaleX,
			fScaleY,
			fScaleZ,
			ClothingData[playerid][cl_selected[playerid]][cl_sid],
			PlayerData[playerid][pID]);
			mysql_query(dbCon, str);

			ClothingData[playerid][cl_selected[playerid]][cl_x] = fOffsetX;
			ClothingData[playerid][cl_selected[playerid]][cl_y] = fOffsetY;
			ClothingData[playerid][cl_selected[playerid]][cl_z] = fOffsetZ;
			ClothingData[playerid][cl_selected[playerid]][cl_rx] = fRotX;
			ClothingData[playerid][cl_selected[playerid]][cl_ry] = fRotY;
			ClothingData[playerid][cl_selected[playerid]][cl_rz] = fRotZ;
			ClothingData[playerid][cl_selected[playerid]][cl_scalex] = fScaleX;
			ClothingData[playerid][cl_selected[playerid]][cl_scaley] = fScaleY;
			ClothingData[playerid][cl_selected[playerid]][cl_scalez] = fScaleZ;

		}
		ClearAnimations(playerid);

		RemovePlayerClothing(playerid);
		cl_DressPlayer(playerid);
		BitFlag_Off(g_PlayerFlags[playerid], IS_PLAYER_EDITCLOTHING);
	}

	if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_BUYCLOTHING))
	{
		if(response)
		{//cl_SportsData[cl_buyingslot[playerid]][e_model]
		    new str[1024], money, name[32];

			switch(cl_buying[playerid])
			{
			    case BUYSPORTS: for(new i=0;i!=sizeof(cl_SportsData);++i) if(cl_SportsData[i][e_model] == modelid) format(name, 32, "%s", cl_SportsData[i][e_name]), money = cl_SportsData[i][e_price];
                case BUYZIP: for(new i=0;i!=sizeof(cl_ZipData);++i) if(cl_ZipData[i][e_model] == modelid) format(name, 32, "%s", cl_ZipData[i][e_name]), money = cl_ZipData[i][e_price];
				case BUYGOV: for(new i=0;i!=sizeof(cl_GovData);++i) if(cl_GovData[i][e_model] == modelid) format(name, 32, "%s", cl_GovData[i][e_name]), money = cl_GovData[i][e_price];
				case BUYNOVOS: for(new i=0;i!=sizeof(cl_NovosData);++i) if(cl_NovosData[i][e_model] == modelid) format(name, 32, "%s",  cl_NovosData[i][e_name]), money = cl_NovosData[i][e_price];
			}

            if(PlayerData[playerid][pCash] >= money)
            {

                /*format(str,sizeof(str),"SELECT COUNT(*) FROM clothing WHERE owner = '%d'", PlayerData[playerid][pID]);
                mysql_query(dbCon, str);

				new num;
				cache_get_value_index_int(0, 0, num);

				switch(PlayerData[playerid][pDonateRank])
				{
					case 0: if(num >= 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can not buy more than this.");
					case 1: if(num >= 8) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can not buy more than this.");
					case 2: if(num >= 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can not buy more than this.");
					case 3: if(num >= 15) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can not buy more than this.");
				}

				*/
				new id = -1;
				if((id = AddPlayerClothing(playerid,modelid,fOffsetX,fOffsetY,fOffsetZ,fRotX,fRotY,fRotZ,boneid,index,fScaleX,fScaleY,fScaleZ,name)) != -1)
				{
					format(str,sizeof(str),"INSERT INTO `clothing` (`object`, `x`, `y`, `z`, `rx`, `ry`, `rz`, `bone`, `slot`, `owner`, `equip`, `scalex`, `scaley`, `scalez`, `name`) VALUES ('%d', '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', '%d', '0', '%f', '%f', '%f', '%s')",
		            modelid,
				    fOffsetX,
				    fOffsetY,
				    fOffsetZ,
					fRotX,
					fRotY,
					fRotZ,
					boneid,
					index,
					PlayerData[playerid][pID],
					fScaleX,
					fScaleY,
					fScaleZ,
					name);
					mysql_tquery(dbCon, str, "OnQueryBuyClothing", "dd", playerid, id);

	                PlayerData[playerid][pCash] -= money;
		            SendClientMessage(playerid, COLOR_WHITE, "use /itens para editar seus itens.");
	             	ShowPlayerFooter(playerid, "~g~Aproveite sua compra!~n~~w~Use ~y~/itens ~w~para editar seus itens.", 10000);

					format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
					mysql_query(dbCon, szQuery);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode comprar mais do que isso.");
            }
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode pagar por isso.");
		}
		RemovePlayerClothing(playerid);
        cl_ResetDressPlayer(playerid);

		cl_buying[playerid]=0; cl_buyingpslot[playerid]=-1;
		ClearAnimations(playerid);
	    BitFlag_Off(g_PlayerFlags[playerid], IS_PLAYER_BUYCLOTHING);
	}
	return 1;

}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && Pressed(KEY_JUMP)) {
		/*ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    	ClearAnimations(playerid);
    	*/
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff",4.1,0,1,1,0,0);
	}
	new weaponid = GetPlayerWeapon(playerid);
	if(newkeys & KEY_FIRE && weaponid >= 16 && weaponid <= 18)
	{
	    PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]]--;
	    if(!PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]])
	    {
	        PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = 0;
	        PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = 0;
	    }
	}

	/*if ( Pressed(KEY_FIRE) && GetPVarInt(playerid, "GraffitiCreating") == 1 )
	{
		if( GetPlayerWeapon(playerid) == 41 )
		{
		    spraytimer[playerid] = SetTimerEx( "spraying", 1000, true, "i", playerid );
		    KillTimer( spraytimerx[playerid]);
		}
	}

	if ( RELEASED( KEY_FIRE ) && GetPVarInt(playerid, "GraffitiCreating") == 1 )
	{
		if( GetPlayerWeapon(playerid) == 41 )
		{
		    KillTimer(spraytimer[playerid]);
	    	sprayammount[playerid] --;
	    	GameTextForPlayer( playerid,"~g~Please keep spraying!!",3000, 5 ); // <---
    	 	spraytimerx[playerid] = SetTimerEx( "killgr", 90000, true, "i", playerid );
		}
	}*/
	/*if(newkeys & KEY_FIRE)
	{
		for(new ID = 0; ID != MAX_GRAFFITI; ID++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 5.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {

                EditDynamicObject(playerid, graff_Info[ID][graffObject]);
				SetPVarInt(playerid, "GraffitiCreating", 1);
				SetPVarInt(playerid, "GraffitiID", ID);
			 	break;
		  	}
		}
	}*/

	if ( Pressed(KEY_FIRE) && GetPVarInt(playerid, "GraffitiReplace") == 0 && GetPVarInt(playerid, "GraffitiReplacing") == 0)
	{
		if( GetPlayerWeapon(playerid) == 41 && GraffiModel[playerid] && (PlayerData[playerid][pSprayPermission] || GetFactionType(playerid) == FACTION_GANG))
		{
		 	for(new ID = 0; ID != MAX_GRAFFITI; ID++)
			{
			    if (IsPlayerInRangeOfPoint(playerid, 3.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {

			        SetPVarInt(playerid, "GraffitiReplacing", 1);
				    SetPVarInt(playerid, "GraffitiReplace", ID);
		    	 	spraytimer[playerid] = SetTimerEx( "replacingGraff", 1000, true, "i", playerid );
			    	break;
		    	}
		    }
		}
	}

	if ( RELEASED( KEY_FIRE ) && GetPVarInt(playerid, "GraffitiReplacing") == 1 )
	{
	    GameTextForPlayer(playerid, "~r~Pixação cancelada",5000, 5);
		KillTimer(spraytimer[playerid]);
		sprayammount[playerid]=0;
		DeletePVar( playerid,"GraffitiReplace");
		DeletePVar( playerid,"GraffitiReplacing");

	}
	/* FIRE KEY */
	if(newkeys & KEY_FIRE && (weaponid == 41 && !IsPlayerInAnyVehicle(playerid))) {
		new nearveh=Vehicle_Nearest(playerid);
		if(IsPlayerFacingVehicle(playerid,nearveh)) {
			Firetimer[playerid] = SetTimerEx("ResprayTimer",1000,0,"ii",playerid,nearveh);
			Firehold[playerid] = 1;
		}
	}
	if(oldkeys & KEY_FIRE && (Firehold[playerid] == 1)) {
		Firehold[playerid] = 0;
		KillTimer(Firetimer[playerid]);
	}

    if(Pressed(KEY_WALK)) {
		if(PlayerData[playerid][pSpectating] != INVALID_PLAYER_ID && PlayerData[playerid][pAdmin] >= 1) {

			PlayerData[playerid][pSpectating] = INVALID_PLAYER_ID;

		    TogglePlayerSpectating(playerid, false);
			SetCameraBehindPlayer(playerid);

		    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
		    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
			return 1;
		}
    }

	if(Pressed(KEY_YES))
	{
		/*for(new ID = 0; ID != MAX_GRAFFITI; ID++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 5.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {

				new
					Float:oldRotX, Float:oldRotY, Float:oldRotZ;

				GetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, oldRotZ);

				graff_Info[ID][ZYpos] += 90.0;
				SetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, graff_Info[ID][ZYpos]);

				SaveGraffiti(ID);
				break;
			}
		}*/
		if(tToAccept[playerid] != OFFER_TYPE_NONE) {

			new str[128];
			format(str, sizeof(str), "~n~~n~~n~~y~%s ~g~aceitou sua oferta!", ReturnName(playerid, 0));
			GameTextForPlayer(pToAccept[playerid], str, 3000, 5);

			format(str, sizeof(str), "~n~~n~~n~~g~Você aceitou ~y~%s~g~!", ReturnName(pToAccept[playerid], 0));
			GameTextForPlayer(playerid, str, 3000, 5);

		    switch(tToAccept[playerid]) {
		        case OFFER_TYPE_VSELL: {
					if(PlayerData[playerid][pCash] >= prToAccept[playerid])
					{
					    new vehicleid = GetPlayerVehicleID(pToAccept[playerid]);

						if(IsDonateCar(CarData[PlayerData[pToAccept[playerid]][pPCarkey]][carModel])) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode comprar este veículo de doação.");

						if(IsPlayerInAnyVehicle(pToAccept[playerid]) && PlayerData[pToAccept[playerid]][pPCarkey] != 9999 && vehicleid == CarData[vToAccept[playerid]][carVehicle] && CarData[vToAccept[playerid]][carOwner] == PlayerData[pToAccept[playerid]][pID])
					    {
							SendClientMessage(pToAccept[playerid], 0xADFF2FFF, "PROCESSANDO: Criando seu novo /v list...");
							SendClientMessageEx(pToAccept[playerid], 0xADFF2FFF, "PROCESSADO: Recentemente renovado %s", (GetNumberOwnerCar(pToAccept[playerid])) ? (""):("Você não tem veículos restantes."));

							/*new plate[8];
							format(plate, 8, "%s", RandomVehiclePlate());
							mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", plate);
							mysql_tquery(dbCon, str, "RegisterPlates", "iis", pToAccept[playerid], PlayerData[pToAccept[playerid]][pPCarkey], plate);
							*/

							PlayerData[pToAccept[playerid]][pCash] += prToAccept[playerid];
							PlayerData[playerid][pCash] -= prToAccept[playerid];

							PlayerData[playerid][pPCarkey] = vToAccept[playerid];
							PlayerData[pToAccept[playerid]][pPCarkey] = 9999;

							Log_Write("logs/sellcar.txt", "[%s] %s: pago R$%d para %s do carro %s", ReturnDate(), ReturnName(playerid), prToAccept[playerid], ReturnName(pToAccept[playerid]), g_arrVehicleNames[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400]);

							CarData[vToAccept[playerid]][carOwner] = PlayerData[playerid][pID];

    						Car_SaveID(PlayerData[playerid][pPCarkey]);

							format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
							mysql_query(dbCon, szQuery);

							format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[pToAccept[playerid]][pCash], PlayerData[pToAccept[playerid]][pID]);
							mysql_query(dbCon, szQuery);

       						//pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = 9999; prToAccept[playerid] = 0; tToAccept[playerid] = 0;
						}
						else
						{
						    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: O proprietário deve estar no veículo para concluir a oferta.!");
						    SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "SERVER: O proprietário deve estar no veículo para concluir a oferta.!");
						}
			 		}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro suficiente!");
						SendClientMessage(pToAccept[playerid], COLOR_LIGHTRED, "Seu veículo não pode ser vendido porque o jogador pois não tem dinheiro sufic0iente.");
					}
					pToAccept[playerid] = INVALID_PLAYER_ID; vToAccept[playerid] = 9999; prToAccept[playerid] = 0; tToAccept[playerid] = 0;
          		}
		        case OFFER_TYPE_SERVICE: {
		      		ShowPlayerFooter(pToAccept[playerid], "~h~~p~PUXE A SUA SPRAYCAN.", -1);
			     	RepairTime{pToAccept[playerid]} = serviceComp[pToAccept[playerid]];
		            pToAccept[playerid] = INVALID_PLAYER_ID; tToAccept[playerid] = 0;
		        }
			}
   			HidePlayerFooter(playerid);
		}
		else {
			new targetplayer = GetPlayerTargetPlayer(playerid);
		    if(targetplayer != INVALID_PLAYER_ID)
		    {
		        format(szString, sizeof(szString), "%s%s%s", ReturnName(targetplayer, 0), strlen(PlayerData[targetplayer][pAttribute]) ? (" | ") : (""), PlayerData[targetplayer][pAttribute]);
				SetPlayerChatBubble(targetplayer, szString, COLOR_PURPLE, 30.0, 6000);
		    }
		    else {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "-> Alvo não encontrado: claro, ou que as setas verdes estáo em suas cabeça antes de apertarem o botão Y"); //target not found.: Sure, or that the green arrows are on their heads before they hit the button
		    }
		}
	}

	if(Pressed(KEY_NO))
	{
		/*for(new ID = 0; ID != MAX_GRAFFITI; ID++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 5.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {

				new
					Float:oldRotX, Float:oldRotY, Float:oldRotZ;

				GetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, oldRotZ);

				graff_Info[ID][ZYpos] -= 90.0;
				SetDynamicObjectRot(graff_Info[ID][graffObject], oldRotX, oldRotY, graff_Info[ID][ZYpos]);

				SaveGraffiti(ID);
				break;
			}
		}*/
		if(tToAccept[playerid] != OFFER_TYPE_NONE) {
		    new str[128];
		    format(str, sizeof(str), "~n~~n~~n~~y~%s ~r~negou sua oferta!", ReturnName(playerid, 0));
		    GameTextForPlayer(pToAccept[playerid], str, 3000, 5);

		    format(str, sizeof(str), "~n~~n~~n~~r~Você negou a oferta ~y~%s~r~!", ReturnName(pToAccept[playerid], 0));
		    GameTextForPlayer(playerid, str, 3000, 5);

		    SendClientMessage(pToAccept[playerid], 0xADFF2FFF, "SERVER: O jogador rejeitou a oferta.");

			switch(tToAccept[playerid]) {
		  		case OFFER_TYPE_VSELL: {
		  		    vToAccept[playerid] = 9999; prToAccept[playerid] = 0;
				}
		  		case OFFER_TYPE_SERVICE: {
					serviceComp[pToAccept[playerid]] = 0;
					serviceTowtruck[pToAccept[playerid]] = 0;
					serviceCustomer[pToAccept[playerid]] = 0;
					serviceFocus[pToAccept[playerid]] = 0;
					serviced[pToAccept[playerid]] = 0;
				}
			}
 	 		tToAccept[playerid] = 0;
 	 		pToAccept[playerid] = INVALID_PLAYER_ID;
		   	HidePlayerFooter(playerid);
		}
	}

	if(Pressed(KEY_SECONDARY_ATTACK)) if(PlayerData[playerid][pAnimation]) cmd_stopanim(playerid);


	if(Pressed(KEY_FIRE)) playershottick[playerid] = GetTickCount();

	if(Pressed(KEY_SPRINT) || Pressed(KEY_JUMP))
	{
	    if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	    {
	    	for(new i = 0; i != MAX_DAMAGES; ++i)
			{
			    if(DamageData[playerid][i][dShotType] == 7 || DamageData[playerid][i][dShotType] == 8)
				{
			        if(LegDelay[playerid] && Pressed(KEY_SPRINT)) return 1;
			        ClearAnimations(playerid);
		    		ApplyAnimationEx(playerid, "PED", "FALL_COLLAPSE", 4.1, 0, 1, 1, 0, 0, 1);
		    		LegDelay[playerid] = 5;
				}
			}
		}
	}


	if((newkeys & KEY_LOOK_BEHIND || newkeys & KEY_SUBMISSION ) && (GetPVarInt(playerid, "JustBoughtFurniture") || GetPVarInt(playerid, "EditingFurniture"))) {

        new houseid = HouseEntered[playerid];
        if(houseid != -1) {
    		new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");
			new objectid = HouseFurniture[houseid][furnitureslot][fObject];

			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);
	  		GetXYInFrontOfPlayer(playerid, px, py, 1.5);

			if(IsValidDynamicObject(objectid))
			{
				SetDynamicObjectPos(objectid, px, py, pz);
				SetDynamicObjectRot(objectid, 0, 0, 0);
			}
		}

		houseid = BizEntered[playerid];
        if(houseid != -1) {
    		new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");
			new objectid = BizFurniture[houseid][furnitureslot][fObject];

			new Float:px, Float:py, Float:pz;
			GetPlayerPos(playerid, px, py, pz);
	  		GetXYInFrontOfPlayer(playerid, px, py, 1.5);

			if(IsValidDynamicObject(objectid))
			{
				SetDynamicObjectPos(objectid, px, py, pz);
				SetDynamicObjectRot(objectid, 0, 0, 0);
			}
		}
    }

	if(PlayerData[playerid][pTutorialStep]) //gotutorial
	{
	    if(RELEASED(KEY_SPRINT)) // Forward lesson
	    {
            PlayerData[playerid][pTutorialStep]++;
            ClearChatBox(playerid);
            switch(PlayerData[playerid][pTutorialStep])
            {
                case 2: {

				    SendClientMessage(playerid, COLOR_GRAD3, "Um jornal está localizado próximo ao Airport Motel, seu ponto de spawn atual.");
				    SendClientMessage(playerid, COLOR_GRAD3, "para marcar 'i' e usar /jornal para ler");

				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");
				    SendClientMessage(playerid, COLOR_WHITE, "");


				    SendClientMessage(playerid, COLOR_WHITE, "Primeira vez em São Paulo");
				    SendClientMessage(playerid, COLOR_GRAD3, "Bem-vindo a São Paulo a maior cidade do estado de São Paulo, rs!");
				    SendClientMessage(playerid, COLOR_GRAD3, "Agora Você mora no Airport Motel até encontrar um lugar melhor por conta propria.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Você pode começar lendo os jornais de hoje. Você pode encontrar algumas informações.");

                    InterpolateCameraPos(playerid, 1541.1512,-2287.1345,91.9661, 1669.1499,-2328.8406,-3.5769, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1623.3582,-2288.0413,77.9914, 1654.4652,-2333.6084,-2.6797, 1500, CAMERA_MOVE);

				}
                case 3: {

				    SendClientMessage(playerid, COLOR_WHITE, "Transporte");
				    SendClientMessage(playerid, COLOR_GRAD3, "Para se locomover pela cidade Você tem que se dirigir a um carro e/ou moto.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Você pode esperar o Onibus, pegar um táxi ou alugar um carro. E use uma certa quantia.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Ligue 544 para serviço de táxi ou espere o Onibus. Carros alugados podem ser encontrados pela cidade.");

                    GameTextForPlayer(playerid, "~p~/ligar 544 ~w~chamar~n~~y~São Paulo Transporte público", 20000, 3);

                    InterpolateCameraPos(playerid, 1669.1499,-2328.8406,-3.5769, 1807.2902,-1939.7085,67.2748, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1654.4652,-2333.6084,-2.6797, 1773.8251,-1902.2825,13.5502, 1500, CAMERA_MOVE);
				}
                case 4: {

				    SendClientMessage(playerid, COLOR_WHITE, "Viver sozinho");
				    SendClientMessage(playerid, COLOR_GRAD3, "Quando Você sentir que a hora de sair do Airport Motel para o seu proprio lugar. Você deve começar a procurar uma nova casa ou hotel.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Existem muitas casas em torno de São Paulo. Ele pode ser comprado ou alugado para qualquer pessoa trocando apenas algum dinheiro.");
				    SendClientMessage(playerid, COLOR_GRAD3, "There are also a few hotels and motels around the city where you can rent some rooms.");

                    GameTextForPlayer(playerid, "~y~Idlewood motel~n~~w~(~p~/rent~w~) ou (~p~/rentroom~w~)", 20000, 3);

                    InterpolateCameraPos(playerid, 1807.2902,-1939.7085,67.2748, 2119.4541,-1751.1744,21.5524, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1773.8251,-1902.2825,13.5502, 2155.6519,-1776.4888,18.5486, 1500, CAMERA_MOVE);
				}
                case 5: {

				    SendClientMessage(playerid, COLOR_WHITE, "Vida");
				    SendClientMessage(playerid, COLOR_GRAD3, "Tente manter sua vida saudável e coma na hora certa. Você começara a perder HP continuamente quando seu personagem estiver com fome.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Usar drogas pode reduzir seu HP, aumentar seu nível de fome. também o deixaria doente ou morrerá.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Existem muitos restaurantes na cidade que Você pode comer para aumentar seu HP e diminuir sua fome.");

                    GameTextForPlayer(playerid, "~y~Idlewood pizza stack~n~~w~(~p~/eat~w~)", 20000, 3);

                    InterpolateCameraPos(playerid, 2119.4541,-1751.1744,21.5524, 2070.5469,-1834.5552,30.9983, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 2155.6519,-1776.4888,18.5486, 2108.1138,-1779.3624,13.3898, 1500, CAMERA_MOVE);
				}
                case 6: {

				    SendClientMessage(playerid, COLOR_WHITE, "comunicação e conhecer novas pessoas.");
				    SendClientMessage(playerid, COLOR_GRAD3, "A sociedade de São Paulo é bastante grande. Existem pessoas em torno de uma ampla gama de hobbies e interesses.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Você pode conhecer novas pessoas nos lugares mais populares da cidade. Pode ser um clube, pub, restaurante ou qualquer outro.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Um dos lugares mais populares que serve como ponto de encontro ou shopping center é o shopping.");
                    SendClientMessage(playerid, COLOR_GRAD3, "O shopping é um dos pontos-chave de São Paulo, onde Você pode se comunicar e interagir com pessoas aleatórias.");
                    SendClientMessage(playerid, COLOR_GRAD3, "Você pode comprar muitos itens que podem ser salvos. Pode melhorar a atmosfera das preliminares e olhar para o seu personagem.");

					GameTextForPlayer(playerid, "~w~São Paulo Shopping", 4000, 3);

                    InterpolateCameraPos(playerid, 2070.5469,-1834.5552,30.9983, 1129.1364,-1359.0806,60.4063, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 2108.1138,-1779.3624,13.3898, 1129.1011,-1488.4135,22.7614, 1500, CAMERA_MOVE);
				}
                case 7: {

				    SendClientMessage(playerid, COLOR_WHITE, "Receber e possuir propriedade.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Você pode obter e possuir uma propriedade na cidade a partir de anúncios publicados. fale com as pessoas Ou visite a loja");
				    SendClientMessage(playerid, COLOR_GRAD3, "A propriedade pode oferecer a Você em troca de parte do dinheiro ou não pagar nada. Depende de como Você joga.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Você pode comprar novas casas e veículos de revendedores ou outros jogadores no servidor.");
                    SendClientMessage(playerid, COLOR_GRAD3, "Você também pode roubar propriedade de outros jogadores em seu proprio estilo e técnica.");
                    SendClientMessage(playerid, COLOR_GRAD3, "No entanto, roubar pode não ser uma maneira limpa e alguém pode estar procurando por Você mais tarde.");

                    GameTextForPlayer(playerid, "~w~Escritorio de Publicidade", 4000, 3);

                    InterpolateCameraPos(playerid, 1129.1364,-1359.0806,60.4063, 1697.8542,-1308.5330,60.4948, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1129.1011,-1488.4135,22.7614, 1736.1309,-1267.8335,13.5431, 1500, CAMERA_MOVE);
				}
                case 8: {

				    SendClientMessage(playerid, COLOR_WHITE, "Aumente sua receita.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Antes de negociar em cada um deles. Você tem que ter dinheiro primeiro. Existem muitas maneiras diferentes de ganhar dinheiro em São Paulo.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Você pode fazer anúncios. Pergunte as pessoas sobre suas proprias necessidades. Ou talvez pelo jornal também.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Você também pode ganhar dinheiro de uma maneira Ãºnica. Depende de Você e da sua criatividade.");

                    GameTextForPlayer(playerid, "~w~Trabalho de detetive", 4000, 3);

                    InterpolateCameraPos(playerid, 1697.8542,-1308.5330,60.4948, 1744.5216,-1693.8655,52.5560, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1736.1309,-1267.8335,13.5431, 1774.4377,-1658.4363,30.9402, 1500, CAMERA_MOVE);
				}
                case 9: {

				    SendClientMessage(playerid, COLOR_WHITE, "serviço público");
					SendClientMessage(playerid, COLOR_GRAD3, "O serviço público de São Paulo está sempre disponível. Quais São eles?");
                    SendClientMessage(playerid, COLOR_GRAD3, "Isto é polícia Militar e polícia Civil");
					SendClientMessage(playerid, COLOR_GRAD3, "{C68DFF}polícia Civil é o responsível pelos internos dos presos em São Paulo.");
					SendClientMessage(playerid, COLOR_GRAD3, "{FF8282}Corpo de Bombeiros é responsível por manter a São de e ajudar os doentes.");
                    SendClientMessage(playerid, COLOR_GRAD3, "Eles coordenam com o hospital e a equipe de resgate.");
					SendClientMessage(playerid, COLOR_GRAD3, "Se Você precisar de alguma agência neste nome, não hesite. Ligue ou entre em contato com o 911 e ligue para eles para ajuda-lo.");

                    GameTextForPlayer(playerid, "~w~PM~n~ESP", 4000, 3);

                    InterpolateCameraPos(playerid, 1744.5216,-1693.8655,52.5560, 667.7610,-608.4394,38.1223, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1774.4377,-1658.4363,30.9402, 618.0063,-574.8521,26.1432, 1500, CAMERA_MOVE);
				}
                case 10: {

				    SendClientMessage(playerid, COLOR_WHITE, "Regras do servidor:");
					SendClientMessage(playerid, COLOR_GRAD3, "Siga-nos em nosso fórum."EMBED_WHITE"On forum.sp-roleplay"EMBED_GRAD".com.BR para informações sobre servidores, role-playing e muito mais detalhado e claro.");

                    InterpolateCameraPos(playerid, 667.7610,-608.4394,38.1223, 1474.6232,-1723.1591,42.9895, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 618.0063,-574.8521,26.1432, 1480.6512,-1771.0350,31.6094, 1500, CAMERA_MOVE);
				}
                case 11: {
				    SendClientMessage(playerid, COLOR_WHITE, "ConcluSão:");
				    SendClientMessage(playerid, COLOR_GRAD3, "Sempre tenha em mente que Você deve obedecer a todas as regras do servidor, respeitar ou honrar todos os jogadores e ouvir os conselhos do administrador do servidor.");
				}
				case 12: { // End Tutorial

				    PlayerData[playerid][pTutorialStep] = 0;

					PlayerData[playerid][pPos][0] = 1643.0010;
	                PlayerData[playerid][pPos][1] = -2331.7056;
	                PlayerData[playerid][pPos][2] = -2.6797;
	                PlayerData[playerid][pPos][3] = 359.8919;
	                PlayerData[playerid][pCreated] = 1;
	                PlayerData[playerid][pLevel] = 1;
	                PlayerData[playerid][pSHealth] = 0.0;
	                PlayerData[playerid][pHealth] = 100;
	                PlayerData[playerid][pPnumber] = 10000 + random(99999);

					SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pModel], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
					TogglePlayerSpectating(playerid, 0);
					TogglePlayerControllable(playerid, 0);
					SetTimerEx("SpawnTimer", 2000, false, "d", playerid);

	                SendClientMessage(playerid, COLOR_GRAD3, "Você completou com sucesso a vídeo aula.");
	                SendClientMessage(playerid, COLOR_GRAD3, "{FF6347}Bem vindo ao São Paulo Roleplay.");

	                //SQL_SaveCharacter(playerid);
				}
            }
	    }
	    else if(RELEASED(KEY_JUMP)) // Retry lesson
	    {
	        if(PlayerData[playerid][pTutorialStep] == 1)
	        {
	            PlayerPlaySound(playerid, 1055, 0.0, 0.0, 0.0);
	            return 1;
	        }

	        PlayerData[playerid][pTutorialStep]--;
            ClearChatBox(playerid);
            switch(PlayerData[playerid][pTutorialStep])
            {
                case 1: {
				    SendClientMessage(playerid, COLOR_WHITE, "? Bem vindo ao São Paulo Roleplay");
				    SendClientMessage(playerid, COLOR_GRAD3, "Esta vídeo aula irá guia-lo para a primeira etapaSP-RP");
				    SendClientMessage(playerid, COLOR_GRAD3, "use 'SPACE' e 'LSHIFT' no teclado para navegar nas janelas.");
				    SendClientMessage(playerid, COLOR_GRAD3, "Recomendamos que Você reserve um tempo para ve-lo.");

                    InterpolateCameraPos(playerid, 1669.1499,-2328.8406,-3.5769, 1541.1512,-2287.1345,91.9661, 1500, CAMERA_MOVE);
                    InterpolateCameraLookAt(playerid, 1654.4652,-2333.6084,-2.6797, 1623.3582,-2288.0413,77.9914, 1500, CAMERA_MOVE);
	        	}
	                case 2: {

					    SendClientMessage(playerid, COLOR_GRAD3, "Um jornal está localizado próximo ao Airport Motel, seu ponto de spawn atual.");
					    SendClientMessage(playerid, COLOR_GRAD3, "para marcar 'i' e usar /jornal para ler");

					    SendClientMessage(playerid, COLOR_WHITE, "");
					    SendClientMessage(playerid, COLOR_WHITE, "");
					    SendClientMessage(playerid, COLOR_WHITE, "");
					    SendClientMessage(playerid, COLOR_WHITE, "");


					    SendClientMessage(playerid, COLOR_WHITE, "Primeira vez em São Paulo");
					    SendClientMessage(playerid, COLOR_GRAD3, "Bem-vindo a São Paulo a maior cidade do estado de São Paulo, rs!");
					    SendClientMessage(playerid, COLOR_GRAD3, "Agora Você mora no Airport Motel até encontrar um lugar melhor por conta propria.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Você pode começar lendo os jornais de hoje. Você pode encontrar algumas informações.");

	                    InterpolateCameraPos(playerid, 1541.1512,-2287.1345,91.9661, 1669.1499,-2328.8406,-3.5769, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 1623.3582,-2288.0413,77.9914, 1654.4652,-2333.6084,-2.6797, 1500, CAMERA_MOVE);

					}
	                case 3: {

					    SendClientMessage(playerid, COLOR_WHITE, "Transporte");
					    SendClientMessage(playerid, COLOR_GRAD3, "Para se locomover pela cidade Você tem que se dirigir a um carro e/ou moto.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Você pode esperar o Onibus, pegar um táxi ou alugar um carro. E use uma certa quantia.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Ligue 544 para serviço de táxi ou espere o Onibus. Carros alugados podem ser encontrados pela cidade.");

	                    GameTextForPlayer(playerid, "~p~/ligar 544 ~w~chamar~n~~y~São Paulo Transporte público", 20000, 3);

	                    InterpolateCameraPos(playerid, 1669.1499,-2328.8406,-3.5769, 1807.2902,-1939.7085,67.2748, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 1654.4652,-2333.6084,-2.6797, 1773.8251,-1902.2825,13.5502, 1500, CAMERA_MOVE);
					}
	                case 4: {

					    SendClientMessage(playerid, COLOR_WHITE, "Viver sozinho");
					    SendClientMessage(playerid, COLOR_GRAD3, "Quando Você sentir que é a hora de sair do Airport Motel para o seu proprio lugar. Você deve começar a procurar uma nova casa ou hotel.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Existem muitas casas em torno de São Paulo. Ele pode ser comprado ou alugado para qualquer pessoa trocando apenas algum dinheiro.");
					    SendClientMessage(playerid, COLOR_GRAD3, "There are also a few hotels and motels around the city where you can rent some rooms.");

	                    GameTextForPlayer(playerid, "~y~Idlewood motel~n~~w~(~p~/rent~w~) ou (~p~/rentroom~w~)", 20000, 3);

	                    InterpolateCameraPos(playerid, 1807.2902,-1939.7085,67.2748, 2119.4541,-1751.1744,21.5524, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 1773.8251,-1902.2825,13.5502, 2155.6519,-1776.4888,18.5486, 1500, CAMERA_MOVE);
					}
	                case 5: {

					    SendClientMessage(playerid, COLOR_WHITE, "Vida");
					    SendClientMessage(playerid, COLOR_GRAD3, "Tente manter sua vida saudável e coma na hora certa. Você começara a perder HP continuamente quando seu personagem estiver com fome.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Usar drogas pode reduzir seu HP, aumentar seu nível de fome. também o deixaria doente ou morrerá.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Existem muitos restaurantes na cidade que Você pode comer para aumentar seu HP e diminuir sua fome.");

	                    GameTextForPlayer(playerid, "~y~Idlewood pizza stack~n~~w~(~p~/eat~w~)", 20000, 3);

	                    InterpolateCameraPos(playerid, 2119.4541,-1751.1744,21.5524, 2070.5469,-1834.5552,30.9983, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 2155.6519,-1776.4888,18.5486, 2108.1138,-1779.3624,13.3898, 1500, CAMERA_MOVE);
					}
	                case 6: {

					    SendClientMessage(playerid, COLOR_WHITE, "comunicação e conhecer novas pessoas.");
					    SendClientMessage(playerid, COLOR_GRAD3, "A sociedade de São Paulo bastante grande. Existem pessoas em torno de uma ampla gama de hobbies e interesses.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Você pode conhecer novas pessoas nos lugares mais populares da cidade. Pode ser um clube, pub, restaurante ou qualquer outro.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Um dos lugares mais populares que serve como ponto de encontro ou shopping center é o shopping.");
	                    SendClientMessage(playerid, COLOR_GRAD3, "O shopping é um dos pontos-chave de São Paulo, onde Você pode se comunicar e interagir com pessoas aleatórias.");
	                    SendClientMessage(playerid, COLOR_GRAD3, "Você pode comprar muitos itens que podem ser salvos. Pode melhorar a atmosfera das preliminares e olhar para o seu personagem.");

						GameTextForPlayer(playerid, "~w~São Paulo Shopping", 4000, 3);

	                    InterpolateCameraPos(playerid, 2070.5469,-1834.5552,30.9983, 1129.1364,-1359.0806,60.4063, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 2108.1138,-1779.3624,13.3898, 1129.1011,-1488.4135,22.7614, 1500, CAMERA_MOVE);
					}
	                case 7: {

					    SendClientMessage(playerid, COLOR_WHITE, "Receber e possuir propriedade.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Você pode obter e possuir uma propriedade na cidade a partir de anúncios publicados. fale com as pessoas Ou visite a loja");
					    SendClientMessage(playerid, COLOR_GRAD3, "A propriedade pode oferecer a Você em troca de parte do dinheiro ou não pagar nada. Depende de como Você joga.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Você pode comprar novas casas e veículos de revendedores ou outros jogadores no servidor.");
	                    SendClientMessage(playerid, COLOR_GRAD3, "Você também pode roubar propriedade de outros jogadores em seu proprio estilo e técnica.");
	                    SendClientMessage(playerid, COLOR_GRAD3, "No entanto, roubar pode não ser uma maneira limpa e alguém pode estar procurando por Você mais tarde.");

	                    GameTextForPlayer(playerid, "~w~Escritorio de Publicidade", 4000, 3);

	                    InterpolateCameraPos(playerid, 1129.1364,-1359.0806,60.4063, 1697.8542,-1308.5330,60.4948, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 1129.1011,-1488.4135,22.7614, 1736.1309,-1267.8335,13.5431, 1500, CAMERA_MOVE);
					}
	                case 8: {

					    SendClientMessage(playerid, COLOR_WHITE, "Aumente sua receita.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Antes de negociar em cada um deles. Você tem que ter dinheiro primeiro. Existem muitas maneiras diferentes de ganhar dinheiro em São Paulo.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Você pode fazer anúncios. Pergunte as pessoas sobre suas proprias necessidades. Ou talvez pelo jornal também.");
					    SendClientMessage(playerid, COLOR_GRAD3, "Você também pode ganhar dinheiro de uma maneira Ãºnica. Depende de Você e da sua criatividade.");

	                    GameTextForPlayer(playerid, "~w~Trabalho de detetive", 4000, 3);

	                    InterpolateCameraPos(playerid, 1697.8542,-1308.5330,60.4948, 1744.5216,-1693.8655,52.5560, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 1736.1309,-1267.8335,13.5431, 1774.4377,-1658.4363,30.9402, 1500, CAMERA_MOVE);
					}
	                case 9: {

					    SendClientMessage(playerid, COLOR_WHITE, "serviço público");
						SendClientMessage(playerid, COLOR_GRAD3, "O serviço público de São Paulo está sempre disponível. Quais São eles?");
	                    SendClientMessage(playerid, COLOR_GRAD3, "Isto é polícia Militar e polícia Civil");
						SendClientMessage(playerid, COLOR_GRAD3, "{C68DFF}polícia civil o responsível pelos internos dos presos em São Paulo.");
						SendClientMessage(playerid, COLOR_GRAD3, "{FF8282}Corpo de Bombeiros é responsível por manter a São de e ajudar os doentes.");
	                    SendClientMessage(playerid, COLOR_GRAD3, "Eles coordenam com o hospital e a equipe de resgate.");
						SendClientMessage(playerid, COLOR_GRAD3, "Se Você precisar de alguma agência neste nome, não hesite. Ligue ou entre em contato com o 911 e ligue para eles para ajuda-lo.");

	                    GameTextForPlayer(playerid, "~w~PM~n~ESP", 4000, 3);

	                    InterpolateCameraPos(playerid, 1744.5216,-1693.8655,52.5560, 667.7610,-608.4394,38.1223, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 1774.4377,-1658.4363,30.9402, 618.0063,-574.8521,26.1432, 1500, CAMERA_MOVE);
					}
	                case 10: {

					    SendClientMessage(playerid, COLOR_WHITE, "Regras do servidor:");
						SendClientMessage(playerid, COLOR_GRAD3, "Siga-nos em nosso fórum."EMBED_WHITE"On forum.sp-roleplay"EMBED_GRAD".com.BR para informações sobre servidores, role-playing e muito mais detalhado e claro.");

	                    InterpolateCameraPos(playerid, 667.7610,-608.4394,38.1223, 1474.6232,-1723.1591,42.9895, 1500, CAMERA_MOVE);
	                    InterpolateCameraLookAt(playerid, 618.0063,-574.8521,26.1432, 1480.6512,-1771.0350,31.6094, 1500, CAMERA_MOVE);
					}
	                case 11: {
					    SendClientMessage(playerid, COLOR_WHITE, "ConcluSão:");
					    SendClientMessage(playerid, COLOR_GRAD3, "Sempre tenha em mente que Você deve obedecer a todas as regras do servidor, respeitar ou honrar todos os jogadores e ouvir os conselhos do administrador do servidor.");
					}
	        }
	    }
    }
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	return 1;
}

GetArmorDots(playerid)
{
    new
        dots[64], Float: AR;
 
    GetPlayerArmour(playerid, AR);
 
    if(AR >= 100)
        dots = "{666666}";
    else if(AR >= 90)
        dots = "{666666}{FFFFFF}";
    else if(AR >= 80)
        dots = "{666666}{FFFFFF}";
    else if(AR >= 70)
        dots = "{666666}";
    else if(AR >= 60)
        dots = "{666666}";
    else if(AR >= 50)
        dots = "{666666}";
    else if(AR >= 40)
        dots = "{666666}";
    else if(AR >= 30)
        dots = "{666666}";
    else if(AR >= 20)
        dots = "{666666}";
    else if(AR >= 10)
        dots = "{666666}";
    else if(AR >= 0)
        dots = "{666666}";
 
    return dots;
}

GetHealthDots(playerid)
{
    new
        dots[64], Float: HP;
 
    GetPlayerHealth(playerid, HP);
 
    if(HP >= 100)
        dots = "";
    else if(HP >= 90)
        dots = "{660000}";
    else if(HP >= 80)
        dots = "{660000}";
    else if(HP >= 70)
        dots = "{660000}";
    else if(HP >= 60)
        dots = "{660000}";
    else if(HP >= 50)
        dots = "{660000}";
    else if(HP >= 40)
        dots = "{660000}";
    else if(HP >= 30)
        dots = "{660000}";
    else if(HP >= 20)
        dots = "{660000}";
    else if(HP >= 10)
        dots = "{660000}";
    else if(HP >= 0)
        dots = "{660000}";
 
    return dots;
}

forward hudAtt(playerid);
public hudAtt(playerid)
{

	if(!HUDtoggle[playerid][HUD_PING]){
		new ping = GetPlayerPing(playerid);
		new returnPing[1024];
		format(returnPing, sizeof(returnPing), "%d", ping);
		PlayerTextDrawSetString(playerid, HUDPlayer_PingRate[playerid], returnPing);
	}

	if (!HUDtoggle[playerid][HUD_HEALTH]) {
		new Float:hp;
		GetPlayerHealth(playerid, hp);
		//PlayerTextDrawSetString(playerid, HUDPlayer_HealthRate[playerid], sprintf("%.0f", hp));
		if (hp >= 100.0) PlayerTextDrawSetString(playerid, HUDPlayer_Health[playerid], "mdl-2005:Health-100");
		else if (hp >= 75.0) PlayerTextDrawSetString(playerid, HUDPlayer_Health[playerid], "mdl-2005:Health-75");
		else if (hp >= 50.0) PlayerTextDrawSetString(playerid, HUDPlayer_Health[playerid], "mdl-2005:Health-50");
		else if (hp >= 25.0) PlayerTextDrawSetString(playerid, HUDPlayer_Health[playerid], "mdl-2005:Health-25");
		else PlayerTextDrawSetString(playerid, HUDPlayer_Health[playerid], "mdl-2005:Health-0");
	}

	if (!HUDtoggle[playerid][HUD_ARMOR]) {
		new Float:armor;
		GetPlayerArmour(playerid, armor);
		//PlayerTextDrawSetString(playerid, HUDPlayer_ArmorRate[playerid], sprintf("%.0f", armor));
		if (armor >= 100.0) PlayerTextDrawSetString(playerid, HUDPlayer_Armor[playerid], "mdl-2005:Armor-100");
		else if (armor >= 75.0) PlayerTextDrawSetString(playerid, HUDPlayer_Armor[playerid], "mdl-2005:Armor-75");
		else if (armor >= 50.0) PlayerTextDrawSetString(playerid, HUDPlayer_Armor[playerid], "mdl-2005:Armor-50");
		else if (armor >= 25.0) PlayerTextDrawSetString(playerid, HUDPlayer_Armor[playerid], "mdl-2005:Armor-25");
		else PlayerTextDrawSetString(playerid, HUDPlayer_Armor[playerid], "mdl-2005:Armor-0");
	}


	if(displayHUD{playerid} && !isHideHUD{ playerid } && isVehicleHUD { playerid }) {	
        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
            new vehicleid = GetPlayerVehicleID(playerid), id = -1;

            if (!HUDtoggle[playerid][HUD_SPEED]) {
                new mph_speed = floatround(GetPlayerSpeed(playerid));
				new mudastring[1024]; //mudadois[1024];
				format(mudastring, sizeof(mudastring), "%d", mph_speed);
                PlayerTextDrawSetString(playerid, HUDSpeedoMPH[playerid], mudastring);
                if (mph_speed >= 0){
					PlayerTextDrawHide(playerid, HUDSpeedoRate[playerid]);
					PlayerTextDrawShow(playerid, HUDSpeedoRate[playerid]);
					PlayerTextDrawSetString(playerid, HUDSpeedoRate[playerid], "mdl-2005:Speedo-0");
				} 
				else if(mph_speed >= 10) PlayerTextDrawSetString(playerid, HUDSpeedoRate[playerid], "mdl-2005:Speedo-20");
            }
			
            new model = GetVehicleModel(vehicleid);
            //new miles = 0;
            if((id = Car_GetID(vehicleid)) != -1) {
				new kms = floatround(CarData[id][carMileage]), kmss[30];
				format(kmss, sizeof(kmss), "%d KM", kms);
			   	PlayerTextDrawSetString(playerid, HUDMileageRate[playerid], kmss);

                new life;
                if (!HUDtoggle[playerid][HUD_ENGINE]) {
                    life = floatround(CarData[id][carEngineL] / VehicleData[model - 400][c_engine]) * 100;
                    if (life < 300) {
                        PlayerTextDrawSetString(playerid, HUDEngine[playerid], "mdl-2005:Engine-Broken");
                        PlayerTextDrawShow(playerid, HUDEngine[playerid]);
                    }
                    else if (life < 500) {
                        PlayerTextDrawSetString(playerid, HUDEngine[playerid], "mdl-2005:Engine-Damaged");
                        PlayerTextDrawShow(playerid, HUDEngine[playerid]);
                    }
                    else {
                        PlayerTextDrawHide(playerid, HUDEngine[playerid]);
                    }
                }

                if (!HUDtoggle[playerid][HUD_BATTERY]) {
                    life = floatround(CarData[id][carBatteryL] / VehicleData[model - 400][c_battery]) * 100;
                    if (life < 80) {
                        TextDrawShowForPlayer(playerid, HUDBattery);
                    }
                    else {
                        TextDrawHideForPlayer(playerid, HUDBattery);
                    }
                }
            }


            if (!HUDtoggle[playerid][HUD_FUEL]) {
                new fuel = floatround(floatdiv(CoreVehicles[vehicleid][vehFuel], GetVehicleDataFuel(model))*100);
                if (fuel >= 100) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-100");
                else if (fuel >= 87) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-87");
                else if (fuel >= 75) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-75");
                else if (fuel >= 65) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-65");
                else if (fuel >= 50) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-50");
                else if (fuel >= 37) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-37");
                else if (fuel >= 25) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-25");
                else if (fuel >= 12) PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-12");
                else if	(fuel < 3 )PlayerTextDrawSetString(playerid, HUDFuel[playerid], "mdl-2005:Fuel-0");
            }

            if (!HUDtoggle[playerid][HUD_LOCK]) {
                if (GetLockStatus(vehicleid)) PlayerTextDrawSetString(playerid, HUDLock[playerid], "mdl-2005:Locks-Locked");
                else PlayerTextDrawSetString(playerid, HUDLock[playerid], "mdl-2005:Locks-Unlocked");
            }

            if (!HUDtoggle[playerid][HUD_LIGHT]) {
                if (GetLightStatus(vehicleid)) TextDrawShowForPlayer(playerid, HUDLights);
                else TextDrawHideForPlayer(playerid, HUDLights);
            }

            new sZone[MAX_ZONE_NAME];
            GetPlayer3DZone(playerid, sZone, sizeof(sZone));
            PlayerTextDrawSetString(playerid, HUDZone[playerid], sZone);
        }
    }
	return 1;
}

public OnPlayerUpdate(playerid)
{

	//UpdateNametag(playerid);


	AFKTimer[playerid] = 3;



    return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	if(!IsPlayerNPC(playerid))
	{
		RefreshMaskStatus(playerid,forplayerid);
	}
	return 1;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
   /* new string[32];
    format(string, sizeof(string), "You can now see vehicle %d.", vehicleid);
    SendClientMessage(forplayerid, 0xFFFFFFFF, string);*/
    return 1;
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(PlayerData[playerid][pAdmin] >= 1) {

		if(!IsPlayerConnected(clickedplayerid))
			return SendClientMessage(playerid, COLOR_GREY, "O jogador especificado não está conectado ou não foi autenticado.");

		if(PlayerData[playerid][pSpectating] == INVALID_PLAYER_ID) {
			GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		}
		PlayerData[playerid][pSpectating] = clickedplayerid;
		TogglePlayerSpectating(playerid, true);

		SetPlayerInterior(playerid, GetPlayerInterior(clickedplayerid));
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(clickedplayerid));

		if(IsPlayerInAnyVehicle(clickedplayerid)) {
			PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid));
		}
		else {
			PlayerSpectatePlayer(playerid, clickedplayerid);
		}
	}
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if(PRestaurantOpening { playerid }) {
		if(clickedid == TD_Restaurant[2])
		{
			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);

	        PRestaurantOpening{ playerid }=false;
		}
	}
	if(PCoverOpening{ playerid })
	{
	    if(clickedid == TD_PhoneCover[1]) // Black
	    {
			PCoverColor[playerid]=0;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18868);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[2]) // Red color
	    {
			PCoverColor[playerid]=1;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18870);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[3]) // Yellow
	    {
			PCoverColor[playerid]=2;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18873);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[4]) // Blue color
	    {
			PCoverColor[playerid]=3;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18872);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[5]) // Green Watercolor
	    {
			PCoverColor[playerid]=4;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18871);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[6]) // Orange
	    {
			PCoverColor[playerid]=5;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18865);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[7]) // Pink
	    {
			PCoverColor[playerid]=6;
	        PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18869);
	        PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);
	    }
 	    else if(clickedid == TD_PhoneCover[8]) // Purchase
	    {
			if(PlayerData[playerid][pCash] >= 500)
			{
			    PlayerData[playerid][pPmodel] = PCoverColor[playerid];
				/*switch(PCoverColor[playerid])
				{
				    case 0: PlayerData[playerid][pPmodel] = PCoverColor[playerid];
				    case 1: PlayerData[playerid][pPmodel] = 1;
				    case 2: PlayerData[playerid][pPmodel] = 4;
				    case 3: PlayerData[playerid][pPmodel] = 2;
				    case 4: PlayerData[playerid][pPmodel] = 3;
				    case 5: PlayerData[playerid][pPmodel] = 5;
					case 6: PlayerData[playerid][pPmodel] = 6;
				}*/
				PlayerData[playerid][pCash]-=500;
				SendClientMessage(playerid, COLOR_WHITE, "Você comprou uma nova capa de telefone.");
				if(ph_opening{ playerid }) ShowPlayerPhone(playerid);


			    for(new i=0;i!=sizeof(TD_PhoneCover);i++)
					TextDrawHideForPlayer(playerid, TD_PhoneCover[i]);

	            PlayerTextDrawHide(playerid, TD_PhoneCoverModel[playerid]);

				PCoverOpening{ playerid } = false;
				CancelSelectTextDraw(playerid);

			}
			else SendClientMessage(playerid, COLOR_GRAD1, "Voce nao tem dinheiro suficiente (R$500) !");
	    }
	}

// ================== [ Car GUI System ] =========================
  	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		if(PCoverOpening{ playerid })
		{
		    for(new i=0;i!=sizeof(TD_PhoneCover);i++)
				TextDrawHideForPlayer(playerid, TD_PhoneCover[i]);

            PlayerTextDrawHide(playerid, TD_PhoneCoverModel[playerid]);

			PCoverOpening{ playerid } = false;
		}
		if(PCarOpening{ playerid })
		{
			ClosePlayerCarMenu(playerid);
		}

		if (ColorSelectShow{playerid} || ColorSelectShow2{playerid})
		{
			ClearColorSelect(playerid);
		}

		if(PRestaurantOpening{ playerid }) {
			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);

            PRestaurantOpening{ playerid }=false;

        }
	}
// ================== [ Car GUI System ] =========================


	/*if(!CellphoneData[playerid][cOpened]){
		for(new i = 0; i < 10; i++)
		{
			if(i < 3)
			{
				if(clickedid == Global_PhoneSystem[PHONE_SETTING_CONTROL_CALL_BOX_1 + i])
				{
					if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_NOTIFICATIONS)
						return 0;

					SettingApp_UpdateCall(playerid, i);

					break;
				}
				else if(clickedid == Global_PhoneSystem[PHONE_SETTING_BACKGROUND_IMAGE_1 + i])
				{
					if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_BACKGROUND)
						return 0;

					SettingApp_UpdateBackground(playerid, i);

					break;
				}
			}

			if(i < 2)
			{
				if(clickedid == Global_PhoneSystem[PHONE_SETTING_CONTROL_SMS_BOX_1 + i])
				{
					if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_NOTIFICATIONS)
						return 0;

					SettingApp_UpdateSMS(playerid, i);

					break;
				}
			}

			if(i < 5)
			{
				if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_BOX_1 + i])
				{
					if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACTS)
						return 0;

					Hide_CallerApp_Contacts(playerid);

					new query[70];
					mysql_format(dbCon, query, sizeof(query), "SELECT * FROM phone_contacts WHERE contactID = '%d'", CellphoneData[playerid][cList][i]);
					mysql_tquery(dbCon, query, "CallerApp_Contact_Info", "dd", playerid, CellphoneData[playerid][cList][i]);

					break;
				}
				else if(clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_BOX_1 + i] || clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_INFO_1 + i])
				{
					if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_RECENTS)
						return 0;

					Hide_CallerApp_Recents(playerid);

					new query[70];
					mysql_format(dbCon, query, sizeof(query), "SELECT * FROM cellphone_recents WHERE uniqueid = '%d'", CellphoneData[playerid][cList][i]);
					mysql_tquery(dbCon, query, "CallerApp_Recent_Info", "dd", playerid, CellphoneData[playerid][cList][i]);

					break;
				}
			}

			if(i < 8)
			{
				if(clickedid == Global_PhoneSystem[PHONE_SETTING_RINGTONE_BOX_1 + i])
				{
					if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_RINGTONE)
						return 0;

					SettingApp_UpdateRingtone(playerid, i);

					break;
				}
			}

			if(clickedid == Global_PhoneSystem[PHONE_CALLER_KEYPAD_0 + i])
			{
				if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_KEYBOARD)
					return 0;

				format(PlayerData[playerid][pEditingItem], 8, "%s%d", PlayerData[playerid][pEditingItem], i);

				PlayerTextDrawSetString(playerid, Player_PhoneSystem[playerid][PHONE_CALLER_KEYBOARD_NUMBER], Phone_FormatNumber(strval(PlayerData[playerid][pEditingItem])));
				TextDrawShowForPlayer(playerid, Global_PhoneSystem[PHONE_CALLER_KEYBOARD_CLEAR]);

				new query[126];
				mysql_format(dbCon, query, sizeof(query), "SELECT contactName FROM phone_contacts WHERE player_id = '%d' AND contactAdded = '%d' LIMIT 1", PlayerData[playerid][pID], strval(PlayerData[playerid][pEditingItem]));
				mysql_tquery(dbCon, query, "CallerApp_Keyboard_IsContact", "d", playerid);

				break;
			}
		}

		if(clickedid == Global_PhoneSystem[PHONE_MAIN_BLACK_HOME])
		{
			if(CellphoneData[playerid][cScreen] == PHONE_PLAYER_MAIN)
				return 0;

			Phone_Home(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_HOME_APP_CALLER])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MAIN)
				return 0;

			Phone_OpenApp(playerid, APP_CALLER);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_HOME_APP_MESSAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MAIN)
				return 0;

			Phone_OpenApp(playerid, APP_MESSAGER);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_HOME_APP_CALCULATOR])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MAIN)
				return 0;

			SendClientMessage(playerid, -1, "Em desenvolvimento.");
			//Phone_OpenApp(playerid, APP_CALCULATOR);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_HOME_APP_SETTINGS])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MAIN)
				return 0;

			Phone_OpenApp(playerid, APP_SETTINGS);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_KEYBOARD_CLEAR])
		{
			if(!strlen(PlayerData[playerid][pEditingItem]) || CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_KEYBOARD)
				return 0;

			TextDrawHideForPlayer(playerid, Global_PhoneSystem[PHONE_CALLER_KEYBOARD_CLEAR]);
			PlayerTextDrawSetString(playerid, Player_PhoneSystem[playerid][PHONE_CALLER_KEYBOARD_NUMBER], " ");
			PlayerTextDrawSetString(playerid, Player_PhoneSystem[playerid][PHONE_CALLER_KEYBOARD_NUMBER_TEXT], " ");
			PlayerData[playerid][pEditingItem] = EOS;
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_KEYBOARD_CALL])
		{
			if(strlen(PlayerData[playerid][pEditingItem]) < 3 || CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_KEYBOARD)
				return 0;

			Phone_Call(playerid, strval(PlayerData[playerid][pEditingItem]));
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_ADD])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACTS)
				return 0;

			new vip_contacts;

			switch(PlayerData[playerid][pVip])
			{
				case 1: vip_contacts = 25;//bronze
				case 2: vip_contacts = 30;//prata
				case 3: vip_contacts = 40;//ouro
				default: vip_contacts = 15;//inativo e debug
			}

			if(Phone_GetContactRow(playerid) >= 40)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "Seu celular está com a memória de contatos cheia.");

			Dialog_Show(playerid, dCallerApp_Contact_Name, DIALOG_STYLE_INPUT, "Adicionar um novo contato", "Digite abaixo o nome para o novo contato:\nLimites: 3 é 16 caracteres.", "próximo", "<<");
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_SEARCH_BAR])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACTS)
				return 0;

			Dialog_Show(playerid, Caller_Contact_Search, DIALOG_STYLE_INPUT, "Buscar por contato", "Digite o nome ou o número do contato que Você deseja encontrar:\nLimites: máximo 2 e máximo de 16 caracteres.\nInfo: será listado apenas 5 contatos.", "Buscar", "<<");
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_CLEAR])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACTS)
				return 0;

			CallerApp_Contact_Page(playerid, 1);
			TextDrawHideForPlayer(playerid, Global_PhoneSystem[PHONE_CALLER_CONTACT_CLEAR]);
			PlayerTextDrawSetString(playerid, Player_PhoneSystem[playerid][PHONE_CALLER_CONTACT_SEARCH], "buscar_contato");
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_NEXT_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACTS)
				return 0;

			CallerApp_Contact_Page(playerid, GetPVarInt(playerid, "VAR_Contact_Page") + 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_BACK_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACTS)
				return 0;

			CallerApp_Contact_Page(playerid, GetPVarInt(playerid, "VAR_Contact_Page") - 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_INFO_ARROW_BACK] || clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_INFO_TEXT_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACT_INFO)
				return 0;

			Hide_CallerApp_ContactInfo(playerid);
			Show_CallerApp_Contacts(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_INFO_BOX_2])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACT_INFO)
				return 0;

			Dialog_Show(playerid, Caller_Contact_Delete, DIALOG_STYLE_MSGBOX, "Confirmar excluSão", "Você está prestes a deletar permanentemente\neste contato da sua lista. Você confirma a excluSão?", "Sim", "não");
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_INFO_CALL])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACT_INFO)
				return 0;

			Phone_Call(playerid, GetPVarInt(playerid, "VAR_Contact_Number"));
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CONTACT_INFO_SMS])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_CONTACT_INFO)
				return 0;

			if(!CellphoneData[playerid][cSignal])
				return 0;

			Hide_CallerApp(playerid);
			Hide_CallerApp_ContactInfo(playerid);

			Phone_WriteMessage(playerid, GetPVarInt(playerid, "VAR_Contact_Number"));
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_NEXT_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_RECENTS)
				return 0;

			CallerApp_Recent_Page(playerid, GetPVarInt(playerid, "VAR_Recent_Page") + 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_BACK_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_RECENTS)
				return 0;

			CallerApp_Recent_Page(playerid, GetPVarInt(playerid, "VAR_Recent_Page") - 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_INFO_ARROW_BACK] || clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_INFO_TEXT_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_RECENT_INFO)
				return 0;

			Hide_CallerApp_RecentInfo(playerid);
			Show_CallerApp_Recents(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_INFO_BOX_2])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_RECENT_INFO)
				return 0;

			Dialog_Show(playerid, dCallerApp_Recent_Delete, DIALOG_STYLE_MSGBOX, "Confirmar excluSão", "Você está prestes a deletar permanentemente\neste registro da sua lista de ligação. Você confirma a excluSão?", "Sim", "não");
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_INFO_CALL])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_RECENT_INFO)
				return 0;

			Phone_Call(playerid, GetPVarInt(playerid, "VAR_Recent_Number"));
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_RECENT_INFO_SMS])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLER_RECENT_INFO)
				return 0;

			if(!CellphoneData[playerid][cSignal])
				return 0;

			Hide_CallerApp(playerid);
			Hide_CallerApp_RecentInfo(playerid);

			Phone_WriteMessage(playerid, GetPVarInt(playerid, "VAR_Recent_Number"));
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CALL_ACCEPT])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLING)
				return 0;

			Phone_AcceptCall(playerid, CellphoneData[playerid][cCaller]);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CALL_DECLINE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLING)
				return 0;

			Phone_DeclineCall(playerid, CellphoneData[playerid][cCaller]);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_CALLER_CALL_END])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALLING && CellphoneData[playerid][cScreen] != PHONE_PLAYER_CALL)
				return 0;

			KillTimer(CellphoneData[playerid][cTimerCalling]);
			Phone_EndCall(playerid, "chamada_finalizada");

			new targetid;
			if((targetid = CellphoneData[playerid][cCaller]) != INVALID_PLAYER_ID)
				Phone_EndCall(targetid, "chamada_finalizada");
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_NEXT_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE)
				return 0;

			if(!CellphoneData[playerid][cSignal])
				return 0;

			MessagerApp_Page(playerid, GetPVarInt(playerid, "VAR_Message_Page") + 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_BACK_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE)
				return 0;

			MessagerApp_Page(playerid, GetPVarInt(playerid, "VAR_Message_Page") - 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_NEW])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE)
				return 0;

			if(!CellphoneData[playerid][cSignal])
				return 0;

			Hide_MessagerApp(playerid);

			Phone_WriteMessage(playerid, -1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_INFO_ARROW_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE_INFO)
				return 0;

			Hide_MessagerApp_Info(playerid);
			Show_MessagerApp(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_INFO_BOX_WRITE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE_INFO)
				return 0;

			if(!CellphoneData[playerid][cSignal])
				return 0;

			Hide_MessagerApp_Info(playerid);

			Phone_WriteMessage(playerid, GetPVarInt(playerid, "VAR_Message_Number"));
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_INFO_BACK_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE_INFO)
				return 0;

			MessagerApp_Info_Page(playerid, GetPVarInt(playerid, "VAR_MessageInfo_Page") - 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_INFO_NEXT_PAGE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE_INFO)
				return 0;

			MessagerApp_Info_Page(playerid, GetPVarInt(playerid, "VAR_MessageInfo_Page") + 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_WRITE_ARROW_BACK] || clickedid == Global_PhoneSystem[PHONE_MESSAGER_WRITE_TEXT_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE_WRITTING)
				return 0;

			Hide_MessagerApp_Write(playerid);
			Show_MessagerApp(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_WRITE_SEND]) // Enviar mensagem
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE_WRITTING)
				return 0;

			if(!strlen(CellphoneData[playerid][cWriteMessage]))
				return 0;

			if(GetPVarInt(playerid, "VAR_Message_SendTo") == -1)
				return 0;

			Phone_SendMessage(PlayerData[playerid][pPnumber], GetPVarInt(playerid, "VAR_Message_SendTo"), CellphoneData[playerid][cWriteMessage]);
			
			Hide_MessagerApp_Write(playerid);

			Show_MessagerApp_Info(playerid);
			MessagerApp_Info_Page(playerid, 1);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_MESSAGER_WRITE_CONTACT_BOX])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_MESSAGE_WRITTING)
				return 0;

			Dialog_Show(playerid, dMessagerApp_WriteNumber, DIALOG_STYLE_INPUT, "Informe o número", "Digite o número telefonico no qual deseja enviar um SMS:", ">>", "<<");
		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_MAIN_BOX_PHONE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING)
				return 0;

			Hide_SettingApp(playerid);

			Show_SettingApp_Phone(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_MAIN_BOX_NOTIFICATIONS])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING)
				return 0;

			Hide_SettingApp(playerid);

			Show_SettingApp_Notification(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_MAIN_BOX_RINGTONE])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING)
				return 0;

			Hide_SettingApp(playerid);

			Show_SettingApp_Ringtone(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_MAIN_BOX_BACKGROUND])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING)
				return 0;

			Hide_SettingApp(playerid);

			Show_SettingApp_Background(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_PHONE_ARROW_BACK] || clickedid == Global_PhoneSystem[PHONE_SETTING_PHONE_TEXT_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_PHONE)
				return 0;

			Hide_SettingApp_Phone(playerid);
			Show_SettingApp(playerid);

		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_RINGTONE_ARROW_BACK] || clickedid == Global_PhoneSystem[PHONE_SETTING_RINGTONE_TEXT_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_RINGTONE)
				return 0;

			Hide_SettingApp_Ringtone(playerid);
			Show_SettingApp(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_CONTROL_ARROW_BACK] || clickedid == Global_PhoneSystem[PHONE_SETTING_CONTROL_TEXT_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_NOTIFICATIONS)
				return 0;

			Hide_SettingApp_Notification(playerid);
			Show_SettingApp(playerid);
		}
		else if(clickedid == Global_PhoneSystem[PHONE_SETTING_BACKGROUND_ARROW_BACK] || clickedid == Global_PhoneSystem[PHONE_SETTING_BACKGROUND_TEXT_BACK])
		{
			if(CellphoneData[playerid][cScreen] != PHONE_PLAYER_SETTING_BACKGROUND)
				return 0;

			Hide_SettingApp_Background(playerid);
			Show_SettingApp(playerid);
		}
	}*/









	return 1;
}
public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	//=================================== Restaurant
	if(playertextid == PTD_Restaurant[playerid][0])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de estoque", 5000, 1);
				return 1;
			}

            if(PlayerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bItems][0]) {
				GameTextForPlayer(playerid, "~r~Você não pode pagar", 5000, 1);
				return 1;
            }

			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 30 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 30));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição.", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido {FF6347} Cluckin' Little Meal{FFFFFF} para {FF6347}%s.", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));

					MealHolding[playerid] = 2218;
				}
				case 2: // Donut
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 30 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 30));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição.", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido {FF6347}Rusty's D-Luxe{FFFFFF} para {FF6347}%s.", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));
                    MealHolding[playerid]=2221;
				}
				case 3: // Burger
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 30 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 30));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição.", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido {FF6347}Moo Kids Meal{FFFFFF} para {FF6347}%s.", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));
                    MealHolding[playerid]=2213;
				}
				case 4: // Cluckin
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 30 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 30));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][0];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição.", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido {FF6347}Cluckin' Little Meal{FFFFFF} para {FF6347}%s.", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));
                    MealHolding[playerid]=2215;
				}
			}

            BizInfo[BizEntered[playerid]][bProducts]--;
			PlayerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bItems][0];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bItems][0] * 0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Você pode{FF6347} /meal colocar{FFFFFF} em uma mesa ou {FF6347}/meal throw");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
	else if(playertextid == PTD_Restaurant[playerid][1])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de Estoque", 5000, 1);
				return 1;
			}
            if(PlayerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bItems][1]) {
				GameTextForPlayer(playerid, "~r~Você não pode pagar", 5000, 1);
				return 1;
            }
			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido{FF6347} Double D-{FFFFFF}Luxe para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
                    MealHolding[playerid]=2219;
				}
				case 2: // Donut
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido{FF6347} Rusty's Double Ba{FFFFFF}rrel para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
                    MealHolding[playerid]=2223;
				}
 				case 3: // Burger
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido{FF6347} Beef T{FFFFFF}ower para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
                    MealHolding[playerid]=2214;
				}
 				case 4: // Cluckin
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    if(PlayerData[playerid][pHealth] + 60 <= 100)
					    {
					    	SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + 60));
					    }
					    else SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][1];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido{FF6347} Cluckin' Big {FFFFFF}Meal para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
                    MealHolding[playerid]=2216;
				}
			}
			BizInfo[BizEntered[playerid]][bProducts]--;
			PlayerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bItems][1];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bItems][1]*0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][1], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Você pode{FF6347} /meal colocar{FFFFFF} em uma mesa ou {FF6347}/meal throw");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
	else if(playertextid == PTD_Restaurant[playerid][2])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de Estoque", 5000, 1);
				return 1;
			}
            if(PlayerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bItems][2]) {
				GameTextForPlayer(playerid, "~r~Você não possui dinheiro!", 5000, 1);
				return 1;
            }
			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido {FFFFFF}Rack para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
                    MealHolding[playerid]=2220;
				}
				case 2: // Donut
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido Rusty's Huge Do{FFFFFF}uble para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
                    MealHolding[playerid]=2222;
				}
 				case 3: // Burger
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				   // PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido Meat S{FFFFFF}tack para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
                    MealHolding[playerid]=2212;
				}
 				case 4: // Cluckin
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][2];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Para Cluckin' Huge {FFFFFF}Meal para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
                    MealHolding[playerid]=2217;
				}
			}
			BizInfo[BizEntered[playerid]][bProducts]--;
			PlayerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bItems][2];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bItems][2]*0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][2], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Você pode{FF6347} /meal colocar{FFFFFF} em uma mesa ou {FF6347}/meal throw");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
	else if(playertextid == PTD_Restaurant[playerid][3])
	{
	    if(BizEntered[playerid] != -1)
	    {
			if(BizInfo[BizEntered[playerid]][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
				return 1;
			}
			if(BizInfo[BizEntered[playerid]][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de Estoque", 5000, 1);
				return 1;
			}
            if(PlayerData[playerid][pCash] < BizInfo[BizEntered[playerid]][bItems][3]) {
				GameTextForPlayer(playerid, "~r~Você não possui dinheiro!", 5000, 1);
				return 1;
            }
			switch(BizInfo[BizEntered[playerid]][bsubType])
			{
				case 1: // Pizza
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][3];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido Salad {FFFFFF}Meal para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][3]));
					MealHolding[playerid]=2355;
				}
				case 3: // Burger
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][3];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido Salad {FFFFFF}Meal para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][3]));
                    MealHolding[playerid]=2354;
				}
				case 4: // Cluckin
				{
				    if(PlayerData[playerid][pHealth] < 100)
				    {
					    SetPlayerHealthEx(playerid, 100);
				    }
				    PlayerData[playerid][pHunger]=0;
				    //PlayerData[playerid][pCash]-=BizInfo[BizEntered[playerid]][bItems][3];
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pede uma refeição", ReturnName(playerid, 0));
				    SendClientMessageEx(playerid, COLOR_WHITE, "Pedido Salad {FFFFFF}Meal para %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][3]));
                    MealHolding[playerid]=2353;
				}
			}
			BizInfo[BizEntered[playerid]][bProducts]--;
			PlayerData[playerid][pCash] -= BizInfo[BizEntered[playerid]][bItems][3];
			BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[BizEntered[playerid]][bItems][3]*0.7);
			UpdateBizInfo(BizEntered[playerid]);
			Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy meal biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][3], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);
			SendClientMessage(playerid, COLOR_WHITE, "Você pode{FF6347} /meal colocar{FFFFFF} em uma mesa ou {FF6347}/meal throw");

			for(new i=0;i!=sizeof(TD_Restaurant);i++)
				TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

	        for(new i=0;i!=9;i++)
				PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

	        CancelSelectTextDraw(playerid);
	    }
	}
// ================== [ Car GUI System ] =========================
	if(PCarOpening{ playerid })
	{
	    if(PCarType[playerid] == 0) {

			if(playertextid == PCARTextLeft[playerid])
			{
			    if(PCarPage[playerid] == 2)
			    {
			        PCarPage[playerid]--;
					ShowPlayerCarMenu(playerid);
			    }
			}
			else if(playertextid == PCARTextRight[playerid])
			{
			    if(PCarPage[playerid] == 1)
			    {
			        PCarPage[playerid]++;
					ShowPlayerCarMenu(playerid);
			    }
			}
			else {
				for(new i = 0; i != 6; ++i)
				{
					if(playertextid == PCARTextSlot[playerid][i])
					{
						SpawnPlayerCar(playerid, i);
						break;
					}
				}
			}
		}
	    else if(PCarType[playerid] == 1) {

			if(playertextid == PCARTextLeft[playerid])
			{
			    if(PCarPage[playerid] > 1)
			    {
			        PCarPage[playerid]--;
					ShowPlayerDealershipMenu(playerid);
			    }
			}
			else if(playertextid == PCARTextRight[playerid])
			{

			    new caramount;

			    if(VDealerSelectCatalog[playerid]==-1) caramount = sizeof(VehicleMenuInfo);
			    else for (new x = 0; x != sizeof(VehicleDealership); x ++) if(VehicleDealership[x][1] == VDealerSelectCatalog[playerid]) caramount++;

			    if(floatround(caramount/(PCarPage[playerid] * 6), floatround_ceil) && caramount % 6 != 0)
			    {
			        PCarPage[playerid]++;
					ShowPlayerDealershipMenu(playerid);
			    }
			}
			else if(playertextid == PCARTextHeader[playerid])
			{
			    if(VDealerSelectCatalog[playerid] != -1)
			    {
				    VDealerSelectCatalog[playerid] = -1;
				    PCarPage[playerid] = 1;

				    ShowPlayerDealershipMenu(playerid);
			    }
			    else ClosePlayerCarMenu(playerid);
			}
			else {

				for(new i = 0; i != 6; ++i)
				{
					if(playertextid == PCARTextSlot[playerid][i])
					{
					    if(VDealerSelectCatalog[playerid] == -1)
					    {
							VDealerSelectCatalog[playerid] = (PCarPage[playerid] * 6) - (6 - i);
							PCarPage[playerid] = 1;
		                    ShowPlayerDealershipMenu(playerid);
	                    }
	                    else
	                    {
	                        /*new nextpage = (PCarPage[playerid] * 6);

	                        new id = (PCarPage[playerid] * 6) - (6 - i);
							//PlayerBuyingCar();
							for (new x = 0; x != sizeof(VehicleDealership); x ++) if(VehicleDealership[x][1] == VDealerSelectCatalog[playerid])
							{
								if(nextpage)
								{
								    nextpage--;
								    continue;
								}

								SendClientMessageEx(playerid, -1, "Click %s(%d)", g_arrVehicleNames[VehicleDealership[x + i][0] - 400], VehicleDealership[x + i][0]);


								break;
							}*/
							/*SendClientMessageEx(playerid, -1, "Click %s(%d)", g_arrVehicleNames[VDealerData[playerid][i][0] - 400], VDealerData[playerid][i][0]);
	                        ShowPlayerDealershipMenu(playerid);*/


							PutPlayerSettingVehicle(playerid, VDealerData[playerid][i][0], VDealerData[playerid][i][4]);
                            ClosePlayerCarMenu(playerid);
	                    }
						break;
					}
				}
			}
		}
	}
// ================== [ Car GUI System ] =========================

// ================== [ NEW PHONE SYSTEM ] ============================
	if(ph_opening{ playerid })
    {
        if(ph_menuid[playerid] == 6)
        {
	 		if(ph_sub_menuid[playerid] == 1 && playertextid == TDPhone_Model[playerid][4]) // PHONE ON
			{
	            ph_menuid[playerid] = 6;
	            ph_sub_menuid[playerid] = 2;
	            RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				SetTimerEx("PhoneTurnOn", 4000, false, "d", playerid);
			}
        }
        else
        {
    	if(playertextid == TDPhone_Model[playerid][7]) // First
    	{
    	    OnPhoneEvent(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], PH_LBUTTON);
			return 1;
    	}
    	else if(playertextid == TDPhone_Model[playerid][13]) // Second
    	{
    	    OnPhoneEvent(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], PH_RBUTTON);
			return 1;
    	}
    	else if(playertextid == TDPhone_Model[playerid][8]) // Up
    	{
    		OnPhoneEvent(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], PH_UP);
    	}
    	else if(playertextid == TDPhone_Model[playerid][9]) // Down
    	{
    	    OnPhoneEvent(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], PH_DOWN);
    	}
		else if(playertextid == TDPhone_Model[playerid][3]) // INBOX
		{
        	ph_menuid[playerid]=2;
        	ph_sub_menuid[playerid]=3;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
		else if(playertextid == TDPhone_Model[playerid][12]) // SELFIE
		{
			if(ph_menuid[playerid]== 0 && ph_sub_menuid[playerid] == 2) PhoneSelfie_Stop(playerid);
			else OnPhoneClick_Selfie(playerid);
		}
		else if(playertextid == TDPhone_Model[playerid][4]) // PHONE OFF
		{
			if(ph_menuid[playerid] != 6) Dialog_Show(playerid, AskTurnOff, DIALOG_STYLE_MSGBOX, "Você tem certeza?", "Tem certeza que deseja desligar o telefone?", "Sim", "não");
		}
		else if(playertextid == TDPhone_NotifyText[playerid])
		{
		    new missed_msg = CountMissedCall(playerid);
		    if(missed_msg)
		    {
	     		ph_menuid[playerid]=3;
	      		ph_sub_menuid[playerid]=3;
		    }
		    else
		    {
	     		ph_menuid[playerid]=2;
	      		ph_sub_menuid[playerid]=3;
		    }
		    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
		else {

        for(new i=0;i!=4;++i) {

			if(playertextid == TDPhone_Choice[playerid][i])
	    	{
				if(ph_selected[playerid] == i)
				{
					OnPhoneEvent(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], PH_CLICKOPEN);
				    return 1;
				}

				ph_selected[playerid] = i;

    			if((ph_menuid[playerid] == 1 && ph_sub_menuid[playerid] == 1) || (ph_menuid[playerid] == 2 && (ph_sub_menuid[playerid] == 1 || ph_sub_menuid[playerid] == 3 || ph_sub_menuid[playerid] == 4)) || (ph_menuid[playerid] == 3 && (ph_sub_menuid[playerid] == 1 || ph_sub_menuid[playerid] == 3)))
					ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;

				RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
	    	}
    	}

    	}
    	}
    }

	// Interface
	if(ColorSelectShow{playerid})
	{
		if(playertextid == PlayerText:INVALID_TEXT_DRAW)
		{
			ClearColorSelect(playerid);
		}
		else if(playertextid == ColorSelectText[playerid])
		{
			ColorSelect[playerid] = -1;
			ShowPlayerColorSelection(playerid, 1);
			return 1;
		}

		else if(playertextid == ColorSelectLeft[playerid])
		{
			if (ColorSelectPage[playerid] < 2)
				return 0;

			else
				ShowPlayerColorSelection(playerid, ColorSelectPage[playerid] - 1);
		}

		else if(playertextid == ColorSelectRight[playerid])
		{
			if (ColorSelectPage[playerid] == ColorSelectPages[playerid])
				return 0;

			else
				ShowPlayerColorSelection(playerid, ColorSelectPage[playerid] + 1);
		}

		for(new i = 0; i < 8; i++)
		{
			if(playertextid == ColorSelection[playerid][i])
			{
				if(ColorSelect[playerid] == -1)
				{
					ColorSelect[playerid] = ColorSelectListener[playerid][i];
					ShowPlayerColorSelection(playerid, 1);

				}
				else
				{
					VDealerColor[playerid][0] = ColorSelectListener[playerid][i];
					SetVehicleColor(VDealerVehicle[playerid], VDealerColor[playerid][0], VDealerColor[playerid][1]);
				}
				break;
			}
		}
	}
	if(ColorSelectShow2{playerid})
	{
		if(playertextid == PlayerText:INVALID_TEXT_DRAW)
		{
			ClearColorSelect(playerid);
		}
		else if(playertextid == ColorSelectText2[playerid])
		{
			ColorSelect2[playerid] = -1;
			ShowPlayerColorSelection2(playerid, 1);
			return 1;
		}

		else if(playertextid == ColorSelectLeft2[playerid])
		{
			if (ColorSelectPage2[playerid] < 2)
				return 0;

			else
				ShowPlayerColorSelection2(playerid, ColorSelectPage2[playerid] - 1);
		}

		else if(playertextid == ColorSelectRight2[playerid])
		{
			if (ColorSelectPage2[playerid] == ColorSelectPages2[playerid])
				return 0;

			else
				ShowPlayerColorSelection2(playerid, ColorSelectPage2[playerid] + 1);
		}

		for(new i = 0; i < 8; i++)
		{
			if(playertextid == ColorSelection2[playerid][i])
			{
				if(ColorSelect2[playerid] == -1)
				{
					ColorSelect2[playerid] = ColorSelectListener2[playerid][i];
					ShowPlayerColorSelection2(playerid, 1);

				}
				else
				{
					VDealerColor[playerid][1] = ColorSelectListener2[playerid][i];
					SetVehicleColor(VDealerVehicle[playerid], VDealerColor[playerid][0], VDealerColor[playerid][1]);
				}
				break;
			}
		}
	}
    return 1;
}

stock OnPhoneClick_Selfie(playerid)
{
	if(PlayerData[playerid][pCallConnect] == INVALID_PLAYER_ID && ph_menuid[playerid] != 6)
	{
	    CancelSelectTextDraw(playerid);

	    SetPlayerArmedWeapon(playerid, 0);

	    TogglePlayerControllable(playerid, false);

		SendClientMessage(playerid, COLOR_LIGHTRED, "[!] Pressione F8 para tirar uma foto, use F7 (duas vezes) para esconder seu chat");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[!] Pressione W, A, S e D mantenha pressionado para organizar a camera. pressione ENTER para baixo para reverter");
		SendClientMessage(playerid, COLOR_WHITE, "[!] Use /headmove para parar o movimento da sua cabeça.");

		GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
		GetPlayerFacingAngle(playerid, Degree[playerid]);
		Degree[playerid] += 90.0;
        SelAngle[playerid] = 0.8;
  		static Float: n1X, Float: n1Y;

		n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
		SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid] + SelAngle[playerid]);
		SetPlayerFacingAngle(playerid, Degree[playerid] - 90);

      	ph_menuid[playerid]=0;
    	ph_sub_menuid[playerid]=2;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 0, 0, 0, 1, 0, 0);

		selfie_timer[playerid] = SetTimerEx("SelfieTimer", 500, true, "d", playerid);
	}
	return 1;
}

stock PhoneSelfie_Stop(playerid)
{
	if(ph_menuid[playerid] == 0 && ph_sub_menuid[playerid] == 2)
	{
	    if(selfie_timer[playerid]) KillTimer(selfie_timer[playerid]);
	    selfie_timer[playerid]=0;

      	ph_menuid[playerid]=0;
    	ph_sub_menuid[playerid]=0;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		ClearAnimations(playerid);
	}
	return 1;
}
/*// ================== [ PHONE SYSTEM ] ============================
stock OnPhoneClick_Selfie(playerid)
{
	if(ph_section[playerid] != PH_CALLING && ph_section[playerid] != PH_OFF)
	{
	    CancelSelectTextDraw(playerid);

	    SetPlayerArmedWeapon(playerid, 0);

	    TogglePlayerControllable(playerid, false);

		SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] Press F8 to take a photo F7 (two times) to hide your chat");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] Press W, A, S and D hold down to arrange the camera. press ENTER dold down to reverse");
		SendClientMessage(playerid, COLOR_WHITE, "[ ! ] Info: use /headmove To stop the movement of your head.");

		GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
		GetPlayerFacingAngle(playerid, Degree[playerid]);
		Degree[playerid] += 90.0;
        SelAngle[playerid] = 0.8;
  		static Float: n1X, Float: n1Y;

		n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
		n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
		SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
		SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid] + SelAngle[playerid]);
		SetPlayerFacingAngle(playerid, Degree[playerid] - 90);
		ph_section[playerid] = PH_SELFIE;

		Refreash_Phone(playerid);
		ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 0, 0, 0, 1, 0, 0);
	}
	return 1;
}

stock PhoneSelfie_Stop(playerid)
{
	if(ph_section[playerid] == PH_SELFIE)
	{
		ph_section[playerid] = PH_MAIN;
		DisplayPlayerPhone(playerid);
		Refreash_Phone(playerid);

		TogglePlayerControllable(playerid, true);
		SetCameraBehindPlayer(playerid);
		ClearAnimations(playerid);
	}
	return 1;
}

stock OnPhoneClick_FirstButton(playerid)
{
	switch(ph_section[playerid])
	{
	    case PH_MAIN: // click Menu page Main >> go to PH_MENU
	    {
 	        switch(ph_subsection[playerid])
	        {
	            case PH_MENU, PH_M_PHONEBOOK, PH_M_PHONEBOOK_LISTCON, PH_M_CALLS_LISTCON, PH_M_SMS_LISTCON, PH_M_SMS_INBOX, PH_M_CALLS, PH_M_SMS, PH_M_SMS_ARCHIVE, PH_M_SETTINGS, PH_M_SETTINGS_RING, PH_M_SETTINGS_INFO:
	            {
				 	OnPhoneClick_Open(playerid);
			        Refreash_Phone(playerid);
		        }
		        default: SetPhoneSection(playerid, PH_MAIN, PH_MENU);
	        }
	    }
 	    case PH_TEXTDISPLAY:
	    {
 	        switch(ph_subsection[playerid])
	        {
	            case PH_T_NAMENUB, PH_T_NAMENUBMENU:
	            {
				 	OnPhoneClick_Open(playerid);
			        Refreash_Phone(playerid);
		        }
	        }
	    }
	    case PH_CALLING:
	    {
			if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID && PlayerData[playerid][pIncomingCall] && !PlayerData[playerid][pCellTime])
			{
			    cmd_p(playerid, "\0");
			}
	    }
	}
	return 1;
}

stock OnPhoneClick_SecondButton(playerid)
{
	switch(ph_section[playerid])
	{
	    case PH_MAIN: // click Menu page Main >> go to PH_MENU
	    {
	        switch(ph_subsection[playerid])
	        {
	            case PH_MENU: SetPhoneSection(playerid, PH_MAIN, 0);
		        case PH_M_PHONEBOOK, PH_M_CALLS, PH_M_SMS, PH_M_SETTINGS: SetPhoneSection(playerid, PH_MAIN, PH_MENU);
		        case PH_M_PHONEBOOK_LISTCON: SetPhoneSection(playerid, PH_MAIN, PH_M_PHONEBOOK);
		        case PH_M_CALLS_LISTCON: SetPhoneSection(playerid, PH_MAIN, PH_M_CALLS);
		        case PH_M_SMS_INBOX, PH_M_SMS_LISTCON, PH_M_SMS_ARCHIVE: SetPhoneSection(playerid, PH_MAIN, PH_M_SMS);
		        case PH_M_SETTINGS_RING, PH_M_SETTINGS_INFO: SetPhoneSection(playerid, PH_MAIN, PH_M_SETTINGS);
	        }
	    }
 		case PH_TEXTDISPLAY:
		{
			switch(ph_subsection[playerid])
			{
			    case PH_T_NAMENUB: UpdatePhoneSection(playerid, PH_MAIN, PH_M_PHONEBOOK_LISTCON);
			    case PH_T_NAMENUBMENU: UpdatePhoneSection(playerid, PH_TEXTDISPLAY, PH_T_NAMENUB);
			}
		}
		case PH_CALLING:
		{
		    if(!PlayerData[playerid][pCallState]) SetPhoneSection(playerid, PH_MAIN, 0);
		    else if(PlayerData[playerid][pCallState] == 1)
		    {
		        if(calltimer[playerid])
					KillTimer(calltimer[playerid]);

			 	PlayerData[playerid][pIncomingCall] = 0;
				PlayerData[playerid][pCellTime] = 0;
				PlayerData[playerid][pCallState] = 0;
				PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
			    SetPhoneSection(playerid, PH_MAIN, 0);
			    if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
		    }
		   	else cmd_h(playerid, "\0");
		}
		case PH_SMSING:
		{
		    if(PlayerData[playerid][pSendSMS])
		    {
 		        if(smstimer[playerid])
					KillTimer(smstimer[playerid]);

      			PlayerData[playerid][pSendSMS] = 0;
				DeletePVar(playerid, "SMSPhoneText");
		     	// cancel sending sms
		    }
		    SetPhoneSection(playerid, PH_MAIN, 0);
		}
	}

	return 1;
}

stock OnPhoneClick_UpButton(playerid)
{
	switch(ph_section[playerid])
	{
	    case PH_MAIN:
	    {
 	        switch(ph_subsection[playerid])
	        {
	            case PH_MENU, PH_M_PHONEBOOK, PH_M_CALLS, PH_M_SMS, PH_M_SETTINGS: // Menu
	            {
		            if(ph_select[playerid] > 1)
		            {
				        ph_select[playerid]--;
				        Refreash_Phone(playerid);
			        }
		        }
		        case PH_M_PHONEBOOK_LISTCON, PH_M_CALLS_LISTCON, PH_M_SMS_LISTCON, PH_M_SMS_INBOX, PH_M_SMS_ARCHIVE, PH_M_SETTINGS_RING:
		        {
		            if(ph_select[playerid] > 1)
		            {
				        ph_select[playerid]--;
				        ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);
				        Refreash_Phone(playerid);
			        }
			        else
			        {
						if(ph_currentpage[playerid] > 1)
						{
						    ph_select[playerid] = 4;
						    ph_currentpage[playerid]--;
						    ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);
						    Refreash_Phone(playerid);
						}
			        }
		        }
	        }
	    }
  		case PH_TEXTDISPLAY:
		{
			switch(ph_subsection[playerid])
			{
			    case PH_T_NAMENUBMENU:
		        {
		            if(ph_select[playerid] > 1)
		            {
				        ph_select[playerid]--;
				        Refreash_Phone(playerid);
			        }
		        }
			}
		}
	}
	return 1;
}

stock OnPhoneClick_DownButton(playerid)
{
	switch(ph_section[playerid])
	{
	    case PH_MAIN:
	    {
 	        switch(ph_subsection[playerid])
	        {
	            case PH_MENU, PH_M_PHONEBOOK, PH_M_CALLS, PH_M_SMS, PH_M_SETTINGS, PH_M_SETTINGS_RING: // Menu
	            {
		            if(ph_select[playerid] < ph_select_max[playerid])
		            {
				        ph_select[playerid]++;
				        Refreash_Phone(playerid);
			        }
		        }
		        case PH_M_PHONEBOOK_LISTCON, PH_M_CALLS_LISTCON, PH_M_SMS_LISTCON, PH_M_SMS_INBOX, PH_M_SMS_ARCHIVE:
		        {
		            if(ph_select[playerid] < ph_select_max[playerid])
		            {
				        ph_select[playerid]++;
				        ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);
				        Refreash_Phone(playerid);
			        }
				 	else
				 	{
						if(ph_currentpage[playerid] < ph_page[playerid])
						{
							ph_select[playerid] = 1;
							ph_currentpage[playerid]++;
							ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);
							Refreash_Phone(playerid);
						}
				 	}
			  	}
	        }
	    }
  		case PH_TEXTDISPLAY:
		{
			switch(ph_subsection[playerid])
			{
			    case PH_T_NAMENUBMENU:
		        {
		            if(ph_select[playerid] < ph_select_max[playerid])
		            {
				        ph_select[playerid]++;
				        Refreash_Phone(playerid);
			        }
		        }
			}
		}
	}
	return 1;
}

stock OnPhoneClick_Open(playerid)
{
	switch(ph_section[playerid])
	{
	    case PH_MAIN: // click Menu page Main >> ??? PH_MENU
	    {
	        switch(ph_subsection[playerid])
	        {
	            case PH_MENU:
	            {
				 	switch(ph_select[playerid])
				 	{
				 	    case 1: {//SendClientMessage(playerid, -1, "Phonebook");
                            SetPhoneSection(playerid, PH_MAIN, PH_M_PHONEBOOK);
				 	    }
                        case 2: {
                        	SetPhoneSection(playerid, PH_MAIN, PH_M_SMS);
                        }
                        case 3:
                        {
                            SetPhoneSection(playerid, PH_MAIN, PH_M_CALLS);
                        }
                        case 4:
                        {
                            SetPhoneSection(playerid, PH_MAIN, PH_M_SETTINGS);
                        }
				 	}

		        }
	            case PH_M_PHONEBOOK:
	            {
				 	switch(ph_select[playerid])
				 	{
				 	    case 1: Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insert name", "Add a contact\n\n\t\tEnter contact name:", "Proximo", "voltar");
                        case 2: SetPhoneSection(playerid, PH_MAIN, PH_M_PHONEBOOK_LISTCON);
				 	}
		        }
	            case PH_M_PHONEBOOK_LISTCON:
	            {
                    if(ph_select_max[playerid])
                    {
						ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);
						SetPhoneSection(playerid, PH_TEXTDISPLAY, PH_T_NAMENUB);
					}
	            }
	            case PH_M_CALLS_LISTCON:
	            {
                    if(ph_select_max[playerid])
                    {
						ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);
				 	 	cmd_ligar(playerid, GetPhoneNumberSelected(playerid, ph_selectrow[playerid]));
					}
	            }
	            case PH_M_SMS_LISTCON:
	            {
                    if(ph_select_max[playerid])
                    {
						ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);
					    SetPVarString(playerid,"SMSPhoneNumber",GetPhoneNumberSelected(playerid, ph_selectrow[playerid]));
						Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "Short Message Service", "Fill out the text:", "Send", "voltar");
					}
	            }
	            case PH_M_SMS_ARCHIVE:
	            {
                    if(ph_select_max[playerid])
                    {
                    	ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);

						new str[128], name[32];

						format(str, sizeof(str), "SELECT * FROM `phone_sms` WHERE `PhoneReceive` = %d AND `Archive` = 1 ORDER BY `Date` DESC", PlayerData[playerid][pPnumber]);
						mysql_query(dbCon, str);

						if(cache_num_rows())
						{
							cache_get_value_name(ph_selectrow[playerid], "Date", name);
							cache_get_value_name(ph_selectrow[playerid], "PhoneSMS", str);
							SetPVarInt(playerid, "SMSid", cache_get_value_name_int(ph_selectrow[playerid], "id"));
							Dialog_Show(playerid, SMSRead, DIALOG_STYLE_MSGBOX, "SMS", "Sender:\t\t%s\nSend:  \t\t%s\n\n%s", "Options", "Close", GetPhoneContactName(playerid, cache_get_value_name_int(ph_selectrow[playerid], "PhoneOwner"), 1), name, str);
						}
					}
	            }
	            case PH_M_SMS_INBOX:
	            {
                    if(ph_select_max[playerid])
                    {
                    	ph_selectrow[playerid] = (4 * (ph_currentpage[playerid]-1)) + (ph_select[playerid] - 1);

						new str[128], name[32];

						format(str, sizeof(str), "SELECT * FROM `phone_sms` WHERE `PhoneReceive` = %d AND `Archive` = 0 ORDER BY `Date` DESC", PlayerData[playerid][pPnumber]);
						mysql_query(dbCon, str);

						if(cache_num_rows())
						{
							if(cache_get_value_name_int(ph_selectrow[playerid], "ReadSMS"))
							{
								cache_get_value_name(ph_selectrow[playerid], "Date", name);
								cache_get_value_name(ph_selectrow[playerid], "PhoneSMS", str);
                                SetPVarInt(playerid, "SMSid", cache_get_value_name_int(ph_selectrow[playerid], "id"));
								Dialog_Show(playerid, SMSRead, DIALOG_STYLE_MSGBOX, "SMS", "Sender:\t\t%s\nSend:  \t\t%s\n\n%s", "Options", "Close", GetPhoneContactName(playerid, cache_get_value_name_int(ph_selectrow[playerid], "PhoneOwner"), 1), name, str);
							}
							else
							{
								format(str, sizeof(str), "UPDATE `phone_sms` SET `ReadSMS` = '1' WHERE `id` = %d;", cache_get_value_name_int(ph_selectrow[playerid], "id"));
								mysql_query(dbCon, str);
							}
						}
						UpdatePhoneSection(playerid, PH_MAIN, PH_M_SMS_INBOX);
					}
	            }
	            case PH_M_CALLS: {
				 	switch(ph_select[playerid])
				 	{
	                	case 1: SetPhoneSection(playerid, PH_MAIN, PH_M_CALLS_LISTCON);
	                	case 2: Dialog_Show(playerid, CallNumber, DIALOG_STYLE_INPUT, "Insert number", "Contact by contact\n\n\t\tEnter contact number:", "Call", "voltar");
	                }
	            }
	            case PH_M_SMS: {
				 	switch(ph_select[playerid])
				 	{
	                	case 1: SetPhoneSection(playerid, PH_MAIN, PH_M_SMS_LISTCON);
	                	case 2: Dialog_Show(playerid, SMSNumber, DIALOG_STYLE_INPUT, "Insert number", "Send SMS By Celular\n\n\t\tEnter contact number:", "Proximo", "voltar");
	                	case 3: SetPhoneSection(playerid, PH_MAIN, PH_M_SMS_INBOX);
	                	case 4: SetPhoneSection(playerid, PH_MAIN, PH_M_SMS_ARCHIVE);
	                }
	            }
	            case PH_M_SETTINGS: {
				 	switch(ph_select[playerid])
				 	{
	                	case 1: SetPhoneSection(playerid, PH_MAIN, PH_M_SETTINGS_RING); // Change Ringtone
	                	case 2: {
                            if(ph_airmode[playerid]) ph_airmode[playerid] = 0;
                            else ph_airmode[playerid] = 1;
                            Refreash_Phone(playerid);
						}
	                	case 3: {
                            if(ph_silentmode[playerid]) ph_silentmode[playerid] = 0;
                            else ph_silentmode[playerid] = 1;
                            Refreash_Phone(playerid);
						}
	                	case 4: SetPhoneSection(playerid, PH_MAIN, PH_M_SETTINGS_INFO);// Phone Info
	                }
	            }
	            case PH_M_SETTINGS_RING: {
	                switch(ph_currentpage[playerid])
	                {
	                    case 1:
	                    {
						 	switch(ph_select[playerid])
						 	{
			                	case 1: ph_CallTone[playerid] = 0, PlayerPlaySound(playerid, 23000, 0.0, 0.0, 0.0); // Default ringtone
			                	case 2: ph_CallTone[playerid] = 1, PlayerPlaySound(playerid, 20600, 0.0, 0.0, 0.0); //
			                	case 3: ph_CallTone[playerid] = 2, PlayerPlaySound(playerid, 20804, 0.0, 0.0, 0.0); //
							}
						}
	                }
	  			}
	        }
	    }
 	    case PH_TEXTDISPLAY:
	    {
 	        switch(ph_subsection[playerid])
	        {
	            case PH_T_NAMENUB: SetPhoneSection(playerid, PH_TEXTDISPLAY, PH_T_NAMENUBMENU);
				case PH_T_NAMENUBMENU:
	            {
				 	switch(ph_select[playerid])
				 	{
				 	    case 1: cmd_ligar(playerid, GetPhoneNumberSelected(playerid, ph_selectrow[playerid]));
                        case 2: {
					        SetPVarString(playerid,"SMSPhoneNumber",GetPhoneNumberSelected(playerid, ph_selectrow[playerid]));
							Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "Short Message Service", "fill in:", "Send", "voltar");
                        }
                        case 3: Dialog_Show(playerid, DeleteContact, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to delete this contact?", "Yes", "No");
					}
	            }
	        }
	    }
	}
	return 1;
}

forward SetPhoneSection(playerid, section, sub);
public SetPhoneSection(playerid, section, sub)
{
	switch(section)
	{
	    case PH_MAIN:
		{
		    switch(sub)
		    {
		        case PH_MENU, PH_M_SMS, PH_M_SETTINGS:
		        {
				 	ph_select[playerid] = 1;
					ph_select_max[playerid] = 4;
		        }
 		        case PH_M_PHONEBOOK, PH_M_CALLS:
		        {
				 	ph_select[playerid] = 1;
					ph_select_max[playerid] = 2;
		        }
		        case PH_M_PHONEBOOK_LISTCON, PH_M_CALLS_LISTCON, PH_M_SMS_LISTCON, PH_M_SMS_INBOX, PH_M_SMS_ARCHIVE, PH_M_SETTINGS_RING:
		        {
 					ph_select[playerid] = 1;
     				ph_currentpage[playerid] = 1;
		        }
		        default:
		        {
				 	ph_select[playerid] = 0;
					ph_select_max[playerid] = 0;
				}
			}
		}
		case PH_TEXTDISPLAY:
		{
		    switch(sub)
		    {
		        case PH_T_NAMENUBMENU:
		        {
				 	ph_select[playerid] = 1;
					ph_select_max[playerid] = 3;
		        }
		    }
		}
	}
	ph_section[playerid] = section;
	ph_subsection[playerid] = sub;
	Refreash_Phone(playerid);
}

stock UpdatePhoneSection(playerid, section, sub = 0)
{
	ph_section[playerid] = section;
	ph_subsection[playerid] = sub;
	Refreash_Phone(playerid);
}
// ================== [ PHONE SYSTEM ] ============================*/
//Sistema de Taser
public OnPlayerTakeDamage(playerid, issuerid, Float: amount, weaponid, bodypart)
{
	if(DamageSync[playerid] == STATE_PENDING_HIT) DamageSync[playerid] = STATE_WAIT_HIT, KillTimer(IssueTimer[playerid]);

	//printf("OnPlayerTakeDamage: wpid %d %f", weaponid, amount);
	if(issuerid != INVALID_PLAYER_ID)
	{
		if((TazerActive{issuerid} == true && weaponid == 23) || (BeanbagActive{issuerid} == true && weaponid == 25)) {

			if(weaponid == 23)
			{
				if(!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_TAZER))
				{
					if (!AnimationCheck(playerid)) ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 0, 0, 1, 1, 0, 1);
					SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "** %s foi baleado por uma arma eletrica e caiu no chão.", ReturnName(playerid, 0));

					BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_TAZER);
					SetTimerEx("SetUnTazed", 10000, false, "i", playerid);
				}
				else
				{
					SendClientMessage(issuerid, COLOR_GREY, "Este jogador foi eletrificado.");
				}
			}

		    if(weaponid == 25)
			{
				if(!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_TAZER))
				{
					if (!AnimationCheck(playerid)) ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 0, 0, 1, 1, 0, 1);
					ApplyAnimation(playerid, "CRACK", "crckidle2", 4.0, 0, 0, 1, 1, 3, 1);
					SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "** %s foi baleado por Remington de borracha e caiu no chão.", ReturnName(playerid, 0));
		      		SendClientMessageEx(issuerid, COLOR_YELLOW, "SERVER: Você atingiu %s com uma bala de borracha.", ReturnName(playerid, 0));

					BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_TAZER);
					SetTimerEx("SetUnTazed", 10000, false, "i", playerid);
				}
				else
				{
					SendClientMessage(issuerid, COLOR_GREY, "Este jogador foi imobilizado com balas de borracha.");
				}
			}

			return 1; // TAZER
		}
		new Float:health, Float:armour;
		//GetPlayerHealth(playerid, health);
		health = PlayerData[playerid][pHealth];
	  	GetPlayerArmour(playerid, armour);

		if(!LegDelay[playerid] && !deathmode[playerid] && !PlayerData[playerid][pInjured])
		{
			switch(bodypart)
			{
				case 7,8:
				{
			  	 	SendClientMessage(playerid, COLOR_LIGHTRED, "-> Você levou um tiro na perna. Você está lutando para correr e pular.");
			  	 	ApplyAnimation(playerid, "PED", "FALL_COLLAPSE", 4.1, 0, 1, 1, 0, 0, 1);
			  	  	LegDelay[playerid] = 5;
			  	}
			}
		}

		switch(weaponid)
		{
		    case 0: amount = 3;
		    case 4: amount = 30;
		    case 8: amount = 35;
		    case 5, 7: amount = 10;
		    case 2, 3, 6, 1: amount = 15;
		    case 22: {
				amount = 20;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 23: {
				amount = 25;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 28: {
				amount = 15;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 30: {
				amount = 40;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 31: {
				amount = 35;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 24:
		    {
		        amount = 45;

				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 25,26,27:
		    {
				switch(bodypart)
				{
					case 5,6,7,8: amount+= floatround(amount*0.5, floatround_ceil);
					case 9: amount += floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 33: {
				amount = 70;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 29: {
				amount = 28;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 32: {
				amount = 15;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		    case 34: {
				amount = 100;
				switch(bodypart)
				{
					case 5,6,7,8: amount= floatround(amount*0.5, floatround_ceil);
					case 9: amount = floatround(amount*1.5, floatround_ceil);
				}
			}
		}

		if(PlayerData[playerid][pInjured])
		{
			if(!deathmode[playerid] && deathtime[playerid] <= 297)
			{
	            SetPlayerChatBubble(playerid, "(( ESTE JOGADOR está MORTO ))", 0xFF6347FF, 20.0, 60*1000);

	            SendClientMessage(playerid, COLOR_YELLOW, "-> Você está morto agora, Você precisa esperar 60 segundos e então será capaz. /respawnhosp");

				deathmode[playerid] = 1;
				deathtime[playerid] = 60;

				ApplyAnimation(playerid, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
			}
		}
		else
		{
			new Float:curhealth = health-amount;

			if(curhealth <= 30)
			{
				if(GetPlayerWeapon(playerid) != 0) {

					//for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 0);
					SetPlayerWeaponSkill(playerid, NORMAL_SKILL);

					SendClientMessage(playerid, COLOR_LIGHTRED, "-> Baixa presSão arterial Habilidades de tiro São baixas.");
				}
			}
 			else if(curhealth <= 40)
			{
				if(GetPlayerWeapon(playerid) != 0) {

					//for(new i = 0; i != 11;++i) SetPlayerSkillLevel(playerid, i, 500);
					SetPlayerWeaponSkill(playerid, MEDIUM_SKILL);

					SendClientMessage(playerid, COLOR_LIGHTRED, "-> Habilidades de tiro de baixa presSão arterial São moderadas.");
				}
			}

			if(armour < 1)
			{
				if(health-amount > 0)
				{
					SetPlayerHealthEx(playerid,health-amount), AddPlayerDamage(playerid, weaponid, amount, false, bodypart);
                    return 1;
				}
				else AddPlayerDamage(playerid, weaponid, amount, false, bodypart);
			}
			else if(armour > 0)
			{
				new Float:totalarmour;
				totalarmour = armour - amount;

                AddPlayerDamage(playerid, weaponid, amount, true, bodypart);

				printf("%d", totalarmour);
				if(totalarmour > 0) {
					SetPlayerArmour(playerid, totalarmour);
					return 1;
				}
				else {
				    totalarmour = amount - armour;
				    printf("%d", totalarmour);
					SetPlayerArmour(playerid, 0);
					if(health-totalarmour > 0) {
						SetPlayerHealthEx(playerid,health-totalarmour);
						return 1;
					}
				}
			}

			/*else if(armour > 0)
			{
				new Float:blockdamage, Float:totalarmour;
				blockdamage = floatround(amount*0.5);
				totalarmour = armour - floatround(blockdamage/2);

				if(totalarmour > 0) SetPlayerArmour(playerid, totalarmour);
				else SetPlayerArmour(playerid, 0);

				if(health-blockdamage > 0) {
					SetPlayerHealthEx(playerid,health-blockdamage), AddPlayerDamage(playerid, weaponid, blockdamage, true, bodypart);
                    return 1;
				}
				else AddPlayerDamage(playerid, weaponid, blockdamage, true, bodypart);
			}*/

			if(weaponid > 0)
			{
                deathtime[playerid] = 300;
				PlayerData[playerid][pInjured] = 1;
				PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
				PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
				GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
				GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
				SetPlayerSpawn(playerid);
				SetPlayerHealthEx(playerid, 25);

				SQL_LogPlayerDeath(playerid,issuerid,weaponid);
			}
		}
	}
	else {
		PlayerData[playerid][pHealth] -= amount;

		/*if(PlayerData[playerid][pHealth] < 1) {

          	deathtime[playerid] = 300;
			PlayerData[playerid][pInjured] = 1;
			PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
			PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
			GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
			SetPlayerSpawn(playerid);
			SetPlayerHealthEx(playerid, 25);
		}*/
	}
    return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float: amount, weaponid, bodypart)
{
 	if(playerid != INVALID_PLAYER_ID && damagedid != INVALID_PLAYER_ID)
	{
		if(DamageSync[playerid] == STATE_PENDING_HIT)
	 	{
	   		KillTimer(IssueTimer[damagedid]);
	      	IssueTimer[damagedid] = SetTimerEx("IssueHit", ISSUE_HIT_DELAY, false, "iifii", playerid, damagedid, Float:amount, weaponid, bodypart);
		}
		else
	  	{
	     	IssueTimer[damagedid] = SetTimerEx("IssueHit", ISSUE_HIT_DELAY, false, "iifii", playerid, damagedid, Float:amount, weaponid, bodypart);
	      	DamageSync[damagedid] = STATE_PENDING_HIT;
	  	}
    }
    return 1;
}

stock Float:frandom(Float:max, Float:m2 = 0.0, dp = 3)
{
    new Float:mn = m2;
    if(m2 > max) {
        mn = max,
        max = m2;
    }
    m2 = floatpower(10.0, dp);

    return floatadd(floatdiv(float(random(floatround(floatmul(floatsub(max, mn), m2)))), m2), mn);
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	//printf("%d %d %d %d", playerid, weaponid, hittype, hitid);

	if(weaponid < 0 && weaponid > 45)
		return 0;

    if( hittype != BULLET_HIT_TYPE_NONE ) // Bullet Crashing uses just this hittype
    {
        if( !( -1000.0 <= fX <= 1000.0 ) || !( -1000.0 <= fY <= 1000.0 ) || !( -1000.0 <= fZ <= 1000.0 ) ) // a valid offset, it's impossible that a offset bigger than 1000 is legit (also less than -1000.0 is impossible, not used by this hack, but still, let's check for it, just for the future, who knows what hacks will appear). The object with biggest offset is having ~700-800 radius.
        {
            Kick(playerid);
            return 0; // let's desynchronize that bullet, so players won't crash
        }
    }

    if(hittype == BULLET_HIT_TYPE_PLAYER) {
        new Float:rDist = frandom(-5.0, 6.0);
        if(rDist > 0.0) {
            new Float:vX, Float:vY, Float:vZ,
                Float:pX, Float:pY, Float:pZ;
            GetPlayerLastShotVectors(playerid, vX, vY, vZ, fX, fY, fZ);

            vX = fX - vX;
            vY = fY - vY;
            vZ = fZ - vZ;

            new Float:d = VectorSize(vX, vY, vZ);
            vX /= d;
            vY /= d;
            vZ /= d;

            vX *= rDist;
            vY *= rDist;
            vZ *= rDist;

            vX += fX + frandom(-0.5, 0.5);
            vY += fY + frandom(-0.5, 0.5);
            vZ += fZ + frandom(-0.5, 0.5);

            if(CA_RayCastLineNormal(fX, fY, fZ, vX, vY, vZ, pX, pY, pZ, pX, pY, pZ)) {
                rDist = frandom(0.005, 0.020, 4);
                pX *= rDist;
                pY *= rDist;
                pZ *= rDist;

                CA_RayCastLineAngle(fX, fY, fZ, vX, vY, vZ, fX, fY, fZ, vX, vY, vZ);

                new objectid = CreateDynamicObject(19836, fX + pX, fY + pY, fZ + pZ, vX, vY, vZ);
                if(IsValidDynamicObject(objectid)) {
                    SetDynamicObjectMaterial(objectid, 0, -1, "não possui", "não possui", 0xFFFF0000);

                    SetTimerEx("FadeBlood", 1500, false, "ii", objectid, 255);
                }
            }
        }
    }

    if(!PlayerData[playerid][pOnDuty])
    {
	    if(PlayerData[playerid][pGun1] == weaponid)
		{
			if(PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] <= PlayerData[playerid][pAmmo1])
				PlayerData[playerid][pAmmo1]--;

			if(!PlayerData[playerid][pAmmo1])
			{
			    PlayerData[playerid][pGun1] = 0;
			    PlayerData[playerid][pAmmo1] = 0;
			}
		}
	    else if(PlayerData[playerid][pGun2] == weaponid)
		{
		    if(PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] <= PlayerData[playerid][pAmmo2])
				PlayerData[playerid][pAmmo2]--;

	 		if(!PlayerData[playerid][pAmmo2])
			{
			    PlayerData[playerid][pGun2] = 0;
			    PlayerData[playerid][pAmmo2] = 0;
			    PlayerData[playerid][pPLicense] = 0;
			}
		}
	    else if(PlayerData[playerid][pGun3] == weaponid)
		{
		    if(PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] <= PlayerData[playerid][pAmmo3])
				PlayerData[playerid][pAmmo3]--;

			if(!PlayerData[playerid][pAmmo3])
			{
			    PlayerData[playerid][pGun3] = 0;
			    PlayerData[playerid][pAmmo3] = 0;
			    PlayerData[playerid][pSLicense] = 0;
			}
		}
	}

	if((BeanbagActive{playerid} == true && weaponid == 25) || (TazerActive{playerid} == true && weaponid == 23))
	{
		if(weaponid == 23) {
			if( GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0, 1);
			else ApplyAnimation(playerid, "COLT45", "colt45_crouchreload", 4.0, 0, 1, 1, 0, 0, 1);
		}
		else if(weaponid == 25) {
			if( GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK ) ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0, 1);
			else ApplyAnimation(playerid, "BUDDY", "buddy_crouchreload", 4.0, 0, 1, 1, 0, 0, 1);
		}
	}
	else PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]]--;

    if(!PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]])
    {
        PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = 0;
        PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = 0;

        cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));
    }
    return 1;
}

forward IssueHit(playerid, damagedid, Float:amount, weaponid, bodypart);
public IssueHit(playerid, damagedid, Float:amount, weaponid, bodypart)
{
    if(DamageSync[damagedid] == STATE_PENDING_HIT)
	{
		OnPlayerTakeDamage(damagedid, playerid, Float: amount, weaponid, bodypart);

	}
    return 1;
}

stock GivePlayerWeaponEx(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;


	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

stock IsInvalidWeapon(weaponid)
{
	if(weaponid == 34 || weaponid == 35 || weaponid == 16 || weaponid == 18) return 1;
	else return 0;
}

stock GivePlayerValidWeapon(playerid, weaponid, ammo, license=0)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

    RemoveWeapon(playerid, weaponid);

	if(!IsInvalidWeapon(weaponid))
	{
		if(IsMelee(weaponid))
		{
		    PlayerData[playerid][pGun1] = weaponid;
		    PlayerData[playerid][pAmmo1] = ammo;
		    SendClientMessageEx(playerid, COLOR_GREEN, "[Faca] pegou uma %s", ReturnWeaponName(weaponid));
		}
		else if(IsPrimary(weaponid))
		{
		    PlayerData[playerid][pGun2] = weaponid;
		    PlayerData[playerid][pAmmo2] = ammo;
		    SendClientMessageEx(playerid, COLOR_GREEN, "[Arma 1] Pegou uma %s", ReturnWeaponName(weaponid));

		    PlayerData[playerid][pPLicense] = license;
		}
		else if(IsSecondary(weaponid))
		{
		    PlayerData[playerid][pGun3] = weaponid;
		    PlayerData[playerid][pAmmo3] = ammo;
		    SendClientMessageEx(playerid, COLOR_GREEN, "[Arma 2] Pegou uma %s", ReturnWeaponName(weaponid));

		    PlayerData[playerid][pSLicense] = license;
		}
	}

	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] = ammo;

	GivePlayerWeapon(playerid, weaponid, ammo);

	return license;
}

Industry_Nearest(playerid, Float:radius = 2.5)
{
    foreach(new i : sv_industry) if (IsPlayerInRangeOfPoint(playerid, radius, StorageData[i][in_posx], StorageData[i][in_posy], StorageData[i][in_posz]))
	{
		return i;
	}
	return -1;
}

Bizz_Inside(playerid)
{
	if (PlayerData[playerid][pLocal] != 255)
	{
	    foreach(new i : sv_business) if (PlayerData[playerid][pLocal]-LOCAL_BIZZ == i && GetPlayerInterior(playerid) == BizInfo[i][bInterior]) {
	        return i;
		}
	}
	return -1;
}

Bizz_Nearest(playerid, Float:radius = 2.5)
{
    foreach(new i : sv_business) if (IsPlayerInRangeOfPoint(playerid, radius, BizInfo[i][bEntranceX], BizInfo[i][bEntranceY], BizInfo[i][bEntranceZ]))
	{
		return i;
	}
	return -1;
}

House_Inside(playerid)
{
	if (PlayerData[playerid][pLocal] != 255)
	{
	    foreach(new i : sv_houses) if (PlayerData[playerid][pLocal]-LOCAL_HOUSE == i && GetPlayerInterior(playerid) == HouseInfo[i][hInterior]) {
	        return i;
		}
	}
	return -1;
}

House_IsInside(playerid, houseid)
{
	if (PlayerData[playerid][pLocal] != 255)
	{
	    if (HouseEntered[playerid] == houseid || (PlayerData[playerid][pLocal]-LOCAL_HOUSE == houseid && GetPlayerInterior(playerid) == HouseInfo[houseid][hInterior])) {
	        return true;
		}
	}
	return false;
}

House_Nearest(playerid, Float:radius = 2.5)
{
    foreach(new i : sv_houses) if (IsPlayerInRangeOfPoint(playerid, radius, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
	{
		return i;
	}
	return -1;
}

Bizz_IsOwner(playerid, bizid)
{
	if (!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED) || PlayerData[playerid][pID] == -1)
	    return 0;

	if (PlayerData[playerid][pAdmin] > 3)
		return 1;

    if (BizInfo[bizid][bOwned] != 0 && PlayerData[playerid][pPbiskey] == bizid)
		return 1;

	return 0;
}

Bizz_IsInside(playerid, bizid)
{
	if (PlayerData[playerid][pLocal] != 255)
	{
	    if (BizEntered[playerid] == bizid || (PlayerData[playerid][pLocal]-LOCAL_BIZZ == bizid && GetPlayerInterior(playerid) == BizInfo[bizid][bInterior])) {
	        return true;
		}
	}
	return false;
}

/*House_IsPermission(playerid, houseid)
{
	if (!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED) || PlayerData[playerid][pID] == -1)
	    return 0;

	if (PlayerData[playerid][pAdmin] > 3)
		return 1;

    if (HouseInfo[houseid][hOwned] != 0 && PlayerData[playerid][pHouseKey] == houseid)
    //if (HouseInfo[houseid][hOwned] == 1 && !strcmp(ReturnName(playerid), HouseInfo[houseid][hOwner], true))
		return 1;

	return 0;
}*/

House_IsOwner(playerid, houseid)
{
	if(houseid == -1)
	    return 0;

	if (!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED) || PlayerData[playerid][pID] == -1)
	    return 0;

	if (PlayerData[playerid][pAdmin] > 3)
		return 1;

    if (HouseInfo[houseid][hOwned] == 1 && !strcmp(ReturnName(playerid), HouseInfo[houseid][hOwner], true))
		return 1;

	return 0;
}

Warehouse_Refresh(whid) {
	if (whid != -1)
	{

		WareHouseInfo[whid][whPickup] = CreateDynamicPickup(1318, 23, WareHouseInfo[whid][whX], WareHouseInfo[whid][whY], WareHouseInfo[whid][whZ], WareHouseInfo[whid][whWorld], WareHouseInfo[whid][whInt]);

		if(!IsValidDynamic3DTextLabel(WareHouseInfo[whid][whLabel])) {

			format(szString, 128, "[{FF9A00}%s Warehouse{FFFFFF}]\nArmazenamento: %d / %d", WareHouseInfo[whid][whType] == 1 ? ("Armas") : ("Drogas"), WareHouseInfo[whid][whStock], WareHouseInfo[whid][whMaxstock]);
			WareHouseInfo[whid][whLabel] = CreateDynamic3DTextLabel(szString, -1, WareHouseInfo[whid][whX], WareHouseInfo[whid][whY], WareHouseInfo[whid][whZ], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, WareHouseInfo[whid][whWorld], WareHouseInfo[whid][whInt], -1, 100.0);
            return 1;
		}
		format(szString, 128, "[{FF9A00}%s Warehouse{FFFFFF}]\nArmazenamento: %d / %d", WareHouseInfo[whid][whType] == 1 ? ("Armas") : ("Drogas"), WareHouseInfo[whid][whStock], WareHouseInfo[whid][whMaxstock]);
        UpdateDynamic3DTextLabelText(WareHouseInfo[whid][whLabel], -1, szString);
	}
	return 1;
}

Warehouse_Nearest(playerid, Float:radius = 2.5)
{
    foreach(new i : sv_warehouse) if (IsPlayerInRangeOfPoint(playerid, radius, WareHouseInfo[i][whX], WareHouseInfo[i][whY], WareHouseInfo[i][whZ]) && GetPlayerInterior(playerid) == WareHouseInfo[i][whInt] && GetPlayerVirtualWorld(playerid) == WareHouseInfo[i][whWorld])
	{
		return i;
	}
	return -1;
}

Bizz_Refresh(bizid)
{
	if (bizid != -1)
	{
		if(BizInfo[bizid][bOwned]) BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 23, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
		else BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 23, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
		BizInfo[bizid][EmpText] = CreateDynamic3DTextLabel(BizInfo[bizid][bInfo], 0xFFFFFFFF, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BizInfo[bizid][bWorld], BizInfo[bizid][bInterior]);
	}
	return 1;
}

forward PrintBizInfo(playerid,targetid);
public PrintBizInfo(playerid,targetid)
{
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessageEx(playerid, COLOR_GREEN,"*** %s ***",BizInfo[targetid][bInfo]);
	SendClientMessageEx(playerid, COLOR_WHITE,"proprietário: [%s] Level:[%d] preço:[%d] Categoria:[%d]", BizInfo[targetid][bOwner], BizInfo[targetid][bLevelNeeded], BizInfo[targetid][bBuyPrice], BizInfo[targetid][bType]);
	SendClientMessageEx(playerid, COLOR_WHITE,"Upgrade:[%d] Cofre:[%d] Taxa de entrada:[%d]", 0, BizInfo[targetid][bTill], BizInfo[targetid][bEntranceCost]);
	SendClientMessageEx(playerid, COLOR_WHITE,"informação técnica: 1 Produto = %d Produtos atuais: Produtos[%d / %d] preço[%d]", GetProductPerCargo(BizInfo[targetid][bType]), BizInfo[targetid][bProducts], BizInfo[targetid][bMaxProducts], BizInfo[targetid][bPriceProd]);
	SendClientMessageEx(playerid, COLOR_WHITE,"Emprego: 1.[%s] 2.[%s] 3.[%s] 4.[%s]", "não possui", "não possui", "não possui", "não possui");
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
}

GetProductPerCargo(type)
{
	switch(type)
	{
	    case 1: return 10; // Gas Station
	    case 2: return 10; // Ammunations
	    case 3: return 5; // 24/7
	    case 4: return 3; // Vehicle Dealerships
	    case 5: return 10; // Car Modding Shops
	    case 6: return 3; // Pay & Spray
	    case 7: return 5; // Clothing Shops
	    case 8: return 5; // Bars
	    case 9: return 5; // Restaurant
	    case 10: return 10; // Furniture Shop
	    case 11: return 20; // Advertisement Center
	    case 12: return 100; // Banco
	}
	return -1;
}

GetProductCargo(type)
{
	switch(type)
	{
	    case 1: return 13; // Gas Station
	    case 2: return 19; // Ammunations
	    case 3: return 11; // 24/7
	    case 4: return 17; // Vehicle Dealerships
	    case 5: return 23; // Car Modding Shops
	    case 6: return 0; // Pay & Spray
	    case 7: return 12; // Clothing Shops
     	case 8: return 7; // Bars
	    case 9: return 24; // Restaurant
	    case 10: return 14; // Furniture Shop
	    case 11: return 21; // Advertisement Center
	    case 12: return 2; // banco
	}
	return -1;
}

// function Public

// Private Vehicle System

/*Vehicle_Nearest(playerid)
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_PLAYER_VEHICLES; i ++) {
		GetVehiclePos(i, fX, fY, fZ);
		if (IsPlayerInRangeOfPoint(playerid, 6.0, fX, fY, fZ))
		    return i;
	}
	return -1;
}*/

stock Vehicle_Nearest(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    Float:fX,
	    Float:fY,
	    Float:fZ,
	    iIndex = -1
	;
	for (new i = 0; i != MAX_VEHICLES; i ++) {

	    GetVehiclePos(i, fX, fY, fZ);

	    fDistance[1] = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);

		if (fDistance[1] < fDistance[0] && fDistance[1] < 6.0)
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

Car_Nearest(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    Float:fX,
	    Float:fY,
	    Float:fZ,
	    iIndex = -1
	;
	foreach(new i : sv_vehicles) {

	    GetVehiclePos(i, fX, fY, fZ);

	    fDistance[1] = GetPlayerDistanceFromPoint(playerid, fX, fY, fZ);

		if (fDistance[1] < fDistance[0] && fDistance[1] < 6.0)
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

stock Car_GetID(vehicleid)
{
	if(vehicleid == -1 || vehicleid == INVALID_VEHICLE_ID) return -1;

	foreach(new i : sv_playercar) if(CarData[i][carVehicle]==vehicleid) return i;
	return -1;
}

stock SetSlotVehicleDamage(slot)
{
    SetVehicleDamageStatus(CarData[slot][carVehicle],CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
	//UpdateVehicleDamageStatus(CarData[slot][carVehicle],CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
	if(CarData[slot][carHealth] > 249) SetVehicleHealth(CarData[slot][carVehicle],CarData[slot][carHealth]);
	else SetVehicleHealth(CarData[slot][carVehicle],250);
}

stock SetVehicleDamage(vehicleid)
{
	new slot = -1;

	if((slot = Car_GetID(vehicleid)) != -1)
	{
	    SetVehicleDamageStatus(CarData[slot][carVehicle],CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
		//UpdateVehicleDamageStatus(CarData[slot][carVehicle],CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
		if(CarData[slot][carHealth] > 249) SetVehicleHealth(CarData[slot][carVehicle],CarData[slot][carHealth]);
		else SetVehicleHealth(CarData[slot][carVehicle],250);
	}

}

forward SetVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4);
public SetVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4)
{
    UpdateVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4);
    return 1;
}

stock SaveVehicleDamage(vehicleid)
{
	new slot = -1;

	if((slot = Car_GetID(vehicleid)) != -1)
	{
	    // panels,doors,lights,tires
		GetVehicleDamageStatus(vehicleid,CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
		GetVehicleHealth(vehicleid,CarData[slot][carHealth]);
	}

}

stock SaveSlotVehicleDamage(slot)
{
	GetVehicleDamageStatus(CarData[slot][carVehicle],CarData[slot][carDamage][0],CarData[slot][carDamage][1],CarData[slot][carDamage][2],CarData[slot][carDamage][3]);
	GetVehicleHealth(CarData[slot][carVehicle],CarData[slot][carHealth]);
}

stock Car_Despawn(vehicleid)
{
	new
		carid = -1;

    if((carid = Car_GetID(vehicleid)) != -1)
	{
		for(new x = 0; x != MAX_CAR_WEAPONS; x++) if(IsValidDynamicObject(CarPlace[carid][x][cPobj])) DestroyDynamicObject(CarPlace[carid][x][cPobj]);

		for(new x = 0; x != MAX_CAR_WEAPON_PACKAGE; x++)
		{
			carPackageWP[x]=0;
			carPackageAmmo[x]=0;
		}

		

		DestroyVehicle(vehicleid);
		Iter_Remove(sv_vehicles, vehicleid);

	    CarData[carid][carID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle] = 0;

	    exist_playervehicle[carid]=false;

	    Iter_Remove(sv_playercar, carid);
	}
}

//forward drugAddictTimer(playerid);
forward drugAddictTimer(playerid);
public drugAddictTimer(playerid)
{
	if(IsPlayerConnected(playerid)) {
		new Float:decrease;
		decrease = PlayerData[playerid][pDrugAddiction][PlayerData[playerid][pDrugAddict]-1]/10;
		if(PlayerData[playerid][pHealth] - decrease > 0) SetPlayerHealthEx(playerid, PlayerData[playerid][pHealth] - decrease);
		else SetPlayerHealthEx(playerid, 1);
		AddictDrugs[playerid]-=4;
	}
	if(AddictDrugs[playerid] <= 0) {
//		AddictTimer[playerid];
//		break;
		AddictTimer[playerid]=Timer:0;
	}
}

stock Car_DespawnEx(carid)
{
    if(Iter_Contains(sv_playercar, carid))
	{

		for(new x = 0; x != MAX_CAR_WEAPONS; x++) if(IsValidDynamicObject(CarPlace[carid][x][cPobj])) DestroyDynamicObject(CarPlace[carid][x][cPobj]);

		for(new x = 0; x != MAX_CAR_WEAPON_PACKAGE; x++)
		{
			CarData[carid][carPackageWP][x]=0;
			CarData[carid][carPackageAmmo][x]=0;
		}
        //if(IsValidDynamic3DTextLabel(CarData[carid][carLabel])) DestroyDynamic3DTextLabel(CarData[carid][carLabel]);

		DestroyVehicle(CarData[carid][carVehicle]);
		Iter_Remove(sv_vehicles, CarData[carid][carVehicle]);

	    CarData[carid][carID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle] = 0;
	    CarData[carid][spawnado] = 0;


		for(new x = 0; x != MAX_CAR_WEAPONS; x++)
		{
			CarData[carid][carWeapon][x] = 0;
			CarData[carid][carAmmo][x] = 0;
		}
		for(new x=0;x!=MAX_VEHICLE_DRUG_PACKAGE;x++) {
			VehicleDrug[carid][x][drugQTY] = 0;
		}

	    Iter_Remove(sv_playercar, carid);
	}
}

stock Car_Save(vehicleid)
{
	new
		carid = -1;

	if((carid = Car_GetID(vehicleid)) != -1)
	{
        /*CarData[carid][carFuel] = CoreVehicles[vehicleid][vehFuel];

		SaveSlotVehicleDamage(carid);*/

        return Car_SaveID(carid);
		/*format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d', `carAlarm` = '%d', `carFuel` = '%f', `carXM` = '%d'",
	        CarData[carid][carModel],
	        CarData[carid][carOwner],
	        CarData[carid][carPos][0],
	        CarData[carid][carPos][1],
	        CarData[carid][carPos][2],
	        CarData[carid][carPos][3],
	        CarData[carid][carColor1],
	        CarData[carid][carColor2],
	        CarData[carid][carPaintjob],
	        CarData[carid][carLocked],
            CarData[carid][carAlarm],
	        CarData[carid][carFuel],
	        CarData[carid][carXM]
		);

		for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
		}
		format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
			query,
			CarData[carid][carMods][0],
			CarData[carid][carMods][1],
			CarData[carid][carMods][2],
			CarData[carid][carMods][3],
			CarData[carid][carMods][4],
			CarData[carid][carMods][5],
			CarData[carid][carMods][6],
			CarData[carid][carMods][7],
			CarData[carid][carMods][8],
			CarData[carid][carMods][9],
			CarData[carid][carMods][10],
			CarData[carid][carMods][11],
			CarData[carid][carMods][12],
			CarData[carid][carMods][13]
		);

		format(query, sizeof(query), "%s, `carWeapon0` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carAmmo0` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d'",
			query,
			CarData[carid][carWeapon][0],
			CarData[carid][carWeapon][1],
			CarData[carid][carWeapon][2],
			CarData[carid][carWeapon][3],
			CarData[carid][carAmmo][0],
			CarData[carid][carAmmo][1],
			CarData[carid][carAmmo][2],
			CarData[carid][carAmmo][3]
		);

		format(query, sizeof(query), "%s, `carInsurance` = '%d', `carDamage1` = '%d', `carDamage2` = '%d', `carDamage3` = '%d', `carDamage4` = '%d', `carHealth` = '%f', `carArmour` = '%f', `carDestroyed` = '%d', `carLock` = '%d', `carMileage` = '%f', `carImmob` = '%d', `carBatteryL` = '%f', `carEngineL` = '%f', `carPlate` = '%s', `carComps` = '%d', `carDuplicate` = '%d', `carPlacePos` = '%s' WHERE `carID` = '%d'",
			query,
			CarData[carid][carInsurance],
			CarData[carid][carDamage][0],
			CarData[carid][carDamage][1],
			CarData[carid][carDamage][2],
			CarData[carid][carDamage][3],
			CarData[carid][carHealth],
			CarData[carid][carArmour],
			CarData[carid][carDestroyed],
			CarData[carid][carLock],
			CarData[carid][carMileage],
			CarData[carid][carImmob],
			CarData[carid][carBatteryL],
			CarData[carid][carEngineL],
			CarData[carid][carPlate],
			CarData[carid][carComps],
			CarData[carid][carDupKey],
			FormatPlaceItems(carid),
			FormatVehicleWeapons(carid),
			CarData[carid][carID]
		);
		printf("Vehicle Save %d", strlen(query));
		return mysql_tquery(dbCon, query);*/
	}
	else
	{
	    return 0;
	}
}

stock Car_SaveID(carid)
{
	new
	    query[1536];

	if(carid != -1)
	{

        CarData[carid][carFuel] = CoreVehicles[CarData[carid][carVehicle]][vehFuel];

		SaveSlotVehicleDamage(carid);

		format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d', `carAlarm` = '%d', `carFuel` = '%f'",
	        CarData[carid][carModel],
	        CarData[carid][carOwner],
	        CarData[carid][carPos][0],
	        CarData[carid][carPos][1],
	        CarData[carid][carPos][2],
	        CarData[carid][carPos][3],
	        CarData[carid][carColor1],
	        CarData[carid][carColor2],
	        CarData[carid][carPaintjob],
	        CarData[carid][carLocked],
            CarData[carid][carAlarm],
	        CarData[carid][carFuel]
		);

		for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
		}

		format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
			query,
			CarData[carid][carMods][0],
			CarData[carid][carMods][1],
			CarData[carid][carMods][2],
			CarData[carid][carMods][3],
			CarData[carid][carMods][4],
			CarData[carid][carMods][5],
			CarData[carid][carMods][6],
			CarData[carid][carMods][7],
			CarData[carid][carMods][8],
			CarData[carid][carMods][9],
			CarData[carid][carMods][10],
			CarData[carid][carMods][11],
			CarData[carid][carMods][12],
			CarData[carid][carMods][13]
		);

		format(query, sizeof(query), "%s, `carWeapon0` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carAmmo0` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d', `spawnado` = '%d'",
			query,
			CarData[carid][carWeapon][0],
			CarData[carid][carWeapon][1],
			CarData[carid][carWeapon][2],
			CarData[carid][carWeapon][3],
			CarData[carid][carAmmo][0],
			CarData[carid][carAmmo][1],
			CarData[carid][carAmmo][2],
			CarData[carid][carAmmo][3],
			CarData[carid][spawnado]
		);

		format(query, sizeof(query), "%s, `carInsurance` = '%d', `carDamage1` = '%d', `carDamage2` = '%d', `carDamage3` = '%d', `carDamage4` = '%d', `carHealth` = '%f', `carArmour` = '%f', `carDestroyed` = '%d', `carLock` = '%d', `carMileage` = '%f', `carImmob` = '%d', `carBatteryL` = '%f', `carEngineL` = '%f', `carPlate` = '%s', `carComps` = '%d', `carDuplicate` = '%d', `carPlacePos` = '%s', `licenseWeapons` = '%s', `carPreso` = '%d', `diasPreso` = '%d' WHERE `carID` = '%d'",
			query,
			CarData[carid][carInsurance],
			CarData[carid][carDamage][0],
			CarData[carid][carDamage][1],
			CarData[carid][carDamage][2],
			CarData[carid][carDamage][3],
			CarData[carid][carHealth],
			CarData[carid][carArmour],
			CarData[carid][carDestroyed],
			CarData[carid][carLock],
			CarData[carid][carMileage],
			CarData[carid][carImmob],
			CarData[carid][carBatteryL],
			CarData[carid][carEngineL],
			CarData[carid][carPlate],
			CarData[carid][carComps],
			CarData[carid][carDupKey],
			FormatPlaceItems(carid),
			FormatCarLicenseWeapons(carid),
			CarData[carid][carPreso],
			CarData[carid][diasPreso],
			CarData[carid][carID]
		);
		//printf("Veiculo Salvo %d", strlen(query));
		return mysql_tquery(dbCon, query);
	}
	else
	{
	    return 0;
	}
}
// Private Vehicle System
//===========================================================================================================================

forward SetPlayerWeapons(playerid);
public SetPlayerWeapons(playerid)
{
	if(PlayerData[playerid][pLevel] >= 2 && PlayerData[playerid][pJailed] < 1)
	{
		if (GetFactionType(playerid) == FACTION_GANG) {
		    GivePlayerWeaponEx(playerid, 41, 5000);
		}
		if (PlayerData[playerid][pGun1] > 0)
		{
			GivePlayerWeaponEx(playerid, PlayerData[playerid][pGun1], PlayerData[playerid][pAmmo1]);
		}
		if (PlayerData[playerid][pGun2] > 0)
		{
			GivePlayerWeaponEx(playerid, PlayerData[playerid][pGun2], PlayerData[playerid][pAmmo2]);
		}
		if (PlayerData[playerid][pGun3] > 0)
		{
			GivePlayerWeaponEx(playerid, PlayerData[playerid][pGun3], PlayerData[playerid][pAmmo3]);
		}
	}
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) {
	    GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
	}
	return 1;
}

stock IsMeleeSlotTaken(playerid)
{
	if(PlayerData[playerid][pGun1]) return true;
	return false;
}

stock IsPrimarySlotTaken(playerid)
{
	if(PlayerData[playerid][pGun2]) return true;
	return false;
}

stock IsSecondarySlotTaken(playerid)
{
	if(PlayerData[playerid][pGun3]) return true;
	return false;
}

stock IsMelee(weaponid)
{
    if(weaponid >= 1 && weaponid <= 15) return true;
	//switch(weaponid) { case 1..8,10..13,43: { return 1; } }
	return 0;
}

stock IsPrimary(weaponid)
{
    if(weaponid >= 25 && weaponid <= 33) return true;
	//switch(weaponid) { case 25,27,29..34: { return 1; } }
	return 0;
}

stock IsSecondary(weaponid)
{
    if(weaponid >= 22 && weaponid <= 24) return true;
	//switch(weaponid) { case 22..24: { return 1; } }
	return 0;
}

/*// ================== [ PHONE SYSTEM ] ============================


stock DisplayPlayerPhone(playerid)
{
    switch(PlayerData[playerid][pPmodel])
    { //dark grey, blue, green, yellow, purple and pink.

        case 0: // dark grey
        {
        	PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][0], 0x000000FF); // the machine
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][1], 0x262626FF); // Left border
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][2], 0x262626FF); // Right edge
        	PlayerTextDrawColor(playerid,TDPlayer_Phone[playerid][22], 0x1F1F1FFF); // Side button
        }
        case 1: // Red
		{
        	PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][0], 0x610B0BFF);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][1], 0x610B0BFF);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][2], 0x610B0BFF);
        	PlayerTextDrawColor(playerid,TDPlayer_Phone[playerid][22], 0x2C0505FF);
        }
        case 2: // blue
		{
        	PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][0], 0x182c61ff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][1], 0x182c61ff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][2], 0x182c61ff);
        	PlayerTextDrawColor(playerid,TDPlayer_Phone[playerid][22], 0x101e42ff);
        }
        case 3: // green
		{
        	PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][0], 0x0e1c0eff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][1], 0x0e1c0eff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][2], 0x0e1c0eff);
        	PlayerTextDrawColor(playerid,TDPlayer_Phone[playerid][22], 0x070f07FF);
        }
        case 4: // yellow
		{
        	PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][0], 0x7d6a00ff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][1], 0x7d6a00ff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][2], 0x7d6a00ff);
        	PlayerTextDrawColor(playerid,TDPlayer_Phone[playerid][22], 0x433900ff);
        }
        case 5: // purple
		{
        	PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][0], 0x471f7eff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][1], 0x471f7eff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][2], 0x471f7eff);
        	PlayerTextDrawColor(playerid,TDPlayer_Phone[playerid][22], 0x281247FF);
        }
        case 6: // pink
		{
        	PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][0], 0x850051ff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][1], 0x850051ff);
        	PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][2], 0x850051ff);
        	PlayerTextDrawColor(playerid,TDPlayer_Phone[playerid][22], 0x400027ff);
		}
    }

	for(new i = 0; i <= 12; i++) PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][i]);
	PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][22]);
}

forward ShowPlayerPhone(playerid);
public ShowPlayerPhone(playerid)
{
	// All BG
	DisplayPlayerPhone(playerid);

    switch(PlayerData[playerid][pPmodel])
    {
        case 0: SetPlayerAttachedObject(playerid, FREESLOT9, 18868, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        case 1: SetPlayerAttachedObject(playerid, FREESLOT9, 18870, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        case 2: SetPlayerAttachedObject(playerid, FREESLOT9, 18872, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        case 3: SetPlayerAttachedObject(playerid, FREESLOT9, 18871, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        case 4: SetPlayerAttachedObject(playerid, FREESLOT9, 18873, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        case 5: SetPlayerAttachedObject(playerid, FREESLOT9, 18872, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        case 6: SetPlayerAttachedObject(playerid, FREESLOT9, 18869, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
	}
	ph_opening{ playerid } = true;
    Refreash_Phone(playerid);
	return 1;
}

forward HidePlayerPhone(playerid);
public HidePlayerPhone(playerid)
{
	// All BG
	for(new i = 0; i <= 12; i++) PlayerTextDrawHide(playerid, TDPlayer_Phone[playerid][i]);
	PlayerTextDrawHide(playerid, TDPlayer_Phone[playerid][22]);

    RemovePlayerAttachedObject(playerid, FREESLOT9);

	CancelSelectTextDraw(playerid);
	ph_opening{ playerid } = false;
    Refreash_Phone(playerid);
    return 1;
}


forward OnPhoneUpdate(playerid);
public OnPhoneUpdate(playerid)
{
	static date[6], str[64];

	if(ph_section[playerid] != PH_OFF) {
		if(ph_airmode[playerid] || GetPhoneSignal(playerid) == 0 && !GetPlayerInterior(playerid) && !GetPlayerVirtualWorld(playerid))
		{
			if(ph_opening{ playerid } && ph_section[playerid] == PH_MAIN && ph_subsection[playerid] == 0) PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][13], "X"), PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][13]);

		    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		    {
		    	SendClientMessage(PlayerData[playerid][pCallLine],  COLOR_GRAD2, "Disconnection....");
				CancelCall(playerid);
		    }

		}
		else
		{
			if(ph_opening{ playerid } && ph_section[playerid] == PH_MAIN && ph_subsection[playerid] == 0)
			{
			    new signal = GetPhoneSignal(playerid);
			    switch(signal)
			    {
			        case 1: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][13], "l");
			        case 2: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][13], "ll");
			        case 3: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][13], "lll");
			        case 4: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][13], "llll");
			        case 5: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][13], "lllll");
			    }
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][13]);
			}
		}
	}
    if(!ph_opening{ playerid } || !ph_canupdate{ playerid })
        return 1;

	switch(ph_section[playerid])
	{
	    case PH_MAIN:
		{
 		    switch(ph_subsection[playerid])
		    {
		        case 0:
		        {
					getdate(date[2], date[1], date[0]);
					gettime(date[3], date[4], date[5]);

					format(str, sizeof(str), "~n~%02d:%02d~n~%s %d%s", date[3], date[4], MonthDay[date[1]], date[0], returnOrdinal(date[0]));
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);
				}
			}
		}
	}


	return 1;
}

forward Refreash_Phone(playerid);
public Refreash_Phone(playerid)
{
	new str[128], number, name[24];

    for(new i = 13; i <= 20; i++) PlayerTextDrawHide(playerid, TDPlayer_Phone[playerid][i]);

	if(!ph_opening{ playerid }) return 1;
    if(ph_section[playerid] != PH_OFF)
	{
		if(!IsPlayerUnreadSMS(playerid))
		{
		    PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][3], -1);
		    PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][3]);
		}
		else
		{
		    PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][3], 0x298A08FF);
		    PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][3]);
		}
	}
	switch(ph_section[playerid])
	{
	    case PH_OFF:
	    {
	        ph_canupdate{ playerid } = false;
			PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][6], 0x1C1C1CFF);
			PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][6]);
	    }
	    case PH_SELFIE:
	    {
			for(new i = 0; i <= 12; i++) PlayerTextDrawHide(playerid, TDPlayer_Phone[playerid][i]);
			PlayerTextDrawHide(playerid, TDPlayer_Phone[playerid][22]);
	    }
	    case PH_MAIN:
		{
		    switch(ph_subsection[playerid])
		    {
		        case PH_MENU:
		        {
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][17], "Phonebook");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][17]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][18], "SMS");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][18]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][19], "Calls");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][19]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][20], "Settings");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][20]);
		        }
				case PH_M_PHONEBOOK:
				{
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][17], "Add a contract");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][17]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][18], "List contracts");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][18]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][14], "Selecionar");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][14]);
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
				}
				case PH_M_PHONEBOOK_LISTCON, PH_M_CALLS_LISTCON, PH_M_SMS_LISTCON:
				{
					format(str, sizeof(str), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d ORDER BY `contactName` ASC", PlayerData[playerid][pPnumber]);
					mysql_query(dbCon, str);

                    ph_select_max[playerid] = 0;

					if((ph_pages[playerid] = cache_num_rows()) != 0)
					{
					    ph_page[playerid] = floatround(floatdiv(ph_pages[playerid], 4), floatround_ceil);

					    for(new i = ph_currentpage[playerid] * 4 - 4; i < ph_pages[playerid]; i++)
					    {
					        cache_get_value_name(i, "contactName", name);

					        if(ph_select_max[playerid] >= 4 || !strcmp(name, "null", true)) break;

					      	ph_select_max[playerid]++;

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][ph_select_max[playerid] + 16], name);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][ph_select_max[playerid] + 16]);
						}
					}

					if(!ph_select_max[playerid])
					{
						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Your contact list is currently empty");
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
					}
				}
				case PH_M_SMS_ARCHIVE:
				{
					format(str, sizeof(str), "SELECT * FROM `phone_sms` WHERE `PhoneReceive` = %d AND `Archive` = 1 ORDER BY `Date` DESC", PlayerData[playerid][pPnumber]);
					mysql_query(dbCon, str);

                    ph_select_max[playerid] = 0;

                    new read[4], recp[4];

					if((ph_pages[playerid] = cache_num_rows()) != 0)
					{
					    ph_page[playerid] = floatround(floatdiv(ph_pages[playerid], 4), floatround_ceil);

                        new count;

					    for(new i = ph_currentpage[playerid] * 4 - 4; i < ph_pages[playerid]; i++)
					    {
					        if(ph_select_max[playerid] >= 4) break;

					      	ph_select_max[playerid]++;

cache_get_value_name_int(i, "ReadSMS"), recp[count] = cache_get_value_name_int(i, "PhoneOwner",        						read[count]);

							count++;
						}
					}

					if(!ph_select_max[playerid])
					{
						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Your message box is currently empty");
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
					}
					else
					{
					    for(new i = 0; i < ph_select_max[playerid]; i++)
					    {

							format(name, sizeof(name), "%s", GetPhoneContactName(playerid, recp[i]));

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][i + 17], name);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][i + 17]);
					    }
					}
				}
				case PH_M_SMS_INBOX:
				{
					format(str, sizeof(str), "SELECT * FROM `phone_sms` WHERE `PhoneReceive` = %d AND `Archive` = 0 ORDER BY `Date` DESC", PlayerData[playerid][pPnumber]);
					mysql_query(dbCon, str);

                    ph_select_max[playerid] = 0;

                    new read[4], recp[4];

					if((ph_pages[playerid] = cache_num_rows()) != 0)
					{
					    ph_page[playerid] = floatround(floatdiv(ph_pages[playerid], 4), floatround_ceil);

                        new count;

					    for(new i = ph_currentpage[playerid] * 4 - 4; i < ph_pages[playerid]; i++)
					    {
					        if(ph_select_max[playerid] >= 4) break;

					      	ph_select_max[playerid]++;

cache_get_value_name_int(i, "ReadSMS"), recp[count] = cache_get_value_name_int(i, "PhoneOwner", read[count]);
                            count++;
						}
					}

					if(!ph_select_max[playerid])
					{
						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Your message box is currently empty");
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
					}
					else
					{
					    for(new i = 0; i < ph_select_max[playerid]; i++)
					    {
							if(!read[i]) format(name, sizeof(name), "~>~ %s", GetPhoneContactName(playerid, recp[i]));
							else format(name, sizeof(name), "%s", GetPhoneContactName(playerid, recp[i]));

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][i + 17], name);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][i + 17]);
					    }
					}
				}
				case PH_M_CALLS:
				{
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][17], "Dial a contact");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][17]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][18], "Dial a number");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][18]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][14], "Selecionar");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][14]);
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
				}
				case PH_M_SMS:
				{
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][17], "SMS a contact");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][17]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][18], "SMS a number");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][18]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][19], "Inbox");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][19]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][20], "Archive");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][20]);
				}
				case PH_M_SETTINGS:
				{
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][17], "Change Ringtone");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][17]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][18], (ph_airmode[playerid]) ? ("Disable airplane mode") : ("Enable airplane mode"));
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][18]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][19], (ph_silentmode[playerid]) ? ("Disable silent mode") : ("Enable silent mode"));
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][19]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][20], "Phone info");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][20]);
				}
				case PH_M_SETTINGS_RING:
				{
					ph_pages[playerid] = 3;
					ph_page[playerid] = 1;

                    switch(ph_currentpage[playerid]) {
	                    case 1:
	                    {
	                        ph_select_max[playerid] = 3;
							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][17], "ringtone 1");
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][17]);

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][18], "ringtone 2");
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][18]);

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][19], "ringtone 3");
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][19]);
	                    }
					}
				}
				case PH_M_SETTINGS_INFO:
				{
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Framework: v1");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "Close");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
				}
		        default:
		        {
				    ph_canupdate{ playerid } = true;

					new date[6];

					getdate(date[2], date[1], date[0]);
					gettime(date[3], date[4], date[5]);

					format(str, sizeof(str), "~n~%02d:%02d~n~%s %d%s", date[3], date[4], MonthDay[date[1]], date[0], returnOrdinal(date[0]));
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

					PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][6], -1);
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][6]);

					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][13]); // Signal

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][14], "Menu");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][14]);
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
				}
			}
		}
		case PH_TEXTDISPLAY:
		{
			switch(ph_subsection[playerid])
			{
			    case PH_T_NAMENUB:
			    {
					format(str, sizeof(str), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d ORDER BY `contactName` ASC", PlayerData[playerid][pPnumber]);
					mysql_query(dbCon, str);

					if(cache_num_rows())
					{
					    if(ph_selectrow[playerid] < 0)
					        ph_selectrow[playerid] = 0;

					    cache_get_value_name(ph_selectrow[playerid], "contactName", name);
cache_get_value_name_int(ph_selectrow[playerid], "contactAddee", number);

						format(str, sizeof(str), "~n~%s~n~(%d)", name, number);
						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);
					}

					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][14], "Menu");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][14]);
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
				}
				case PH_T_NAMENUBMENU:
				{
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][17], "Call");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][17]);
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][18], "Text");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][18]);
					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][19], "Delete");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][19]);


					PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
					PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
				}
			}
		}
		case PH_CALLING:
		{
		    if(PlayerData[playerid][pCallState] == 5)
		    {
			    if(PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
			    {
	                if(PlayerData[playerid][pIncomingCall])
	                {
	                    if(PlayerData[playerid][pCellTime])
	                    {

							format(str, sizeof(str), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d AND `contactAddee` = %d", PlayerData[playerid][pPnumber], PlayerData[playerid][pCallNumb]);
							mysql_query(dbCon, str);

							if(cache_num_rows())
							{
							    cache_get_value_name(0, "contactName", name);
								format(str, sizeof(str), "~n~Dialing %s~n~(%d)", name, PlayerData[playerid][pCallNumb]);

							}
							else format(str, sizeof(str), "~n~Dialing~n~%s", FormatCallNumber(playerid));

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "Hangup");
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
	                    }
	                    else
	                    {
							format(str, sizeof(str), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d AND `contactAddee` = %d", PlayerData[playerid][pPnumber], PlayerData[PlayerData[playerid][pCallLine]][pPnumber]);
							mysql_query(dbCon, str);

							if(cache_num_rows())
							{
							    cache_get_value_name(0, "contactName", name);
								format(str, sizeof(str), "~n~Incoming call~n~%s~n~(%d)", name, PlayerData[PlayerData[playerid][pCallLine]][pPnumber]);

							}
							else
							{
							    format(str, sizeof(str), "~n~Incoming call~n~%s", FormatCallNumber(playerid));
							}
							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][14], "Answer");
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][14]);
							PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "Igonore");
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
						}
	                }
	                else
	                {
					    if(PlayerData[playerid][pCallLine] == 911 || PlayerData[playerid][pCallLine] == 912 || PlayerData[playerid][pCallLine] == 914)
					    {
					        format(str, sizeof(str), "~n~Call with~n~911");
					    }
					    else
					    {
							format(str, sizeof(str), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d AND `contactAddee` = %d", PlayerData[playerid][pPnumber], PlayerData[PlayerData[playerid][pCallLine]][pPnumber]);
							mysql_query(dbCon, str);

							if(cache_num_rows())
							{
								cache_get_value_name(0, "contactName", name);
								format(str, sizeof(str), "~n~Call with %s~n~(%d)", name, PlayerData[PlayerData[playerid][pCallLine]][pPnumber]);

							}
							else
							{
								format(str, sizeof(str), "~n~Call with~n~%d", PlayerData[PlayerData[playerid][pCallLine]][pPnumber]);
							}
						}

						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

						PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "Hangup");
						PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
	                }
			    }
		    }
		    else if(PlayerData[playerid][pCallState] == 1)
		    {
				format(str, sizeof(str), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d AND `contactAddee` = %d", PlayerData[playerid][pPnumber], PlayerData[playerid][pCallNumb]);
				mysql_query(dbCon, str);

				if(cache_num_rows())
				{
					cache_get_value_name(0, "contactName", name);
					format(str, sizeof(str), "~n~Dialing %s~n~(%d)", name, PlayerData[playerid][pCallNumb]);

				}
				else format(str, sizeof(str), "~n~Dialing~n~%s", FormatCallNumber(playerid));

				PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

				PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "Hangup");
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
		    }
		    else if(PlayerData[playerid][pCallState])
		    {
			    switch(PlayerData[playerid][pCallState])
			    {
					case 2: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Call failed");
					case 3: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~No signal");
					case 4: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Number is out of reach");
				}
				PlayerData[playerid][pCallState] = 0;
				if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);

				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);
				PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "Close");
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
		    }
		    else
		    {
				ph_canupdate{ playerid } = true;

				new date[6];

				getdate(date[2], date[1], date[0]);
				gettime(date[3], date[4], date[5]);

				format(str, sizeof(str), "~n~%02d:%02d~n~%s %d%s", date[3], date[4], MonthDay[date[1]], date[0], returnOrdinal(date[0]));
				PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], str);
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

				PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][6], -1);
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][6]);

				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][13]); // Signal

				PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][14], "Menu");
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][14]);
				PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "voltar");
				PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
		    }
		}
		case PH_SMSING:
		{
		    switch(PlayerData[playerid][pSendSMS])
		    {
				case 1: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Sending ...");
				case 2: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Message delivered!");
				case 3: PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~Message has been denied!");
			}
			PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);
			PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][15], "Close");
			PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][15]);
		}
	}
	switch(ph_section[playerid])
	{
	    case PH_MAIN:
		{
			switch(ph_subsection[playerid])
			{
			    case PH_MENU, PH_M_PHONEBOOK, PH_M_PHONEBOOK_LISTCON, PH_M_CALLS_LISTCON, PH_M_SMS_LISTCON, PH_M_SMS_INBOX, PH_M_SMS_ARCHIVE, PH_M_CALLS, PH_M_SMS, PH_M_SETTINGS, PH_M_SETTINGS_RING:
			    {
					for(new i = 17; i <= 16 + ph_select_max[playerid]; i++)
					{
						if(ph_select[playerid] == i - 16)
						{
							PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][i], -1061109505);
							PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][i], 255);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][i]);
						}
						else
						{
							PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][i], 255);
							PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][i], -1061109505);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][i]);
						}
					}
			    }
			}
		}
		case PH_TEXTDISPLAY:
		{
			switch(ph_subsection[playerid])
			{
			    case PH_T_NAMENUBMENU:
			    {
					for(new i = 17; i <= 16 + ph_select_max[playerid]; i++)
					{
						if(ph_select[playerid] == i - 16)
						{
							PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][i], -1061109505);
							PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][i], 255);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][i]);
						}
						else
						{
							PlayerTextDrawColor(playerid, TDPlayer_Phone[playerid][i], 255);
							PlayerTextDrawBoxColor(playerid, TDPlayer_Phone[playerid][i], -1061109505);
							PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][i]);
						}
					}
			    }
			}
		}
	}
	return 1;
}

stock FormatCallNumber(playerid)
{
	new str[64];

    format(str, sizeof(str), "%d", PlayerData[playerid][pCallNumb]);

    if(PlayerData[playerid][pCallNumb] != 0)
	{
		switch(PlayerData[playerid][pCallType])
		{
			case 1: format(str, sizeof(str), "555-%d", PlayerData[playerid][pCallNumb]);
		}
	}
	return str;
}
// ================== [ PHONE SYSTEM ] ============================*/

forward PlayerPlayMusic(playerid);
public PlayerPlayMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		SetTimerEx("StopMusic", 5000, false, "d", playerid);
		PlayerPlaySound(playerid, 1068, 0.0, 0.0, 0.0);
	}
}

forward StopMusic(playerid);
public StopMusic(playerid)
{
	if(IsPlayerConnected(playerid))
	{
		PlayerPlaySound(playerid, 1069, 0.0, 0.0, 0.0);
	}
}


forward SelfieTimer(playerid);
public SelfieTimer(playerid)
{
	new Keys, ud, lr;

	if(ph_menuid[playerid] == 0 && ph_sub_menuid[playerid] == 2)
	{
		GetPlayerKeys(playerid,Keys,ud,lr);

		if(lr == KEY_LEFT) {

			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
			Degree[playerid] += Speed;
			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+ SelAngle[playerid]);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
		else if(lr == KEY_RIGHT) {

			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;
			Degree[playerid] -= Speed;
			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+ SelAngle[playerid]);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}

		if(ud == KEY_UP) {

			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;

			if(SelAngle[playerid] < 1.0)
				SelAngle[playerid] += 0.1;

			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+ SelAngle[playerid]);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}
		else if(ud == KEY_DOWN) {

			GetPlayerPos(playerid,lX[playerid],lY[playerid],lZ[playerid]);
			static Float: n1X, Float: n1Y;

			if(SelAngle[playerid] > 0.8)
				SelAngle[playerid] -= 0.1;

			n1X = lX[playerid] + Radius * floatcos(Degree[playerid], degrees);
			n1Y = lY[playerid] + Radius * floatsin(Degree[playerid], degrees);
			SetPlayerCameraPos(playerid, n1X, n1Y, lZ[playerid] + Height);
			SetPlayerCameraLookAt(playerid, lX[playerid], lY[playerid], lZ[playerid]+ SelAngle[playerid]);
			SetPlayerFacingAngle(playerid, Degree[playerid] - 90.0);
		}

		if(Keys == KEY_SECONDARY_ATTACK)
		{
			ph_menuid[playerid]=0;
			ph_sub_menuid[playerid]=0;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
			ClearAnimations(playerid);
		}
	}
	else {
		if(selfie_timer[playerid]) KillTimer(selfie_timer[playerid]);
		selfie_timer[playerid]=0;
	}
	// ================== [ PHONE SYSTEM ] ============================
}

forward VehicleListener();
public VehicleListener()
{
	new str[128];

	foreach (new i : sv_vehicles)// if(IsValidVehicle(i))
	{
		if(IsEngineVehicle(i) && GetEngineStatus(i) && CoreVehicles[i][vehFuel]) {
			CoreVehicles[i][vehFuel] -= GetVehicleConsumptionPerSecond(i);
			if (CoreVehicles[i][vehFuel] < 0.0) {
				CoreVehicles[i][vehFuel] = 0.0;
			}
		}
		if(CoreVehicles[i][vbreaktime])
		{
		    CoreVehicles[i][vbreaktime]--;
		    if(CoreVehicles[i][vbreakdelay]) CoreVehicles[i][vbreakdelay]--;
			if(CoreVehicles[i][vbreaktime] <= 0)
			{
			    CoreVehicles[i][vbreakin] = 0;
			    CoreVehicles[i][vbreaktime] = 0;

				new
					engine,
					lights,
					alarm,
					doors,
					bonnet,
					boot,
					objective;

				GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(i, engine, lights, 0, doors, bonnet, boot, 0);
			}
		}
		if(CoreVehicles[i][vehicleIsCargoLoad])
		{
		    new industryid = CoreVehicles[i][vehicleCargoStorage];
			if (IsVehicleRangeOfPoint(i, 20.0, StorageData[industryid][in_posx], StorageData[industryid][in_posy], StorageData[industryid][in_posz]))
		    {
		    	new playerid = CoreVehicles[i][vehicleCargoPlayer];
          		if(IsPlayerConnected(playerid)) {
				    CoreVehicles[i][vehicleCargoTime]--;
				    if(CoreVehicles[i][vehicleCargoTime] < 1)
				    {
				        if(!CoreVehicles[i][vehicleCargoAction]) // Buy
				        {

				            CoreVehicles[i][vehicleCrate][StorageData[industryid][in_item]] += CoreVehicles[i][vehicleIsCargoLoad];

						    if(playerid != INVALID_PLAYER_ID) {
								SendClientMessage(playerid, COLOR_WHITE, "caminhão de carregamento");
						   	}
					   	}
					   	else
					   	{
					   	    PlayerData[playerid][pCash]+= StorageData[industryid][in_price] * CoreVehicles[i][vehicleIsCargoLoad];
					   	    CoreVehicles[i][vehicleCrate][StorageData[industryid][in_item]] = 0;

						    if(playerid != INVALID_PLAYER_ID) {
								SendClientMessage(playerid, COLOR_WHITE, "Transfêrencia de carga concluída");
						   	}
					   	}

					   	CoreVehicles[i][vehicleCargoAction] = 0;
					   	CoreVehicles[i][vehicleIsCargoLoad] = 0;
					   	CoreVehicles[i][vehicleCargoStorage] = 0;
					   	CoreVehicles[i][vehicleCargoPlayer] = 0;
	                    CoreVehicles[i][vehicleCargoTime] = 0;
				    }
				    else
				    {
					    format(str, 128, "~r~Carga está sendo descarregado,~n~~b~Por favor, espere...~n~(%d Segundos restantes)", CoreVehicles[i][vehicleCargoTime]);
						GameTextForPlayer(playerid, str, 1000, 3);
				    }
			    }
			    else
			    {
					CoreVehicles[i][vehicleCargoAction] = 0;
					CoreVehicles[i][vehicleIsCargoLoad] = 0;
					CoreVehicles[i][vehicleCargoStorage] = 0;
					CoreVehicles[i][vehicleCargoPlayer] = 0;
		           	CoreVehicles[i][vehicleCargoTime] = 0;
			    }
		    }
		}
		/*CoreVehicles[vehicleid][vehicleIsCargoLoad] = amount;
		CoreVehicles[vehicleid][vehicleCargoTime] = amount * 2;
		CoreVehicles[vehicleid][vehicleCargoStorage] = id;*/

		if(CoreVehicles[i][startup_delay] > 0 && CoreVehicles[i][startup_delay_sender] != INVALID_PLAYER_ID)
		{
			CoreVehicles[i][startup_delay] -= 5;
			if(CoreVehicles[i][startup_delay] <= 0 && GetVehicleDriver(i) == CoreVehicles[i][startup_delay_sender])
			{
				if(random(9) < CoreVehicles[i][startup_delay_random]) {
					GameTextForPlayer(CoreVehicles[i][startup_delay_sender], "~r~Residuos do motor", 2000, 4);
				}
				else
				{
					SetEngineStatus(i, true);
					GameTextForPlayer(CoreVehicles[i][startup_delay_sender], "~g~Motor ligado", 2000, 4);
				}
				CoreVehicles[i][startup_delay_sender] = INVALID_PLAYER_ID;
			}
			else if(CoreVehicles[i][startup_delay] <= 0) { CoreVehicles[i][startup_delay_sender] = INVALID_PLAYER_ID; }

		}

		if(VehicleLabel[i][vLabelTime])
		{
		    VehicleLabel[i][vLabelCount]++;

			switch(VehicleLabel[i][vLabelType])
			{
			    case VLT_TYPE_TOWING: {
				    new labelstring[32], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

					for(new x = 10; x > 0; --x)
					{

					    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
					    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
     				}

					format(str, sizeof(str), "(( %s ))\nArrastando veículos", labelstring);
		            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);
		            //printf(str);

				    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {

						new
							engine,
							lights,
							alarm,
							doors,
							bonnet,
							boot,
							objective;

						GetVehicleParamsEx(i, engine, lights, alarm, doors, bonnet, boot, objective);
						SetVehicleParamsEx(i, engine, lights, alarm, 1, bonnet, boot, objective);
						/*if(!IsABicycle(i)) SetVehicleParamsEx(i, engine, lights, alarm, 1, bonnet, boot, objective);
			            else SetVehicleParamsEx(i, 1, lights, alarm, 0, bonnet, boot, objective);*/

						SaveVehicleDamage(i);
						SetVehicleToRespawn(i);

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;

				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					}

				}
				case VLT_TYPE_REFILL: {
				    new bool:dealership, id = -1;
					foreach(new x : sv_business) if(BizInfo[x][bType] == 1)
					{
						if(IsVehicleRangeOfPoint(i, 20, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
						    id = x;
							dealership = true;
							break;
						}
					}

					if (dealership)
					{
					    new labelstring[32], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{

						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}

						format(str, sizeof(str), "(( %s ))\nReabastecimento", labelstring);
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);
			            //printf(str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {

							new targetid = CoreVehicles[i][vOwnerID];
						    new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(i));
						    new Float:fueladd = maxfuel - CoreVehicles[i][vehFuel];
							new uprice = floatround(fueladd*float(BizInfo[id][bItems][0]), floatround_ceil);

							SendClientMessageEx(targetid, COLOR_YELLOW3, "Esta operação requer %s", FormatNumber(uprice));

							if(PlayerData[targetid][pCash] >= uprice) {
								PlayerData[targetid][pCash] -= uprice;
		                        CoreVehicles[i][vehFuel]=GetVehicleDataFuel(GetVehicleModel(i));

								format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[targetid][pCash], PlayerData[targetid][pID]);
								mysql_query(dbCon, szQuery);
							}

					        VehicleLabel[i][vLabelCount] = 0;
					        VehicleLabel[i][vLabelTime] = 0;
					        VehicleLabel[i][vLabelType] = 0;

					        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAOUTOFRANG, 5);
					}
				}
			    case VLT_TYPE_ARMOUR: {

				    new bool:dealership;
					foreach(new x : sv_business) if(BizInfo[x][bType] == 4)
					{
						if(IsVehicleRangeOfPoint(i, 10, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
							dealership = true;
							break;
						}
					}

					if (dealership)
					{
					    new labelstring[32], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{

						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}

						format(str, sizeof(str), "(( %s ))\nAtualizando armadura", labelstring);
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);
			            //printf(str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {
							new targetid = CoreVehicles[i][vOwnerID];
							new uplevel = CoreVehicles[i][vUpgradeID];
		                   	new vid = PlayerData[targetid][pPCarkey];
							new uprice = uplevel*GetVehicleDataArmourCost(CarData[vid][carModel]);

							SendClientMessageEx(targetid, COLOR_YELLOW3, "Esta operação requer %s", FormatNumber(uprice));

							if(PlayerData[targetid][pCash] >= uprice) {
								PlayerData[targetid][pCash] -= uprice;

		                        CarData[vid][carArmour]+=float(uplevel);

								SetVehicleHealth(i, CoreVehicles[i][vehCrash] + float(uplevel));

		                        format(str, sizeof(str), "Armadura adicionada: %d~n~A armadura resultaria em um veículo mais durável~n~e ajuda na proteção dos ocupantes", uplevel);
		                        ShowPlayerFooter(targetid, str, 10000);

		                        Car_SaveID(vid);

								format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[targetid][pCash], PlayerData[targetid][pID]);
								mysql_query(dbCon, szQuery);
							}

					        VehicleLabel[i][vLabelCount] = 0;
					        VehicleLabel[i][vLabelTime] = 0;
					        VehicleLabel[i][vLabelType] = 0;

					        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
				case VLT_TYPE_PERMITFACTION, VLT_TYPE_LOCK, VLT_TYPE_OPERAFAILED, VLT_TYPE_BREAKIN, VLT_TYPE_OPERAOUTOFRANG:
				{
				    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime])
				    {
				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;

		        		DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
				    }
				}
		        case VLT_TYPE_UPGRADELOCK, VLT_TYPE_UPGRADEALARM, VLT_TYPE_UPGRADEIMMOB, VLT_TYPE_UPGRADEINSURANCE, VLT_TYPE_UPGRADEBATTERY, VLT_TYPE_UPGRADEENGINE: {

					new bool:dealership;

					foreach(new x : sv_business) if(BizInfo[x][bType] == 4)
					{
						if(IsVehicleRangeOfPoint(i, 10, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
							dealership = true;
							break;
						}
					}

					if (dealership)
					{
						new labelstring[32], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{
						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}
	     				switch(VehicleLabel[i][vLabelType])
	     				{
							case VLT_TYPE_UPGRADELOCK: format(str, sizeof(str), "(( %s ))\nUpgrade de tranca", labelstring);
							case VLT_TYPE_UPGRADEIMMOB: format(str, sizeof(str), "(( %s ))\nUpgrade de imobilizador.", labelstring);
							case VLT_TYPE_UPGRADEALARM: format(str, sizeof(str), "(( %s ))\nUpgrade de alarme", labelstring);
							case VLT_TYPE_UPGRADEINSURANCE: format(str, sizeof(str), "(( %s ))\nSeguro", labelstring);
							case VLT_TYPE_UPGRADEBATTERY: format(str, sizeof(str), "(( %s ))\nSubstituição da bateria", labelstring);
							case VLT_TYPE_UPGRADEENGINE: format(str, sizeof(str), "(( %s ))\nSubstituição de motor", labelstring);
						}
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {

							new targetid = CoreVehicles[i][vOwnerID];
							new uplevel = CoreVehicles[i][vUpgradeID];
                            new vid = PlayerData[targetid][pPCarkey];

                            if(vid != 9999) {
			     				switch(VehicleLabel[i][vLabelType])
			     				{
									case VLT_TYPE_UPGRADELOCK:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / VehicleUpgradeLock[uplevel-1][u_rate]) + VehicleUpgradeLock[uplevel-1][u_price];
                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "está operação requer %s", FormatNumber(uprice));

										if(PlayerData[targetid][pCash] >= uprice) {
					                     	PlayerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carLock] = uplevel;
					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~g~Tranca Level 1~n~+~w~proteção de tempo de espera de 500 segundos contra metodo de invaSão.~n~~g~+~w~Armadura mais forte - melhor defesa contra violação de ataque físico. -Punho e faca.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~g~Tranca Level 2~n~+~w~proteção de tempo de espera de 500 segundos contra metodo de invaSão.~n~~g~+~w~Armadura especial - melhor defesa x2 contra violação de ataque corpo a corpo.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~g~Tranca Level 3~n~+~w~proteção de tempo de espera de 750 segundos contra metodo de invaSão.~n~~g~+~w~Armadura especial - melhor defesa x2 contra violação de ataque corpo a corpo.~n~~g~+~w~A proteção especial da armadura bloqueia a violação do ataque físico. -Punho", 10000);
					                     	    case 4: ShowPlayerFooter(targetid, "~g~Tranca Level 4~n~+~w~proteção do tempo de espera de 1.250 segundos contra o metodo de invaSão.~n~~g~+~w~proteção de armadura especial bloqueia todos os tipos de violação de ataque físico.", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEIMMOB:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / VehicleUpgradeImmob[uplevel-1][u_rate]) + VehicleUpgradeImmob[uplevel-1][u_price];
                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "está operação requer %s", FormatNumber(uprice));

										if(PlayerData[targetid][pCash] >= uprice) {
					                     	PlayerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carImmob] = uplevel;

					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~y~Imobilizador Level 1~n~+~w~O imobilizador do motor ajudará a prevenir o seu ~n~veículo pare de funcionar sem uma chave autorizada.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~y~Imobilizador Level 2~n~+~w~O imobilizador do motor ajudará a prevenir o seu ~n~veículo pare de funcionar sem uma chave autorizada.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~y~Imobilizador Level 3~n~+~w~O imobilizador do motor ajudará a prevenir o seu ~n~veículo pare de funcionar sem uma chave autorizada.", 10000);
					                     	    case 4: ShowPlayerFooter(targetid, "~y~Imobilizador Level 4~n~+~w~O imobilizador do motor ajudará a prevenir o seu ~n~veículo pare de funcionar sem uma chave autorizada.", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEALARM:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / VehicleUpgradeAlarm[uplevel-1][u_rate]) + VehicleUpgradeAlarm[uplevel-1][u_price];

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "Esta operação requer %s", FormatNumber(uprice));

										if(PlayerData[targetid][pCash] >= uprice) {
					                     	PlayerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carAlarm] = uplevel;

					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~r~Alarme Level 1~n~+~w~Alarme de veículo alto.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~r~Alarme Level 2~n~+~w~Alarme de veículo alto.~n~~r~+~w~O veículo alerta o proprietário de uma possível violação.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~r~Alarme Level 3~n~+~w~Alarme de veículo alto.~n~~r~+~w~O veículo alerta o proprietário de uma possível violação.~n~~r~+~w~O veículo alerta o departamento de polícia local sobre uma possível violação.", 10000);
					                     	    case 4: ShowPlayerFooter(targetid, "~r~Alarme Level 4~n~+~w~Alarme de veículo alto.~n~~r~+~w~O veículo alerta o proprietário de uma possível violação.~n~~r~+~w~O veículo alerta o departamento de polícia local sobre uma possível violação.~n~~r~+~w~O sinal do veículo aparecerá no radar da polícia.", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEINSURANCE:
									{
										new uprice = (IsABike(i)) ? (1000) : (2500) * uplevel;

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "Esta operação requer %s", FormatNumber(uprice));

										if(PlayerData[targetid][pCash] >= uprice) {
					                     	PlayerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carInsurance] = uplevel;

					                     	switch(uplevel)
					                     	{
					                     	    case 1: ShowPlayerFooter(targetid, "~b~Seguro Level 1~n~+~w~O veículo sempre reaparecerá com sua São de máxima.", 10000);
					                     	    case 2: ShowPlayerFooter(targetid, "~b~Seguro Level 2~n~+~w~O veículo sempre reaparecerá com sua São de máxima.~n~~b~+~w~proteção contra danos em veículos. O veículo vai respawnar como novo.", 10000);
					                     	    case 3: ShowPlayerFooter(targetid, "~b~Seguro Level 3~n~+~w~O veículo sempre reaparecerá com sua São de máxima.~n~~b~+~w~proteção contra danos em veículos. O veículo vai respawnar como novo.~n~~b~+~w~Cobertura de modificação de veículos. não cobrimos seu layout extravagante e mêsicas XM!", 10000);
					                     	}
									   	}
									}
									case VLT_TYPE_UPGRADEBATTERY:
									{
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / 0.48) + floatround(VehicleData[CarData[vid][carModel] - 400][c_battery] * 13.0);

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "Esta operação requer %s", FormatNumber(uprice));

										if(PlayerData[targetid][pCash] >= uprice) {
					                     	PlayerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carBatteryL] = VehicleData[CarData[vid][carModel] - 400][c_battery];

					                     	ShowPlayerFooter(targetid, "~w~BATERIA SUBSTITUIDA!", 10000);
									   	}
									}
									case VLT_TYPE_UPGRADEENGINE: {
										new uprice = floatround(VehicleData[CarData[vid][carModel] - 400][c_price] / 0.72) + floatround(VehicleData[CarData[vid][carModel] - 400][c_engine] * 13.0);

                                        SendClientMessageEx(targetid, COLOR_YELLOW3, "está operação requer %s", FormatNumber(uprice));

										if(PlayerData[targetid][pCash] >= uprice) {
					                     	PlayerData[targetid][pCash] -= uprice;
					                     	CarData[vid][carEngineL] = VehicleData[CarData[vid][carModel] - 400][c_engine];

					                     	ShowPlayerFooter(targetid, "~w~MOTOR SUBSTITUIDO!", 10000);
									   	}
									}
								}
								Car_SaveID(vid);

								format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[targetid][pCash], PlayerData[targetid][pID]);
								mysql_query(dbCon, szQuery);
							}
							CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;
							CoreVehicles[i][vUpgradeID] = 0;

							VehicleLabel[i][vLabelCount] = 0;
							VehicleLabel[i][vLabelTime] = 0;
							VehicleLabel[i][vLabelType] = 0;

							DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

							/*if(PlayerData[targetid][pCash] >= 100)

								new vid = PlayerData[targetid][pPCarkey];
								if(vid != 9999)
								{
									new plate[8];
									format(plate, 8, "%s", RandomVehiclePlate());
									mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", plate);
									mysql_tquery(dbCon, str, "RegisterPlates", "iis", targetid, vid, plate);


		                            CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;

							        VehicleLabel[i][vLabelCount] = 0;
							        VehicleLabel[i][vLabelTime] = 0;
							        VehicleLabel[i][vLabelType] = 0;

							        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
						        }
						   	}
						   	else SendClientMessage(targetid, COLOR_YELLOW3, "This reviver requires R$100");*/
						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
				case VLT_TYPE_REGISTER: {

				    new bool:dealership;
					foreach(new x : sv_business) if(BizInfo[x][bType] == 4)
					{
						if(IsVehicleRangeOfPoint(i, 10, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]))
						{
							dealership = true;
							break;
						}
					}

					if (dealership)
					{
						new labelstring[32], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{
						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}

						format(str, sizeof(str), "(( %s ))\nRegistro de veículo", labelstring);
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {
							// t????Â¹
							new targetid = CoreVehicles[i][vOwnerID];

							if(PlayerData[targetid][pCash] >= 1500)
							{
	                            SendClientMessage(targetid, COLOR_YELLOW3, "Esta operação requer R$1.500,00");


								new vid = PlayerData[targetid][pPCarkey];
								if(vid != 9999)
								{
									new plate[9];
									format(plate, 9, "%s-%s", placaiMacLTR(), placaiMacNUM());
									mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", plate);
									mysql_tquery(dbCon, str, "RegisterPlates", "iis", targetid, vid, plate);
                                    Car_SaveID(vid);

                                    PlayerData[targetid][pCash] -= 250;

									format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[targetid][pCash], PlayerData[targetid][pID]);
									mysql_query(dbCon, szQuery);

		                            CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;

							        VehicleLabel[i][vLabelCount] = 0;
							        VehicleLabel[i][vLabelTime] = 0;
							        VehicleLabel[i][vLabelType] = 0;

							        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
						        }
						   	}
						   	else SendClientMessage(targetid, COLOR_YELLOW3, "está operação requer R$1.500,00");
						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
				case VLT_TYPE_UNREGISTER: {

					/*new id = -1;
				    for (new x = 0; x != MAX_BIZZ; x ++) if(BizInfo[x][bType] == 4)
					{
						new
							Float: fDistance = GetVehicleDistanceFromPoint(i, BizInfo[x][bEntranceX], BizInfo[x][bEntranceY], BizInfo[x][bEntranceZ]);

						if(fDistance < 10) {
							id = x;
							break;
						}
					}

					if (id != -1)
					{*/
					if(IsVehicleRangeOfPoint(i, 10, 2520.3499,-1486.5232,23.9993)) // Black Market
					{
					    new labelstring[32], first = VehicleLabel[i][vLabelCount], second = VehicleLabel[i][vLabelTime], Float:percent = (float(second-first)/float(second))*float(10);

						for(new x = 10; x > 0; --x)
						{
						    if(x-floatround(percent) > 0) format(labelstring, sizeof(labelstring), "%s|", labelstring);
						    else format(labelstring, sizeof(labelstring), "%s-", labelstring);
	     				}

						format(str, sizeof(str), "(( %s ))\nRemovendo registro", labelstring);
			            UpdateDynamic3DTextLabelText(VehicleLabel[i][vLabel], COLOR_GREEN2, str);

					    if(VehicleLabel[i][vLabelCount] >= VehicleLabel[i][vLabelTime]) {
							// Remove successfully

							new targetid = CoreVehicles[i][vOwnerID];
							new vid = PlayerData[targetid][pPCarkey];
							if(vid != 9999)
							{
								new Float: vPos[4]; // x, y, z + z angle

							    GetVehiclePos(i, vPos[0], vPos[1], vPos[2]);
							    GetVehicleZAngle(i, vPos[3]);

								format(CarData[vid][carPlate], 32, "_");
						        SetVehicleNumberPlate(i, CarData[vid][carPlate]);
						        SaveVehicleDamage(i);
						        SetVehicleToRespawn(i);
						        SetVehicleDamage(i);

								SetVehiclePos(i, vPos[0], vPos[1], vPos[2]);
								SetVehicleZAngle(i, vPos[3]);

						        if(GetVehicleDriver(i) != INVALID_PLAYER_ID) PutPlayerInVehicle(targetid, i, 0);
						        Car_SaveID(vid);

								ShowPlayerFooter(targetid, "~w~Sua placa foi ~y~removida~n~Tenha em mente que é ilegal, não deixe os policiais perceberem.");

	                            CoreVehicles[i][vOwnerID] = INVALID_PLAYER_ID;

						        VehicleLabel[i][vLabelCount] = 0;
						        VehicleLabel[i][vLabelTime] = 0;
						        VehicleLabel[i][vLabelType] = 0;

						        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);
					        }
						}
					}
					else {

				        VehicleLabel[i][vLabelCount] = 0;
				        VehicleLabel[i][vLabelTime] = 0;
				        VehicleLabel[i][vLabelType] = 0;
				        DestroyDynamic3DTextLabel(VehicleLabel[i][vLabel]);

					    SetVehicleLabel(i, VLT_TYPE_OPERAFAILED, 5);
					}
				}
			}
			//printf("i %d %d/%d", i, VehicleLabel[i][vLabelCount], VehicleLabel[i][vLabelTime]);
		}

		GetVehicleHealth(i, CoreVehicles[i][vehCrash]);

		if (CoreVehicles[i][vehCrash] < 250.0) {
			SetVehicleHealth(i, 250.0);
		}

		if(IsATaxi(i))
		{
			new driver=INVALID_PLAYER_ID;
			if((driver = GetVehicleDriver(i)) != INVALID_PLAYER_ID)
			{
				if(TaxiDuty{driver} && TaxiStart{driver} && CountVehiclePlayers(i) > 0)
				{
					format(str, sizeof(str), "~y~TAXIMETRO: R$%d", TaxiMade[driver]);
					GameTextForPlayer(driver, str, 1000, 6);

					foreach(new p : Player)
					{
						if(IsPlayerInAnyVehicle(p) && GetPlayerState(p) != PLAYER_STATE_DRIVER && GetPlayerVehicleID(p) == GetPlayerVehicleID(driver))
						{
							format(str, sizeof(str), "~y~TAXIMETRO: R$%d", TaxiMoney[p]);
							GameTextForPlayer(p, str, 1000, 6);
							if(TaxiMoney[p] + TaxiFare{driver} < PlayerData[p][pCash]) {
								TaxiMoney[p] += TaxiFare{driver};
								TaxiMade[driver] += TaxiFare{driver};
							}
							else {
								SendClientMessageEx(driver, COLOR_YELLOW, "%s não há dinheiro suficiente para pagar a passagem.", ReturnName(p, 0));
								SendClientMessage(p, COLOR_YELLOW, "Você não tem dinheiro suficiente para pagar um táxi.");
								RemovePlayerFromVehicle(p);
							}
						}
					}
				}
			}
		}
	}
	foreach(new i : sv_playercar) {

		//new Float:vhealth;
		new vid = CarData[i][carVehicle];

		if(IsEngineVehicle(vid) && GetEngineStatus(vid))
		{
			CarData[i][carMileage] += GetPlayerMileage(vid);
			CarData[i][carEngineL] -= 0.000016;
			CarData[i][carBatteryL] -= 0.000016;

			GetVehicleDamageStatus(vid,CoreVehicles[vid][vehDamage][0],CoreVehicles[vid][vehDamage][1],CoreVehicles[vid][vehDamage][2],CoreVehicles[vid][vehDamage][3]);
		}
	}
}

stock CountVehiclePlayers(vehicle)
{
	new count;
	foreach(new i : Player) if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle && GetPlayerState(i) != PLAYER_STATE_DRIVER) count++;
	return count;
}

forward OtherTimer();
public OtherTimer()
{
    new str[128];

	/*if(adTick)
		adTick--;*/

    TollUpdate();

    for(new i=0;i!=MAX_AD_QUEUE;i++) {
		if(AdvertData[i][ad_id]) {
			AdvertData[i][ad_time]--;
			if(AdvertData[i][ad_time] <= 0) {

			    if(AdvertData[i][ad_type]) {
					if(strlen(AdvertData[i][ad_text]) > 80)
					{
						format(str, sizeof(str), "[Publicidade de Empresa] %.80s ...", AdvertData[i][ad_text]);
						SendClientMessageToAll(COLOR_GREEN, str);
						format(str, sizeof(str), "[Publicidade de Empresa] ... %s", AdvertData[i][ad_text][80]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
					else
					{
						format(str, sizeof(str), "[Publicidade de Empresa] %s", AdvertData[i][ad_text]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
			    }
			    else {
					if(strlen(AdvertData[i][ad_text]) > 80)
					{
						format(szString, sizeof(str), "[Publicidade] %.80s ...", AdvertData[i][ad_text]);
						SendClientMessageToAll(COLOR_GREEN, str);
						format(szString, sizeof(str), "[Publicidade] ... %s [Cel: %d]", AdvertData[i][ad_text][80], PlayerData[AdvertData[i][ad_owner]][pPnumber]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
					else
					{
						format(str, sizeof(str), "[Publicidade] %s [Cel: %d]", AdvertData[i][ad_text], PlayerData[AdvertData[i][ad_owner]][pPnumber]);
						SendClientMessageToAll(COLOR_GREEN, str);
					}
			    }
			    AdvertData[i][ad_id]=0;
			    AdvertData[i][ad_time]=0;
			    AdvertData[i][ad_owner]=INVALID_PLAYER_ID;
			}
		}
	}
	foreach (new i : Player)
	{
	    new weaponid = GetPlayerWeapon(i);
	    if(CurrentHoldingWeapon[i] != weaponid) {

			cl_DressHoldWeapon(i, weaponid);

	        CurrentHoldingWeapon[i] = weaponid;
	    }

		//if(ph_opening{ i }) SetPlayerArmedWeapon(i,0);
		/*new level = PlayerData[i][pLevel];
		if(level >= 0 && level <= 2) { PlayerData[i][pPayCheck] += 1; }
		else if(level >= 3 && level <= 4) { PlayerData[i][pPayCheck] += 1; }
		else if(level >= 5 && level <= 6) { PlayerData[i][pPayCheck] += 2; }
		else if(level >= 7 && level <= 8) { PlayerData[i][pPayCheck] += 2; }
		else if(level >= 9 && level <= 10) { PlayerData[i][pPayCheck] += 3; }
		else if(level >= 11 && level <= 12) { PlayerData[i][pPayCheck] += 3; }
		else if(level >= 13 && level <= 14) { PlayerData[i][pPayCheck] += 3; }
		else if(level >= 15 && level <= 16) { PlayerData[i][pPayCheck] += 4; }
		else if(level >= 17 && level <= 18) { PlayerData[i][pPayCheck] += 4; }
		else if(level >= 19 && level <= 20) { PlayerData[i][pPayCheck] += 4; }
		else if(level >= 21) { PlayerData[i][pPayCheck] += 5; }*/
        // ================== [ NEW PHONE SYSTEM ] ============================
	    if(ph_opening{ i } && !ph_menuid[i] && !ph_sub_menuid[i] && !Dialog_Opened(i))
	    	RenderPlayerPhone(i, ph_menuid[i], ph_sub_menuid[i]);
	    // ================== [ NEW PHONE SYSTEM ] ============================

		if(adTick[i])
		    adTick[i]--;

		if(AFKTimer[i] > 0)
		{
		    AFKTimer[i]--;
		    if(AFKTimer[i] <= 0)
		    {
		        AFKTimer[i] = 0;
		        AFKCount[i]=1;
                IsAFK{i} = true;
		    }
		    else IsAFK{i} = false;
		}
		else {
			AFKCount[i]++;
		}

		if(fish_timer[i]) {
		    fish_timer[i]--;
		}


    	if(SafeTime[i] > 0) SafeTime[i]--;
		if(SafeTime[i] == 1 && BitFlag_Get(g_PlayerFlags[i], IS_PLAYER_ACCOUNT) && !BitFlag_Get(g_PlayerFlags[i], IS_PLAYER_LOGGED)) SendClientMessage(i, COLOR_LIGHTRED, "Você atingiu os 60 segundos para efetuar login."), KickEx(i);
		if (PlayerData[i][pInjured] == 1 && GetPlayerAnimationIndex(i) != 1701 && GetPlayerState(i) == PLAYER_STATE_ONFOOT && !PlayerData[i][pJailed]) ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.0, 0, 0, 0, 1, 0, 1); //???????Ã¶?Ã§????w?????
		if(LegDelay[i] > 0) LegDelay[i]--;
		if(h_times[i] > 0)
		{
			format(str, sizeof(str), "~y~/(desem)desembaralhar ~w~<palavra desembaralhada> ~r~para decifrar a palavra.~n~'~w~%s~r~'.~n~Você tem ~w~%d ~r~segundos restantes para terminar.", h_word[i], h_times[i]);
            ShowPlayerFooter(i, str, 8000);

            h_times[i]--;
            if(h_times[i] <= 0)
            {
                // TAZER
				new
				    Float:x,
				    Float:y,
				    Float:z;

				GetPlayerPos(i, x, y, z);
				SetPlayerPos(i, x, y, z+2);
				ApplyAnimation(i, "PED", "KO_skid_front", 4.1, 0, 0, 1, 1, 0, 1);
				BitFlag_On(g_PlayerFlags[i], IS_PLAYER_TAZER);
				SetTimerEx("SetUnTazed", 10000, false, "i", i);
                GameTextForPlayer(i, "Você está SOB EFEITO DA TASER", 5000, 5);
                ShowPlayerFooter(i, "~r~Você falhou muitas palavras.");

                h_vid[i]=-1; h_times[i]=0; h_wid[i]=-1; h_failed[i]=0;
                h_word[i][0]='\0';
            }
		}
  		// ================== [ PHONE SYSTEM ] ============================

		/*if(tToAccept[i] != OFFER_TYPE_NONE) {
		    switch(tToAccept[i]) {
		        case OFFER_TYPE_VSELL: {
					format(str, sizeof(str), "%s has offered to sell you their ~y~%s ~n~~w~for ~g~%s~n~~p~press ~g~Y~p~ to accept or ~r~N ~p~to deny.", ReturnName(pToAccept[i], 0), g_arrVehicleNames[CarData[vToAccept[i]][carModel] - 400], FormatNumber(prToAccept[i]));
		            ShowPlayerFooter(i, str, 1000);
		        }
		    }
		}*/


		if(PlayerData[i][pCellTime] > 0 && PlayerData[i][pCallLine] != INVALID_PLAYER_ID)
		{
		    new calling = PlayerData[i][pCallLine];

		    if (GetPhoneSignal(i) < 1)
		    {
			 	SendClientMessage(calling,  COLOR_GRAD2, "Desconexão...");
				CancelCall(i);
		    }

  		    if (GetPhoneSignal(calling) < 1)
		    {
			 	SendClientMessage(i,  COLOR_GRAD2, "Desconexão...");
				CancelCall(calling);
		    }

			if (PlayerData[i][pCellTime] == cchargetime)
			{
				PlayerData[i][pCellTime] = 1;
				if(PlayerData[calling][pCallLine] == i && !PlayerData[i][pIncomingCall]) {

				    if(PlayerData[i][pCash]-(PlayerData[i][pCallCost]+callcost) < 0)
				    {
			  			format(str, sizeof(str), "~w~O custo da chamada foi de~n~~r~R$%d",PlayerData[i][pCallCost]);
						PlayerData[i][pCash] -= PlayerData[i][pCallCost];

						GameTextForPlayer(i, str, 5000, 1);
						PlayerData[i][pCallCost] = 0;

			      		SendClientMessage(calling,  COLOR_GRAD2, "Desconexão...");
					    CancelCall(i);
				    }
				    else PlayerData[i][pCallCost] = PlayerData[i][pCallCost]+callcost;
				}
			}
			PlayerData[i][pCellTime]++;
			if (PlayerData[calling][pIncomingCall] && PlayerData[i][pCellTime] % 10 == 1 && !ph_silentmode[calling])
			{
				PlayPlayerCallTone(calling);

				if(PlayerData[i][pCellTime] == 10)
					SendNearbyMessage(calling, 30.0, COLOR_PURPLE, "* %s's toque do telefone", ReturnName(calling, 0));
			}
		}
		if(PlayerData[i][pCellTime] == 0 && PlayerData[i][pCallCost] > 0)
		{
			format(str, sizeof(str), "~w~O custo da chamada foi de~n~~r~R$%d",PlayerData[i][pCallCost]);
			PlayerData[i][pCash] -= PlayerData[i][pCallCost];
			GameTextForPlayer(i, str, 5000, 1);
			PlayerData[i][pCallCost] = 0;
		}
		//Checking jail time
		if(PlayerData[i][pJailTime] > 1 && PlayerData[i][pJailed] == 1)
		{
			PlayerData[i][pJailTime]--;
			format(str,sizeof(str),"~p~Tempo restante: ~w~%d segundos",PlayerData[i][pJailTime]);
			PlayerTextDrawSetString(i, jail_timeleft[i], str);
			PlayerTextDrawShow(i, jail_timeleft[i]);
		}
		else if(PlayerData[i][pJailTime] == 1 && PlayerData[i][pJailed] == 1)
		{
			PlayerData[i][pJailTime] = 0;

			if(!PlayerData[i][pJailTime2]) PlayerData[i][pJailed] = 0;
			else PlayerData[i][pJailed] = 2;

			SetPlayerPos(i, 1538.1240,-1673.7794,13.5469);
			GameTextForPlayer(i,"~g~Você foi liberado",5000,1);
			PlayerTextDrawHide(i, jail_timeleft[i]);
		}

		//Checking jail time 2
        if(PlayerData[i][pJailTime2] > 1 && PlayerData[i][pJailed] == 2)
		{
			PlayerData[i][pJailTime2]--;
			format(str,sizeof(str),"~p~Tempo restante: ~w~%d segundos",PlayerData[i][pJailTime2]);
			PlayerTextDrawSetString(i, jail_timeleft[i], str);
			PlayerTextDrawShow(i, jail_timeleft[i]);
		}
		else if(PlayerData[i][pJailTime2] == 1 && PlayerData[i][pJailed] == 2)
		{

			PlayerData[i][pJailTime2] = 0;
			PlayerData[i][pJailed] = 0;
			SetPlayerPos(i, 1538.1240,-1673.7794,13.5469);
			SetPlayerInterior(i, 0);
			SetPlayerVirtualWorld(i, 0);
			GameTextForPlayer(i,"~g~Você foi liberado",5000,1);
			PlayerTextDrawHide(i, jail_timeleft[i]);
		}
		// ================== [ PHONE SYSTEM ] ============================

		if(!deathmode[i] && PlayerData[i][pInjured])
		{
		    if(deathtime[i] > 0) deathtime[i]--;

		    if(deathtime[i] <= 0 && PlayerData[i][pInjured] == 1)
		    {
				/*if(!IsValidDynamic3DTextLabel(DamageLabel[i])) DamageLabel[i] = CreateDynamic3DTextLabel("(( This player is dead. ))", 0xFF6347FF, 0, 0, 0.8, 10, i, INVALID_VEHICLE_ID, 1);
				else UpdateDynamic3DTextLabelText(DamageLabel[i], 0xFF6347FF, "(( This player is dead. ))");*/
                SetPlayerChatBubble(i, "(( ESTE JOGADOR está MORTO. ))", 0xFF6347FF, 20.0, 60*1000);
                SendClientMessage(i, COLOR_YELLOW, "-> Você está morto agora, Você precisa esperar 60 segundos e então Você será capaz de. /respawnhosp");

				deathmode[i] = 1;
				deathtime[i] = 60;

				ApplyAnimation(i, "WUZI", "CS_Dead_Guy", 4.1, 0, 0, 0, 1, 0, 1);
		    }
		}
		else if(deathmode[i])
		{
		    if(deathtime[i] > 0) deathtime[i]--;

		    if(deathtime[i] <= 0 && PlayerData[i][pInjured])
		    {
		        SendClientMessage(i, COLOR_YELLOW, "-> Seu tempo morto acabou, Você pode /respawnhosp para respawnar novamente.");
                PlayerData[i][pInjured] = 0;
	 		    /*ResetDamages(i);
			    PlayerData[i][pInjured] = 0;
			    deathmode[i] = 0;
			    deathtime[i] = 0;
			    MedicBill[i] = 0;
			    SpawnPlayer(i);*/
		    }
		}


		if(RepairTime{i} && serviced[i])
		{
		    if (!IsPlayerInAnyVehicle(i)) {

				new Float:tx, Float:ty, Float:tz;
				GetVehiclePos(CarData[serviceTowtruck[i]][carVehicle], tx, ty, tz);

				if(RepairTime{i} <= 1)
				{
					switch(serviced[i]) {
						case 1: {
							ShowPlayerFooter(i, "~h~~p~veículo REPARADO.");
							SetVehicleHealth(CarData[serviceCustomer[i]][carVehicle], GetVehicleDataHealth(CarData[serviceCustomer[i]][carModel]));
						}
						case 2: {

							ShowPlayerFooter(i, "~h~~p~CARROCERIA REPARADA.");
							SetVehicleDamageStatus(CarData[serviceCustomer[i]][carVehicle], 0, 0, 0, 0);
						}
						case 3: {

							ShowPlayerFooter(i, "~h~~p~SUBSTITUIU A BATERIA.");
							CarData[serviceCustomer[i]][carBatteryL] = VehicleData[CarData[serviceCustomer[i]][carModel] - 400][c_battery];
						}
						case 4: {

							ShowPlayerFooter(i, "~h~~p~TROCADO O MOTOR.");
							CarData[serviceCustomer[i]][carEngineL] = VehicleData[CarData[serviceCustomer[i]][carModel] - 400][c_engine];
						}
						case 5: {

							ShowPlayerFooter(i, "~h~~p~PULVERIZADO COM SUCESSO.");
							CarData[serviceCustomer[i]][carColor1] = GetPVarInt(i, "color1");
							CarData[serviceCustomer[i]][carColor2] = GetPVarInt(i, "color2");
							ChangeVehicleColor(CarData[serviceCustomer[i]][carVehicle], CarData[serviceCustomer[i]][carColor1], CarData[serviceCustomer[i]][carColor2]);
							DeletePVar(i, "color1");
							DeletePVar(i, "color2");
						}
					}

					RemoveWeapon(i, 41);
					RepairTime{i} = 0;

					CarData[serviceTowtruck[i]][carComps] -= serviceComp[i];

					serviceTowtruck[i] = INVALID_VEHICLE_ID;
					serviceCustomer[i] = INVALID_VEHICLE_ID;

					serviced[i]=0;
					serviceComp[i]=0;
					serviceFocus[i]=0;

					if(IsPlayerAttachedObjectSlotUsed(i, FREESLOT9)) RemovePlayerAttachedObject(i, FREESLOT9);
				}
				else if(IsPlayerInRangeOfPoint(i, 4.2, tx, ty, tz))
				{
				    if(IsPlayerFacingVehicle(i, CarData[serviceCustomer[i]][carVehicle]) && GetPlayerState(i) == PLAYER_STATE_ONFOOT) {

                        if(!IsPlayerAttachedObjectSlotUsed(i, FREESLOT9)) SetPlayerAttachedObject(i,FREESLOT9,18688,5,0,0.533999,-2.756,0,0,0,1.000000,1.000000,1.000000);

						if(HoldingKey(i, KEY_FIRE) && GetPlayerWeapon(i) == 41 || serviced[i] == 3 || serviced[i] == 4) {
							switch(serviced[i]) {
								case 1: {
									format(szString, sizeof(szString), "~h~~p~REPARANDO O veículo.~n~~w~TOWTRUCK TEM ~b~%d~w~ QUANTIDADES DE PRODUTO DEIXADOS.", CarData[serviceTowtruck[i]][carComps] - (serviceComp[i] - RepairTime{i}));
									ShowPlayerFooter(i, szString, -1);
	                                RepairTime{i}--;
								}
								case 2: {
									format(szString, sizeof(szString), "~h~~p~REPARANDO A CARROÇERIA.~n~~w~TOWTRUCK TEM ~b~%d~w~ QUANTIDADES DE PRODUTO DEIXADOS.", CarData[serviceTowtruck[i]][carComps] - (serviceComp[i] - RepairTime{i}));
									ShowPlayerFooter(i, szString, -1);
	                                RepairTime{i}--;
								}
								case 3: {
									ShowPlayerFooter(i, "~h~~p~REALIZANDO MANUTENÇÃO...~n~~w~((USE SUA IMAGINAÇÃO E ROLEPLAY.))", -1);
	                                RepairTime{i}-=100;
								}
								case 4: {
									ShowPlayerFooter(i, "~h~~p~REALIZANDO MANUTENÇÃO...~n~~w~((USE SUA IMAGINAÇÃO E ROLEPLAY.))", -1);
	                                RepairTime{i}-=100;
								}
								case 5: {
									format(szString, sizeof(szString), "~h~~p~PINTANDO O CARRO.~n~~w~~b~%d~w~ QUANTIDADES DOS PRODUTOS DEIXADOS NO CAMINHÃO.", CarData[serviceTowtruck[i]][carComps] - (serviceComp[i] - RepairTime{i}));
									ShowPlayerFooter(i, szString, -1);
	                                RepairTime{i}--;
								}
							}
							if(!serviceFocus[i]) {
								RemovePlayerAttachedObject(i, FREESLOT9);
								serviceFocus[i]=CarData[serviceCustomer[i]][carVehicle];
							}
						}
					}
					else {
						if(IsPlayerAttachedObjectSlotUsed(i, FREESLOT9) && serviceFocus[i]) RemovePlayerAttachedObject(i, FREESLOT9);
					}
				}
				else
				{
					ShowPlayerFooter(i, "~h~~p~Você PRECISA ESTAR PERTO DO SEU TOWTRUCK.", -1);
				}
			}
		}
		//Mechanic fixing


		/* HUD */

		if(!BitFlag_Get(g_PlayerFlags[i], TOGGLE_HUD)) {
			if(PlayerData[i][pHUDStyle] == 0) {
				format(str, sizeof(str), "~b~Radio~n~ chan: ~g~%d~n~ ~b~slot: ~g~%d", PlayerData[i][pRChannel], PlayerData[i][pRSlot]);
				PlayerTextDrawSetString(i, pPT_Radio[i], str);
				PlayerTextDrawShow(i, pPT_Radio[i]);
			}
			else if(PlayerData[i][pHUDStyle] == 1) {
				format(str, sizeof(str), "_~n~~w~Radioo: ~y~%d~n~~w~Slot: ~y~%d", PlayerData[i][pRChannel], PlayerData[i][pRSlot]);
				PlayerTextDrawSetString(i, pPT_Radio[i], str);
				PlayerTextDrawShow(i, pPT_Radio[i]);
			}
			else PlayerTextDrawHide(i, pPT_Radio[i]);
		}
		else PlayerTextDrawHide(i, pPT_Radio[i]);


		// Vehicle Crash
		if(IsPlayerInAnyVehicle(i))
		{
			new
				Float:hp, vehicleid = GetPlayerVehicleID(i), vdamage[4];

			GetVehicleHealth(vehicleid, hp);

			//IsVehicleTrunkBroken(vehicleid);

			if(hp < CoreVehicles[vehicleid][vehCrash])
			{
				new carid = -1, Float:vehicle_health_loss = CoreVehicles[vehicleid][vehCrash] - hp;

				if((carid = Car_GetID(vehicleid)) != -1) {

                    if(CarData[carid][carArmour]) {

		                GetVehicleDamageStatus(vehicleid, vdamage[0], vdamage[1], vdamage[2], vdamage[3]);

						for(new x=0;x!=4;x++)
						{
						    if(vdamage[x] > CoreVehicles[vehicleid][vehDamage][x])
						    {
						        vdamage[x] = CoreVehicles[vehicleid][vehDamage][x];
						        SetVehicleDamageStatus(vehicleid, vdamage[0], vdamage[1], vdamage[2], vdamage[3]);
						    }
						}

	                    if(CarData[carid][carArmour] >= vehicle_health_loss)
	                    {
	                        //SetVehicleHealth(vehicleid, vehicle_health_loss + hp);
	                        CarData[carid][carArmour]-=vehicle_health_loss;
	                    }
	                    else
	                    {
	                        //SetVehicleHealth(vehicleid, hp + vehicle_health_loss - CarData[carid][carArmour]);
	                        CarData[carid][carArmour]=0;
	                    }
                    }
					/*printf("before crash %.2f", CoreVehicles[vehicleid][vehCrash]);
					printf("current health %.2f and loss %.2f", hp, vehicle_health_loss);*/

					switch(hp)
					{
						case 550..649:
						{
		    				CarData[carid][carEngineL] -= (vehicle_health_loss/125.0);
							if(hp < 650) CarData[carid][carBatteryL] -= (vehicle_health_loss/150.0);
						}
						case 390..549:
						{
		    				CarData[carid][carEngineL] -= (vehicle_health_loss/100.0);
							if(hp < 650) CarData[carid][carBatteryL] -= (vehicle_health_loss/125.0);
						}
						case 250..389:
						{
		    				CarData[carid][carEngineL] -= (vehicle_health_loss/75.0);
							if(hp < 650) CarData[carid][carBatteryL] -= (vehicle_health_loss/100.0);
						}
					}

					if(hp < 390.0 && vehicle_health_loss > 15) {
					  	SetEngineStatus(vehicleid, false);
						SendClientMessage(i, COLOR_LIGHTRED, "SERVER: O motor está muito danificado.");
						SendClientMessage(i, COLOR_YELLOW, "DICA: Pressione{FFFFFF} W para instalar o motor");
						SendClientMessage(i, COLOR_YELLOW, "DICA: Você tem 10 segundos para o motor.");
                        CoreVehicles[vehicleid][vehicleBadlyDamage] = 10;
						//GameTextForPlayer(i, "~r~ENGINE COULDN'T START DUE TO DAMAGE", 4000, 4);
					}
					//if(CarData[carid][carOwner] == PlayerData[i][pID]) SendClientMessageEx(i, COLOR_LIGHTRED, "LIFESPAN: Engine Health reduced to {FFFFFF}%.2f{FF6347}. Battery Health reduced to {FFFFFF}%.2f{FF6347}.", CarData[carid][carEngineL], CarData[carid][carBatteryL]);
				}


				new Float:phploss = floatround((vehicle_health_loss / 100));


				if(phploss) {
					//new Float:php;
					foreach (new x : Player) {
						if(!IsPlayerInVehicle(x, vehicleid)) continue;
						//GetPlayerHealth(x,php);
						SetPlayerHealthEx(x,(PlayerData[x][pHealth] - phploss));
					}
				}

				if(vehicle_health_loss > 5 && GetPVarInt(i, "LessonSeconds") != 0 && GetPVarInt(i, "LessonStarted") == 1 && GetPVarInt(i, "InDriveTest"))
				{
					DeletePVar(i, "LessonStarted");
					DeletePVar(i, "LessonSeconds");
					DeletePVar(i, "InDriveTest");
					SendClientMessage(i, COLOR_GREEN, "Testes de veículos danificados falharam.");

					DisablePlayerCheckpoint(i);
					gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
			      	gPlayerCheckpointValue[i]=-1;
					SetVehicleToRespawn(vehicleid);
				}

				//motor couldn't start due to damage
			}

			if(GetPVarInt(i, "LessonSeconds") && GetPVarInt(i, "LessonStarted") == 1 && GetPVarInt(i, "InDriveTest"))
			{
				format(str, sizeof(str), "~w~%d", GetPVarInt(i, "LessonSeconds"));
				GameTextForPlayer(i, str, 1200, 3);

				SetPVarInt(i, "LessonSeconds", GetPVarInt(i, "LessonSeconds") - 1);
			}
			else if(GetPVarInt(i, "LessonStarted") == 1 && GetPVarInt(i, "InDriveTest"))
			{
				DeletePVar(i, "LessonStarted");
				DeletePVar(i, "LessonSeconds");
				DeletePVar(i, "InDriveTest");
				SendClientMessage(i, COLOR_GREEN, "Tempo esgotado. O teste falhou.");

				DisablePlayerCheckpoint(i);
				gPlayerCheckpointStatus[i] = CHECKPOINT_NONE;
		      	gPlayerCheckpointValue[i]=-1;
				SetVehicleToRespawn(vehicleid);
			}

		}
		/*else
		{
			new id = -1;
			if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pPlayBoombox] != id)
			{
			    PlayerData[i][pPlayBoombox] = id;

				if(BoomboxData[id][boomboxOn]) {
				    strunpack(str, BoomboxData[id][boomboxURL]);
				    StopAudioStreamForPlayer(i);
				    PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
				}
			}
			else if (PlayerData[i][pPlayBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pPlayBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pPlayBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pPlayBoombox]][boomboxPos][2]))
			{
			    PlayerData[i][pPlayBoombox] = INVALID_PLAYER_ID;
			    //StopAudioStreamForPlayer(i);
			}
		}*/
		// Vehicle Crash
		new houseid = -1;
		if((houseid = House_Nearest(i, 3.5)) != -1 && nearHouse_var[i] != houseid && BitFlag_Get(g_PlayerFlags[i], IS_PLAYER_SPAWNED) && gPlayerCheckpointStatus[i] == CHECKPOINT_NONE)
		{
		    if(HouseInfo[houseid][hEntranceX] != 0.0 && HouseInfo[houseid][hEntranceY] != 0.0) {
				gPlayerCheckpointValue[i] = houseid;
				SetPlayerCheckpoint(i, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ], 3.0);
				gPlayerCheckpointStatus[i] = CHECKPOINT_HOUSE;
			}
		}
		nearHouse_var[i] = houseid;
		
		//Empresas
        EmpresaNenhuma[i] = 0;
        for(new e = 0; e < MAX_BIZZ; e++)
        {
            if(BizInfo[e][bEntranceX] != 0)
            {
	            if(IsPlayerInRangeOfPoint(i, 2, BizInfo[e][bEntranceX], BizInfo[e][bEntranceY], BizInfo[e][bEntranceZ]) && GetPlayerVirtualWorld(i) == BizInfo[e][bWorld] && GetPlayerInterior(i) == BizInfo[e][bInterior])
   				{
	    		    if(VendoEmpresa[i] != e)
	    		    {
	    		        if(BizInfo[e][bOwned] != 1)
						{
						    new mec10[512];
						    format(mec10, sizeof(mec10), "Você esta em frente a uma empresa a venda.");
							SendClientMessage(i, COLOR_LIGHTGREEN, mec10);
							format(mec10, sizeof(mec10), "Valor: R$%d", BizInfo[e][bBuyPrice]);
							SendClientMessage(i, COLOR_LIGHTGREEN, mec10);
 							format(mec10, sizeof(mec10), "Comandos disponíveis: /comprar");
 							SendClientMessage(i, COLOR_WHITE, mec10);
						}else {
						    new mec10[512];
						    format(mec10, sizeof(mec10), "Você esta em frente da %s", BizInfo[e][bInfo]);
							SendClientMessage(i, COLOR_LIGHTGREEN, mec10);
							format(mec10, sizeof(mec10), "Valor da Entrada: R$%d", BizInfo[e][bEntranceCost]);
							SendClientMessage(i, COLOR_LIGHTGREEN, mec10);
 							format(mec10, sizeof(mec10), "Comandos disponíveis: /entrar");
 							SendClientMessage(i, COLOR_WHITE, mec10);
						}
						VendoEmpresa[i] = e;
					}
					EmpresaNenhuma[i]++;
				}
			}
        }
        if(EmpresaNenhuma[i] == 0)
		{
  			VendoEmpresa[i] = 9999;
		}
	}
	

	return 1;
}

public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
	if(GetPlayerSpeed(playerid) >= 20){
		foreach(new i : Player){
	        if(GetPlayerVehicleID(i) == vehicleid)
	        {
				//SendClientMessage(i,COLOR_LIGHTGREEN-1, "Funcionou");

			}
		}
	}

// IsABike
	return 1;
}


forward Spectator();
public Spectator()
{
	foreach (new i : Player)
	{
	    if(NetStats_PacketLossPercent(i) >= 40) {
			GameTextForPlayer(i, "Você esta dessicronizado. ~n~Corrija o vw ou relogue  ~n~por favor.", 3000, 6);
 		}
        if (GetPlayerMoney(i) != PlayerData[i][pCash]) ResetPlayerMoney(i),GivePlayerMoney(i, PlayerData[i][pCash]);

		if(PlayerData[i][pSpectating] != INVALID_PLAYER_ID) {
			if(GetPlayerInterior(i) != GetPlayerInterior(PlayerData[i][pSpectating])){
				SetPlayerInterior(i, GetPlayerInterior(PlayerData[i][pSpectating]));
			}
			if(GetPlayerVirtualWorld(i) != GetPlayerVirtualWorld(PlayerData[i][pSpectating])){
				SetPlayerVirtualWorld(i, GetPlayerVirtualWorld(PlayerData[i][pSpectating]));
			}
		}
	}
	return 1;
}

forward SyncUp();
public SyncUp()
{
	new tmphour;
	new tmpminute;
	new tmpsecond;
	gettime(tmphour, tmpminute, tmpsecond);
	FixHour(tmphour);
	tmphour = shifthour;

/*	foreach(new i : Player) {
		if(AddictDrugs[i] != 0 && AddictTimer[i] == Timer:0) {
			AddictTimer[i] = drugAddictTimer(i);
		}
	}*/

	if ((tmphour > ghour) || (tmphour == 0 && ghour == 23))
	{
	    format(szString, 128, "Horário do Servidor:[ %d.00 ]",tmphour);
		SendClientMessageToAll(COLOR_WHITE, szString);

		ghour = tmphour;

		PayDay(); // Every hours
		IndustryTime();
		//ResetOwnerVehicle();

		SetWorldTime(tmphour);
	}
}

IndustryTime() {
	foreach(new i : sv_industry) {
	    if(StorageData[i][in_id]){
			if(StorageData[i][in_trading_type]) StorageData[i][in_stock]-=StorageData[i][in_consumption];
			else StorageData[i][in_stock]+=StorageData[i][in_consumption];
			if(StorageData[i][in_stock] > StorageData[i][in_maximum]) StorageData[i][in_stock]=StorageData[i][in_maximum];
			else if(StorageData[i][in_stock] < 0) StorageData[i][in_stock]=0;
	        UpdateStorage(i);
         	saveStorage(i);
        }
	}

	foreach(new i : sv_warehouse) {

        WareHouseInfo[i][whStock]++;

        if(WareHouseInfo[i][whStock] > WareHouseInfo[i][whMaxstock])
            WareHouseInfo[i][whStock] = WareHouseInfo[i][whMaxstock];

        Warehouse_Refresh(i);
        saveWarehouse(i);
	}
}

forward Production();
public Production() {
	foreach (new i : Player) {
		if(PlayerData[i][pPayDay] < 6) PlayerData[i][pPayDay] += 1; //+ 5 min to PayDay anti-abuse
		if(PlayerData[i][pDonateRank] && gettime() >= PlayerData[i][pDonateUnix])
		{
			SendClientMessageEx(i, COLOR_YELLOW, "Status %s expirou", ReturnDonateRank(PlayerData[i][pDonateRank]));
			PlayerData[i][pDonateRank] = 0;
		}
	}
	new bool:done;
	for(new c=0;c<sizeof(CarRent);c++) {
        done = false;
		foreach (new i : Player) if(gLastCar[i] == CarRent[c] || RentCarKey[i] == CarRent[c]) done = true;
		if(!done) SetVehicleToRespawn(CarRent[c]);
	}

	/*for(new vT=0; vT < MAX_VEHICLES; vT++)
	{
		if(CarData[vT][carSemPlaca] && gettime() >= CarData[vT][carTempoPlaca]){
			SendClientMessageEx(CarData[vT][carOwnerName], COLOR_YELLOW, "A data para emplacar seu veiculo expirou. Seu veiculo corre risco de ser preso, e tomar multas de altos valores.");
		}
	}*/
}

forward PayDay();
public PayDay()
{
	new string[128];
	new account,interest;
	new savaccount, savings;
    new rent = 0;

	foreach (new i : Player)
	{
	    if(PlayerData[i][pPCarkey] != 9999) exist_playervehicle[PlayerData[i][pPCarkey]]=true;
		if(PlayerData[i][pJob] && PlayerData[i][pJob] != JOB_MECHANIC && PlayerData[i][pJob] != JOB_TAXI && PlayerData[i][pJob] != JOB_GUIDE) if(PlayerData[i][pContractTime] < 25) PlayerData[i][pContractTime] ++;

		/*for (new i = 0; i != MAX_PLAYER_VEHICLES; i ++) if (CarData[i][carExists]) {


		new bool:success;
		foreach (new playerid : Player)
		{
			if(CarData[i][carOwner] == PlayerData[playerid][pID])
			{
				success = true;
				break;
			}
		}
		if(!success) Car_DespawnEx(i);
		}*/

	    if(PlayerData[i][pHunger] > 9 && !PlayerData[i][pInjured])
	    {
	        new Float:decrease;
	        decrease = PlayerData[i][pHunger]/10;
	        if(PlayerData[i][pHealth] - decrease > 0) SetPlayerHealthEx(i, PlayerData[i][pHealth] - decrease);
	        else SetPlayerHealthEx(i, 1);
	    	//printf("Decerease %f %f", decrease);
	    }
		for(new x=0;x!=MAX_DRUGS;x++) {
			if(PlayerData[i][pDrugAddiction][x]>0) {
				PlayerData[i][pDrugAddiction][x]--;
			}
		}

		if(SufferDrugs{i}) {
		SufferDrugs{i}=false;
		}

		new salarfac = 0;
		if(PlayerData[i][pFactionID] > 0) {
			new facCargo = PlayerData[i][pFactionRank]-1;
			if(facCargo < 0) facCargo = 0;

			if(FactionData[PlayerData[i][pFactionID]][factionType] == FACTION_POLICE || FactionData[PlayerData[i][pFactionID]][factionType] == FACTION_SASD)
				salarfac = GovInfo[gSalarioPM][facCargo];
			if(FactionData[PlayerData[i][pFactionID]][factionType] == FACTION_MEDIC) salarfac = GovInfo[gSalarioBOMB][facCargo];
			if(FactionData[PlayerData[i][pFactionID]][factionType] == FACTION_GOV) salarfac = GovInfo[gSalarioGOV][facCargo];
			//if(FactionData[PlayerData[i][pFac]][fTipo] == FAC_TIPO_SN) salarfac = GovInfo[gSalarioSN][facCargo];
		}



		new house = PlayerData[i][pHouseKey];
		new nxtlevel = PlayerData[i][pLevel]+1;
		new expamount = nxtlevel*levelexp;

		account = PlayerData[i][pAccount];

		new Float:tmpintrate = 0.1;

		//Checking job ranks
		if(PlayerData[i][pJob] == JOB_TRUCKER)
		{
			PlayerData[i][pCareer]++;

			if(PlayerData[i][pCareer] >= 164) PlayerData[i][pJobRank] = 5;
			else if(PlayerData[i][pCareer] >= 116) PlayerData[i][pJobRank] = 4;
			else if(PlayerData[i][pCareer] >= 64) PlayerData[i][pJobRank] = 3;
			else if(PlayerData[i][pCareer] >= 36) PlayerData[i][pJobRank] = 2;
			else if(PlayerData[i][pCareer] >= 12) PlayerData[i][pJobRank] = 1;
			else PlayerData[i][pJobRank] = 0;
		}

		Tax += TaxValue;
		PlayerData[i][pAccount] -= TaxValue;

		if(PlayerData[i][pAccount] > 20000000) tmpintrate = 0.05;
		interest = floatround((PlayerData[i][pAccount]/float(100))*(tmpintrate), floatround_round);
		PlayerData[i][pExp]+=1*multiplyexp;
		PlayerPlayMusic(i);
		PlayerData[i][pAccount] = account+interest;

		if(PlayerData[i][pSavingsCollect])
		{
			savaccount = PlayerData[i][pSavingsCollect];
			savings = floatround((PlayerData[i][pSavingsCollect]/float(100))*(0.5), floatround_round);

			PlayerData[i][pSavingsCollect] = savaccount+savings;
			if(PlayerData[i][pSavingsCollect] > 20000000)
			{
				PlayerData[i][pSavingsCollect] = 20000000;
			}
		}

		new ebill = floatround((float(account) / float(100)) / float(110)) * CountPlayerOwnHouse(i);
		//new ebill = floatround((float(account) / float(100)) / 110) * CountPlayerOwnHouse(i);

		if(house != -1 && !strcmp(ReturnName(i), HouseInfo[house][hOwner], true))
		{
			PlayerData[i][pAccount] -= ebill;
			format(string, sizeof(string), "Carregar: R$%d  (Deixar no Banco)", ebill);
			SendClientMessage(i, COLOR_WHITE, string);
		}
		else if(house != -1)
		{
			rent = HouseInfo[house][hRentprice];

			if(PlayerData[i][pAccount] >= rent) {

				PlayerData[i][pAccount] -= rent;
				format(string, sizeof(string), "Aluguel: R$%d (Deixar no Banco)", rent);
				SendClientMessage(i, COLOR_WHITE, string);
				HouseInfo[house][hCash] += rent;

			}
			else {
				PlayerData[i][pHouseKey] = -1;
			}
		}

		SendClientMessage(i, COLOR_WHITE, "|___ EXTRATO BANCARIO ___|");

		format(string, sizeof(string), "  Saldo: R$%d", account);
		SendClientMessage(i, COLOR_FADE1, string);
		format(string, sizeof(string), "  Taxa de juros: %.2f",tmpintrate);
		SendClientMessage(i, COLOR_FADE1, string);
		format(string, sizeof(string), "  Juros ganhos: R$%d", interest);
		SendClientMessage(i, COLOR_FADE1, string);
		format(string, sizeof(string), "  Impostos pagos: R$%d", TaxValue);
		SendClientMessage(i, COLOR_FADE1, string);

		if(PlayerData[i][pSavingsCollect])
		{
			format(string, sizeof(string), "  Deposito de poupança: R$%d está na taxa: 0.5", savings);
			SendClientMessage(i, COLOR_WHITE, string);
			format(string, sizeof(string), "  Novo valor da conta poupança: R$%d", PlayerData[i][pSavingsCollect]);
			SendClientMessage(i, COLOR_WHITE, string);
		}



		if(PlayerData[i][pJob] == JOB_NONE)
		{
			PlayerData[i][pAccount] += 250;
			//SendClientMessage(i, COLOR_WHITE, "Você ganha R$100 como seguro desemprego.");
			format(string, sizeof(string), "  Seguro desemprego: R$250,00");
			SendClientMessage(i, COLOR_WHITE, string);
		}
		if(PlayerData[i][pJob] == JOB_MECHANIC || PlayerData[i][pSideJob] == JOB_MECHANIC)
		{
			PlayerData[i][pAccount] += 500;
			//SendClientMessage(i, COLOR_WHITE, "Você ganha R$500 pelo seu trabalho de mecanico.");
			format(string, sizeof(string), "  salário: R$500,00");
			SendClientMessage(i, COLOR_WHITE, string);
		}
		if(PlayerData[i][pJob] == JOB_FARMER || PlayerData[i][pSideJob] == JOB_FARMER)
		{
			PlayerData[i][pAccount] += 500;
			//SendClientMessage(i, COLOR_WHITE, "Você ganha R$500 pelo seu trabalho de fazendeiro.");
			format(string, sizeof(string), "  salário: R$500,00");
			SendClientMessage(i, COLOR_WHITE, string);
		}
		if(PlayerData[i][pJob] == JOB_TRUCKER || PlayerData[i][pSideJob] == JOB_TRUCKER)
		{
			PlayerData[i][pAccount] += 500;
			//SendClientMessage(i, COLOR_WHITE, "Você ganha R$500 pelo seu trabalho de caminhoneiro.");
			format(string, sizeof(string), "  salário: R$500,00");
			SendClientMessage(i, COLOR_WHITE, string);
		}
		if(PlayerData[i][pJob] == JOB_TAXI || PlayerData[i][pSideJob] == JOB_TAXI)
		{
			PlayerData[i][pAccount] += 500;
			//SendClientMessage(i, COLOR_WHITE, "Você ganha R$600 pelo seu trabalho de taxista.");
			format(string, sizeof(string), "  salário: R$500,00");
			SendClientMessage(i, COLOR_WHITE, string);
		}
		if(PlayerData[i][pJob] == JOB_GUIDE || PlayerData[i][pSideJob] == JOB_GUIDE)
		{
			PlayerData[i][pAccount] += 500;
			//SendClientMessage(i, COLOR_WHITE, "Você ganha R$500 pelo seu trabalho de GUIDE.");
			format(string, sizeof(string), "  salário: R$500,00");
			SendClientMessage(i, COLOR_WHITE, string);
		}

		if(PlayerData[i][pLevel] < 2)
		{
			format(string, sizeof(string), "Você recebeu R$600,00 como auxilio Emergêncial. ((Ajuda até level 2))");
			SendClientMessage(i, COLOR_FADE1, string);
			PlayerData[i][pAccount] += 600;
		}

		if(PlayerData[i][pChequeCash])
		{
			PlayerData[i][pPayCheck] += PlayerData[i][pChequeCash];
			PlayerData[i][pChequeCash] = 0;
		}
		format(string, sizeof(string), "  salário facção: %d", salarfac);
		SendClientMessage(i, COLOR_FADE1, string);
		PlayerData[i][pAccount] += salarfac;

		SendClientMessage(i, COLOR_WHITE, "|______________________|");
		format(string, sizeof(string), "  Novo saldo: R$%d", PlayerData[i][pAccount]);
		SendClientMessage(i, COLOR_WHITE, string);

		if(account+interest)
			SendClientMessage(i, COLOR_WHITE, "Você pode retirar seu dinheiro no Banco da Caixa Economica Federal.");

		//format(string, sizeof(string), "~y~PayDay~n~~w~Paycheck~n~~g~R$%d", PlayerData[i][pPayCheck]);
		//GameTextForPlayer(i, string, 5000, 1);

		rent = 0;
		PlayerData[i][pPayDay] = 0;
		PlayerData[i][pPlayingHours] += 1;

		if(PlayerData[i][pExp] >= expamount && (PlayerData[i][pLevel] < 5 || PlayerData[i][pDonateRank]))
		{
			format(string, sizeof(string), "~g~LEVEL UP~n~~w~Você subiu para o nível %d", nxtlevel);
			GameTextForPlayer(i, string, 5000, 1);
			PlayerPlaySound(i, 1052, 0.0, 0.0, 0.0);
			PlayerPlayMusic(i);
			PlayerData[i][pLevel]++;
			PlayerData[i][pPUpgrade] = PlayerData[i][pPUpgrade]+2;
			format(string, 128, "Seu nível atual foi aumentado para o nível. %d",PlayerData[i][pLevel]);
			SendClientMessage(i, COLOR_FADE2, string);
			format(string, 128, "Você tem uma taxa de atualização. %d pontos (Use /upgrade para upgrade)",PlayerData[i][pPUpgrade]);
			SendClientMessage(i, COLOR_FADE2, string);
			if(PlayerData[i][pDonateRank] > 0)
			{
				PlayerData[i][pExp] -= expamount;
				new total = PlayerData[i][pExp];
				if(total > 0)
				{
					PlayerData[i][pExp] = total;
				}
				else
				{
					PlayerData[i][pExp] = 0;
				}
			}
			else
			{
				PlayerData[i][pExp] = 0;
			}
			SetPlayerScore(i, PlayerData[i][pLevel]);
		}


		if(PlayerData[i][pHunger] < 100)
		{
			new rd = random(2);
			if(rd) {
				PlayerData[i][pHunger]+=float(rd);
				if(PlayerData[i][pHunger] > 100) PlayerData[i][pHunger] = 100;
			}
		}

		// Donate
		if(PlayerData[i][pDonateRank] > 0)
		{
			PlayerData[i][pPayDayHad] += 1;
			if(PlayerData[i][pPayDayHad] >= 5)
			{
				PlayerData[i][pExp]++;
				PlayerData[i][pPayDayHad] = 0;
			}
		}
	}
	for (new i = 0; i != MAX_PLAYER_VEHICLES; i ++) if(!exist_playervehicle[i]) Car_DespawnEx(i);
	gerandoFaturas();
    return 1;
}

forward OnQueryBuyClothing(playerid, id);
public OnQueryBuyClothing(playerid, id)
{
	new insert_id = cache_insert_id();
	if(insert_id != -1) ClothingData[playerid][id][cl_sid] = cache_insert_id();
	else ClothingData[playerid][id][cl_object] = 0;
	return 1;
}

forward OnQueryBuyVehicle(playerid, i, model, price);
public OnQueryBuyVehicle(playerid, i, model, price)
{
	new insert_id = cache_insert_id(), str[128];
	if(insert_id != -1) {
		CarData[i][carID] = cache_insert_id();

		SendClientMessage(playerid, 0xADFF2FFF, "PROCESSAMENTO: Criando seu novo /v lista...");
		SendClientMessage(playerid, 0xADFF2FFF, "(( Utilize o comando /v registrar na concessionaria para emplaca seu veiculo. Você tem um prazo de 3 dias.))");
		SendClientMessage(playerid, COLOR_RED, "Você tem 3 dias para emplacar este veiculo. Caso ultrapasse esses dia seu carro será sujeito a reboque.");


		format(str, sizeof(str), "Bem vindo ao seu %s", g_arrVehicleNames[model - 400]);
		SendClientMessage(playerid, COLOR_WHITE, str);


		SendClientMessageEx(playerid, COLOR_WHITE, "Info: Tranca[%d], Alarme[%d], Immo[%d], Seguro[%d]", CarData[i][carLock], CarData[i][carAlarm], CarData[i][carImmob], CarData[i][carInsurance]);
		SendClientMessageEx(playerid, COLOR_WHITE, "Info: Motor[%.2f], Bateria[%.2f], KM rodado[%.2f]", CarData[i][carEngineL], CarData[i][carBatteryL], CarData[i][carMileage]);

		SendClientMessage(playerid, COLOR_GREEN, "Motor desligado (/motor)");
		SendClientMessage(playerid, 0xADFF2FFF, "PROCESSADO: Novos ajustes");

		PlayerData[playerid][pCash] -= price;

		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
		mysql_query(dbCon, szQuery);
		SQL_SaveCharacter(playerid);

		ExitSettingVehicle(playerid);

		/*VDealerSetting{playerid} = false;
		VDealerVehicle[playerid] = 0;
		VDealerColor[playerid][0] = -1;
		VDealerColor[playerid][1] = -1;
		VDealerBiz[playerid] = -1;
		VDealerLock[playerid] = 0;
		VDealerImmob[playerid] = 0;
		VDealerAlarm[playerid] = 0;
		VDealerXM[playerid] = 0;
		*/
		TogglePlayerControllable(playerid, 1);
		SetCameraBehindPlayer(playerid);

		new plate[10];
		format(plate, 10, "SEM PLACA");
		mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", plate);
		mysql_tquery(dbCon, str, "DuplicatePlates", "iis", playerid, i, plate);

		mysql_tquery(dbCon, "SELECT carPosX, carPosY, carPosZ FROM `cars`", "RandomVehiclePark", "d", i);

	}
	else
	{
	    ExitSettingVehicle(playerid);
	    SendClientMessage(playerid, COLOR_RED, "Ocorreu um erro ao comprar um veículo, entre em contato com o administrador.");
	}

	return 1;
}

stock Car_Registration(carid)
{
	new
	    query[1536];

	if(carid != -1)
	{

        CarData[carid][carFuel] = CoreVehicles[CarData[carid][carVehicle]][vehFuel];

		SaveSlotVehicleDamage(carid);
		format(CarData[carid][carSemPlaca], 100, "Licenciado.");

		format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d', `carAlarm` = '%d', `carFuel` = '%f'",
	        CarData[carid][carModel],
	        CarData[carid][carOwner],
	        CarData[carid][carPos][0],
	        CarData[carid][carPos][1],
	        CarData[carid][carPos][2],
	        CarData[carid][carPos][3],
	        CarData[carid][carColor1],
	        CarData[carid][carColor2],
	        CarData[carid][carPaintjob],
	        CarData[carid][carLocked],
            CarData[carid][carAlarm],
	        CarData[carid][carFuel]
		);

		for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
		}

		format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
			query,
			CarData[carid][carMods][0],
			CarData[carid][carMods][1],
			CarData[carid][carMods][2],
			CarData[carid][carMods][3],
			CarData[carid][carMods][4],
			CarData[carid][carMods][5],
			CarData[carid][carMods][6],
			CarData[carid][carMods][7],
			CarData[carid][carMods][8],
			CarData[carid][carMods][9],
			CarData[carid][carMods][10],
			CarData[carid][carMods][11],
			CarData[carid][carMods][12],
			CarData[carid][carMods][13]
		);

		format(query, sizeof(query), "%s, `carWeapon0` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carAmmo0` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d'",
			query,
			CarData[carid][carWeapon][0],
			CarData[carid][carWeapon][1],
			CarData[carid][carWeapon][2],
			CarData[carid][carWeapon][3],
			CarData[carid][carAmmo][0],
			CarData[carid][carAmmo][1],
			CarData[carid][carAmmo][2],
			CarData[carid][carAmmo][3]
		);

		format(query, sizeof(query), "%s, `carInsurance` = '%d', `carDamage1` = '%d', `carDamage2` = '%d', `carDamage3` = '%d', `carDamage4` = '%d', `carHealth` = '%f', `carArmour` = '%f', `carDestroyed` = '%d', `carLock` = '%d', `carMileage` = '%f', `carImmob` = '%d', `carBatteryL` = '%f', `carEngineL` = '%f', `carPlate` = '%s', `carComps` = '%d', `carDuplicate` = '%d', `carPlacePos` = '%s', `licenseWeapons` = '%s', `tempoSemPlaca` = '%s' WHERE `carID` = '%d'",
			query,
			CarData[carid][carInsurance],
			CarData[carid][carDamage][0],
			CarData[carid][carDamage][1],
			CarData[carid][carDamage][2],
			CarData[carid][carDamage][3],
			CarData[carid][carHealth],
			CarData[carid][carArmour],
			CarData[carid][carDestroyed],
			CarData[carid][carLock],
			CarData[carid][carMileage],
			CarData[carid][carImmob],
			CarData[carid][carBatteryL],
			CarData[carid][carEngineL],
			CarData[carid][carPlate],
			CarData[carid][carComps],
			CarData[carid][carDupKey],
			FormatPlaceItems(carid),
			FormatCarLicenseWeapons(carid),
			CarData[carid][carSemPlaca],
			CarData[carid][carID]
		);
		printf("Veiculo registrado %d", strlen(query));
		return mysql_tquery(dbCon, query);
	}
	else
	{
	    return 0;
	}
}



forward RegisterPlates(playerid, id, plate[]);
public RegisterPlates(playerid, id, plate[])
{
    new
		rows, str[128];

    cache_get_row_count(rows);

    if(rows)
    {
		new newplate[9];
		format(plate, 9, "%s-%s", placaiMacLTR(), placaiMacNUM());

      	mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", newplate);
		mysql_tquery(dbCon, str, "RegisterPlates", "iis", playerid, id, newplate);
    }
    else {

		new Float: vPos[4];

		GetVehiclePos(CarData[id][carVehicle], vPos[0], vPos[1], vPos[2]);
		GetVehicleZAngle(CarData[id][carVehicle], vPos[3]);

		format(CarData[id][carPlate], 32, plate);
        SetVehicleNumberPlate(CarData[id][carVehicle], CarData[id][carPlate]);
        SaveVehicleDamage(CarData[id][carVehicle]);
		SetVehicleToRespawn(CarData[id][carVehicle]);
		SetVehicleDamage(CarData[id][carVehicle]);
		SetVehiclePos(CarData[id][carVehicle], vPos[0], vPos[1], vPos[2]);
		SetVehicleZAngle(CarData[id][carVehicle], vPos[3]);
        if(GetVehicleDriver(CarData[id][carVehicle]) != INVALID_PLAYER_ID) PutPlayerInVehicle(playerid, CarData[id][carVehicle], 0);
        Car_Registration(id);

		format(str, sizeof(str), "Seu veiculo foi emplacado. Sua placa é: ~n~~y~%s.", CarData[id][carPlate]);
		ShowPlayerFooter(playerid, str);
		//printf(str);
	}
    return 1;
}

forward DuplicatePlates(playerid, id, const plate[]);
public DuplicatePlates(playerid, id, const plate[])
{
    new
		rows, str[128];

    cache_get_row_count(rows);

    if(rows)
    {
		new semP[32];
		format(semP, 10, "SEM PLACA");

		if(strlen(plate) == strlen(semP)){
			format(CarData[id][carPlate], 32, plate);

			CarData[id][carVehicle] = CreateVehicle(CarData[id][carModel], CarData[id][carPos][0],CarData[id][carPos][1],CarData[id][carPos][2],CarData[id][carPos][3], CarData[id][carColor1], CarData[id][carColor2], -1);
			SetVehicleNumberPlate(CarData[id][carVehicle], CarData[id][carPlate]);
			new chassi[32];
			format(chassi, 32, "**************%s", chassiImac());

			PlayerData[playerid][pPCarkey] = id;
			Iter_Add(sv_vehicles, CarData[id][carVehicle]);
			CoreVehicles[CarData[id][carVehicle]][vehFuel] = CarData[id][carFuel];

			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective;

			GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, CarData[id][carLocked], bonnet, boot, objective);
			/*if(!IsABicycle(CarData[id][carVehicle])) SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, CarData[id][carLocked], bonnet, boot, objective);
			else SetVehicleParamsEx(CarData[id][carVehicle], 1, lights, alarm, 0, bonnet, boot, objective);
	*/
			SetVehicleHealth(CarData[id][carVehicle], CarData[id][carHealth]);

			Iter_Add(sv_playercar, id);

			PutPlayerInVehicle(playerid, CarData[id][carVehicle], 0);
			Car_SaveID(id);

			format(str, sizeof(str), "Sua nova placa foi definida~n~~y~%s.", CarData[id][carPlate]);
			ShowPlayerFooter(playerid, str);
		}else{
			new newplate[32];
			format(newplate, 9, "%s-%s", placaiMacLTR(), placaiMacNUM());

			mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carPlate = '%s'", newplate);
			mysql_tquery(dbCon, str, "DuplicatePlates", "iis", playerid, id, newplate);
		}
    }
    else {

		format(CarData[id][carPlate], 32, plate);

		CarData[id][carVehicle] = CreateVehicle(CarData[id][carModel], CarData[id][carPos][0],CarData[id][carPos][1],CarData[id][carPos][2],CarData[id][carPos][3], CarData[id][carColor1], CarData[id][carColor2], -1);
        SetVehicleNumberPlate(CarData[id][carVehicle], CarData[id][carPlate]);

		PlayerData[playerid][pPCarkey] = id;
		Iter_Add(sv_vehicles, CarData[id][carVehicle]);
	  	CoreVehicles[CarData[id][carVehicle]][vehFuel] = CarData[id][carFuel];

		new
			engine,
			lights,
			alarm,
			doors,
			bonnet,
			boot,
			objective;

		GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
        SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, CarData[id][carLocked], bonnet, boot, objective);
		/*if(!IsABicycle(CarData[id][carVehicle])) SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, CarData[id][carLocked], bonnet, boot, objective);
	 	else SetVehicleParamsEx(CarData[id][carVehicle], 1, lights, alarm, 0, bonnet, boot, objective);
*/
		SetVehicleHealth(CarData[id][carVehicle], CarData[id][carHealth]);

        Iter_Add(sv_playercar, id);

		PutPlayerInVehicle(playerid, CarData[id][carVehicle], 0);
        Car_SaveID(id);

		format(str, sizeof(str), "Sua nova placa foi definida~n~~y~%s.", CarData[id][carPlate]);
		ShowPlayerFooter(playerid, str);
		//printf(str);
	}
    return 1;
}


public OnQueryError(errorid, const error[], const callback[], const query[], MySQL:handle)
{
 	printf("** [MySQL]: %s", error);
	Log_Write("logs/mysql_log.txt", "[%s] %s: %s", ReturnDate(), (callback[0]) ? (callback) : ("n/a"), error);
	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    query[128]
	;
	switch (threadid)
	{
	    /*case THREAD_DRESSCLOTHES: {
			cache_get_row_count(rows);
			if (rows) {
			    for (new i = 0; i < rows; i ++)
			    {
	                SetPlayerAttachedObject(extraid, cache_get_value_name_int(i, "slot"), cache_get_value_name_int(i, "object"), cache_get_value_name_int(i, "bone"), cache_get_value_name_float(i, "x"), cache_get_value_name_float(i, "y"),
					cache_get_value_name_float(i, "z"), cache_get_value_name_float(i, "rx"), cache_get_value_name_float(i, "ry"), cache_get_value_name_float(i, "rz"), cache_get_value_name_float(i, "scalex"), cache_get_value_name_float(i, "scaley"), cache_get_value_name_float(i, "scalez"));
			    }
			}
	    }
	    case THREAD_CHECKCLOTHES: {
			cache_get_row_count(rows);
			if (rows) {
			    new str[128], itemname[32], slot, count;
			    for (new i = 0; i < rows; i ++)
			    {
					cache_get_value_name_int(i, "id", cl_dataslot[extraid][i]);
					cache_get_value_name_int(i, "slot", slot);
			        cache_get_value_name(i, "name", itemname);
			        format(str, sizeof(str), "%s%s (Index:%d)\n", str, itemname, slot + 1);
			        count++;
			    }
			    if(count) Dialog_Show(extraid, ClothingList, DIALOG_STYLE_LIST, "What do you want to fix?", str, "Selecionar", "<<");
			}
	    }
	    case THREAD_EQUIPCLOTHES: {
			cache_get_row_count(rows);
			if (rows) {
				new itemname[32], id;
				cache_get_value_name(0, "name", itemname);
                SetPlayerAttachedObject(extraid, cache_get_value_name_int(0, "slot"), cache_get_value_name_int(0, "object"), cache_get_value_name_int(0, "bone"), cache_get_value_name_float(0, "x"), cache_get_value_name_float(0, "y"),
				cache_get_value_name_float(0, "z"), cache_get_value_name_float(0, "rx"), cache_get_value_name_float(0, "ry"), cache_get_value_name_float(0, "rz"), cache_get_value_name_float(0, "scalex"), cache_get_value_name_float(0, "scaley"), cache_get_value_name_float(0, "scalez"));
				SendClientMessageEx(extraid, COLOR_WHITE, "You have positioned %s", itemname);

				cache_get_value_name_int(0, "id", 	id);

				format(query,sizeof(query),"UPDATE clothing SET equip = 0 WHERE owner = '%d' and slot = '%d' and id != '%d'",PlayerData[extraid][pID], cache_get_value_name_int(0, "slot"), id);
				mysql_query(dbCon, query);

				format(query,sizeof(query),"UPDATE clothing SET equip = 1 WHERE owner = '%d' and id = '%d'",PlayerData[extraid][pID], id);
				mysql_query(dbCon, query);
			}
	    }
	    case THREAD_ADJUSTCLOTHES: {
			cache_get_row_count(rows);
			if (rows) {

			    SetPlayerAttachedObject(extraid, cache_get_value_name_int(0, "slot"), cache_get_value_name_int(0, "object"), cache_get_value_name_int(0, "bone"), cache_get_value_name_float(0, "x"), cache_get_value_name_float(0, "y"),
				cache_get_value_name_float(0, "z"), cache_get_value_name_float(0, "rx"), cache_get_value_name_float(0, "ry"), cache_get_value_name_float(0, "rz"), cache_get_value_name_float(0, "scalex"), cache_get_value_name_float(0, "scaley"), cache_get_value_name_float(0, "scalez"));

				ApplyAnimation(extraid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 1, 0, 1);
				EditAttachedObject(extraid, cache_get_value_name_int(0, "slot"));
				BitFlag_On(g_PlayerFlags[extraid], IS_PLAYER_EDITCLOTHING);
			}
	    }
	    case THREAD_TOGGLECLOTHES: {
			cache_get_row_count(rows);
			if (rows) {

				RemovePlayerAttachedObject(extraid, cache_get_value_name_int(0, "slot"));

				format(query,sizeof(query),"UPDATE clothing SET equip = 0 WHERE owner = '%d' and id = '%d'",PlayerData[extraid][pID], cl_dataslot[extraid][cl_selected[extraid]]);
				mysql_query(dbCon, query);
			}
			else
			{
				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and id = '%d'", PlayerData[extraid][pID], cl_dataslot[extraid][cl_selected[extraid]]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_EQUIPCLOTHES);
			}
	    }
	    case THREAD_BONECLOTHES: {
			cache_get_row_count(rows);
			if (rows) {

			 	SetPlayerAttachedObject(extraid, cache_get_value_name_int(0, "slot"), cache_get_value_name_int(0, "object"), cache_get_value_name_int(0, "bone"));
                ApplyAnimation(extraid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 1, 0, 1);
				EditAttachedObject(extraid, cache_get_value_name_int(0, "slot"));
				BitFlag_On(g_PlayerFlags[extraid], IS_PLAYER_EDITCLOTHING);
			}
	    }*/
	    case THREAD_LOG_CON: AccountData[extraid][aConnectionID] = cache_insert_id();
	    case THREAD_SECRET_CONFIRM: {

    	    cache_get_row_count(rows);

    	    if (!rows)
    	    {

                Dialog_Show(extraid, SecretWord, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "{FFFFFF}possível QUEBRA DE Segurança\n\nO servidor sinalizou Você como possivelmente não sendo o proprietário deste personagem, por favor escreva a palavra secreta deste personagem na caixa abaixo para confirmar que é seu.", "Entrar", "Cancelar");
			}
			else
			{
		    	SendClientMessage(extraid, COLOR_YELLOW, "Sua conexão com esta conta foi autenticada com sucesso.");
			    format(query, sizeof(query), "UPDATE `characters` SET `LastIP` = '%s' WHERE `charName` = '%s'", PlayerData[extraid][pIP], ReturnName(extraid)), mysql_query(dbCon, query);

				Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "SERVIDOR: Você tem 60 segundos para fazer o login\nDICA: Troque sua skin em https://www.sp-roleplay.com.br.com.br\n e faça login no painel do usuário\n\nDigite sua senha:", "Logar", "Cancelar");
			}
	    }
    	case THREAD_LOGIN:
   		{
    	    cache_get_row_count(rows);

    	    if (!rows)
    	    {
				Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay","A senha não corresponde!\n\nSERVER: Você tem 60 segundos para fazer o login\nDICA: Troque sua skin em https://www.sp-roleplay.com.br.com.br\n e faça login no painel do usuário\n\nDigite sua senha:", "Logar", "Cancelar");
			}
			else
			{
			    new string[64],active,lastlogin,lastip[16];

			    cache_get_value_name_int(0, "ID", PlayerData[extraid][pID]);
			    cache_get_value_name_int(0, "Activated", active);
			    cache_get_value_name_int(0, "LastLogin", lastlogin);

			    cache_get_value_name(0, "Secret", string);
			    format(PlayerData[extraid][pSecretWord], 32, "%s", string);

			    cache_get_value_name(0, "LastIP", string);
			    format(lastip, sizeof(lastip), "%s", string);

				if(isnull(PlayerData[extraid][pSecretWord]))
				{
				    Dialog_Show(extraid, AddSecretWord, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "{FFFFFF}POSSÍVEL QUEBRA DE Segurança\n\nHabilitamos a verificação de identidade com um código secreto. Esta é uma palavra confidencial que Você receberia quando uma nova conexão for alterada.\n\nPreencha as palavras secretas e Você teria que memorizar.\n\nRecomende que esta não é sua senha.", "Logar", "Cancelar");
				}
				else if((isnull(lastip) || strcmp(lastip, PlayerData[extraid][pIP], true)) && active)
				{
				    Dialog_Show(extraid, SecretWord, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "{FFFFFF}POSSÍVEL QUEBRA DE Segurança\n\nO servidor sinalizou Você como possivelmente não sendo o proprietário deste personagem, por favor escreva a palavra secreta deste personagem na caixa abaixo para confirmar que é seu", "Logar", "Cancelar");
				}
				else SQL_ForceLogin(extraid);
				//else if(gettime() - lastlogin >= 1209600 && active) // 14 day or 2 week
				//{
			 	    /*SendClientMessage(extraid, COLOR_YELLOW, "Autenticação de dois fatores.");
				    SendClientMessage(extraid, COLOR_YELLOW, "Você não joga há um tempo! Por medidas de Segurança, precisamos verificar sua conta antes que Você possa jogar.");

					format(query,sizeof(query),"ip=%s&time=%d&id=%d&username=%s", PlayerData[extraid][pIP], gettime(), PlayerData[extraid][pID], AccountData[extraid][aUsername]);
				    HTTP(extraid,HTTP_POST,"https://sp-roleplay.com.br/php/users/verify_email.php",query,"HttpVerifyRequest");*/


                    //KickEx(extraid);
					//KickEx(extraid);
				//}
			}
		}
		case THREAD_LOAD_CHARACTER:
		{
		    new str[128], active;

			cache_get_row_count(rows);

			if (rows) {
				cache_get_value_name_int(0, "Created", PlayerData[extraid][pCreated]);
				cache_get_value_name(0, "charName", PlayerData[extraid][pNomeChar]);
				//cache_get_value_name(0, "motivoN", PlayerData[extraid][pmotivoN]);
				cache_get_value_name_int(0, "Activated", active);
				cache_get_value_name_int(0, "Gender", PlayerData[extraid][pGender]);
				/*cache_get_value_name(0, "Birthdate", str);
				format(PlayerData[extraid][pBirthdate], 24, str);*/

				cache_get_value_name_int(0, "Birthdate", PlayerData[extraid][pBirthdate]);

				cache_get_value_name(0, "Origin", str);
				format(PlayerData[extraid][pOrigin], 32, str);

				cache_get_value_name_int(0, "Model", PlayerData[extraid][pModel]);
				cache_get_value_name_int(0, "Char", PlayerData[extraid][pChar]);
				cache_get_value_name_int(0, "ContractTime", PlayerData[extraid][pContractTime]);
				cache_get_value_name_int(0, "PhoneNumbr", PlayerData[extraid][pPnumber]);
				cache_get_value_name_int(0, "PhoneModel", PlayerData[extraid][pPmodel]);
				cache_get_value_name_int(0, "cpf", PlayerData[extraid][pCpf]);
				cache_get_value_name_int(0, "pNomeSujo", PlayerData[extraid][pNomeSujo]);
							// ================== [ PHONE SYSTEM ] ============================
				cache_get_value_name_int(0, "PhoneSilent", ph_silentmode[extraid]);
				cache_get_value_name_int(0, "PhoneAir", ph_airmode[extraid]);
				cache_get_value_name_int(0, "PhoneRingtone", ph_CallTone[extraid]);
				cache_get_value_name_int(0, "PhoneTextRingtone", ph_TextTone[extraid]);
							// ================== [ PHONE SYSTEM ] ============================
				cache_get_value_name_float(0, "PosX", PlayerData[extraid][pPos][0]);
				cache_get_value_name_float(0, "PosY", PlayerData[extraid][pPos][1]);
				cache_get_value_name_float(0, "PosZ", PlayerData[extraid][pPos][2]);
				cache_get_value_name_float(0, "PosA", PlayerData[extraid][pPos][3]);
				cache_get_value_name_float(0, "SpawnHealth", PlayerData[extraid][pSHealth]);
				cache_get_value_name_int(0, "Interior", PlayerData[extraid][pInterior]);
				cache_get_value_name_int(0, "World", PlayerData[extraid][pWorld]);
				cache_get_value_name_int(0, "playerSWAT", PlayerData[extraid][pSwat]);
				cache_get_value_name_int(0, "Faction", PlayerData[extraid][pFactionID]);
				cache_get_value_name_int(0, "FactionRank", PlayerData[extraid][pFactionRank]);
				cache_get_value_name_int(0, "Injured", PlayerData[extraid][pInjured]);
				cache_get_value_name_int(0, "playerTimeout", PlayerData[extraid][pTimeout]);
				cache_get_value_name_int(0, "SpawnPoint", PlayerData[extraid][pSpawnPoint]);
				cache_get_value_name_int(0, "SpawnType", PlayerData[extraid][pSpawnType]);
				cache_get_value_name_int(0, "Admin", PlayerData[extraid][pAdmin]);
				cache_get_value_name_int(0, "Tester", PlayerData[extraid][pTester]);
				//cache_get_value_name_int(0, "idUCP", PlayerData[extraid][pIDUCP]);
				cache_get_value_name_int(0, "PlayingHours", PlayerData[extraid][pPlayingHours]);
				cache_get_value_name_int(0, "Level", PlayerData[extraid][pLevel]);
				cache_get_value_name_int(0, "Exp", PlayerData[extraid][pExp]);
				cache_get_value_name_int(0, "plaUpgrade", PlayerData[extraid][pPUpgrade]);
				cache_get_value_name_int(0, "DonateRank", PlayerData[extraid][pDonateRank]);
				if(PlayerData[extraid][pDonateRank]) cache_get_value_name_int(0, "DonateUnix", PlayerData[extraid][pDonateUnix]);
				cache_get_value_name_int(0, "PayDay", PlayerData[extraid][pPayDay]);
				cache_get_value_name_int(0, "PayDayHad", PlayerData[extraid][pPayDayHad]);
				cache_get_value_name_int(0, "PayCheck", PlayerData[extraid][pPayCheck]);
				cache_get_value_name_int(0, "ChequeCash", PlayerData[extraid][pChequeCash]);
				cache_get_value_name_int(0, "BankAccount", PlayerData[extraid][pAccount]);
				cache_get_value_name_int(0, "Cash", PlayerData[extraid][pCash]);
				cache_get_value_name_int(0, "Savings", PlayerData[extraid][pSavings]);
				cache_get_value_name_int(0, "SavingsCollect", PlayerData[extraid][pSavingsCollect]);
				cache_get_value_name_int(0, "AlcoholPerk", PlayerData[extraid][pAlcoholPerk]);
				cache_get_value_name_int(0, "DrugPerk", PlayerData[extraid][pDrugPerk]);
				cache_get_value_name_int(0, "MiserPerk", PlayerData[extraid][pMiserPerk]);
				cache_get_value_name_int(0, "PainPerk", PlayerData[extraid][pPainPerk]);
				cache_get_value_name_int(0, "TraderPerk", PlayerData[extraid][pTraderPerk]);
				cache_get_value_name_int(0, "playerJob", PlayerData[extraid][pJob]);
	            cache_get_value_name_int(0, "playerSideJob", PlayerData[extraid][pSideJob]);
				cache_get_value_name_int(0, "playerJobRank", PlayerData[extraid][pJobRank]);
	            cache_get_value_name_int(0, "playerCareer", PlayerData[extraid][pCareer]);
	            cache_get_value_name_int(0, "playerHouseKey", PlayerData[extraid][pHouseKey]);
	            cache_get_value_name_float(0, "Hunger", PlayerData[extraid][pHunger]);
				cache_get_value_name_int(0, "BanTeam", PlayerData [extraid][pBanTeam]);
				cache_get_value_name_int(0, "FactionTeam", PlayerData [extraid][pFactionTeam]);
				cache_get_value_name_int(0, "PropertyTeam", PlayerData [extraid][pPropertyTeam]);

	            cache_get_value_name(0, "AdminName", str);
	            format(PlayerData[extraid][pAdminName], MAX_PLAYER_NAME, str);

	            cache_get_value_name(0, "Attribute", str);
	            format(PlayerData[extraid][pAttribute], 128, str);

	            cache_get_value_name(0, "PackageWeapons", str);
	            AssignPlayerWeapons(extraid, str);

				//cache_get_value_name(0, "DrugAddiction", str);
				//AssignPlayerDrugAddictions(extraid, str);

				cache_get_value_name_int(0, "DrugAddict", PlayerData[extraid][pDrugAddict]);
				cache_get_value_name_int(0, "DrugAddictStrength", PlayerData[extraid][pDrugAddictStrength]);

	            cache_get_value_name_int(0, "Jailed", PlayerData[extraid][pJailed]);
	            cache_get_value_name_int(0, "Jailtime", PlayerData[extraid][pJailTime]);
	            cache_get_value_name_int(0, "Jailtime2", PlayerData[extraid][pJailTime2]);
	            cache_get_value_name_int(0, "OOCMask", PlayerData[extraid][pOOCMask]);
	            cache_get_value_name_int(0, "FightStyle", PlayerData[extraid][pFightStyle]);
	            cache_get_value_name_int(0, "CarLic", PlayerData[extraid][pCarLic]);
	            cache_get_value_name_int(0, "WepLic", PlayerData[extraid][pWepLic]);
	            cache_get_value_name_int(0, "CCWLicense", PlayerData[extraid][pCCWLic]);
	            cache_get_value_name_int(0, "ADPoint", PlayerData[extraid][pADPoint]);

				cache_get_value_name_int(0, "Gun1", PlayerData[extraid][pGun1]);
				cache_get_value_name_int(0, "Gun2", PlayerData[extraid][pGun2]);
				cache_get_value_name_int(0, "Gun3", PlayerData[extraid][pGun3]);
				cache_get_value_name_int(0, "Ammo1", PlayerData[extraid][pAmmo1]);
				cache_get_value_name_int(0, "Ammo2", PlayerData[extraid][pAmmo2]);
				cache_get_value_name_int(0, "Ammo3", PlayerData[extraid][pAmmo3]);

				cache_get_value_name_int(0, "PrimaryLicense", PlayerData[extraid][pPLicense]);
				cache_get_value_name_int(0, "SecondaryLicense", PlayerData[extraid][pSLicense]);

				cache_get_value_name_int(0, "PlayerCarkey", PlayerData[extraid][pPCarkey]);
				cache_get_value_name_int(0, "PlayerBusinessKey", PlayerData[extraid][pPbiskey]);


				cache_get_value_name_int(0, "Radio", PlayerData[extraid][pRadio]);
				cache_get_value_name_int(0, "RadioChannel", PlayerData[extraid][pRChannel]);
				cache_get_value_name_int(0, "RadioSlot", PlayerData[extraid][pRSlot]);

		        cache_get_value_name(0, "RadioAuth", str);
		        format(PlayerData[extraid][pRAuth], 16, str);

		        cache_get_value_name_int(0, "MedicBill", MedicBill[extraid]);
				cache_get_value_name_float(0, "Health", PlayerData[extraid][pHealth]);
				cache_get_value_name_float(0, "Armour", PlayerData[extraid][pArmour]);

				cache_get_value_name_int(0, "Fishes", PlayerData[extraid][pFishes]);

				cache_get_value_name_int(0, "Checkpoint_Type", PlayerData[extraid][pCP_Type]);
				cache_get_value_name_float(0, "Checkpoint_X", PlayerData[extraid][pCP_X]);
				cache_get_value_name_float(0, "Checkpoint_Y", PlayerData[extraid][pCP_Y]);
				cache_get_value_name_float(0, "Checkpoint_Z", PlayerData[extraid][pCP_Z]);


				if(gettime() - PlayerData[extraid][pTimeout] < 1200) {
				cache_get_value_name_int(0, "OnDuty", 	PlayerData[extraid][pOnDuty]);
				cache_get_value_name_int(0, "Local", PlayerData[extraid][pLocal]);


				for (new i = 0; i < 13; i ++) {
					format(query, sizeof(query), "WpGun%d", i + 1);
					cache_get_value_name_int(0, query, PlayerData[extraid][pGuns][i]);

				  	format(query, sizeof(query), "WpAmmo%d", i + 1);
					cache_get_value_name_int(0, query, PlayerData[extraid][pAmmo][i]);
				}
				}
				else PlayerData[extraid][pTimeout] = 0;

				/* PLAYER CONTACTS */
				format(query, sizeof(query), "SELECT * FROM `phone_contacts` WHERE `contactAdded` = %d", PlayerData[extraid][pPnumber]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_CONTACTS);

				format(query, sizeof(query), "SELECT * FROM `phone_sms` WHERE `PhoneReceive` = %d", PlayerData[extraid][pPnumber]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_SMS);

				format(query, sizeof(query), "SELECT * FROM `clothing` WHERE `owner` = %d", PlayerData[extraid][pID]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_CLOTHING);

				format(query, sizeof(query), "SELECT * FROM `weapon` WHERE `owner` = %d", PlayerData[extraid][pID]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_HOLDWEAPON);

				format(query, sizeof(query), "SELECT * FROM `drugs_char` WHERE `charID` = '%d'", PlayerData[extraid][pID]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_PLAYER_DRUG);

				new carid = PlayerData[extraid][pPCarkey];
				if(carid != 9999)
				{
				    if(!Iter_Contains(sv_playercar, carid) || CarData[carid][carOwner] != PlayerData[extraid][pID])
				    {
						PlayerData[extraid][pPCarkey] = 9999;
					}

					/*if(CarData[carid][carOwner] == PlayerData[extraid][pID])
					{
					    for(new i=0;i<sizeof(removelist_playervehicle);i++) {
							if(removelist_playervehicle[i]-1 == carid) {
							    removelist_playervehicle[i] = 0;
								break;
							}
						}
					}*/
				}

				if (PlayerData[extraid][pAdmin] > 0)
				{
					SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: Você está logado como nível administrativo %d.",PlayerData[extraid][pAdmin]);

					//for(new i=0;i<17;i++) EnableAntiCheatForPlayer(extraid, i, 0);
				}
				if (PlayerData[extraid][pTester] > 0)
				{
					SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: Você está logado como nível de moderador %d.",PlayerData[extraid][pTester]);
				}
	            SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: Bem vindo %s.", ReturnName(extraid, 0));
				SendClientMessageEx(extraid, COLOR_WHITE, "SERVER: Ultima atualização feita em 20/05/2021.");

				if (PlayerData[extraid][pFactionID] != -1) {
					PlayerData[extraid][pFaction] = GetFactionByID(PlayerData[extraid][pFactionID]);

					if (PlayerData[extraid][pFaction] == -1) {
						ResetFaction(extraid);
					}
				}

				BitFlag_On(g_PlayerFlags[extraid], IS_PLAYER_LOGGED);

			    RemoveBuilding(extraid);
			    CreateTextdraws(extraid);
				PreloadAnimations(extraid);

				format(str, sizeof(str), "~w~Bem vindo ~n~~y~%s.", ReturnName(extraid, 0));
				GameTextForPlayer(extraid, str, 5000, 1);

               	if(!active)
				{
					format(query, sizeof(query), "UPDATE `ucp_users_answers` SET `characters_activate` = 1 WHERE `character_id` = %d", PlayerData[extraid][pID]), mysql_query(dbCon, query);
                    mysql_query(dbCon, query);
					SendClientMessage(extraid, COLOR_LIGHTRED, "NOTA: até que uma aplicação e seu personagem sejam confirmados, Você não poderia jogar.");
				    SendClientMessage(extraid, COLOR_LIGHTRED, "VISITE: sp-roleplay.com.br");
                    SendClientMessage(extraid, COLOR_LIGHTRED, "Seu personagem não foi confirmado.");
                    SendClientMessage(extraid, COLOR_LIGHTRED, "Com respeito, equipe do SP-RP.");
					SendClientMessage(extraid, COLOR_LIGHTRED, "SERVER: Ultima atualização feita em 20/05/2021.");
					KickEx(extraid);
				}
				else
				{

	               	/*if(PlayerData[extraid][pAdmin] < 1)
					{
	                    SendClientMessage(extraid, COLOR_LIGHTRED, "O servidor não está disponível para sp-roleplay.com.br");
						KickEx(extraid);
					}*/

					SetPlayerScore(extraid, PlayerData[extraid][pLevel]);

					if (!PlayerData[extraid][pCreated])
					{
		                /*PlayerData[extraid][pPos][0] = 1643.0010;
		                PlayerData[extraid][pPos][1] = -2331.7056;
		                PlayerData[extraid][pPos][2] = -2.6797;
		                PlayerData[extraid][pPos][3] = 359.8919;
		                PlayerData[extraid][pCreated] = 1;
		                PlayerData[extraid][pLevel] = 1;
		                PlayerData[extraid][pSHealth] = 0.0;*/
		                initiateTutorial(extraid);

			            return 1;
					}

					SetSpawnInfo(extraid, NO_TEAM, PlayerData[extraid][pModel], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], PlayerData[extraid][pPos][3], 0, 0, 0, 0, 0, 0);
					TogglePlayerSpectating(extraid, 0);
					TogglePlayerControllable(extraid, 0);
					SetTimerEx("SpawnTimer", 2000, false, "d", extraid);

	                //format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s', `LoginDate` = '%d' WHERE `Username` = '%s'", PlayerData[extraid][pIP], GetUnixTime(), AccountData[extraid][aUsername]), mysql_query(dbCon, query);
					format(query, sizeof(query), "UPDATE `characters` SET `LastLogin` = '%d' WHERE `charName` = '%s'", gettime(), ReturnName(extraid)), mysql_query(dbCon, query);

				}
			}
		}
		case THREAD_PLAYER_HOLDWEAPON: {

		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++)
			    {
			        new weaponid;
			        cache_get_value_name_int(i, "weaponid", weaponid);

			        new slot = g_aWeaponAttach[weaponid];
			        if(slot != -1) {

			            cache_get_value_name_int(i, "id", PlayerAttachWeapon[extraid][slot][awID]);
						cache_get_value_name_float(i, "x", PlayerAttachWeapon[extraid][slot][aPx]);
						cache_get_value_name_float(i, "y", PlayerAttachWeapon[extraid][slot][aPy]);
						cache_get_value_name_float(i, "z", PlayerAttachWeapon[extraid][slot][aPz]);
						cache_get_value_name_float(i, "rx", PlayerAttachWeapon[extraid][slot][aPrx]);
						cache_get_value_name_float(i, "ry", PlayerAttachWeapon[extraid][slot][aPry]);
						cache_get_value_name_float(i, "rz", PlayerAttachWeapon[extraid][slot][aPrz]);
		    			cache_get_value_name_int(i, "bone", PlayerAttachWeapon[extraid][slot][awBone]);
						cache_get_value_name_int(i, "hide", PlayerAttachWeapon[extraid][slot][awHide]);
			        }
				}
			}
		}
		case THREAD_PLAYER_CLOTHING:
		{
		    new str[32];
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_CLOTHES)
			    {
					cache_get_value_name_int(i, "id", ClothingData[extraid][i][cl_sid]);
					cache_get_value_name_int(i, "object", ClothingData[extraid][i][cl_object]);
					cache_get_value_name_float(i, "x", ClothingData[extraid][i][cl_x]);
					cache_get_value_name_float(i, "y", ClothingData[extraid][i][cl_y]);
					cache_get_value_name_float(i, "z", ClothingData[extraid][i][cl_z]);
					cache_get_value_name_float(i, "rx", ClothingData[extraid][i][cl_rx]);
					cache_get_value_name_float(i, "ry", ClothingData[extraid][i][cl_ry]);
					cache_get_value_name_float(i, "rz", ClothingData[extraid][i][cl_rz]);
					cache_get_value_name_float(i, "scalex", ClothingData[extraid][i][cl_scalex]);
					cache_get_value_name_float(i, "scaley", ClothingData[extraid][i][cl_scaley]);
					cache_get_value_name_float(i, "scalez", ClothingData[extraid][i][cl_scalez]);
	    			cache_get_value_name_int(i, "bone", ClothingData[extraid][i][cl_bone]);
					cache_get_value_name_int(i, "slot", ClothingData[extraid][i][cl_slot]);
					cache_get_value_name_int(i, "equip", ClothingData[extraid][i][cl_equip]);

					cache_get_value_name(i, "name", str);
					format(ClothingData[extraid][i][cl_name], 32, str);
				}
			}
		}
		case THREAD_PLAYER_SMS:
		{
		    new str[128];
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_SMS)
			    {
      				SmsData[extraid][i][smsExist] = true;
					cache_get_value_name_int(i, "id", SmsData[extraid][i][smsID]);
					cache_get_value_name_int(i, "PhoneOwner", SmsData[extraid][i][smsOwner]);
					cache_get_value_name_int(i, "PhoneReceive", SmsData[extraid][i][smsReceive]);
					cache_get_value_name_int(i, "Archive", SmsData[extraid][i][smsArchive]);
					cache_get_value_name(i, "PhoneSMS", str);
					format(SmsData[extraid][i][smsText], 128, str);

					cache_get_value_name(i, "Date", str);
					format(SmsData[extraid][i][smsDate], 24, str);

					cache_get_value_name_int(i, "ReadSMS", SmsData[extraid][i][smsRead]);
				}
			}
		}
		case THREAD_PLAYER_CONTACTS:
		{
		    new str[24];
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < 40)
			    {
					cache_get_value_name_int(i, "contactID", ContactData[extraid][i][contactID]);
					cache_get_value_name_int(i, "contactAddee", ContactData[extraid][i][contactNumber]);
					cache_get_value_name(i, "contactName", str);
					format(ContactData[extraid][i][contactName], 24, str);
				}
			}
		}
		case THREAD_VEHICLE_DRUG: {
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_VEHICLE_DRUG_PACKAGE)
			    {
					cache_get_value_name_int(i, "drugID", VehicleDrug[extraid][i][drugID]);
					cache_get_value_name_int(i, "drugType", VehicleDrug[extraid][i][drugType]);
					cache_get_value_name_float(i, "drugQTY", VehicleDrug[extraid][i][drugQTY]);
					cache_get_value_name_int(i, "drugStrength", VehicleDrug[extraid][i][drugStrength]);
					cache_get_value_name_int(i, "drugPackage", VehicleDrug[extraid][i][drugPackage]);
				}
			}
		}
		case THREAD_PLAYER_DRUG: {
		    cache_get_row_count(rows);

			if (rows) {
			    for (new i = 0; i < rows; i ++) if(i < MAX_PLAYER_DRUG_PACKAGE)
			    {
					cache_get_value_name_int(i, "drugID", PlayerDrug[extraid][i][drugID]);
					cache_get_value_name_int(i, "drugType", PlayerDrug[extraid][i][drugType]);
					cache_get_value_name_float(i, "drugQTY", PlayerDrug[extraid][i][drugQTY]);
					cache_get_value_name_int(i, "drugStrength", PlayerDrug[extraid][i][drugStrength]);
					cache_get_value_name_int(i, "drugPackage", PlayerDrug[extraid][i][drugPackage]);
				}
			}
		}
		case THREAD_CHECK_ACCOUNT:
		{
		    cache_get_row_count(rows);

		    if (rows) {

				new
					email[MAX_PLAYER_NAME+1]
				;

				cache_get_value_index_int(0, 0, AccountData[extraid][aUserid]);
				cache_get_value_index(0, 1, email);

				format(AccountData[extraid][aEmail], sizeof(email), email);

				Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "SERVER: Você possui 60 segundos para logar\nDICA: Altere sua skin em https://www.sp-roleplay.com.br\n e faça login no painel do usuário\n\nDigite sua senha:", "Logar", "Cancelar");
			}
			else SendClientMessage(extraid, COLOR_YELLOW, "SERVER: Você precisa estar registrado para jogar neste servidor!"),SendClientMessage(extraid, COLOR_YELLOW, "REGISTRE EM: https://sp-roleplay.com.br"), KickEx(extraid);
    	}
		case THREAD_BLACKLIST_LOOKUP:
		{
		    cache_get_row_count(rows);

		    if (rows) {

			    new
			        reason[64],
					date[36],
					username[24],
					banner[24]
				;

          		cache_get_value_name(0, "Username", username);
          		cache_get_value_name(0, "BannedBy", banner);
		        cache_get_value_name(0, "Date", date);
				cache_get_value_name(0, "Reason", reason);

				if (!strcmp(username, "null", true) || !username[0]) {
					Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Aviso de ban de IP do usuário", "Seu IP foi banido\n\nIP: %s\nAdmin: %s\nData: %s\nMotivo: %s\n\nPara registrar um desbanimento deste usuário, por favor, contate o administrador.", "Fechar", "", PlayerData[extraid][pIP], banner, date, reason);
					KickEx(extraid);
				}
				else Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Aviso de ban de usuário", "BANIDO!\n\nusuário: %s\nAdmin: %s\nData: %s\nMotivo: %s\n\nPara registrar um desbanimento deste usuário, por favor, contate o administrador.", "Close", "", AccountData[extraid][aUsername], banner, date, reason), KickEx(extraid);
		    }
		    else {
			 	format(szQuery, sizeof(szQuery), "SELECT * FROM `bans` WHERE (name = '%s' AND perm = 1) OR (name = '%s' AND expire > NOW() AND perm = 0) OR (playerIP = '%s' AND perm = 1) OR (playerIP = '%s' AND expire > NOW() AND perm = 0)", ReturnName(extraid), ReturnName(extraid), PlayerData[extraid][pIP], PlayerData[extraid][pIP]);
				mysql_tquery(dbCon, szQuery, "OnQueryFinished", "dd", extraid, THREAD_BAN_LOOKUP);
			}
		}
		case THREAD_BAN_LOOKUP: {
		    cache_get_row_count(rows);

		    if (rows) {

			    new
			        reason[64],
					date[36],
					username[24],
					banner[24]
				;

          		cache_get_value_name(0, "name", username);
          		cache_get_value_name(0, "bannedby", banner);
		        cache_get_value_name(0, "date", date);
				cache_get_value_name(0, "reason", reason);

				if (!strcmp(username, "null", true) || !username[0]) {
					Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Aviso de Banimento", "Seu IP foi banido.\n\nIP: %s\nAdmin: %s\nData: %s\nMotivo: %s\n\nPara revisar o banimento entre em contato com um administrador", "Fechar", "", PlayerData[extraid][pIP], banner, date, reason);
					KickEx(extraid);
				}
				else Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Aviso de Banimento", "Você foi banido\n\nPersonagem: %s\nAdmin: %s\nData: %s\nMotivo: %s\n\nPara revisar o banimento entre em contato com um administrador.", "Fechar", "", ReturnName(extraid), banner, date, reason), KickEx(extraid);
		    }
		    else {
				format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Username` = '%s'", AccountData[extraid][aUsername]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_CHARACTER);
			}
		}
		case THREAD_CHECK_CHARACTER: {
		    new characterid;
		    cache_get_row_count(rows);
		    for(new i=0;i!=rows;i++)
		    {
		    	cache_get_value_index_int(i, 0, characterid);

		    	foreach (new x : Player)
		    	{
		    	    if(characterid == PlayerData[x][pID])
		    	    {
		    	        i=rows;
		    	        Kick(extraid);
		    	        return 1;
		    	    }
		    	}
		    }
			format(query, sizeof(query), "SELECT `idUsuario`, `email` FROM `usuarios` WHERE `usuario` = '%s'", AccountData[extraid][aUsername]);
			mysql_tquery(dbCon, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_ACCOUNT);
		}
		case THREAD_UNBAN: {


		    if(cache_affected_rows()) {

				new name[MAX_PLAYER_NAME+1];
				GetPVarString(extraid, "unban_name", name, sizeof(name));

				SendClientMessage(extraid, COLOR_WHITE, "SERVER: desbanido!");

				format(szString, sizeof(szString), "Personagem não banido %s", name);
    			SQL_LogAdmin_Action(extraid, "IG", szString);

			}
			else SendClientMessage(extraid, COLOR_LIGHTRED, "SERVER:NNenhum banimento encontrado para este personagem!");

			DeletePVar(extraid, "unban_name");
		}
		case THREAD_FIND_CHARACTER:
		{
   			cache_get_row_count(rows);

			if (rows)
			{
				new
					username[MAX_PLAYER_NAME+1]
				;
				cache_get_value_index(0, 0, username);
				format(AccountData[extraid][aUsername], sizeof(username), username);
				/*new
					username[MAX_PLAYER_NAME+1],
					email[MAX_PLAYER_NAME+1]
				;
				cache_get_value_index_int(0, 0, AccountData[extraid][aUserid]);
				cache_get_value_index(0, 1, username);
				cache_get_value_index(0, 2, email);

				format(AccountData[extraid][aUsername], sizeof(username), username);
				format(AccountData[extraid][aEmail], sizeof(email), email);*/

	         	BitFlag_On(g_PlayerFlags[extraid], IS_PLAYER_ACCOUNT);
			}
		    else SendClientMessage(extraid, COLOR_YELLOW, "SERVER: Você precisa estar registrado para jogar neste servidor."),SendClientMessage(extraid, COLOR_YELLOW, "REGISTRE-SE AQUI: https://sp-roleplay.com.br"), KickEx(extraid);
		}
	}
	return 1;
}

forward Signal_Load();
public Signal_Load()
{
    new
	    rows,
		string[64];

    cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_SIGNALTOWER)
	{
		cache_get_value_name_int(i, "id", SignalData[i][signalID]);
	    SignalData[i][signalExists] = true;
		cache_get_value_name_float(i, "t_posX", SignalData[i][signalX]);
		cache_get_value_name_float(i, "t_posY", SignalData[i][signalY]);
		cache_get_value_name_float(i, "t_posZ", SignalData[i][signalZ]);
		cache_get_value_name_float(i, "t_range", SignalData[i][signalRange]);

	    cache_get_value_name(i, "t_name", string);
	    format(SignalData[i][signalName], 64, string);
	    CA_CreateDynamicObject_SC(13758, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ], 0.00, 0.00, 0.00);
	}
}

Signal_Create(playerid, name[])
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_SIGNALTOWER; i ++)
		{
	    	if (!SignalData[i][signalExists])
		    {
    	        SignalData[i][signalExists] = true;

    	        SignalData[i][signalX] = x;
    	        SignalData[i][signalY] = y;
    	        SignalData[i][signalZ] = z;
    	        SignalData[i][signalRange] = 500.00;
    	        format(SignalData[i][signalName], 64, name);
                //SignalData[i][signalObject] = CA_CreateDynamicObject_SC(13758, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ], 0.00, 0.00, 0.00);

				mysql_tquery(dbCon, "INSERT INTO `signal_tower` (`t_range`) VALUES(500)", "OnSignalCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Signal_Delete(signalid)
{
	if (signalid != -1 && SignalData[signalid][signalExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `signal_tower` WHERE `id` = '%d'", SignalData[signalid][signalID]);
		mysql_tquery(dbCon, string);

        /*if (IsValidDynamicObject(SignalData[signalid][signalObject]))
		    DestroyDynamicObject(SignalData[signalid][signalObject]);*/

	    SignalData[signalid][signalExists] = false;
	    SignalData[signalid][signalID] = 0;
	}
	return 1;
}

Signal_Save(signalid)
{
	new
	    query[256];

	format(query, sizeof(query), "UPDATE `signal_tower` SET `t_posX` = '%.4f', `t_posY` = '%.4f', `t_posZ` = '%.4f', `t_range` = '%.4f' , `t_name` = '%s' WHERE `id` = '%d'",
	    SignalData[signalid][signalX],
	    SignalData[signalid][signalY],
	    SignalData[signalid][signalZ],
	    SignalData[signalid][signalRange],
	    SignalData[signalid][signalName],
	    SignalData[signalid][signalID]
	);
	return mysql_tquery(dbCon, query);
}

GetClosestSignal(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < sizeof(SignalData); i ++) if(SignalData[i][signalExists])
	{
	    if (PlayerData[playerid][pLocal] != 255)
		{
			if(PlayerData[playerid][pLocal] == 101) fDistance[1] = GetDistance(1554.4711,-1675.6097,16.1953, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);
			else if(PlayerData[playerid][pLocal] == 102) fDistance[1] = GetDistance(1481.0662,-1771.3069,18.7958, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);
			else if(PlayerData[playerid][pLocal] == 103) fDistance[1] = GetDistance(1173.1841,-1323.3143,15.3952, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);
			else if(PlayerData[playerid][pLocal] == 103) fDistance[1] = GetDistance(533.4344,-1812.9364,6.5781, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);
			else
			{
	 		    /*for (new x = 0; x != MAX_BIZZ; x ++) if (PlayerData[playerid][pLocal]-LOCAL_BIZZ == x && GetPlayerInterior(playerid) == BizInfo[x][bInterior]) {
					fDistance[1] = GetDistance(BizInfo[x][bEntranceX],BizInfo[x][bEntranceY],BizInfo[x][bEntranceZ], SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);
				}*/
				new x;
				if(BizEntered[playerid] != -1)
				{
	   				x = BizEntered[playerid];
					fDistance[1] = GetDistance(BizInfo[x][bEntranceX],BizInfo[x][bEntranceY],BizInfo[x][bEntranceZ], SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);
				}
				else if(HouseEntered[playerid] != -1)
				{
				    x = HouseEntered[playerid];
					fDistance[1] = GetDistance(HouseInfo[x][hEntranceX],HouseInfo[x][hEntranceY],HouseInfo[x][hEntranceZ], SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);
				}
			}
		}
		else fDistance[1] = GetPlayerDistanceFromPoint(playerid, SignalData[i][signalX], SignalData[i][signalY], SignalData[i][signalZ]);

		if (fDistance[1] < fDistance[0] && SignalData[i][signalRange] >= fDistance[1])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

stock GetInitials(const string[])
{
	new
	    ret[32],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

/*Entrance_Refresh(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		//EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(EntranceData[entranceid][entranceName], COLOR_DARKBLUE, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

		if (IsValidDynamicCP(EntranceData[entranceid][entranceCP]))
			DestroyDynamicCP(EntranceData[entranceid][entranceCP]);

      	EntranceData[entranceid][entranceCP] = CreateDynamicCP(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], 3, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior], -1, 3.5);
		EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(1239, 2, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

		if (EntranceData[entranceid][entranceIcon] != 0)
			EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
	}
	return 1;
}*/


/*forward DrugTimer(playerid);
public DrugTimer(playerid)
	if(!SufferDrugs{playerid} && AddictDrugs[playerid]==0 && random(5) == 0 && PlayerData[playerid][pDrugAddict] > 0 && PlayerData[playerid][pDrugAddiction][PlayerData[playerid][pDrugAddict]-1] >= 70) {
		AddictDrugs[playerid] = PlayerData[playerid][pDrugAddiction][PlayerData[playerid][pDrugAddict]-1]; // Å´ï¿½Ò·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		SendClientMessage(playerid, COLOR_YELLOW, "Olá");
	}
return
}*/

forward Movedoor_Load();
public Movedoor_Load()
{
	new
	    rows,
		str[64],
		total;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_MOVEDOORS)
	{
        cache_get_value_index_int(i, 0, Doors[i][doorID]);
        cache_get_value_index_int(i, 1, Doors[i][doorModel]);
        cache_get_value_index_int(i, 2, Doors[i][doorFaction]);

        cache_get_value_index_float(i, 3, Doors[i][doorPosX]);
        cache_get_value_index_float(i, 4, Doors[i][doorPosY]);
        cache_get_value_index_float(i, 5, Doors[i][doorPosZ]);
        cache_get_value_index_float(i, 6, Doors[i][doorPosRX]);
        cache_get_value_index_float(i, 7, Doors[i][doorPosRY]);
        cache_get_value_index_float(i, 8, Doors[i][doorPosRZ]);

        cache_get_value_index_int(i, 9, Doors[i][doorInterior]);
        cache_get_value_index_int(i, 10, Doors[i][doorVirtualWorld]);

        cache_get_value_index(i, 11, str);
        format(Doors[i][doorName], 64, "%s", str);

        cache_get_value_index_float(i, 12, Doors[i][doorOpenSpeed]);
        cache_get_value_index_float(i, 13, Doors[i][doorMoveX]);
        cache_get_value_index_float(i, 14, Doors[i][doorMoveY]);
        cache_get_value_index_float(i, 15, Doors[i][doorMoveZ]);

        cache_get_value_index_float(i, 16, Doors[i][doorMoveRX]);
        cache_get_value_index_float(i, 17, Doors[i][doorMoveRY]);
        cache_get_value_index_float(i, 18, Doors[i][doorMoveRZ]);

		Doors[i][doorObject] = CreateDynamicObject(Doors[i][doorModel], Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ], Doors[i][doorVirtualWorld], Doors[i][doorInterior], -1, 200.0);

		Iter_Add(sv_movedoors, i);

		total++;
	}
	printf("Loaded %d dynamic movable doors from MySQL.", total);
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	new
	    rows,
	    rank[16],
		str[32];

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
	    FactionData[i][factionExists] = true;
		cache_get_value_name_int(i, "factionID", FactionData[i][factionID]);

	    cache_get_value_name(i, "factionName", str);
	    format(FactionData[i][factionName], 32, str);

		cache_get_value_name_int(i, "factionColor", FactionData[i][factionColor]);
		cache_get_value_name_int(i, "factionType", FactionData[i][factionType]);
		cache_get_value_name_int(i, "factionRanks", FactionData[i][factionRanks]);

		for (new j = 0; j < 16; j ++) {
		    format(rank, sizeof(rank), "factionRank%d", j + 1);
		    cache_get_value_name(i, rank, str);
		    format(FactionRanks[i][j], 32, str);
		}
	}
	return 1;
}

forward Warehouse_Load();
public Warehouse_Load()
{
	new
	    str[256],
	    rows;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_WAREHOUSE)
	{

		cache_get_value_name_int(i, "fw_id",WareHouseInfo[i][whID]);
		cache_get_value_name_float(i, "fw_x", WareHouseInfo[i][whX]);
		cache_get_value_name_float(i, "fw_y", WareHouseInfo[i][whY]);
		cache_get_value_name_float(i, "fw_z", WareHouseInfo[i][whZ]);

		cache_get_value_name(i, "fw_player1", str);
		format(WareHouseInfo[i][whPlayer1], 24, str);
		cache_get_value_name(i, "fw_player2", str);
		format(WareHouseInfo[i][whPlayer2], 24, str);

		cache_get_value_name_int(i, "fw_type",WareHouseInfo[i][whType]);
		cache_get_value_name_int(i, "fw_stock",WareHouseInfo[i][whStock]);
		cache_get_value_name_int(i, "fw_maxstock",WareHouseInfo[i][whMaxstock]);

		cache_get_value_name_int(i, "fw_world",WareHouseInfo[i][whWorld]);
		cache_get_value_name_int(i, "fw_int",WareHouseInfo[i][whInt]);

		Warehouse_Refresh(i);

		Iter_Add(sv_warehouse, i);
	}
	printf("Loaded %d warehouse from MYSQL.", rows);
	return 1;
}


forward Bizz_Load();
public Bizz_Load()
{
	new
	    str[256],
	    rows;

	cache_get_row_count(rows);

	for (new i = 0; i < rows; i ++) if (i < MAX_BIZZ)
	{
		cache_get_value_name_int(i, "biz_id", BizInfo[i][bID]);
		cache_get_value_name_int(i, "biz_owned", BizInfo[i][bOwned]);

		cache_get_value_name(i, "biz_owner", str);
		format(BizInfo[i][bOwner], 24, str);

		cache_get_value_name(i, "biz_info", str);
		format(BizInfo[i][bInfo], 256, str);

		cache_get_value_name(i, "biz_items", str);
		AssignBusinessItems(i, str);

		cache_get_value_name_int(i, "biz_type", BizInfo[i][bType]);
		cache_get_value_name_int(i, "biz_subtype", BizInfo[i][bsubType]);
		cache_get_value_name_float(i, "biz_enX", BizInfo[i][bEntranceX]);
		cache_get_value_name_float(i, "biz_enY", BizInfo[i][bEntranceY]);
		cache_get_value_name_float(i, "biz_enZ", BizInfo[i][bEntranceZ]);
		cache_get_value_name_float(i, "biz_etX", BizInfo[i][bExitX]);
		cache_get_value_name_float(i, "biz_etY", BizInfo[i][bExitY]);
		cache_get_value_name_float(i, "biz_etZ", BizInfo[i][bExitZ]);
		cache_get_value_name_int(i, "biz_level", BizInfo[i][bLevelNeeded]);
		cache_get_value_name_int(i, "biz_price", BizInfo[i][bBuyPrice]);
		cache_get_value_name_int(i, "biz_encost", BizInfo[i][bEntranceCost]);
		cache_get_value_name_int(i, "biz_till", BizInfo[i][bTill]);
		cache_get_value_name_int(i, "biz_locked", BizInfo[i][bLocked]);
		cache_get_value_name_int(i, "biz_interior", BizInfo[i][bInterior]);
		cache_get_value_name_int(i, "biz_world", BizInfo[i][bWorld]);
		cache_get_value_name_int(i, "biz_prod", BizInfo[i][bProducts]);
		cache_get_value_name_int(i, "biz_maxprod", BizInfo[i][bMaxProducts]);
		cache_get_value_name_int(i, "biz_priceprod", BizInfo[i][bPriceProd]);
		cache_get_value_name_float(i, "biz_carX", BizInfo[i][bBuyingCarX]);
		cache_get_value_name_float(i, "biz_carY", BizInfo[i][bBuyingCarY]);
		cache_get_value_name_float(i, "biz_carZ", BizInfo[i][bBuyingCarZ]);
		cache_get_value_name_float(i, "biz_carA", BizInfo[i][bBuyingCarA]);
		cache_get_value_name_float(i, "biz_boatX", BizInfo[i][bBuyingBoatX]);
		cache_get_value_name_float(i, "biz_boatY", BizInfo[i][bBuyingBoatY]);
		cache_get_value_name_float(i, "biz_boatZ", BizInfo[i][bBuyingBoatZ]);
		cache_get_value_name_float(i, "biz_boatA", BizInfo[i][bBuyingBoatA]);
		cache_get_value_name_float(i, "biz_airX", BizInfo[i][bBuyingAirX]);
		cache_get_value_name_float(i, "biz_airY", BizInfo[i][bBuyingAirY]);
		cache_get_value_name_float(i, "biz_airZ", BizInfo[i][bBuyingAirZ]);
		cache_get_value_name_float(i, "biz_airA", BizInfo[i][bBuyingAirA]);
		Bizz_Refresh(i);

		Iter_Add(sv_business, i);
		new nomeemp[1024];
		format(nomeemp, sizeof(nomeemp), "%s", BizInfo[i][bInfo]);
		BizInfo[i][EmpText] = CreateDynamic3DTextLabel(nomeemp, 0xFFFFFFFF, BizInfo[i][bEntranceX], BizInfo[i][bExitY], BizInfo[i][bExitZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BizInfo[i][bWorld], BizInfo[i][bInterior]);

		LoadBizFurnitures(i);
	}
	printf("Carregados %d Empresas do Banco de Dados.", rows);
	return 1;
}

UpdateBizInfo(bizid)
{
	new
	    query[1024];

		

	

	format(query, sizeof(query), "UPDATE `business` SET `biz_owned` = '%d',`biz_owner` = '%s', `biz_info` = '%s', `biz_items` = '%s', `biz_type` = '%d', `biz_subtype` = '%d', `biz_enX` = '%.4f', `biz_enY` = '%.4f', `biz_enZ` = '%.4f', `biz_etX` = '%.4f', `biz_etY` = '%.4f', `biz_etZ` = '%.4f', `biz_level` = '%d', `biz_price` = '%d', `biz_encost` = '%d', `biz_till` = '%d', `biz_locked` = '%d', `biz_interior` = '%d', `biz_world` = '%d', `biz_prod` = '%d', `biz_maxprod` = '%d', `biz_priceprod` = '%d'",
        BizInfo[bizid][bOwned],
        BizInfo[bizid][bOwner],
        SQL_ReturnEscaped(BizInfo[bizid][bInfo]),
        FormatBusinessItems(bizid),
        BizInfo[bizid][bType],
        BizInfo[bizid][bsubType],
		BizInfo[bizid][bEntranceX],
		BizInfo[bizid][bEntranceY],
		BizInfo[bizid][bEntranceZ],
		BizInfo[bizid][bExitX],
		BizInfo[bizid][bExitY],
		BizInfo[bizid][bExitZ],
		BizInfo[bizid][bLevelNeeded],
		BizInfo[bizid][bBuyPrice],
		BizInfo[bizid][bEntranceCost],
		BizInfo[bizid][bTill],
		BizInfo[bizid][bLocked],
		BizInfo[bizid][bInterior],
		BizInfo[bizid][bWorld],
		BizInfo[bizid][bProducts],
		BizInfo[bizid][bMaxProducts],
		BizInfo[bizid][bPriceProd]
	);

	format(query, sizeof(query), "%s, `biz_carX` = '%.4f', `biz_carY` = '%.4f', `biz_carZ` = '%.4f', `biz_carA` = '%.4f', `biz_boatX` = '%.4f', `biz_boatY` = '%.4f', `biz_boatZ` = '%.4f', `biz_boatA` = '%.4f', `biz_airX` = '%.4f', `biz_airY` = '%.4f', `biz_airZ` = '%.4f', `biz_airA` = '%.4f'",
        query,
		BizInfo[bizid][bBuyingCarX],
		BizInfo[bizid][bBuyingCarY],
		BizInfo[bizid][bBuyingCarZ],
		BizInfo[bizid][bBuyingCarA],
		BizInfo[bizid][bBuyingBoatX],
		BizInfo[bizid][bBuyingBoatY],
		BizInfo[bizid][bBuyingBoatZ],
		BizInfo[bizid][bBuyingBoatA],
		BizInfo[bizid][bBuyingAirX],
		BizInfo[bizid][bBuyingAirY],
		BizInfo[bizid][bBuyingAirZ],
		BizInfo[bizid][bBuyingAirA]
	);

	format(query, sizeof(query), "%s WHERE `biz_id` = '%d'",
		query,
		BizInfo[bizid][bID]
	);
	return mysql_tquery(dbCon, query);
}

forward OnSignalCreated(signalid);
public OnSignalCreated(signalid)
{
	if (signalid == -1 || !SignalData[signalid][signalExists])
	    return 0;

	SignalData[signalid][signalID] = cache_insert_id();

	Signal_Save(signalid);

	return 1;
}
forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	    return 0;

	FactionData[factionid][factionID] = cache_insert_id();

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);

	return 1;
}

// PHONE SYSTEM
forward SendPlayerSMS(playerid, numberid, number);
public SendPlayerSMS(playerid, numberid, number)
{
	new text[128], query[256], exist = -1, phonenumb;
    GetPVarString(playerid, "SMSPhoneText", text, 128);
    DeletePVar(playerid, "SMSPhoneText");
    smstimer[playerid] = 0;
	new targetid = INVALID_PLAYER_ID;

  	foreach (new i : Player)
	{
		if(PlayerData[playerid][pPnumber] != PlayerData[i][pPnumber] && ((numberid != -1 && PlayerData[i][pPnumber] == ContactData[playerid][numberid][contactNumber]) || (number > 0 && PlayerData[i][pPnumber] == number))) {

			targetid = i;

			if(number > 0 && PlayerData[i][pPnumber] == number) phonenumb = number;
			else phonenumb = PlayerData[i][pPnumber];

			break;
		}
	}

	if(targetid != INVALID_PLAYER_ID && GetPhoneSignal(targetid) && !ph_airmode[targetid] && ph_menuid[targetid] != 6 && !deathmode[targetid] && !PlayerData[targetid][pInjured] && !PlayerData[targetid][pJailed]) {

		for (new x = 0; x < MAX_SMS; x ++)
		{
			if(!SmsData[targetid][x][smsExist])
			{
				exist = x;
				break;
			}
		}
		if(exist != -1)
		{


		if(!ph_opening{ targetid }) ShowPlayerPhone(targetid);
	    RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);
	    ShowEmo_Phone(targetid, 3);

	  	if(!ph_silentmode[targetid]) {
			PlayPlayerTextTone(targetid);
		}

		new pdate[24];
		format(pdate, 24, "%s", ReturnPhoneDateTime());

		format(query, sizeof(query), "INSERT INTO `phone_sms` (`PhoneReceive`, `PhoneOwner`, `PhoneSMS`, `ReadSMS`, `Archive`, `Date`) VALUES ('%d', '%d', '%s', '0', '0', '%s');", phonenumb, PlayerData[playerid][pPnumber], text, pdate);
		mysql_query(dbCon, query);

        SmsData[targetid][exist][smsID] = cache_insert_id();
		SmsData[targetid][exist][smsExist] = true;
		SmsData[targetid][exist][smsOwner] = PlayerData[playerid][pPnumber];
		SmsData[targetid][exist][smsReceive] = phonenumb;
		SmsData[targetid][exist][smsArchive] = 0;
		SmsData[targetid][exist][smsRead] = 0;
		format(SmsData[targetid][exist][smsText], 128, text);
		format(SmsData[targetid][exist][smsDate], 24, pdate);

		//-------------------------------------------------------------------------------------

		ph_menuid[playerid]=5;
		ph_sub_menuid[playerid]=5;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

        ShowEmo_Phone(playerid, 1);
		GameTextForPlayer(playerid, "~r~R$-1", 5000, 1);
		PlayerData[playerid][pCash] -= 1;


	    return 1;
	    }
	}
	ph_menuid[playerid]=5;
	ph_sub_menuid[playerid]=6;
	ShowEmo_Phone(playerid, 2);
	RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

	return 1;
}



forward SendPlayerCall(playerid, signal, number, numberid);
public SendPlayerCall(playerid, signal, number, numberid)
{
	calltimer[playerid] = 0;


	if(!signal)
	{
		ph_menuid[playerid]=5;
		ph_sub_menuid[playerid]=7;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	    return 1;
	}

	new targetid = INVALID_PLAYER_ID;

  	foreach (new i : Player)
	{
		if(PlayerData[playerid][pPnumber] != PlayerData[i][pPnumber] && ((numberid != -1 && PlayerData[i][pPnumber] == ContactData[playerid][numberid][contactNumber]) || (number > 0 && PlayerData[i][pPnumber] == number))) {
			targetid = i;
			number = PlayerData[i][pPnumber];
			break;
		}
	}

	if(targetid != INVALID_PLAYER_ID && PlayerData[targetid][pSpectating] == INVALID_PLAYER_ID && GetPhoneSignal(targetid) && !ph_airmode[targetid] && ph_menuid[targetid] != 6 && !deathmode[targetid] && !PlayerData[targetid][pInjured] && !PlayerData[targetid][pJailed]) {

	    if(PlayerData[targetid][pCallLine] != INVALID_PLAYER_ID)
	    {
		 	ph_menuid[playerid]=5;
			ph_sub_menuid[playerid]=2;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
			return 1;
	    }
		if(!ph_opening{ targetid })
		{
			SendClientMessage(targetid, COLOR_WHITE, "[ ! ] Nota: para alternar o telefone, use /phone. Para abrir o mouse, use /cc.");
			ShowPlayerPhone(targetid);
		}
		if(!ph_silentmode[targetid]) {
			PlayPlayerCallTone(targetid);
			SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, "* %s's toque de telefone.", ReturnName(targetid, 0));
		}
		new tar_contact = -1;
		for(new i = 0; i != 40; ++i)
		{
			if(ContactData[targetid][i][contactNumber] == PlayerData[playerid][pPnumber])
			{
				tar_contact = i;
				break;
			}
		}

		if(tar_contact == -1)
		{
			format(ph_call_string[targetid], 64, "~n~%d", PlayerData[playerid][pPnumber]);
		}
		else format(ph_call_string[targetid], 64, "~n~%s~n~(%d)", ContactData[targetid][tar_contact][contactName], ContactData[targetid][tar_contact][contactNumber]);

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[targetid][pCallLine] = playerid;

		ph_menuid[targetid]=7;
		ph_sub_menuid[targetid]=2;
		RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);
        PlayerData[targetid][pCallConnect] = playerid;

        // Person variable phone
        PlayerData[playerid][pCallConnect] = targetid;
		return 1;
	}

	ph_menuid[playerid]=5;
	ph_sub_menuid[playerid]=3;
	RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}
/*// ================== [ PHONE SYSTEM ] ============================

forward SendPlayerCall(playerid, phonenumber);
public SendPlayerCall(playerid, phonenumber)
{
	new targetid = GetNumberOwner(phonenumber);

    if(!GetPhoneSignal(playerid)) PlayerData[playerid][pCallState] = 3; // No Signal
	else if (targetid == INVALID_PLAYER_ID) PlayerData[playerid][pCallState] = 4; // Number is out of reach
	else if (targetid == playerid && !PlayerData[targetid][pCallState] && ph_section[targetid] != PH_OFF && !ph_airmode[targetid]) PlayerData[playerid][pCallState] = 2; // Call Failed
	else
	{
		if(!ph_opening{ targetid })
		{
			SendClientMessage(targetid, COLOR_WHITE, "[ ! ] Note: To toggle the phone, use /phone. To bring up the mouse, use /cc.");
			ShowPlayerPhone(targetid);
		}
		if(!ph_silentmode[targetid]) {
			PlayPlayerCallTone(targetid);
			SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, "* %s's phone rings.", ReturnName(targetid, 0));
		}

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[targetid][pCallType] = 1;
		SetPhoneSection(targetid, PH_CALLING, 0);

		PlayerData[targetid][pCallState] = 5;
		PlayerData[playerid][pCallState] = 5;
		PlayerData[playerid][pCallLine] = targetid;
	}
    Refreash_Phone(playerid);
	return 1;
}

// ================== [ PHONE SYSTEM ] ============================*/

forward ConnectRadio(playerid, slot, channel);
public ConnectRadio(playerid, slot, channel)
{
    if (PlayerData[playerid][pRadio])
	{
		new done = 0, query[128], pass[16];

		format(query, sizeof(query), "SELECT * FROM `radio` WHERE `channel` = %d", channel);
		mysql_query(dbCon, query);

		if(cache_num_rows()) {

			cache_get_value_name(0, "password", pass);

            if(strcmp(pass, "não possui", false))
            {
                // Straight code, own,
                new owning_id;
                cache_get_value_name_int(0, "owning_character", owning_id);
				if(!strcmp(PlayerData[playerid][pRAuth], pass, false) || PlayerData[playerid][pID] == owning_id)
				{
				 	PlayerData[playerid][pRChannel] = channel;
					PlayerData[playerid][pRSlot] = slot;
					done = 1;
				}
				else
				{
				    SendClientMessage(playerid, COLOR_YELLOW2, "* Erro de conexão: a senha está incorreta (/auth)");
					PlayerData[playerid][pRChannel] = 0;
					PlayerData[playerid][pRSlot] = slot;
					done = 1;
				}
			}
		}

		if(!done)
		{
			PlayerData[playerid][pRChannel] = channel;
			PlayerData[playerid][pRSlot] = slot;
		}
	}
	else
	{
 	    PlayerData[playerid][pRSlot] = 1;
	    PlayerData[playerid][pRChannel] = 0;
	    format(PlayerData[playerid][pRAuth], 16,"não possui");

	}

}

stock GetBusinessCargoBuy(bizid)
{
    new cargo = GetProductPerCargo(BizInfo[bizid][bType]);
    return BizInfo[bizid][bMaxProducts]/cargo - floatround((float(BizInfo[bizid][bProducts])/float(cargo)), floatround_ceil);
}

stock GetBusinessCargoNeeded(bizid)
{
    return floatround(BizInfo[bizid][bTill]/BizInfo[bizid][bPriceProd], floatround_floor);
}

stock GetBusinessCargoCanBuy(bizid) {
	new buy = GetBusinessCargoBuy(bizid), need = GetBusinessCargoNeeded(bizid),canbuy;
	if(buy && need) if(need >= buy) { canbuy = buy; } else { canbuy = need; }
	return canbuy;
}

public OnPlayerPickUpDynamicPickup(playerid, pickupid)
{
	//new str[256];

	if(pickupid == NewsPickup) {
		GameTextForPlayer(playerid, "~w~/jornal para ler o jornal sobre possiveis empregos na cidade~n~", 8000, 4);
		return 1;
	}
	else if(pickupid == FarmerPickup) {
		GameTextForPlayer(playerid, "~w~Digite /farmerjob para ser ~n~um fazendeiro", 5000, 3);
		return 1;
	}
	else if(pickupid == MechanicPickup) {
		GameTextForPlayer(playerid, "~w~Digite /mechanicjob para ser ~n~um mecanico", 5000, 3);
		return 1;
	}
	else if(pickupid == ArrestPickup) {
		GameTextForPlayer(playerid, "~w~Digite /prender para prender", 5000, 3);
		return 1;
	}

  /*  foreach(new i : sv_business) if (BizInfo[i][bPickup] == pickupid)
	{

		if(PlayerData[playerid][pJob] == JOB_TRUCKER && GetProductCargo(BizInfo[i][bType]) != -1)
		{
			if(BizInfo[i][bPriceProd] && GetBusinessCargoCanBuy(i))
			{
		  		SendClientMessage(playerid, COLOR_WHITE, "negócios{A4D247} com empregos.{FFFFFF} Clique para comprar agora.");
				SendClientMessageEx(playerid, COLOR_GRAD1, "(Procura-se: {FFFFFF}%d {B4B5B7}caixas de{FFFFFF} %s {B4B5B7}, pagas-se {FFFFFF}%s {B4B5B7}por cada uma.)", GetBusinessCargoCanBuy(i), g_arrIndItemNames[GetProductCargo(BizInfo[i][bType])], FormatNumber(BizInfo[i][bPriceProd]));
			}
			else
			{
				SendClientMessage(playerid, COLOR_WHITE, "Empresa{DB5A2B} não está a venda{FFFFFF}");
				SendClientMessage(playerid, COLOR_GRAD1, "(está cheia de produtos ou os funcionarios não querem comprar!)");
			}
			break;
		}
		if(BizInfo[i][bOwned] == 1) {
			format(str, sizeof(str), "%s Taxa de entrada: R$%d, use /entrar",BizInfo[i][bInfo],BizInfo[i][bEntranceCost]);
			break;
		}
		else format(str, sizeof(str), "A empresa %s está a venda por: R$%d, nível: %d. Use /comprarempresa",BizInfo[i][bInfo],BizInfo[i][bBuyPrice],BizInfo[i][bLevelNeeded]);
		
		SendClientMessage(playerid, -1, str);
		break;

	    format(str, sizeof(str), "~r~%s~n~~n~~w~/entrar", EntranceData[i][entranceName]);
		GameTextForPlayer(playerid, str, 8000, 5);
	}*/

	for (new i = 0; i != 2; i ++) if (DollaPickup[i] == pickupid)
	{
		if(PlayerData[playerid][pPayCheck] > 0)
		{
          	new tmp2[128];
        	format(tmp2, sizeof(tmp2), "~w~Você acabou de receber~n~Seu salário: ~g~R$%d%d", PlayerData[playerid][pPayCheck]);
          	GameTextForPlayer(playerid, tmp2, 5000, 4);
          	Log_Write("logs/cheque.txt", "[%s] %s(%d): get paycheck %d", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pID], PlayerData[playerid][pPayCheck]);
			PlayerData[playerid][pCash] += PlayerData[playerid][pPayCheck];
			PlayerData[playerid][pPayCheck] = 0;
          	PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
		}
	}

    if(pickupid == L_a_Pickup[0] || pickupid == L_a_Pickup[1] || pickupid == L_a_Pickup[2] || pickupid == L_a_Pickup[3] || pickupid == L_a_Pickup[4] || pickupid == L_a_Pickup[5] || pickupid == L_a_Pickup[6] || pickupid == L_a_Pickup[7] || pickupid == L_a_Pickup[8] || pickupid == L_a_Pickup[9])
	{
		if(!PlayerData[playerid][pOnDuty])
		{
		    SendClientMessage(playerid, COLOR_WHITE, "Guarda Geraldo, diz: Olá, deseja passar?");
			SendClientMessage(playerid, COLOR_DARKGOLDENROD, "Use \"/abrirpedagio\" Para abrir a barreira.");
			return 1;
		}
		new szCostString[56];
		format(szCostString, sizeof(szCostString), "Guarda Nunes: Olá, tem que pagar %d reais para passar.", TollCost);
		SendClientMessage(playerid, COLOR_WHITE, szCostString);
		SendClientMessage(playerid, COLOR_DARKGOLDENROD, "Use \"/abrirpedagio\" para pagar o guarda.");
	}
	return 1;
}

// Dialog

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}

Dialog:WithdrawSavings(playerid, response, listitem, inputtext[])
{
	if(response) {
		SendClientMessage(playerid, COLOR_WHITE, "Você fechou sua conta poupança.");
		PlayerData[playerid][pCash] += PlayerData[playerid][pSavingsCollect];
		PlayerData[playerid][pSavings] = 0;
		PlayerData[playerid][pSavingsCollect] = 0;
	}
	return 1;
}

Dialog:ReportConfirm(playerid, response, listitem, inputtext[])
{
	if(response) {
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: O seu relatorio foi enviado para todos os administradores online.");
		PlayerData[playerid][pReport] = 1;
		SendAdminAlert(COLOR_REPORT, "Use '/reports list' para checar");
	}
	else {
	    format(PlayerData[playerid][pReportMessage], 64, "(null)");
	}
	return 1;
}

Dialog:BusinessBuy_Radio(playerid, response, listitem, inputtext[])
{
	new
	    bizid = -1;

    if ((bizid = Bizz_Inside(playerid)) != -1 && response)
    {
		if (BizInfo[bizid][bType] == 3)
		{
			listitem = listitem + 9;

			if (PlayerData[playerid][pCash] < BizInfo[bizid][bItems][listitem])
				return GameTextForPlayer(playerid, "~r~Você não pode pagar", 5000, 1);

            if(BizInfo[bizid][bItems][listitem] <= 0)
				return GameTextForPlayer(playerid, "~r~Sem estoque", 5000, 1);

			switch (listitem)
		    {
		        case 9: // Radio 2
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pRadio] = 3;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(szString, sizeof(szString), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, szString, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar um rádio 3 %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "Você comprou um modelo de rádio padrão.");
					SendClientMessage(playerid, COLOR_WHITE, "Use /ajudaradio para ver mais instruções.");
				}
			    case 10: // Radio 5
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pRadio] = 5;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(szString, sizeof(szString), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, szString, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar um rádio 5 %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "Você comprou um modelo de rádio avançado.");
					SendClientMessage(playerid, COLOR_WHITE, "Use /ajudaradio para ver mais instruções.");
				}
			    case 11: // Radio 8
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pRadio] = 8;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(szString, sizeof(szString), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, szString, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar um rádio 8 %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "Você comprou um modelo de rádio importado.");
					SendClientMessage(playerid, COLOR_WHITE, "Use /ajudaradio para ver mais instruções.");
				}
			}
		}
	}
	return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	new
	    bizid = -1, string[128];

    if ((bizid = Bizz_Inside(playerid)) != -1 && response)
    {
		if (BizInfo[bizid][bType] == 3)
		{
			if (PlayerData[playerid][pCash] < BizInfo[bizid][bItems][listitem] && listitem != 9)
				return GameTextForPlayer(playerid, "~r~Você não pode pagar", 5000, 1);

            if(BizInfo[bizid][bItems][listitem] <= 0)
				return GameTextForPlayer(playerid, "~r~Sem estoque", 5000, 1);

			switch (listitem)
		    {
		        case 0: // Gas Can
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pGasCan]++;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar um lata de gás %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "Você comprou três galões.");
					SendClientMessage(playerid, COLOR_WHITE, "Use /gascan para reabastecer");

				}
			    case 1: // Boombox
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pBoombox]=1;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar uma boombox %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GREEN, "Comandos boombox:");
					SendClientMessage(playerid, COLOR_WHITE, " /jbl [place/take/grant/adjust], setstation");

				}
			    case 2: // Baseball Bat
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					GivePlayerValidWeapon(playerid, 5, 1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar uma ripa de madeira %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);
				}
			    case 3: // Flowers
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					GivePlayerValidWeapon(playerid, 14, 1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar rosas %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

				}
			    case 4: // Cane
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					GivePlayerValidWeapon(playerid, 15, 1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar um cano PVC %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);
				}
			    case 5: // Camera
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					GivePlayerValidWeapon(playerid, 43, 500);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar uma camera TEKPIX %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);
				}
			    case 6: // OOC Mask
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					PlayerData[playerid][pOOCMask]=1;

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar uma mascara %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

					SendClientMessage(playerid, COLOR_GRAD4, "Você comprou uma mascara");
					SendClientMessage(playerid, COLOR_WHITE, "Use /mascara");
				}
			    case 7: // Drink
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pDrink]++;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar uma bebida %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

				    SendClientMessage(playerid, COLOR_GRAD4, "Você comprou uma bebida");
				    SendClientMessage(playerid, COLOR_WHITE, "Use /bdrink");
				}
			    case 8: // Cigarettes
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pCigarettes]+=20;
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar uma carteira de cigarro Eight %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

				    SendClientMessage(playerid, COLOR_GRAD4, "Você comprou uma carteira de cigarro.");
				    SendClientMessage(playerid, COLOR_WHITE, "Use /pitem para fumar!");
				}
			    case 9: // Celular
		        {
					BizInfo[bizid][bProducts]--;
					PlayerData[playerid][pCash] -= BizInfo[bizid][bItems][listitem];
					PlayerData[playerid][pPmodel] = 18868;
					PlayerData[playerid][pPnumber] = 10000 + random(99999);
					BizInfo[BizEntered[playerid]][bTill] += floatround(BizInfo[bizid][bItems][listitem]*0.1);

					UpdateBizInfo(bizid);

				    format(string, sizeof(string), "~r~-R$%d", BizInfo[bizid][bItems][listitem]);
				    GameTextForPlayer(playerid, string, 5000, 1);

					Log_Write("logs/biz.txt", "[%s] %s: pago R$%d para comprar um celular %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[BizEntered[playerid]][bItems][0], BizEntered[playerid], BizInfo[BizEntered[playerid]][bID]);

				    SendClientMessage(playerid, COLOR_GRAD4, "Você comprou um celular.");
				    SendClientMessage(playerid, COLOR_WHITE, "Use /celular para usar o celular");
				}
			    case 10: // Radio
		        {
					format(string, sizeof(string), "Tipo\tSlots\tpreço\nSimples\t2\t%s\navançado\t5\t%s", /*\nProfissional\t8\t%s*/
						FormatNumber(BizInfo[bizid][bItems][9]),
						FormatNumber(BizInfo[bizid][bItems][10])
						//FormatNumber(BizInfo[bizid][bItems][11])
					);
					Dialog_Show(playerid, BusinessBuy_Radio, DIALOG_STYLE_TABLIST_HEADERS, "Selecione o rádio", string, "Comprar", "Cancelar");
			    }
			}
		}
	}
	return 1;
}

Dialog:ReportDialog(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
			case 0: {
				new
					Float: playerPosC[3];

				GetPlayerPos(GetPVarInt(playerid, "aRf"), playerPosC[0],  playerPosC[1],  playerPosC[2]);
				SetPlayerPos(playerid, playerPosC[0], playerPosC[1], playerPosC[2]);

				DeletePVar(playerid, "aR");
				DeletePVar(playerid, "aRf");
			}
			case 1: {
				if(PlayerData[playerid][pSpectating] == INVALID_PLAYER_ID) {
					GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
					PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
					PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
				}

				PlayerData[playerid][pSpectating] = GetPVarInt(playerid, "aRf");
				TogglePlayerSpectating(playerid, true);

				if(IsPlayerInAnyVehicle(GetPVarInt(playerid, "aRf"))) {
					PlayerSpectateVehicle(playerid, GetPlayerVehicleID(GetPVarInt(playerid, "aRf")));
				}
				else {
					PlayerSpectatePlayer(playerid, GetPVarInt(playerid, "aRf"));
				}

				DeletePVar(playerid, "aR");
				DeletePVar(playerid, "aRf");
			}
		}
	}
	return 1;
}



Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Definir classificação", "classificação: %s (%d)\n\nPor favor, insira um novo tÃ­tulo abaixo.:", "Enviar", "Voltar", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	else
	{
		if(GetPVarInt(playerid, "EditFromView"))
		{
			ShowPlayerEditFaction(playerid);
			DeletePVar(playerid, "EditFromView");
		}
	}
	return 1;
}

Dialog:CallHistoryDialog(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = ph_select_data[playerid], nstring[24];

		switch(listitem)
		{
		    case 2: {
			  	Int32(nstring, CallHistory[playerid][id][chNumber]);
				cmd_ligar(playerid, nstring);
		    }
		    case 3: {
			 	Int32(nstring, CallHistory[playerid][id][chNumber]);
				SetPVarString(playerid,"SMSPhoneNumber", nstring);
				Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "serviço de mensagens curtas", "Preencha:", "Enviar", "Voltar");
		    }
		    case 4: {
                new exist = -1;
				if((exist = GetContactID(playerid, CallHistory[playerid][id][chNumber])) != -1)
				{
		           	ph_menuid[playerid]=1;
		       		ph_sub_menuid[playerid]=2;
		       		ph_page[playerid]=0;
		       		ph_select_data[playerid]=exist;

		       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				}
				else
				{
				    Dialog_Show(playerid, AddHistoryContact, DIALOG_STYLE_INPUT, "Insira o nome", "Adicionar um contato\n\n\t\tInsira o nome do contato:", "Continuar", "Voltar");
				}
		    }
		}
	}
	return 1;
}


Dialog:CallRingtone(playerid, response, listitem, inputtext[])
{
	if(response) {
		if(!GetPVarInt(playerid, "ringtype")) ph_CallTone[playerid] = ph_selected[playerid];
		else ph_TextTone[playerid] = ph_selected[playerid];
	}
	DeletePVar(playerid, "ringtype");
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Definir classificação", "classificação: %s (%d)\n\nPor favor, insira um novo tÃ­tulo abaixo.:", "Enviar", "Voltar", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Definir classificação", "ERRO: A classificação não deve ter mais de 32 caracteres.\n\nclassificação: %s (%d)\n\nPor favor insira um novo tÃ­tulo abaixo.:", "Enviar", "Voltar", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);

		new
		    query[128],
			set_rank[32],
			clean_rank[32];

        mysql_escape_string(inputtext,clean_rank);

        format(set_rank, 32, "factionRank%d", PlayerData[playerid][pSelectedSlot] + 1);
		format(query, sizeof(query), "UPDATE `factions` SET `%s` = '%s' WHERE `factionID` = '%d'",
		    set_rank,
		    clean_rank,
		    FactionData[PlayerData[playerid][pFactionEdit]][factionID]
		);
		mysql_tquery(dbCon, query);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		SendClientMessageEx(playerid, COLOR_GRAD1, "Você renomeou a classificação. %d \"%s\"", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}
 Dialog:Dialog_Empresas_Menu(playerid, response, listitem, inputtext[]){
	if(response)
	{
		new arrayid = listitem;
		new string[257];
		SetPlayerPos(playerid, EmpresaDialogData[arrayid][0], EmpresaDialogData[arrayid][1], EmpresaDialogData[arrayid][2]);
		SetPlayerInterior(playerid, InteriorDialogEmpresa[arrayid][0]);
		SetPlayerFacingAngle(playerid, EmpresaDialogData[arrayid][3]);
		format(string, sizeof(string), "Você teleportou para: ' %s '.", EmpresaDialogNames[arrayid][0]);
		SendClientMessage(playerid, 0xADD8E6FF, string);
	}
	return 1;
}

Dialog:Dialog_Casas_Menu(playerid, response, listitem, inputtext[]){
	if(response)
	{
		new arrayid = listitem;
		new string[1000];
		SetPlayerPos(playerid, HouseDialogData[arrayid][0], HouseDialogData[arrayid][1], HouseDialogData[arrayid][2]);
		SetPlayerInterior(playerid, InteriorDialogHouse[arrayid][0]);
		SetPlayerFacingAngle(playerid, HouseDialogData[arrayid][3]);
		format(string, sizeof(string), "Você teleportou para: ' %s '.", HouseDialogNames[arrayid][0]);
		SendClientMessage(playerid, 0xADD8E6FF, string);
	}
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "SERVER: Você tem 60 segundos para fazer o login\nDICA: Para mudar sua skin vai para https://www.sp-roleplay.com.br\n e faça o login no seu UCP\n\nSenha:", "Logar", "Cancelar");

	else
	{
	    SQL_AttemptLogin(playerid, inputtext);
	}
	return 1;
}

Dialog:AddSecretWord(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, AddSecretWord, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "{FFFFFF}Precaução de Segurança\n\nHabilitamos a verificação de identidade com um código secreto. Esta é uma palavra confidencial que Você receberia quando uma nova conexão for alterada.\n\nVocê não completou as informações.{FF0000} {FFFFFF}não tenha pressa, preencha as palavras secretas.\n\nConfira sua senha.", "Entrar", "Cancelar");

	else
	{
	    new clean_secret[32];
	    format(PlayerData[playerid][pSecretWord], 32, trim(inputtext));
		mysql_escape_string(PlayerData[playerid][pSecretWord],clean_secret);
		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Secret` = '%s' WHERE `ID` = %d", clean_secret, PlayerData[playerid][pID]);
		mysql_query(dbCon, szQuery);

		SQL_ForceLogin(playerid);
	}
	return 1;
}

Dialog:SecretWord(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, SecretWord, DIALOG_STYLE_PASSWORD, "Bem vindo ao São Paulo Roleplay", "{FFFFFF}possível violação de Segurança\n\nO servidor sinalizou Você por não ser o dono deste personagem. Por favor escreva a senha deste personagem na caixa abaixo para confirmar que é sua.", "Entrar", "Cancelar");

	else
	{
	    SQL_SecretLogin(playerid, inputtext);
	}
	return 1;
}


Dialog:ClothingList(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return 1;

	new id;
	cl_selected[playerid] = listitem;
	id = cl_dataslot[playerid][listitem];
	return Dialog_Show(playerid, ClothingMenu, DIALOG_STYLE_LIST, "O que Você vai fazer?", "Ajuste o item\nAlterar slot do bone\nAlterar slot do index\n%s", "Selecionar", "<<", (ClothingData[playerid][id][cl_equip]) ? ("Retirar") : ("Colocar")); // Colocar Take Off
}

Dialog:ClothingMenu(playerid, response, listitem, inputtext[])
{
	if (!response) cl_ShowClothingMenu(playerid);
	else
	{
		switch(listitem)
		{
		    case 0: // Adjust The Item
		    {
		        new id = cl_dataslot[playerid][cl_selected[playerid]];

			    SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone], ClothingData[playerid][id][cl_x], ClothingData[playerid][id][cl_y],
				ClothingData[playerid][id][cl_z], ClothingData[playerid][id][cl_rx], ClothingData[playerid][id][cl_ry], ClothingData[playerid][id][cl_rz], ClothingData[playerid][id][cl_scalex], ClothingData[playerid][id][cl_scaley], ClothingData[playerid][id][cl_scalez]);

				ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 1, 0, 1);
				EditAttachedObject(playerid, ClothingData[playerid][id][cl_slot]);
				BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_EDITCLOTHING);

				SendClientMessage(playerid, COLOR_WHITE, "DICA: Use {FFFF00}espaço{FFFFFF} para mover a camera{FFFF00} e{FFFFFF} ESC para cancelar");
		    }
		    case 1: // Change Bone Slot
		    {
               // Dialog_Show(playerid, ClothingBone, DIALOG_STYLE_LIST, "Alterar slot do bone", "spine\nhead\nUpper left arm\nRight arm\nleft hand\nright hand\nLeft leg\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nleft arm\nright arm\nLeft collarbone\nRight collarbone\nNeck\njaw", "Selecionar", "<<");
		    	Dialog_Show(playerid, ClothingBone, DIALOG_STYLE_LIST, "Alterar slot do bone", "Espinha\nCabeça\nOmbro esquerdo\nOmbro direito\nMão esquerda\nMão direita\nPerna esquerda\nCoxa direita\nPe esquerdo\nPe direito\nPanturrilha direita\nPanturrilha esquerda\nBraço Anti-esquerdo\nBraço Anti-Direito\nClavicula esquerda\nClavicula direita\nPescoço\nMandibula", "Selecionar", "<<");
			}
 		    case 2: // Change Index Slot
		    {
				if(PlayerData[playerid][pDonateRank] <= 1)
					Dialog_Show(playerid, ClothingIndex, DIALOG_STYLE_LIST, "Alterar slot do Index", "Slot 1\nSlot 2\nSlot 3\nSlot 4\nSlot 5", "Selecionar", "<<");

                if(PlayerData[playerid][pDonateRank] == 2)
					Dialog_Show(playerid, ClothingIndex, DIALOG_STYLE_LIST, "Alterar slot do Index", "Slot 1\nSlot 2\nSlot 3\nSlot 4\nSlot 5\nSlot 6", "Selecionar", "<<");

                if(PlayerData[playerid][pDonateRank] == 3)
					Dialog_Show(playerid, ClothingIndex, DIALOG_STYLE_LIST, "Alterar slot do Index", "Slot 1\nSlot 2\nSlot 3\nSlot 4\nSlot 5\nSlot 6\nSlot 7", "Selecionar", "<<");
		    }
 		    case 3: // On-Off
		    {
		        new id = cl_dataslot[playerid][cl_selected[playerid]];

				if(ClothingData[playerid][id][cl_equip]) {

					RemovePlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot]);
					ClothingData[playerid][id][cl_equip] = 0;
				}
				else
				{
				    SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone], ClothingData[playerid][id][cl_x], ClothingData[playerid][id][cl_y],
					ClothingData[playerid][id][cl_z], ClothingData[playerid][id][cl_rx], ClothingData[playerid][id][cl_ry], ClothingData[playerid][id][cl_rz], ClothingData[playerid][id][cl_scalex], ClothingData[playerid][id][cl_scaley], ClothingData[playerid][id][cl_scalez]);
					SendClientMessageEx(playerid, COLOR_WHITE, "Você posicionou %s.", ClothingData[playerid][id][cl_name]);

					for (new i = 0; i < MAX_CLOTHES; i ++)
					{
					    if(ClothingData[playerid][i][cl_object] && ClothingData[playerid][i][cl_equip] && ClothingData[playerid][i][cl_slot] == ClothingData[playerid][id][cl_slot])
					    {
					        ClothingData[playerid][i][cl_equip] = 0;
						}
					}
					ClothingData[playerid][id][cl_equip] = 1;
				}

		    }
		}
	}
	return 1;
}

Dialog:ClothingBone(playerid, response, listitem, inputtext[])
{
	if (!response) cl_ShowClothingMenu(playerid);
	else
	{
		new id = cl_dataslot[playerid][cl_selected[playerid]];
        ClothingData[playerid][id][cl_bone] = listitem;
		SetPlayerAttachedObject(playerid, ClothingData[playerid][id][cl_slot], ClothingData[playerid][id][cl_object], ClothingData[playerid][id][cl_bone]);
       	ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 1, 0, 1);
		EditAttachedObject(playerid, ClothingData[playerid][id][cl_slot]);
		BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_EDITCLOTHING);

		SendClientMessageEx(playerid, COLOR_YELLOW, "Você mudou do %s para %s", ClothingData[playerid][id][cl_name], BoneName[listitem]);
	}
    return 1;
}

Dialog:ClothingIndex(playerid, response, listitem, inputtext[])
{
	if (!response) cl_ShowClothingMenu(playerid);
	else
	{
	    new id = cl_dataslot[playerid][cl_selected[playerid]];
	    ClothingData[playerid][id][cl_slot] = listitem;

        RemovePlayerClothing(playerid);
        cl_DressPlayer(playerid);

		SendClientMessageEx(playerid, COLOR_YELLOW, "Você mudou do %s para  #%d", ClothingData[playerid][id][cl_name], listitem + 1);
	}
    return 1;
}

/*Dialog:ClothingList(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return 1;

	cl_selected[playerid] = listitem;

	new query[128];
	format(query,sizeof(query),"SELECT equip FROM clothing WHERE owner = '%d' and id = '%d'", PlayerData[playerid][pID], cl_dataslot[playerid][cl_selected[playerid]]);
	mysql_query(dbCon, query);

	new toggle;
	cache_get_value_index_int(0, 0, toggle);

	return Dialog_Show(playerid, ClothingMenu, DIALOG_STYLE_LIST, "What are you going to do?", "Adjust The Item\nChange Bone Slot\nChange Index Slot\n%s", "Selecionar", "<<", (toggle) ? ("Take Off") : ("Colocar")); // Colocar Take Off
}
*/

/*Dialog:ClothingMenu(playerid, response, listitem, inputtext[])
{
    new query[128];

	if (!response) cl_ShowClothingMenu(playerid);
	else
	{
		switch(listitem)
		{
		    case 0: // Adjust The Item
		    {
				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and id = '%d'", PlayerData[playerid][pID], cl_dataslot[playerid][cl_selected[playerid]]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_ADJUSTCLOTHES);

				SendClientMessage(playerid, COLOR_WHITE, "Hint: Use{FFFF00}SPAC{FFFFFF}E To watch{FFFF00}{FFFFFF} ESC to cancel");
		    }
		    case 1: // Change Bone Slot
		    {
                Dialog_Show(playerid, ClothingBone, DIALOG_STYLE_LIST, "Change The Bone Slot", "spine\nhead\nUpper left arm\nRight arm\nleft hand\nright hand\nLeft leg\nRight thigh\nLeft foot\nRight foot\nRight calf\nLeft calf\nleft arm\nright arm\nLeft collarbone\nRight collarbone\nNeck\njaw", "Selecionar", "<<");
		    }
 		    case 2: // Change Index Slot
		    {
				if(PlayerData[playerid][pDonateRank] <= 1)
					Dialog_Show(playerid, ClothingIndex, DIALOG_STYLE_LIST, "Change The Index Slot", "Index Slot 1\nIndex Slot 2\nIndex Slot 3\nIndex Slot 4\nIndex Slot 5", "Selecionar", "<<");

                if(PlayerData[playerid][pDonateRank] == 2)
					Dialog_Show(playerid, ClothingIndex, DIALOG_STYLE_LIST, "Change The Index Slot", "Index Slot 1\nIndex Slot 2\nIndex Slot 3\nIndex Slot 4\nIndex Slot 5\nIndex Slot 6", "Selecionar", "<<");

                if(PlayerData[playerid][pDonateRank] == 3)
					Dialog_Show(playerid, ClothingIndex, DIALOG_STYLE_LIST, "Change The Index Slot", "Index Slot 1\nIndex Slot 2\nIndex Slot 3\nIndex Slot 4\nIndex Slot 5\nIndex Slot 6\nIndex Slot 7", "Selecionar", "<<");
		    }
 		    case 3: // On-Off
		    {
				format(query,sizeof(query),"SELECT * FROM clothing WHERE equip = '1' and owner = '%d' and id = '%d'", PlayerData[playerid][pID], cl_dataslot[playerid][cl_selected[playerid]]);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_TOGGLECLOTHES);
		    }
		}
	}
	return 1;
}*/

/*Dialog:ClothingBone(playerid, response, listitem, inputtext[])
{
	if (!response) cl_ShowClothingMenu(playerid);
	else
	{
	    new query[128];

		format(query,sizeof(query),"UPDATE clothing SET bone = %d WHERE owner = '%d' and id = '%d'", listitem+1, PlayerData[playerid][pID], cl_dataslot[playerid][cl_selected[playerid]]);
		mysql_query(dbCon, query);

		format(query,sizeof(query),"SELECT object,bone FROM clothing WHERE owner = '%d' and id = '%d'", PlayerData[playerid][pID], cl_dataslot[playerid][cl_selected[playerid]]);
		mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_BONECLOTHES);

		SendClientMessageEx(playerid, COLOR_YELLOW, "you change your %s to %s", GetClothingName(cl_dataslot[playerid][cl_selected[playerid]]), BoneName[listitem]);
	}
    return 1;
}*/


Dialog:buyClothing(playerid, response, listitem, inputtext[])
{
	if (response) {

		if(!strcmp(inputtext, "Próxima pagina!", true)) {
			new str[1728];
			switch(cl_buying[playerid])
			{
			    case BUYZIP:
			    {
					for(new i= 91;i!=sizeof(cl_ZipData);++i)
					{
					    format(str, sizeof(str), "%s %d.%s\t{48E348}R$%d{FFFFFF}\n", str, i, cl_ZipData[i][e_name], cl_ZipData[i][e_price]);
					}
				}
			}
	        return Dialog_Show(playerid, buyClothing2, DIALOG_STYLE_TABLIST, "/ ItemID", str, "Ok", "Cancelar");
		}
		/*new index[16], num;

		if(listitem > 99) num = 4;
		else if(listitem > 9) num = 3;
		else num = 2;

		strmid(index, inputtext, 1, num); //string contains "HELLO"*/

		if((cl_buyingpslot[playerid] = ClothingExistSlot(playerid)) != -1)
		{
		    PurchaseClothing(playerid, listitem);
		}
	}
	return 1;
}

Dialog:buyClothing2(playerid, response, listitem, inputtext[])
{
	if (response) {

		/*if(!strcmp(inputtext, "Next page!", true)) {
			new str[1728];
			switch(cl_buying[playerid])
			{
			    case BUYZIP:
			    {
					for(new i= 91;i<sizeof(cl_ZipData);i++)
					{
					    format(str, sizeof(str), "%s %d.%s\t{48E348}R$%d{FFFFFF}\n", str, i, cl_ZipData[i][e_name], cl_ZipData[i][e_price]);
					}
				}
			}
	        return Dialog_Show(playerid, buyClothing2, DIALOG_STYLE_TABLIST, "/buy ItemID", str, "Ok", "Cancelar");
		}*/
		/*new index[16], num;

		if(listitem > 99) num = 4;
		else if(listitem > 9) num = 3;
		else num = 2;

		strmid(index, inputtext, 1, num); //string contains "HELLO"*/

		if((cl_buyingpslot[playerid] = ClothingExistSlot(playerid)) != -1)
		{
		    PurchaseClothing(playerid, listitem + 91);
		}
	}
	return 1;
}

// ================== [ NEW PHONE SYSTEM ] ============================

Dialog:AddContact(playerid, response, listitem, inputtext[])
{
	if (response) {

		if(strlen(inputtext) < 2 || strlen(inputtext) > 20)
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insira o nome", "Adicionar um contato\n\n\t\tInsira o nome do contato:\t\tErro: O contato deve ter 2-20 caracteres.", "Continuar", "Voltar");

		if(!regex_match(inputtext, "[a-zA-Z0-9 _]+"))
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insira o nome", "Adicionar um contato\n\n\t\tInsira o nome do contato:\t\tErro: simbolo invalido .", "Continuar", "Voltar");

		//[a-zA-Z0-9]+
		SetPVarString(playerid, "ContactName", inputtext);
        Dialog_Show(playerid, AddContactNum, DIALOG_STYLE_INPUT, "Insira o nome", "Adicionar um contato\n\n\t\tInsira o nome do contato:", "Continuar", "Voltar");

	}
	return 1;
}

Dialog:AddContactNum(playerid, response, listitem, inputtext[])
{
	if (response) {

		new name[24], query[256];

		GetPVarString(playerid, "ContactName", name, sizeof(name));

		if (!IsNumeric(inputtext) || strlen(inputtext) > 10 || strlen(inputtext) <= 0)
			return Dialog_Show(playerid, AddContactNum, DIALOG_STYLE_INPUT, "Insira o nome", "Adicionar contato\n\n\t\tInsira o número do contato:\t\tErro: O número especificado é invalido.", "Continuar", "Voltar");


		/*format(query, sizeof(query), "SELECT COUNT(*) FROM phone_contacts WHERE contactAdded = '%d'", PlayerData[playerid][pPnumber]);
		mysql_query(dbCon, query);

		new max_contact;

		switch(PlayerData[playerid][pDonateRank])
		{
		    case 0: max_contact = 16;
		    case 1: max_contact = 24;
		    case 2: max_contact = 32;
		    case 3: max_contact = 40;
		}*/
		new count, con_max, exist = -1;

		switch(PlayerData[playerid][pDonateRank])
		{
		    case 0: con_max = 16;
		    case 1: con_max = 24;
		    case 2: con_max = 32;
		    case 3: con_max = 40;
		}

		for (new i = 0; i < 40; i ++)
		{
		    if(ContactData[playerid][i][contactNumber]) {
                count++;
		    }
		    else
		    {
		        if(exist == -1)
				{
				    exist = i;
				}
		    }
		}

		if(count < con_max)
		{
			ContactData[playerid][exist][contactNumber] = strval(inputtext);
			format(ContactData[playerid][exist][contactName], 24, name);

	     	format(query,sizeof(query),"INSERT INTO `phone_contacts` (`contactAdded`, `contactAddee`, `contactName`) VALUES ('%d', '%d', '%s')", PlayerData[playerid][pPnumber], ContactData[playerid][exist][contactNumber], ContactData[playerid][exist][contactName]);
			mysql_query(dbCon, query);

			ContactData[playerid][exist][contactID] = cache_insert_id();

           	ph_menuid[playerid]=1;
       		ph_sub_menuid[playerid]=2;
       		ph_page[playerid]=0;
       		ph_select_data[playerid]=exist;

       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
		else
		{
           	ph_menuid[playerid]=5;
       		ph_sub_menuid[playerid]=0;
       		ph_page[playerid]=0;

       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
	}
	else {
	    DeletePVar(playerid, "ContactName");
	    Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insira o nome", "Adicionar o contato\n\n\t\tInsira o nome do contato:", "Continuar", "Voltar");
	}
	return 1;
}

Dialog:DeleteContact(playerid, response, listitem, inputtext[])
{
	if (response) {

		new query[128];
		format(query, sizeof(query), "DELETE FROM `phone_contacts` WHERE `contactID` = %d", ContactData[playerid][ph_select_data[playerid]][contactID]);
  		mysql_query(dbCon, query);

  		ContactData[playerid][ph_select_data[playerid]][contactID]=0;
  		ContactData[playerid][ph_select_data[playerid]][contactNumber]=0;


		ph_page[playerid]=0;
		ph_select_data[playerid]=-1;
     	ph_menuid[playerid]=1;
      	ph_sub_menuid[playerid]=1;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
	}
	return 1;
}

Dialog:SMSNumber(playerid, response, listitem, inputtext[])
{
	if (response) {
	    SetPVarString(playerid,"SMSPhoneNumber",inputtext);
		Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "SMS", "Preencha:", "Enviar", "Voltar");
	}
	return 1;
}

Dialog:SMSText(playerid, response, listitem, inputtext[])
{
	if (response) {
	    new str[128], phonenumb[16];
		GetPVarString(playerid, "SMSPhoneNumber", phonenumb, 16);
	    format(str, sizeof(str), "%s %s", phonenumb, inputtext);
        cmd_sms(playerid, str);
	}
	DeletePVar(playerid, "SMSPhoneNumber");
	return 1;
}

Dialog:SMSRead(playerid, response, listitem, inputtext[])
{
	if (response) {
	    new id = ph_select_data[playerid];
		Dialog_Show(playerid, SMSOption, DIALOG_STYLE_LIST, "Opções", "Resposta\nLigar\n%s\nEncaminhar\nDeletar\n%s", "Continuar", "Voltar", (!SmsData[playerid][id][smsArchive]) ? ("Arquivar") : ("Remover do arquivados"), (GetContactID(playerid,SmsData[playerid][id][smsOwner]) == -1) ? ("Salvar número") : ("Ver contato"));
	}
	return 1;
}

Dialog:SMSOption(playerid, response, listitem, inputtext[])
{
	//new str[128];
	new nstring[24];
    new id = ph_select_data[playerid];

	if (response) {
		switch(listitem)
		{
		    case 0: { // reply
			 	Int32(nstring, SmsData[playerid][id][smsOwner]);
				SetPVarString(playerid,"SMSPhoneNumber", nstring);
				Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "SMS", "Preencha:", "Enviar", "Voltar");
			}
		    case 1: {
			  	Int32(nstring, SmsData[playerid][id][smsOwner]);
				cmd_ligar(playerid, nstring);
			}
		    case 2: { // archive
				//new query[128];
				if(SmsData[playerid][id][smsArchive]) SmsData[playerid][id][smsArchive] = 0;
				else SmsData[playerid][id][smsArchive] = 1;

				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_INPUT, "Done", "%s", "OK", "", (SmsData[playerid][id][smsArchive]) ? ("SMS arquivado") : ("SMS removido dos arquivados"));

				RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
			}
		    case 3: Dialog_Show(playerid, ForwardSMS, DIALOG_STYLE_INPUT, "Enviar SMS", "número:", "Enviar", "Voltar");
		    case 4: Dialog_Show(playerid, DeleteSMS, DIALOG_STYLE_MSGBOX, "Você tem certeza?", "Você tem certeza que quer deletar esta mensagem?", "Sim", "não");
		    case 5: {
                new exist = -1;
				if((exist = GetContactID(playerid, SmsData[playerid][id][smsOwner])) != -1)
				{
		           	ph_menuid[playerid]=1;
		       		ph_sub_menuid[playerid]=2;
		       		ph_page[playerid]=0;
		       		ph_select_data[playerid]=exist;

		       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				}
				else
				{
				    Dialog_Show(playerid, AddSMSContact, DIALOG_STYLE_INPUT, "Adicionar", "Add contato\n\n\t\tInsira o nome do contato:", "Continuar", "Voltar");
				}
			}
		}
	}
	return 1;
}

Dialog:ForwardSMS(playerid, response, listitem, inputtext[])
{
	if (response) {
	    new str[256], phonenumb = strval(inputtext), id = ph_select_data[playerid];
	    if(phonenumb && strlen(inputtext) < 16)
	    {
		    format(str, sizeof(str), "%d %s", phonenumb, SmsData[playerid][id][smsText]);

	        cmd_sms(playerid, str);
        }
        else SendClientMessage(playerid, COLOR_LIGHTRED, "[!] O número especificado é invalido.");
	}
	return 1;
}

Dialog:DeleteSMS(playerid, response, listitem, inputtext[])
{
	if (response) {

		new query[128];
		new id = ph_select_data[playerid];

		format(query,sizeof(query),"DELETE FROM `phone_sms` WHERE `id` = %d", SmsData[playerid][id][smsID]);
		mysql_query(dbCon, query);

        SmsData[playerid][id][smsExist]=false;

  		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
	}
	return 1;
}

Dialog:AddHistoryContact(playerid, response, listitem, inputtext[])
{
	if (response) {

		new query[256], id = ph_select_data[playerid];

		if(strlen(inputtext) < 2 || strlen(inputtext) > 20)
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Adicionar", "Add o contato\n\n\t\tDigite o nome:\t\tErro: O contato é longo, passou os 20 caracteres", "próximo", "Voltar");

		if(!regex_match(inputtext, "[a-zA-Z0-9 _]+"))
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Adicionar", "Add a o contato\n\n\t\tDigite o nome:\t\tErro: Simbolos invalidos.", "próximo", "Voltar");

		new count, con_max, exist = -1;

		switch(PlayerData[playerid][pDonateRank])
		{
		    case 0: con_max = 16;
		    case 1: con_max = 24;
		    case 2: con_max = 32;
		    case 3: con_max = 40;
		}

		for (new i = 0; i < 40; i ++)
		{
		    if(ContactData[playerid][i][contactNumber]) {
                count++;
		    }
		    else
		    {
		        if(exist == -1)
				{
				    exist = i;
				}
		    }
		}

		if(count < con_max)
		{
			ContactData[playerid][exist][contactNumber] = CallHistory[playerid][id][chNumber];
			format(ContactData[playerid][exist][contactName], 24, inputtext);

	     	format(query,sizeof(query),"INSERT INTO `phone_contacts` (`contactAdded`, `contactAddee`, `contactName`) VALUES ('%d', '%d', '%s')", PlayerData[playerid][pPnumber], ContactData[playerid][exist][contactNumber], ContactData[playerid][exist][contactName]);
			mysql_query(dbCon, query);

			ContactData[playerid][exist][contactID] = cache_insert_id();

           	ph_menuid[playerid]=1;
       		ph_sub_menuid[playerid]=2;
       		ph_page[playerid]=0;
       		ph_select_data[playerid]=exist;

       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
		else
		{
           	ph_menuid[playerid]=5;
       		ph_sub_menuid[playerid]=0;
       		ph_page[playerid]=0;

       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
	}
	return 1;
}

Dialog:AddSMSContact(playerid, response, listitem, inputtext[])
{
	if (response) {

		new query[256], id = ph_select_data[playerid];

/*		if(strlen(inputtext) < 2 || strlen(inputtext) > 20)
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insert name", "Add a contact\n\n\t\tEnter contact name:\t\tErro: Contact must be long. 2-20 caracters", "Proximo", "voltar");

		if(!regex_match(inputtext, "[a-zA-Z0-9 _]+"))
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insert name", "Add a contact\n\n\t\tEnter contact name:\t\tErro: Invalid symbol found.", "Proximo", "voltar");*/
		if(strlen(inputtext) < 2 || strlen(inputtext) > 20)
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Adicionar", "Add o contato\n\n\t\tDigite o nome:\t\tErro: O contato é longo, passou os 20 caracteres", "próximo", "Voltar");

		if(!regex_match(inputtext, "[a-zA-Z0-9 _]+"))
		    return Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Adicionar", "Add a o contato\n\n\t\tDigite o nome:\t\tErro: Simbolos invalidos.", "próximo", "Voltar");

		new count, con_max, exist = -1;

		switch(PlayerData[playerid][pDonateRank])
		{
		    case 0: con_max = 16;
		    case 1: con_max = 24;
		    case 2: con_max = 32;
		    case 3: con_max = 40;
		}

		for (new i = 0; i < 40; i ++)
		{
		    if(ContactData[playerid][i][contactNumber]) {
                count++;
		    }
		    else
		    {
		        if(exist == -1)
				{
				    exist = i;
				}
		    }
		}

		if(count < con_max)
		{
			ContactData[playerid][exist][contactNumber] = SmsData[playerid][id][smsOwner];
			format(ContactData[playerid][exist][contactName], 24, inputtext);

	     	format(query,sizeof(query),"INSERT INTO `phone_contacts` (`contactAdded`, `contactAddee`, `contactName`) VALUES ('%d', '%d', '%s')", PlayerData[playerid][pPnumber], ContactData[playerid][exist][contactNumber], ContactData[playerid][exist][contactName]);
			mysql_query(dbCon, query);

			ContactData[playerid][exist][contactID] = cache_insert_id();

           	ph_menuid[playerid]=1;
       		ph_sub_menuid[playerid]=2;
       		ph_page[playerid]=0;
       		ph_select_data[playerid]=exist;

       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
		else
		{
           	ph_menuid[playerid]=5;
       		ph_sub_menuid[playerid]=0;
       		ph_page[playerid]=0;

       		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		}
	}
	return 1;
}

Dialog:AskTurnOff(playerid, response, listitem, inputtext[])
{
	if (response) {

        if(ph_menuid[playerid] != 6) {

            ph_menuid[playerid] = 6;
            ph_sub_menuid[playerid] = 0;
            RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
			SetTimerEx("PhoneTurnOff", 4000, false, "d", playerid);

			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
			{
	      		SendClientMessage(PlayerData[playerid][pCallLine],  COLOR_GRAD2, "Desconexão....");
			    CancelCall(playerid);
			}
			PhoneSelfie_Stop(playerid);
		}
	}
	return 1;
}

Dialog:CallNumber(playerid, response, listitem, inputtext[])
{
	if (response) {
		cmd_ligar(playerid, inputtext);
	}
	return 1;
}


// ================== [ NEW PHONE SYSTEM ] ============================

forward PhoneTurnOff(playerid);
public PhoneTurnOff(playerid)
{
 	ph_menuid[playerid] = 6;
	ph_sub_menuid[playerid] = 1;
	RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
}

forward PhoneTurnOn(playerid);
public PhoneTurnOn(playerid)
{
 	ph_menuid[playerid] = 0;
	ph_sub_menuid[playerid] = 0;
	RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
}

/*// ================== [ PHONE SYSTEM ] ============================

Dialog:AskTurnOff(playerid, response, listitem, inputtext[])
{
	if (response) {

        if(ph_section[playerid] != PH_OFF) {
            ph_section[playerid] = PH_OFF;
			SetTimerEx("Refreash_Phone", 4000, false, "d", playerid);

			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
			{
	      		SendClientMessage(PlayerData[playerid][pCallLine],  COLOR_GRAD2, "Disconnection....");
			    CancelCall(playerid);
			}
			PhoneSelfie_Stop(playerid);

            for(new i = 13; i <= 20; i++) PlayerTextDrawHide(playerid, TDPlayer_Phone[playerid][i]);
			PlayerTextDrawSetString(playerid, TDPlayer_Phone[playerid][16], "~n~See you!");
			PlayerTextDrawShow(playerid, TDPlayer_Phone[playerid][16]);

		}
	}
	return 1;
}

Dialog:DeleteSMS(playerid, response, listitem, inputtext[])
{
	if (response) {

		new query[128];
		new smsid = GetPVarInt(playerid, "SMSid");
		format(query, sizeof(query), "SELECT id FROM `phone_sms` WHERE `id` = %d", smsid);
		mysql_query(dbCon, query);

		if(cache_num_rows())
		{
		   	format(query,sizeof(query),"DELETE FROM `phone_sms` WHERE `id` = %d", smsid);
			mysql_query(dbCon, query);
		}
  		SetPhoneSection(playerid, PH_MAIN, PH_M_SMS);
	}
	DeletePVar(playerid, "SMSid");
	return 1;
}

Dialog:DeleteContact(playerid, response, listitem, inputtext[])
{
	if (response) {

		new query[128];

		format(query, sizeof(query), "SELECT contactID FROM `phone_contacts` WHERE `contactAdded` = %d ORDER BY `contactName` ASC", PlayerData[playerid][pPnumber]);
		mysql_query(dbCon, query);

		if(cache_num_rows())
		{
		   	format(query,sizeof(query),"DELETE FROM `phone_contacts` WHERE `contactID` = %d", cache_get_value_index_int(ph_selectrow[playerid], 0));
			mysql_query(dbCon, query);
		}
  		SetPhoneSection(playerid, PH_MAIN, PH_M_PHONEBOOK_LISTCON);
	}
	return 1;
}

Dialog:CallNumber(playerid, response, listitem, inputtext[])
{
	if (response) {
		cmd_ligar(playerid, inputtext);
	}
	return 1;
}

Dialog:SMSNumber(playerid, response, listitem, inputtext[])
{
	if (response) {
	    SetPVarString(playerid,"SMSPhoneNumber",inputtext);
		Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "Short Message Service", "Fill in:", "Send", "voltar");
	}
	return 1;
}

Dialog:SMSText(playerid, response, listitem, inputtext[])
{
	if (response) {
	    new str[128], phonenumb[32];
	    GetPVarString(playerid, "SMSPhoneNumber", phonenumb, 32);
	    format(str, sizeof(str), "%s %s", phonenumb, inputtext);
        cmd_sms(playerid, str);
	}
	DeletePVar(playerid, "SMSPhoneNumber");
	return 1;
}

Dialog:SMSRead(playerid, response, listitem, inputtext[])
{
	if (response) {
		Dialog_Show(playerid, SMSOption, DIALOG_STYLE_LIST, "Options", "Reply\nCall\nStore\nForward\nDelete message\n%s", "Proximo", "voltar", (!IsPlayerHasContact(playerid, GetPhoneRevNumberSMSID(GetPVarInt(playerid, "SMSid")))) ? ("Record number") : (""));
	}
	else
	{
		DeletePVar(playerid, "SMSid");
	}
	return 1;
}

Dialog:SMSOption(playerid, response, listitem, inputtext[])
{
	new str[128];

	format(str, sizeof(str), "%d", GetPhoneRevNumberSMSID(GetPVarInt(playerid, "SMSid")));

	if (response) {
		switch(listitem)
		{
		    case 0: { // reply
		        SetPVarString(playerid,"SMSPhoneNumber",str);
				Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "Short Message Service", "Fill in:", "Send", "voltar");
				DeletePVar(playerid, "SMSid");
			}
		    case 1: cmd_ligar(playerid, str), DeletePVar(playerid, "SMSid"); // call
		    case 2: { // archive
				format(str, sizeof(str), "UPDATE `phone_sms` SET `Archive` = 1 WHERE `id` = %d", GetPVarInt(playerid, "SMSid"));
				mysql_query(dbCon, str);
				DeletePVar(playerid, "SMSid");
				Refreash_Phone(playerid);
			}
		    case 3: Dialog_Show(playerid, ForwardSMS, DIALOG_STYLE_INPUT, "Forward SMS", "Enter Celular:", "Send", "voltar");
		    case 4: Dialog_Show(playerid, DeleteSMS, DIALOG_STYLE_MSGBOX, "Are you sure?", "Are you sure you want to delete this message?", "Yes", "No");
		    case 5: {
                 Dialog_Show(playerid, AddSMSContact, DIALOG_STYLE_INPUT, "Insert name", "Add a contact\n\n\t\tEnter contact name:", "Proximo", "voltar");
			}
		}
	}
	return 1;
}

Dialog:ForwardSMS(playerid, response, listitem, inputtext[])
{
	if (response) {
	    new str[128], phonenumb = strval(inputtext);
	    if(phonenumb)
	    {
		    format(str, sizeof(str), "%d %s", phonenumb, GetPhoneForwardSMSID(GetPVarInt(playerid, "SMSid")));

	        cmd_sms(playerid, str);
        }
        else SendClientMessage(playerid, COLOR_LIGHTRED, "Invalid system number.");
	}
	DeletePVar(playerid, "SMSid");
	return 1;
}

Dialog:AddContact(playerid, response, listitem, inputtext[])
{
	if (response) {

		if(strlen(inputtext) > 15)
		    return SendClientMessage(playerid, COLOR_LIGHTRED,"The specified contact name is too long."), Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insert name", "Add a contact\n\n\t\tEnter contact name:", "Proximo", "voltar");

		SetPVarString(playerid, "ContactName", inputtext);
        Dialog_Show(playerid, AddContactNum, DIALOG_STYLE_INPUT, "Insert number", "Add a contact\n\n\t\tEnter contact number:", "Proximo", "voltar");

	}
	return 1;
}

Dialog:AddSMSContact(playerid, response, listitem, inputtext[])
{
	if (response) {

		new numb = GetPhoneRevNumberSMSID(GetPVarInt(playerid, "SMSid")), query[256];
		new basename[16];

		if(strlen(inputtext) > 16)
		    return SendClientMessage(playerid, COLOR_LIGHTRED,"The specified contact name is too long."), Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Insert name", "Add a contact\n\n\t\tEnter contact name:", "Proximo", "voltar");

		format(query, sizeof(query), "SELECT COUNT(*) FROM phone_contacts WHERE contactAdded = '%d'", PlayerData[playerid][pPnumber]);
		mysql_query(dbCon, query);

		if (cache_get_value_index_int(0, 0) < 30) {

	     	format(query,sizeof(query),"INSERT INTO `phone_contacts` (`contactAdded`, `contactAddee`, `contactName`) VALUES ('%d', '%d', '%s')", PlayerData[playerid][pPnumber], numb, inputtext);
			mysql_query(dbCon, query);


			format(query, sizeof(query), "SELECT contactName, contactAddee FROM `phone_contacts` WHERE `contactAdded` = %d  ORDER BY `contactName` ASC", PlayerData[playerid][pPnumber]);
			mysql_query(dbCon, query);

			for (new i = 0; i < cache_num_rows(); i ++)
			{
			    cache_get_value_index(i, 0, basename);

			    if(!strcmp(basename, inputtext, false) && cache_get_value_index_int(i, 1) == numb)
			    {
			        ph_pages[playerid] = cache_num_rows();
			        ph_page[playerid] = floatround(floatdiv(ph_pages[playerid], 4), floatround_ceil);
			        ph_currentpage[playerid] = (i < 4) ? 1 : (floatround(floatdiv(i+1, 4), floatround_ceil));
			        ph_selectrow[playerid] = i;
					ph_select[playerid] = (!floatround((ph_selectrow[playerid]+1) % 4, floatround_ceil)) ? 4 : floatround((ph_selectrow[playerid]+1) % 4, floatround_ceil);
				    break;
			    }
			}
			SetPhoneSection(playerid, PH_TEXTDISPLAY, PH_T_NAMENUB);
		}
	}
	else DeletePVar(playerid, "ContactName");

	DeletePVar(playerid, "SMSid");
	return 1;
}


Dialog:AddContactNum(playerid, response, listitem, inputtext[])
{
	if (response) {

		new numb = strval(inputtext), name[16], basename[16], query[256];

		GetPVarString(playerid, "ContactName", name, sizeof(name));

		if(numb > 999999 || numb <= 0)
			return SendClientMessage(playerid, COLOR_LIGHTRED,"The specified Celular is invalid."), Dialog_Show(playerid, AddContactNum, DIALOG_STYLE_INPUT, "Insert number", "Add a contact\n\n\t\tEnter contact number:", "Proximo", "voltar");

		format(query, sizeof(query), "SELECT COUNT(*) FROM phone_contacts WHERE contactAdded = '%d'", PlayerData[playerid][pPnumber]);
		mysql_query(dbCon, query);

		new max_contact;

		switch(PlayerData[playerid][pDonateRank])
		{
		    case 0: max_contact = 16;
		    case 1: max_contact = 24;
		    case 2: max_contact = 32;
		    case 3: max_contact = 40;
		}
		if (cache_get_value_index_int(0, 0) < max_contact) {

	     	format(query,sizeof(query),"INSERT INTO `phone_contacts` (`contactAdded`, `contactAddee`, `contactName`) VALUES ('%d', '%d', '%s')", PlayerData[playerid][pPnumber], numb, name);
			mysql_query(dbCon, query);


			format(query, sizeof(query), "SELECT contactName, contactAddee FROM `phone_contacts` WHERE `contactAdded` = %d  ORDER BY `contactName` ASC", PlayerData[playerid][pPnumber]);
			mysql_query(dbCon, query);

			for (new i = 0; i < cache_num_rows(); i ++)
			{
			    cache_get_value_index(i, 0, basename);

			    if(!strcmp(basename, name, false) && cache_get_value_index_int(i, 1) == numb)
			    {
			        ph_pages[playerid] = cache_num_rows();
			        ph_page[playerid] = floatround(floatdiv(ph_pages[playerid], 4), floatround_ceil);
			        ph_currentpage[playerid] = (i < 4) ? 1 : (floatround(floatdiv(i+1, 4), floatround_ceil));
			        ph_selectrow[playerid] = i;
					ph_select[playerid] = (!floatround((ph_selectrow[playerid]+1) % 4, floatround_ceil)) ? 4 : floatround((ph_selectrow[playerid]+1) % 4, floatround_ceil);
				    break;
			    }
			}
			SetPhoneSection(playerid, PH_TEXTDISPLAY, PH_T_NAMENUB);

		}
	}
	else DeletePVar(playerid, "ContactName");
	return 1;
}

// ================== [ PHONE SYSTEM ] ============================*/


/*Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionSpawn(playerid))
		return 0;

	if (response)
	{
	    new
	    	string[512];

	    if (FactionData[factionid][factionType] == FACTION_POLICE)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
	                if (!PlayerData[playerid][pOnDuty])
	                {
	                    PlayerData[playerid][pOnDuty] = true;
	                    SetPlayerArmour(playerid, 100.0);

	                    SetFactionColor(playerid);

	                    if(PlayerData[playerid][pChar] > 0)
							SetPlayerSkin(playerid, PlayerData[playerid][pChar]);

	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s grab the badge from the locker.", ReturnName(playerid, 0));
	                }
	                else
	                {
	                    PlayerData[playerid][pOnDuty] = false;
	                    SetPlayerArmour(playerid, 0.0);

	                    SetPlayerColor(playerid, DEFAULT_COLOR);
	                    SetPlayerSkin(playerid, PlayerData[playerid][pModel]);

	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s keep the badge in the locker.", ReturnName(playerid, 0));
	                }
				}
				case 1:
				{
				    SetPlayerArmour(playerid, 100.0);
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s reach into the locker and pick up the shirt.", ReturnName(playerid, 0));
				}
				case 2:
				{
                    if(PlayerData[playerid][pGender] == 1)
						Dialog_Show(playerid, LSPD_CLOTHING_MALE, DIALOG_STYLE_LIST, "Clothing Uniform", "Officer 1\nOfficer 2\nOfficer 3\nOfficer 4\nOfficer 5\nOfficer 6\nOfficer 7\nMotorbike\nSWAT", "Selecionar", "Cancelar");

					else
						Dialog_Show(playerid, LSPD_CLOTHING_FEMALE, DIALOG_STYLE_LIST, "Clothing Uniform", "Officer female 1\nOfficer female 2", "Selecionar", "Cancelar");
				}
				case 3:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sWeapon %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sEmpty Slot\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Locker Weapons", string, "Selecionar", "Cancelar");
				}
			}
	    }
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionSpawn(playerid))
		return 0;

    if (!PlayerData[playerid][pOnDuty] && GetFactionType(playerid) != FACTION_GANG)
        return SendClientMessage(playerid, COLOR_GRAD1,"You have not started to perform duties.");

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem],
	        ammo = FactionData[factionid][factionAmmo][listitem];

	    if (weaponid)
		{
	        GivePlayerWeapon(playerid, weaponid, ammo);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s reach into the locker and pick up. %s", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
		}
		else SendClientMessage(playerid, COLOR_GRAD1,"This weapon is empty.");
	}
	else {
	    cmd_locker(playerid, "\1");
	}
	return 1;
}

Dialog:LSPD_CLOTHING_MALE(playerid, response, listitem, inputtext[])
{
	if(response) switch(listitem) {
		case 0: {
			SetPlayerSkin(playerid, 280);
			PlayerData[playerid][pChar] = 280;
		}
		case 1: {
			SetPlayerSkin(playerid, 281);
			PlayerData[playerid][pChar] = 281;
		}
		case 2: {
			SetPlayerSkin(playerid, 265);
			PlayerData[playerid][pChar] = 265;
		}
		case 3: {
			SetPlayerSkin(playerid, 266);
			PlayerData[playerid][pChar] = 266;
		}
		case 4: {
			SetPlayerSkin(playerid, 267);
			PlayerData[playerid][pChar] = 267;
		}
		case 5: {
			SetPlayerSkin(playerid, 300);
			PlayerData[playerid][pChar] = 300;
		}
		case 6: {
			SetPlayerSkin(playerid, 301);
			PlayerData[playerid][pChar] = 301;
		}
		case 7: {
			SetPlayerSkin(playerid, 284);
			PlayerData[playerid][pChar] = 284;
		}
		case 8: {
			SetPlayerSkin(playerid, 285);
			PlayerData[playerid][pChar] = 285;
		}
	}
	return 1;
}

Dialog:LSPD_CLOTHING_FEMALE(playerid, response, listitem, inputtext[])
{
	if(response) switch(listitem) {
		case 0: {
			SetPlayerSkin(playerid, 306);
			PlayerData[playerid][pChar] = 306;
		}
		case 1: {
			SetPlayerSkin(playerid, 307);
			PlayerData[playerid][pChar] = 307;
		}
	}
	return 1;
}*/

stock PurchaseClothing(playerid, slot)
{
	new model, bone, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, Float:sx, Float:sy, Float:sz;
	switch(cl_buying[playerid])
	{
	    case BUYSPORTS:
	    {
	        if(slot < 0 || slot >= sizeof(cl_SportsData)) return 0;

	        model = cl_SportsData[slot][e_model];
	        bone = cl_SportsData[slot][e_bone];
	        x = cl_SportsData[slot][e_x];
	        y = cl_SportsData[slot][e_y];
	        z = cl_SportsData[slot][e_z];
	        rx = cl_SportsData[slot][e_rx];
	        ry = cl_SportsData[slot][e_ry];
	        rz = cl_SportsData[slot][e_rz];
	        sx = cl_SportsData[slot][e_sx];
	        sy = cl_SportsData[slot][e_sy];
	        sz = cl_SportsData[slot][e_sz];
	    }
	    case BUYZIP:
	    {
	        if(slot < 0 || slot >= sizeof(cl_ZipData)) return 0;

	        model = cl_ZipData[slot][e_model];
	        bone = cl_ZipData[slot][e_bone];
	        x = cl_ZipData[slot][e_x];
	        y = cl_ZipData[slot][e_y];
	        z = cl_ZipData[slot][e_z];
	        rx = cl_ZipData[slot][e_rx];
	        ry = cl_ZipData[slot][e_ry];
	        rz = cl_ZipData[slot][e_rz];
	        sx = cl_ZipData[slot][e_sx];
	        sy = cl_ZipData[slot][e_sy];
	        sz = cl_ZipData[slot][e_sz];
	    }
	    case BUYGOV:
	    {
	        if(slot < 0 || slot >= sizeof(cl_GovData)) return 0;

	        model = cl_GovData[slot][e_model];
	        bone = cl_GovData[slot][e_bone];
	        x = cl_GovData[slot][e_x];
	        y = cl_GovData[slot][e_y];
	        z = cl_GovData[slot][e_z];
	        rx = cl_GovData[slot][e_rx];
	        ry = cl_GovData[slot][e_ry];
	        rz = cl_GovData[slot][e_rz];
	        sx = cl_GovData[slot][e_sx];
	        sy = cl_GovData[slot][e_sy];
	        sz = cl_GovData[slot][e_sz];
	    }
	    case BUYNOVOS:
	    {
	        if(slot < 0 || slot >= sizeof(cl_NovosData)) return 0;

	        model = cl_NovosData[slot][e_model];
	        bone = cl_NovosData[slot][e_bone];
	        x = cl_NovosData[slot][e_x];
	        y = cl_NovosData[slot][e_y];
	        z = cl_NovosData[slot][e_z];
	        rx = cl_NovosData[slot][e_rx];
	        ry = cl_NovosData[slot][e_ry];
	        rz = cl_NovosData[slot][e_rz];
	        sx = cl_NovosData[slot][e_sx];
	        sy = cl_NovosData[slot][e_sy];
	        sz = cl_NovosData[slot][e_sz];
	    }
	}
	SetPlayerAttachedObject(playerid, cl_buyingpslot[playerid], model, bone, x, y, z, rx, ry, rz, sx, sy, sz);
	EditAttachedObject(playerid, cl_buyingpslot[playerid]);
	BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_BUYCLOTHING);

	SendClientMessage(playerid, COLOR_WHITE, "DICA: Use{FFFF00}espaço{FFFFFF} e {FFFF00}ESC{FFFFFF} para cancelar");
	SendClientMessage(playerid, COLOR_LIGHTRED, "Coloque no lugar certo para se vestir.");

	ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 1, 0, 1);
	return 1;
}

stock ClothingExistSlot(playerid)
{
	new query[128], slot = -1;
	for(new i = 0; i!=MAX_CLOTHES;++i)
	{
		format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' AND slot = %d",PlayerData[playerid][pID], i);
		mysql_query(dbCon, query);

		if(!cache_num_rows())
		{
		    slot = i;
		    break;
		}
	}
	return slot;
}
// ZCMD

// Basic Commands
CMD:mudaridade(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 5) return 1;
	new targetid, inter, string[256];
	if(sscanf(params, "ui", targetid, inter)) SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}USE:{FFFFFF} /mudaridade [id] [idade]");
	else
	{
	    if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não está conectado!");
		PlayerData[targetid][pBirthdate] = inter;
		format(string,sizeof(string),"AdmCmd: Você setou a Data de nascimento de %s para %d.",ReturnName(targetid, 0), inter);
		SendClientMessage(playerid, COLOR_LIGHTRED, string);
	}
	return 1;
}
/*CMD:setaridade(playerid, params[])
{
    if(PlayerData[playerid][pBirthdate] < 1958) return 1;
    Dialog_Show(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Data de nascimento", "Formato: 02/07/1998\n Entre com uma Data de nascimento valída.", "Confirmar", "Cancelar");
	return 1;
}*/

CMD:moedas(playerid)
{
	new str[128];
	format(str, sizeof(str), "* %s joga a moeda para cima bate na mão, dando %s.", ReturnName(playerid, 0), (random(2)) ? ("Cara") : ("Coroa"));
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, str);
	return 1;
}

CMD:me(playerid, params[])
{
    if(deathmode[playerid])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/me [OPÇÃO]");

	if (strlen(params) > 80) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %.80s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "... %s", params[80]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:mebaixo(playerid, params[])
{
    if(deathmode[playerid])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/mebaixo [OPÇÃO]");

	if (strlen(params) > 80) {
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s %.80s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "... %s", params[80]);
	}
	else SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), params);

	return 1;
}
CMD:ame(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ame [OPÇÃO]");

	new string[128];
	format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);

    format(string, sizeof(string), "> %s %s ", ReturnName(playerid, 0), params);
 	SendClientMessage(playerid, COLOR_PURPLE, string);

 	SQL_LogChat(playerid, "/ame", params);

	return 1;
}
CMD:ado(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ado [Descrição]");

	new string[128];
	format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 10000);
    
	format(string, sizeof(string), "> %s (( %s )) ", params, ReturnName(playerid, 0));
 	SendClientMessage(playerid, COLOR_PURPLE, string);



 	SQL_LogChat(playerid, "/ado", params);

	return 1;
}
CMD:do(playerid, params[])
{
    if(deathmode[playerid])
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/do [Descrição]");

	if (strlen(params) > 80) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %.80s", params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "... %s (( %s ))", params[80], ReturnName(playerid, 0));
	}
	else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s (( %s ))", params, ReturnName(playerid, 0));

    SQL_LogChat(playerid, "/do", params);
	return 1;
}

CMD:local(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você está morto e não pode falar.");

	new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/local [texto]");

	if (strlen(params) > 80) {

	    format(str, sizeof(str), "%s diz: %.80s", ReturnName(playerid, 0), params);
	    ProxDetector(playerid, 20.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
	    ProxDetector(playerid, 20.0, str);
	}
	else format(str, sizeof(str), "%s diz: %s", ReturnName(playerid, 0), params), ProxDetector(playerid, 20.0, str);

    ChatAnimation(playerid, strlen(params));
    /*ApplyAnimationEx(playerid, "PED", "IDLE_CHAT",4.1,0,0,0,1,1);
    SetTimerEx("StopChatting", strlen(params) * 100, false, "d", playerid);*/

    SQL_LogChat(playerid, "/local", params);
	return 1;
}

/*CMD:t(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você está morto e não pode falar.");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/t [text]");

	if (strlen(params) > 80) {
	    format(str, sizeof(str), "%s says: %.80s", ReturnName(playerid, 0), params);
	    ProxDetector(playerid, 20.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
	    ProxDetector(playerid, 20.0, str);
	}
	else format(str, sizeof(str), "%s says: %s", ReturnName(playerid, 0), params), ProxDetector(playerid, 20.0, str);

	SQL_LogChat(playerid, "/t", params);

	return 1;
}*/

CMD:baixo(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você está morto e não pode falar.");

	new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/baixo [text]");

	if (strlen(params) > 80) {
	    format(str, sizeof(str), "%s diz [baixo]: %.80s", ReturnName(playerid, 0), params);
	    ProxDetector(playerid, 5.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
	    ProxDetector(playerid, 5.0, str);
	}
	else format(str, sizeof(str), "%s diz [baixo]: %s", ReturnName(playerid, 0), params), ProxDetector(playerid, 5.0, str);

    ChatAnimation(playerid, strlen(params));

    /*ApplyAnimationEx(playerid, "PED", "IDLE_CHAT",4.1,0,0,0,1,1);
    SetTimerEx("StopChatting", strlen(params) * 100, false, "d", playerid);*/

    SQL_LogChat(playerid, "/baixo", params);
	return 1;
}

CMD:gritar(playerid, params[])
	return cmd_g(playerid, params);

CMD:g(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você está morto e não pode falar...");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(g)ritar [texto]");

	if (strlen(params) > 80) {
	    format(str, sizeof(str), "%s grita: %.80s", ReturnName(playerid, 0), params);
	    ProxDetector(playerid, 30.0, str);

	    format(str, sizeof(str), "... %s!", params[80]);
	    ProxDetector(playerid, 30.0, str);
	}
	else format(str, sizeof(str), "%s grita: %s!", ReturnName(playerid, 0), params),ProxDetector(playerid, 30.0, str);

	SQL_LogChat(playerid, "/gritar", params);
	return 1;
}

CMD:dgritar(playerid, params[])
	return cmd_dg(playerid, params);

CMD:dg(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode gritar, pois está morto.");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(dg)ritar [texto]");


	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "%s grita: %.80s", ReturnName(playerid, 0), params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s!", params[80]);
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "%s grita: %s!", ReturnName(playerid, 0), params), ProxDetector(playerid, 30.0, str);


			format(szQuery, sizeof(szQuery), "GRITA %d: %s", i, params);
            SQL_LogChat(playerid, "/dgritar", szQuery);

			foreach(new p : Player)
			{
                if (IsPlayerInRangeOfPoint(p, 60.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(p))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "%s grita: %.80s", ReturnName(playerid, 0), params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s!", params[80]);
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "%s grita: %s!", ReturnName(playerid, 0), params), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(playerid))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "%s grita: %.80s", ReturnName(playerid, 0), params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s!", params[80]);
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "%s grita: %s!", ReturnName(playerid, 0), params), ProxDetector(playerid, 30.0, str);

			format(szQuery, sizeof(szQuery), "Dentro da casa %d: %s", i, params);
            SQL_LogChat(playerid, "/ds", szQuery);

			foreach(new p : Player)
			{
				if (IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "%s grita: %.80s", ReturnName(playerid, 0), params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s!", params[80]);
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "%s grita: %s!", ReturnName(playerid, 0), params), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
	}
	return 1;
}

CMD:ddo(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode usar o comando pois está morto.");

    new str[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ddo [texto]");


	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "* %.80s", params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnName(playerid, 0));
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "* %s (( %s ))", params, ReturnName(playerid, 0)), ProxDetector(playerid, 30.0, str);

			format(szQuery, sizeof(szQuery), "Fora de casa %d: %s", i, params);
            SQL_LogChat(playerid, "/ddo", szQuery);

			foreach(new p : Player)
			{
                if (IsPlayerInRangeOfPoint(p, 60.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(p))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "* %.80s", params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnName(playerid, 0));
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "* %s (( %s ))", params, ReturnName(playerid, 0)), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 4.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(playerid))
		{
			if (strlen(params) > 80) {
			    format(str, sizeof(str), "* %.80s", params);
			    ProxDetector(playerid, 30.0, str);

			    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnName(playerid, 0));
       			ProxDetector(playerid, 30.0, str);
			}
			else format(str, sizeof(str), "* %s (( %s ))", params, ReturnName(playerid, 0)), ProxDetector(playerid, 30.0, str);

			format(szQuery, sizeof(szQuery), "Dentro de casa %d: %s", i, params);
            SQL_LogChat(playerid, "/ddo", szQuery);

			foreach(new p : Player)
			{
				if (IsPlayerInRangeOfPoint(p, 30.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
				{
					if (strlen(params) > 80) {
					    format(str, sizeof(str), "* %.80s", params);
					    SendClientMessage(p, COLOR_WHITE, str);

					    format(str, sizeof(str), "... %s (( %s ))", params[80], ReturnName(playerid, 0));
		       			SendClientMessage(p, COLOR_WHITE, str);
					}
					else format(str, sizeof(str), "* %s (( %s ))", params, ReturnName(playerid, 0)), SendClientMessage(p, COLOR_WHITE, str);
				}
			}
			return 1;
		}
	}
	return 1;
}

CMD:bater(playerid, params[])
{
	for(new i = 0; i != sizeof(HouseInfo); ++i)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]))
		{
		 	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "> %s bate na porta da casa.", ReturnName(playerid));
			format(szString, sizeof(szString), "> Batida! Batida! Batida! (( %s ))", ReturnName(playerid));

			foreach(new p : Player) if (IsPlayerInRangeOfPoint(p, 60.0, HouseInfo[i][hExitX], HouseInfo[i][hExitY], HouseInfo[i][hExitZ]) && HouseInfo[i][hWorld] == GetPlayerVirtualWorld(p)) SendClientMessage(p, COLOR_PURPLE, szString);
			return 1;
		}
	}
	return 1;
}

CMD:susurrar(playerid, params[])
	return cmd_s(playerid, params);

CMD:s(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
        return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode susurrar, pois está morto.");

	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/(s)usurrar [ID/Nome do player] [texto]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador está desconectado.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO:Você não está perto do jogador.");

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode sussurrar para si mesmo.");

    if (strlen(text) > 80) {
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s susurro: %.80s", ReturnName(playerid, 0), text);
	    SendClientMessageEx(userid, COLOR_YELLOW, "... %s **", text[80]);

	    SendClientMessageEx(playerid, COLOR_YELLOW, "Susurra %s", ReturnName(userid, 0));
	}
	else {
	    SendClientMessageEx(userid, COLOR_YELLOW, "%s Susurra: %s", ReturnName(playerid, 0), text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "Susurra no ouvido de %s.", ReturnName(userid, 0));
	}
	format(text, sizeof(text), "%s susurra no ouvido de alguém.", ReturnName(playerid, 0));
	SetPlayerChatBubble(playerid, text, COLOR_PURPLE, 30.0, 6000);

	format(text, sizeof(text), "Susurra %s: %s", ReturnName(userid), text);
	SQL_LogChat(playerid, "/w", text);
	return 1;
}

CMD:csusurro(playerid, params[])
{
	new text[128], vehicle = GetPlayerVehicleID(playerid);

    if (sscanf(params, "s[128]", text))
	    return SendSyntaxMessage(playerid, "/(cs)usurro [texto]");

	if (!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está  em um veículo.");

	foreach (new i : Player)
	{
	    if(IsPlayerInAnyVehicle(i) && GetPlayerVehicleID(i) == vehicle) {
		    if (strlen(text) > 80) {
			    SendClientMessageEx(i, 0xD7DFF3AA, "%s %s susurra: %.80s", (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) ? ("Motorista"): ("Passageiro"), ReturnName(playerid, 0), text);
			    SendClientMessageEx(i, 0xD7DFF3AA, "... %s", text[80]);
			}
			else {
			    SendClientMessageEx(i, 0xD7DFF3AA, "%s %s susurra: %s", (GetPlayerState(playerid) == PLAYER_STATE_DRIVER) ? ("Motorista"): ("Passageiro"), ReturnName(playerid, 0), text);
			}
		}
	}

	SQL_LogChat(playerid, "/cs", text);
	return 1;
}

CMD:b(playerid, params[])
{
	new str[128];
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/b [texto]");

	if (strlen(params) > 80) {

	    if(PlayerData[playerid][pAdmin] && isAdminDuty(playerid))
		{
			format(str, sizeof(str), "(( [%d] {FF8300}%s{B4B5B7}: %.80s ))", playerid, ReturnName(playerid, 0), params);
		}
		else {
			format(str, sizeof(str), "(( [%d] %s: %.80s ))", playerid, ReturnName(playerid, 0), params);
		}
        ProxDetectorOOC(playerid, 20.0, str);

	    format(str, sizeof(str), "... %s", params[80]);
        ProxDetectorOOC(playerid, 20.0, str);
	}
	else {
	    if(PlayerData[playerid][pAdmin] && isAdminDuty(playerid)) {
			format(str, sizeof(str), "(( [%d] {FF8300}%s{B4B5B7}: %s ))", playerid, ReturnName(playerid, 0), params);
		}
		else {
			format(str, sizeof(str), "(( [%d] %s: %s ))", playerid, ReturnName(playerid, 0), params);
		}
		ProxDetectorOOC(playerid, 20.0, str);
	}

	SQL_LogChat(playerid, "/b", params);
	return 1;
}

CMD:ooc(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é administrador para utilizar este comando..");

    if(systemVariables[OOCStatus] == 0)
		return SendClientMessage(playerid, COLOR_GREY, "O canal OOC está fechado.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(o)oc [texto]");

	if (strlen(params) > 80) {

	    if(PlayerData[playerid][pAdmin] && isAdminDuty(playerid)) SendClientMessageToAllEx(COLOR_GRAD1, "(( [OOC]{FF8300}%s (%s){B4B5B7}: %.80s ))", ReturnName(playerid, 0), PlayerData[playerid][pAdminName], params);
		else SendClientMessageToAllEx(COLOR_GRAD1, "(( [OOC] %s: %.80s ))", ReturnName(playerid, 0), params);

	    SendClientMessageToAllEx(COLOR_GRAD1, "... %s", params[80]);
	}
	else {
	    if(PlayerData[playerid][pAdmin] && isAdminDuty(playerid)) SendClientMessageToAllEx(COLOR_GRAD1, "(( [OOC]{FF8300}%s (%s){B4B5B7}: %s ))", ReturnName(playerid, 0), PlayerData[playerid][pAdminName], params);
		else SendClientMessageToAllEx(COLOR_GRAD1, "(( [OOC] %s ( %s): %s ))", ReturnName(playerid, 0), PlayerData[playerid][pAdminName], params);
	}

	SQL_LogChat(playerid, "/ooc", params);

	return 1;
}

/*
	format(szQuery, sizeof(szQuery), "Sent to %s: %s", ReturnName(userid), text);
	SQL_LogChat(playerid, "/pm", szQuery);
*/
CMD:pm(playerid, params[])
{
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/pm [ID/Nome] [texto]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador está desconectado.");
		}
	}

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O /PM deste jogador está bloqueado.");

	if (BitFlag_Get(g_PlayerFlags[userid], TOGGLE_PMS) && !PlayerData[playerid][pAdmin])
		return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador bloqueou os PM.");

    if (strlen(text) > 80) {
	    SendClientMessageEx(userid, COLOR_PMF, "(( PM de %s (%d): %.80s", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(userid, COLOR_PMF, "... %s ))", text[80]);

	    SendClientMessageEx(playerid, COLOR_PMS, "(( PM para %s (%d): %.80s", ReturnName(userid, 0), userid, text);
	    SendClientMessageEx(playerid, COLOR_PMS, "... %s ))", text[80]);
	}
	else {
		SendClientMessageEx(userid, COLOR_PMF, "(( PM de %s (%d): %s ))", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(playerid, COLOR_PMS, "(( PM para %s (%d): %s ))", ReturnName(userid, 0), userid, text);
	}

	format(szQuery, sizeof(szQuery), "Para %s: %s", ReturnName(userid), text);
	SQL_LogChat(playerid, "/pm", szQuery);

	return 1;
}

CMD:togpm(playerid,params[])
{
    if(PlayerData[playerid][pAdmin] || PlayerData[playerid][pDonateRank])
    {
        if(!BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_PMS))
        {
	        //block_pm[playerid] = 1;
			BitFlag_On(g_PlayerFlags[playerid], TOGGLE_PMS);
	        SendClientMessage(playerid,COLOR_GREEN,"PM's bloqueados.");
	        return 1;
		}
		else
		{
		    //block_pm[playerid] = 0;
			BitFlag_Off(g_PlayerFlags[playerid], TOGGLE_PMS);
		    SendClientMessage(playerid,COLOR_GREEN,"PM's desbloqueado.");
		    return 1;
		}
    }
    else
    {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");
    }
	return 1;
}

CMD:togb(playerid,params[])
{
	if(!BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_LOCALOOC))
	{
		BitFlag_On(g_PlayerFlags[playerid], TOGGLE_LOCALOOC);
 		SendClientMessage(playerid,COLOR_GREEN,"sistema de chat OOC local bloqueado.");
	}
	else
	{
		BitFlag_Off(g_PlayerFlags[playerid], TOGGLE_LOCALOOC);
		SendClientMessage(playerid,COLOR_GREEN,"Sistema de chat OOC local desbloqueado.");
	}
	return 1;
}

CMD:togfac(playerid,params[])
{
	if(!BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_FACTION))
	{
		BitFlag_On(g_PlayerFlags[playerid], TOGGLE_FACTION);
 		SendClientMessage(playerid,COLOR_GREEN,"Bloqueado o chat de facção.");
	}
	else
	{
		BitFlag_Off(g_PlayerFlags[playerid], TOGGLE_FACTION);
		SendClientMessage(playerid,COLOR_GREEN,"Desbloqueado o chat de facção.");
	}
	return 1;
}

// General Commands

CMD:id(playerid, params[])
{
	new ids[MAX_PLAYERS], i;

	if (sscanf(params, "?<MATCH_NAME_PARTIAL=1>u[100]", ids))
	    return SendSyntaxMessage(playerid, "/id [ID/Nome]");

	for (i = 0; ids[i] != INVALID_PLAYER_ID; ++ i)
	{
	    if (ids[i] == -1) break;

	    SendClientMessageEx(playerid, COLOR_GRAD1, "[ID %d] %s | Level: %d", ids[i], ReturnName(ids[i]), PlayerData[ids[i]][pLevel]);
	}
	if (i == 0) SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Nenhum nome de jogador ou identificador foi encontrado.");

	return 1;
}

CMD:horas(playerid, params[])
{
 	new
	    string[64],
		date[3];

	gettime(date[0], date[1], date[2]);
	FixHour(date[0]);
	date[0] = shifthour;

	format(string, sizeof(string), "~g~|~w~%02d:%02d~g~|", date[0], date[1]);
	GameTextForPlayer(playerid, string, 6000, 1);

    ApplyAnimationEx(playerid,"COP_AMBIENT","Coplook_watch",4.1,0,0,0,0,0);
    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s checa as horas em seu relógio.", ReturnName(playerid, 0));
	return 1;
}

CMD:serverhoras(playerid, params[])
{
 	new
	    string[64],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(string, sizeof(string), "~g~|~w~%02d:%02d~g~|", date[3], date[4]);
	GameTextForPlayer(playerid, string, 6000, 1);

	SendClientMessageEx(playerid, COLOR_GRAD1, "Data: %d/%d/%d - Horário: %02d:%02d:%02d",date[0],date[1],date[2],date[3],date[4],date[5]);
	return 1;
}

// Help
COMMAND:telacinza(playerid, params[])
{

    switch(GetPVarInt(playerid, "TelinhaPretaa"))
    {
		case 0:
		{
			TextDrawShowForPlayer(playerid,TelinhaPreta);
			SetPVarInt(playerid, "TelinhaPretaa", 1);
		}
		case 1:
		{
		    TextDrawHideForPlayer(playerid,TelinhaPreta);
			SetPVarInt(playerid, "TelinhaPretaa", 0);
		}
	}
	return 1;
}
CMD:ajuda(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"___________sp-roleplay.com.br___________");

	SendClientMessage(playerid, COLOR_STAT1, "[CONTA] /stats /levelup /upgrade /propriedades /mudarspawn /");
	SendClientMessage(playerid, COLOR_STAT1, "[GERAL] /admins /moderadores /sos /pm /itens /limparmeuchat /aceitar /vender /banco");
	SendClientMessage(playerid, COLOR_STAT1, "[GERAL] /id /dropar /abrir /animes /removercp /stopanim /mostrarlicencas/licencaarma /comprar /armac");
	SendClientMessage(playerid, COLOR_STAT1, "[ITENS] //dropararma, /dropardroga /usardroga /gps /jbl");
	SendClientMessage(playerid, COLOR_STAT1, "[CHAT] /gritar (/g) /ooc /me /do /ame /ado /sussurrar (/s) /b /radio");
	SendClientMessage(playerid, COLOR_STAT1, "[SCREEN] /telapreta /limparmeuchat");
    SendClientMessage(playerid, COLOR_STAT1, "[AJUDA] /ajudacelular /ajudacasa /ajudaempresa /ajudaarmas /ajudaemprego /ajudapremium");
    SendClientMessage(playerid, COLOR_STAT2, "[AJUDA] /ajudapesca /ajudaradio /ajudaitens /ajudaadmin (/aa)");
	SendClientMessage(playerid, COLOR_STAT1, "[DINHEIRO] /pagar /saldo /sacar /banco /poupanca");
	if (PlayerData[playerid][pFaction] != -1)
	{
 		SendClientMessage(playerid, COLOR_STAT2, "[Facções] /faccoes, /(f)ac, /convidar, /demitir, /editarcargo, /promover, /rebocar");

 		if (GetFactionType(playerid) == FACTION_POLICE) {
 		    SendClientMessage(playerid,COLOR_GREEN,"____________________ PMESP COMANDOS ____________________");
			SendClientMessage(playerid, COLOR_STAT1,"[PMESP] /blockfaccao, /convite, /demitir, /promover, /trabalho, /uniforme, /pegararma, /deixararma");
			SendClientMessage(playerid, COLOR_STAT2,"[PMESP] /reboque, /m, /d, /pedagios, /algemar, /desalgemar, /rcone, /tablet, /prender, /multar");
			SendClientMessage(playerid, COLOR_STAT1,"[PMESP] /balasborracha, /checarplaca, /sirene2, /sirene, /autorizartatico, /removertatico /respawnfaccao (Respawna carros espalhados)");
			SendClientMessage(playerid,COLOR_GREEN,"____________________ FIM ____________________");
		}
		else if (GetFactionType(playerid) == FACTION_NEWS) {
		    SendClientMessage(playerid, COLOR_STAT1, "[facção]");
		}
  		else if (GetFactionType(playerid) == FACTION_MEDIC) {
			SendClientMessage(playerid,COLOR_GREEN,"____________________ CBESP COMANDOS ____________________");
 		    SendClientMessage(playerid, COLOR_STAT1, "[CBESP] /uniforme, /reboque, /m, /rcone, /curar, /d /respawnfaccao (Respawna carros espalhados)");
			SendClientMessage(playerid, COLOR_STAT2, "[CBESP] /blockfaccao, /convite, /demitir, /promover, /duty");
			SendClientMessage(playerid,COLOR_GREEN,"____________________ FIM ____________________");
		}
		else if (GetFactionType(playerid) == FACTION_GOV) {
 		    SendClientMessage(playerid, COLOR_STAT1, "[GOVERNO] /sirene");
		}
		else if (GetFactionType(playerid) == FACTION_SASD) {
 		    SendClientMessage(playerid,COLOR_GREEN,"____________________ PCESP COMANDOS ____________________");
			SendClientMessage(playerid, COLOR_STAT1,"[PCESP] /blockfaccao, /convite, /demitir, /promover, /trabalho, /uniforme, /pegararma, /deixararma");
			SendClientMessage(playerid, COLOR_STAT2, "[PCESP] /reboque, /m, /d, /pedagios, /algemar, /desalgemar, /rcone, /tablet, /prender, /multar");
			SendClientMessage(playerid, COLOR_STAT1, "[PCESP] /balasborracha, /checarplaca, /sirene2, /sirene, /autorizartatico, /removertatico /respawnfaccao (Respawna carros espalhados)");
			SendClientMessage(playerid,COLOR_GREEN,"____________________ FIM ____________________");
		}
		else if (GetFactionType(playerid) == FACTION_GANG) {
 		    SendClientMessage(playerid, COLOR_STAT1, "[facção] /givespray /takespray /respawnfaccao (Respawna carros espalhados)");
		}
	}
    if (PlayerData[playerid][pAdmin]) SendClientMessage(playerid, COLOR_STAT2, "[ADMIN] /aa (acmds) (/a)dmin");
    SendClientMessage(playerid, COLOR_STAT1,"[TOG/BLOCK] /jornal /togfac /togb /togpm /toghud");
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
    SendClientMessage(playerid, COLOR_STAT1,"Por favor, consulte a declaração adicional do servidor no fórum ou /sos para obter ajuda");
	return 1;
}

CMD:ajudadrogas(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________Ajuda Drogas______________________|");
	SendClientMessage(playerid, COLOR_WHITE,"/minhasdrogas - /pegardroga - /dropardroga - /usardroga");
	SendClientMessage(playerid, COLOR_WHITE,"/colocardroga (/cd) - /placealldrugs (pad) - /takedrug (/td) - /takealldrugs (/tad)");
	SendClientMessage(playerid, COLOR_WHITE,"/checardroga - /dardroga - /pacote - /ajustarpacote");
	return 1;
}
CMD:ajudaradio(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________Ajuda rádio______________________|");
	SendClientMessage(playerid, COLOR_YELLOW,"DICA: Compre o rádio em uma loja de coviniencia.");
	SendClientMessage(playerid, COLOR_WHITE,"/setarcanal - Para setar um canal.");
	SendClientMessage(playerid, COLOR_WHITE,"/setarslot - Configure o canal de contato desejado.");
	SendClientMessage(playerid, COLOR_WHITE,"/r - Para usar o canal de rádio.");
	SendClientMessage(playerid, COLOR_WHITE,"/rsenha - Para definir a senha do canal de rádio.");
	SendClientMessage(playerid, COLOR_WHITE,"/rbaixo - Para falar baixo no canal de rádio.");
	SendClientMessage(playerid, COLOR_WHITE,"/alugarcanal - Alugar um rádio!");
	SendClientMessage(playerid, COLOR_WHITE,"/rsair - Para sair de um canal de rádio.");
	SendClientMessage(playerid, COLOR_WHITE,"/part - Para cancelar o rádio comunicador."); 
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________________________________________|");
	return 1;
}
CMD:ajudawh(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________Ajuda Warehouse______________________|");
	SendClientMessage(playerid, COLOR_WHITE,"Dica: Somente 2 pessoas está autorizada a mexer na WH.");
	SendClientMessage(playerid, COLOR_WHITE,"/comprararma - para comprar arma no WH.");

	SendClientMessage(playerid, COLOR_GREEN,"|_____________________________________________________|");
	return 1;
}
CMD:ajudapremium(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________Ajuda premium______________________|");
	SendClientMessage(playerid, COLOR_YELLOW,"EM CRIAÇÃO - O SISTEMA FUNCIONA COMPLETAMENTE VIA UCP, PORÉM, não FOI ADICIONADO AINDA NA UCP.");
	SendClientMessage(playerid, COLOR_GREEN,"|_____________________________________________________|");
	return 1;
}
CMD:bloconotas(playerid, params[])
{
    SendClientMessage(playerid, COLOR_YELLOW2,"____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW2,"USE: /nota [OPÇÃO]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Show] /note show [noteID] [PlayerID / PartOfName]  (* Do not type the noteID or PlayerID.)");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Create] /note create [text]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Delete] /note delete [number 1-5]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Give] /note give [number 1-5] [PlayerID / PartOfName]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Leave]: /note leave [number 1-5]");
	SendClientMessage(playerid, COLOR_YELLOW2,"[Add]: /note add [number 1-5] [text]");
	SendClientMessage(playerid, COLOR_YELLOW2,"____________________________________________________");
	SendClientMessage(playerid, COLOR_YELLOW2,"Você não tem nenhum blocos de nota. ( /note )");
	return 1;
}
GPS(playerid, name[], Float:x, Float:y, Float:z)
{
    format(PlayerData[playerid][pLocation], 32, name);

    PlayerData[playerid][pWaypoint] = 1;
   	PlayerData[playerid][pWaypointPos][0] = x;
    PlayerData[playerid][pWaypointPos][1] = y;
   	PlayerData[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);

	return 1;
}
stock LGPS(playerid)
{
    if (PlayerData[playerid][pWaypoint])
	{
 		PlayerData[playerid][pWaypoint] = 0;

 		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}
Dialog:WoW(playerid, response, listitem, inputtext[]) {
	switch(listitem)
	{

	    case 0: GPS(playerid, "Delegacia", 1243.5824,-1272.4717,13.5469);
		case 1: GPS(playerid, "Prefeitura", 1460.4427,-1775.0415,13.5369);
	    case 2: GPS(playerid, "Mecanico", -78.0338,-1136.1221,1.0781);
		case 3: GPS(playerid, "Agricultor", -382.5893,-1426.3422,26.2217);
		case 4: GPS(playerid, "Taxista", 1752.9860,-1902.6703,13.5629);
		case 5: GPS(playerid, "Caminhoneiro", -78.0338,-1136.1221,1.0781);
		case 6: GPS(playerid, "Concessionaria", 1702.6553,-1471.3450,13.5469);
		case 7: GPS(playerid, "Loja de Roupas", 1095.7863,-1447.4539,15.8016);
		case 8: GPS(playerid, "Detran", 2818.090332, -1196.074951, 23.682453);
		case 9: LGPS(playerid);
 	}
 	SendClientMessage(playerid, COLOR_LIGHTGREEN, "O local escolhido foi marcado em seu GPS.");
  	return 1;
}
CMD:gps(playerid, params[])
{
	Dialog_Show(playerid, WoW, DIALOG_STYLE_LIST, "GPS", "Delegacia\nPrefeitura\nCaminhoneiro\nAgricultor\nTaxista\nMecanico\nConcessionaria\nLoja de Roupas\nDetran\nDesligar o GPS", "Selecionar", "Fechar");
	return 1;
}
CMD:ajudaarmas1(playerid, params[])
{
	SendClientMessage(playerid, COLOR_RED,"Comandos de armas:");
	SendClientMessage(playerid, COLOR_GREEN,"/venderarma /venderpacote /putallweapons (/paw) /vehpackage");
	SendClientMessage(playerid, COLOR_GREEN,"/pegararma /dropararma /meupacote+- /vehpackage");
	return 1;
}
CMD:ajudaarmas(playerid, params[])
{
	SendClientMessage(playerid, COLOR_RED,"Comandos de armas:");
	SendClientMessage(playerid, COLOR_GREEN,"/listaarmas - checar o id das armas.");
	SendClientMessage(playerid, COLOR_GREEN,"/dropararma, /deixararmas, /deixararma.");
	return 1;
}
CMD:listaarmas(playerid, params[])
{

	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
	SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
	SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
	SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
	SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
	SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
	SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	return 1;
}
CMD:ajudapesca(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD3,"/meuspeixes /irpesca /pescar /pararpesca /venderpeixe");
	return 1;
}

CMD:ajudaemprego(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_GRAD3,"Seu emprego atual é:");
	SendClientMessageEx(playerid,COLOR_GRAD3,"%s.", ReturnJobName(playerid, PlayerData[playerid][pJob]));

	if(PlayerData[playerid][pSideJob]) {
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		SendClientMessage(playerid, COLOR_GRAD3,"Seu trabalho paralelo é:");
		SendClientMessageEx(playerid,COLOR_GRAD3,"%s.", ReturnJobName(playerid, PlayerData[playerid][pSideJob]));
	}

	if(PlayerData[playerid][pJob] == JOB_MECHANIC || PlayerData[playerid][pSideJob] == JOB_MECHANIC) {
		if(PlayerData[playerid][pSideJob] == JOB_MECHANIC) SendClientMessage(playerid,COLOR_LIGHTRED,"mecanico");
		else SendClientMessage(playerid,COLOR_LIGHTRED,"mecanico:");
		SendClientMessage(playerid,COLOR_WHITE,"/comprarpecas - /checarpecas - /servico - /pintarcarro.");
		SendClientMessage(playerid,COLOR_WHITE,"/listadecores - /attach - /rebocar.");
	}

	if(PlayerData[playerid][pJob] == JOB_TAXI || PlayerData[playerid][pSideJob] == JOB_TAXI) {
	    if(PlayerData[playerid][pSideJob] == JOB_TAXI) SendClientMessage(playerid,COLOR_LIGHTRED,"Taxista");
		else SendClientMessage(playerid,COLOR_LIGHTRED,"Taxista:");
		SendClientMessage(playerid,COLOR_WHITE,"/taxi [| trabalho | tarifa | checar | aceitar | iniciar | parar]");
	}

	if(PlayerData[playerid][pJob] == JOB_WPDEALER) {
	    SendClientMessage(playerid,COLOR_GRAD1,"Comandos:");
		SendClientMessage(playerid,COLOR_GRAD1,"/venderarma (/sw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/putweapon (/pw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/takeweapon (/tw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/putallweapons (/paw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/takeallweapons (/taw)");
		SendClientMessage(playerid,COLOR_GRAD1,"/dealinghelp");
		SendClientMessage(playerid,COLOR_GRAD1,"/meupacote");
		SendClientMessage(playerid,COLOR_GRAD1,"/vehpackage");

	}

	if(PlayerData[playerid][pJob] == JOB_SUPPLIER) {
	    SendClientMessage(playerid,COLOR_GRAD1,"Comandos:");
		SendClientMessage(playerid,COLOR_GRAD1,"/venderpacote  (/sp)");
		SendClientMessage(playerid,COLOR_GRAD1,"/meupacote");
		SendClientMessage(playerid,COLOR_GRAD1,"/comprararma");
	}


	if(PlayerData[playerid][pJob] == JOB_FARMER) {
	    SendClientMessage(playerid,COLOR_LIGHTRED,"Comandos:");
		SendClientMessage(playerid,COLOR_WHITE,"/colhedor");
		SendClientMessage(playerid,COLOR_WHITE,"/pararcolheita");
	}

	if(PlayerData[playerid][pJob] == JOB_TRUCKER) {
		SendClientMessage(playerid,COLOR_GRAD1,"Leia a documentação no fórum:");
		SendClientMessage(playerid,COLOR_GRAD1,"informação do servidor -> documentação de sistemas -> Caminhoneiro");
		SendClientMessage(playerid,COLOR_GRAD1,"(forum.sp-roleplay.com.br)");
		SendClientMessage(playerid,COLOR_GRAD2,"Você precisa de uma caminhonete ou van para fazer isso.");
		SendClientMessage(playerid, -1, "{FFFF00}Comandos:{FFFFFF}Use /carga abre a lista de cargas no veiculo.");
		SendClientMessage(playerid, -1, "{FFFF00}Comandos:{FFFFFF}Use /tpda abre o painel principal de caminhoneiros.");
		SendClientMessage(playerid, -1, "{FFFF00}Comandos:{FFFFFF}Use /industria abre o menu da industria.");
		SendClientMessage(playerid, -1, "{FFFF00}Comandos:{FFFFFF}Use /trailer para acessar os comandos do seu trailer.");
		if(PlayerData[playerid][pCareer]) SendClientMessageEx(playerid, COLOR_LIGHTGREEN,"Você tem %d horas de carreira", PlayerData[playerid][pCareer]);
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	}
	return 1;
}
CMD:ajudaempresa(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE,"*** AJUDA EMPRESA *** Digite os comandos para obter ASSITÊNCIA adicional.");
	SendClientMessage(playerid, COLOR_GRAD3,"*** EMPRESA *** /empinfo /empretirar /empcofre /empcomprar");
	SendClientMessage(playerid, COLOR_GRAD3,"*** EMPRESA *** /trancar /empvender /comppreco /taxaemp");
	return 1;
}
CMD:ajudacasa(playerid, params[])
{
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	SendClientMessage(playerid, COLOR_WHITE,"*** AJUDA CASA *** Digite os comandos para obter ASSITÊNCIA adiciona.");
	SendClientMessage(playerid, COLOR_GRAD3,"*** CASA *** /definiraluguel /vendercasa /comprarcasa / casaalugar /minhacasa /cofrecasa");
	SendClientMessage(playerid, COLOR_GRAD3,"*** CASA ***  /inquilinos /despejar /trancar /mobilia /desejartodos /alugarcasa");
	return 1;
}
CMD:ajudacelular(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	if (PlayerData[playerid][pPnumber]) {
		SendClientMessage(playerid, COLOR_WHITE,"*** AJUDA *** Digite os comandos para obter ASSITÊNCIA adiciona.");
		SendClientMessage(playerid, COLOR_GRAD3,"[CELULAR] /ligar /sms /vivavoz /desligar /cc");
	}
	else SendClientMessage(playerid, COLOR_WHITE,"Você pode comprar um celular em uma loja de conviniencia.");

	return 1;
}
CMD:ajudaitens(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");

	SendClientMessage(playerid, COLOR_WHITE,"*** AJUDA *** Digite os comandos para obter ASSITÊNCIA adiciona.");
	SendClientMessage(playerid, COLOR_GRAD3,"*** ITENS *** /itens [names]");
	SendClientMessage(playerid, COLOR_GRAD4, "funções: (c)olocar, (d)ropar, (a)justar, (e)ntregar");

	return 1;
}
CMD:aa(playerid, params[]) return cmd_acmds(playerid, params);
CMD:acmds(playerid, params[])
{
	if(!PlayerData[playerid][pAdmin])
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não é um administrador.");

	//SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	if (PlayerData[playerid][pAdmin] >= 1)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________ADMINISTRADOR 1___________________________");

		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /aduty /checkplayer /a(dminchat) /kick /banir /desbanir/congelar /descongelar /ir /trazer");
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /tapa /telemenu  /checarhacker /checarafk /limparchat /pegarip /tempoban");
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /repararveiculo /darvida /resetararmas /spec /setarvw /o /tempoafk");
		SendClientMessage(playerid, COLOR_GRAD1, "[Level 1]: /ajail /soltar /ircarro /trazerveiculo /respawncar /irls /irpos /checarmascarado /desbanirip");
	
	}
	if (PlayerData[playerid][pAdmin] >= 2)
	{
		SendClientMessage(playerid, COLOR_GREEN, "___________________________ADMINISTRADOR 2___________________________");

		SendClientMessage(playerid, COLOR_GRAD2,"[Level 2]: /vehname");
	}
	if (PlayerData[playerid][pAdmin] >= 3)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________ADMINISTRADOR 3___________________________");

		SendClientMessage(playerid, COLOR_GRAD3,"[Level 3]: /perto /veh /setarplayer /fuelall /respawncar /deleteveh /salvarveh /revivermorte /reviver");
		SendClientMessage(playerid, COLOR_GRAD4,"[Level 3]: /telecmds /perto /girarveh /despawncar /retirararmas  /resetararmas");
	}
	if (PlayerData[playerid][pAdmin] >= 4)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________SUPERVISOR___________________________");

		SendClientMessage(playerid, COLOR_GRAD4,"[Level 4]: /gopos /makeleader /asetrank /criararma");
		SendClientMessage(playerid, COLOR_GRAD4,"[Level 4]:  /editarfaccao /vehcmds /adminname /deletarveh");
	}
	if (PlayerData[playerid][pAdmin] >= 5)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________GERENTE___________________________");
		SendClientMessage(playerid, COLOR_GRAD4,"[Level 5]:  /sinalcmds /salvartudo /setarpremium");
	}
	if (PlayerData[playerid][pAdmin] >= 1337)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________DESENVOLVEDOR___________________________");
		SendClientMessage(playerid, COLOR_GRAD5,"[Level 1337]: /casacmds /empcmds /whcmds /portaocmds");
	}
	if (PlayerData[playerid][pAdmin] >= 1338)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________GESTOR___________________________");
		SendClientMessage(playerid, COLOR_GRAD5,"[Level 1338]: Todos os comandos acima.");
		SendClientMessage(playerid, COLOR_GRAD6,"***1338 isso o torna oculto na lista de Administradores.");
	}
	if (PlayerData[playerid][pFactionTeam] >= 2)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________GEN DE FACÇÕES___________________________");
		SendClientMessage(playerid, COLOR_GRAD5,"[EQUIPE]: /faccoescmd /whcmds");
	}
	if (PlayerData[playerid][pPropertyTeam] >= 2)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________GEN DE PROPRIEDADES___________________________");
		SendClientMessage(playerid, COLOR_GRAD5,"[EQUIPE]: /casacmds /empcmds /portaocmds");
	}
	if (PlayerData[playerid][pBanTeam] >= 2)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "___________________________GEN DE BANIMENTOS___________________________");
		SendClientMessage(playerid, COLOR_GRAD5,"[EQUIPE]: /desbanirip /desbanir");
	}
	SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
	return 1;
}

CMD:regras(playerid, params[])
{
    SendClientMessage(playerid, COLOR_RED,"_______________________________________");
	SendClientMessage(playerid, COLOR_RED,"São Paulo Roleplay - Regras do servidor");
	SendClientMessage(playerid, COLOR_WHITE,"Leia nossas regras em nosso fórum...");
	SendClientMessage(playerid, COLOR_WHITE,"https://forum.sp-roleplay.com.br");
	return 1;
}
CMD:sinalcmds(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 5]: /criarsinal, /editarsinal, /destruirsinal");
	return 1;
}

CMD:faccoescmd(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 5 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 4]: /Facções /criarfaccao, /editarfaccao, /deletarfaccao");
	return 1;
}

CMD:vehcmds(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 4]: /saveveh /deleteveh /editveh");
	return 1;
}

CMD:whcmds(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /criarwh /removerwh /editarwh /irwh");
	return 1;
}

CMD:portaocmds(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: {C3C3C3}/criarportao /movimentoportao /deletarportao /editarportao /portaoproximo /mostrarportoes");
	return 1;
}

CMD:casacmds(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 5 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /criarcasa /destruircasa /editarcasa /entradacasa /saidacasa /avendercasa /ircasa");
	return 1;
}

CMD:empcmds(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 5 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /criaremp /destruirempresa /editaremp /entradaemp /irempresa /avenderempresa");
	SendClientMessage(playerid, COLOR_GRAD3, "[Level 1337]: /empint /businessexit /tiposemp /whatbusiness /showbusinesses /businessex1 /businessex2 /businessex3");
	return 1;
}

CMD:telecmds(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização.");

	SendClientMessage(playerid, COLOR_GRAD3, "[Level 3]: /telemenu /ints /salvarinterior /removerteleporte /teleportes");
	return 1;
}

CMD:telemenu(playerid, params[])
{
	if(!PlayerData[playerid][pAdmin])
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não é administrador.");

	new telestring[1550], part[40];
	format(telestring, sizeof(telestring), "{FFFFFF}%s", OrTeleports[0]);
	for(new OrT = 1; OrT != sizeof(OrTeleports); ++OrT)
	{
		format(part, sizeof(part), "\n%s", OrTeleports[OrT]);
		strcpy(telestring, part, sizeof(telestring));
	}
	Dialog_Show(playerid, Teles, DIALOG_STYLE_LIST, "Selecione o teleporte", telestring, "Teleporte", "Cancelar");
	return 1;
}
// Stats
CMD:status(playerid, params[])
{
	if (SQL_IsLogged(playerid))
	{
		ShowStats(playerid,playerid);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está logado!");
	return 1;
}

//-------------------------------[Check]--------------------------------------------------------------------------
CMD:checkplayer(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] >= 1)
	{

		new
			userid;

		if (sscanf(params, "u", userid))
			return SendSyntaxMessage(playerid, "/checkplayer [PlayerID/PartOfName]");

		if(userid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]", maskid);
			if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador não está logado.");
			}
		}


		ShowStats(playerid,userid);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não é administrador.");

	return 1;
}


CMD:a(playerid, params[]) return cmd_adminchat(playerid, params);
CMD:adminchat(playerid, params[])
{
	new str1[128], str2[128], bool:splitted = false;
	if (!PlayerData[playerid][pAdmin]) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não é administrador.");
	if(isnull(params)) return SendSyntaxMessage(playerid, "/adminchat [texto]");

	if(strlen(params) > 80)
	{
		format(str1, sizeof(str1), "(( *Admin[%d] %s: %.80s ...))", PlayerData[playerid][pAdmin], ReturnName(playerid), params);
		format(str2, sizeof(str2), "(( *Admin[%d] %s: ... %s ))", PlayerData[playerid][pAdmin], ReturnName(playerid), params[80]);
		splitted = true;
	}
	else
	{
		format(str1, sizeof(str1), "(( *Admin[%d] %s: %s ))", PlayerData[playerid][pAdmin], ReturnName(playerid), params);
	}

 	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin])
		{
			if(splitted)
			{
				SendClientMessage(i, TEAM_ADMIN_COLOR, str1);
				SendClientMessage(i, TEAM_ADMIN_COLOR, str2);
			}
			else
			{
				SendClientMessage(i, TEAM_ADMIN_COLOR, str1);
			}
		}
	}
	return 1;
}

//-------------------------------[Phone]-----------------------------------------------------------------------------

// ================= [ NEW PHONE SYSTEM ] ========================

CMD:celular(playerid, params[])
{
	//printf("%d deathmode[playerid] %d PlayerData[playerid][pInjured] %d", playerid, deathmode[playerid], PlayerData[playerid][pInjured]);

    if(deathmode[playerid] || PlayerData[playerid][pInjured] || PlayerData[playerid][pJailed] ||Dialog_Opened(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode usar o telefone neste momento.");

	if (PlayerData[playerid][pPnumber])
	{
     	if(!ph_opening{ playerid })
	    {
			SendClientMessage(playerid, COLOR_WHITE, "[!] Nota: Para alternar o telefone, use /celular. Para abrir o mouse, use /cc.");
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s pega o celular.", ReturnName(playerid, 0));

			ShowPlayerPhone(playerid);

			SendClientMessage(playerid, COLOR_WHITE, "[!] Nota: Pressione ESC para retornar ao modo de caminhada.");
		}
		else
		{
	 		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
			{
		        SendClientMessage(playerid, COLOR_GRAD2, "[ ! ] Você pode desligar a ligação.");
			    SendClientMessage(PlayerData[playerid][pCallLine], COLOR_GRAD2, "[ ! ] Desligar.");
			    CancelCall(playerid);
			}
			ClosePlayerPhone(playerid, true);
	      	CancelSelectTextDraw(playerid);

			if(ph_menuid[playerid] != 7)
			{
				RemovePlayerAttachedObject(playerid, FREESLOT9);
	 			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s guarda o celular.", ReturnName(playerid, 0));
 			}
		    //SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s keep his phone", ReturnName(playerid, 0));
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui um celular.");

	return 1;
}


CMD:lg(playerid, params[])
	return cmd_ligar(playerid, params);

CMD:ligar(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode fazer isso agora.");

	if(ph_menuid[playerid] == 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "O seu celular encontra-se desligado.");
	if(ph_airmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "O seu celular está em modo avião.");
 	if(calltimer[playerid] || smstimer[playerid] || GetPlayerSpecialAction(playerid) > 0 || PlayerData[playerid][pCash] < 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui créditos suficiente.");

	new phonenumb[24];

	if (strlen(params) < 24 && sscanf(params, "s[24]", phonenumb))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Use: /ligar [número/contato]");
		SendClientMessage(playerid, COLOR_GRAD1, "[Lista de números]");
		SendClientMessage(playerid, COLOR_YELLOW3, "Emergencia (polícia/médicos): 190");
        SendClientMessage(playerid, COLOR_YELLOW3, "Disque denúncia (PCESP): 191");
        SendClientMessage(playerid, COLOR_YELLOW3, "Taxista: 544");
        SendClientMessage(playerid, COLOR_YELLOW3, "mecanico: 555");
        SendClientMessage(playerid, COLOR_YELLOW3, "Embarcador: 533");
		return 1;
	}

    if(PlayerData[playerid][pPnumber])
	{
		new pnumber = strval(phonenumb);
  		if(pnumber == 190)
		{
			PlayerPlaySoundEx(playerid, 3600);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s disca um número em seu telefone.", ReturnName(playerid, 0));

			if(!ph_opening{ playerid })
			{
				SendClientMessage(playerid, COLOR_WHITE, "[!] Nota: para alternar o telefone, use /celular. Para abrir o mouse, use /cc.");
				ShowPlayerPhone(playerid);
			}
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
            format(ph_call_string[playerid], 64, "~n~190");
			ph_menuid[playerid]=7;
			ph_sub_menuid[playerid]=1;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

			SendClientMessage(playerid, COLOR_YELLOW, "Emergência diz (phone): Aqui está o Despacho de Emergência 190. Qual serviço Você precisa?");
			PlayerData[playerid][pCallLine] = 190;
			PlayerData[playerid][pIncomingCall] = 0;
			//SetPhoneSection(playerid, PH_CALLING, 0);
			return 1;
		}
  		else if(pnumber == 191)
		{
			PlayerPlaySoundEx(playerid, 3600);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s disca um número em seu telefone.", ReturnName(playerid, 0));

			if(!ph_opening{ playerid })
			{
				SendClientMessage(playerid, COLOR_WHITE, "[!] Nota: para alternar o telefone, use /celular. Para abrir o mouse, use /cc.");
				ShowPlayerPhone(playerid);
			}
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
            format(ph_call_string[playerid], 64, "~n~191");
			ph_menuid[playerid]=7;
			ph_sub_menuid[playerid]=1;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

			SendClientMessage(playerid, COLOR_YELLOW, "Despacho diz (celular): Gostariamos de saber sua localização atual.");
			PlayerData[playerid][pCallLine] = 191;
			PlayerData[playerid][pIncomingCall] = 0;
			return 1;
		}
  		else if(pnumber == 555)
		{
			PlayerPlaySoundEx(playerid, 3600);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s disca um número em seu telefone.", ReturnName(playerid, 0));

			if(!ph_opening{ playerid })
			{
				SendClientMessage(playerid, COLOR_WHITE, "[!] Nota: para alternar o telefone, use /celular. Para abrir o mouse, use /cc.");
				ShowPlayerPhone(playerid);
			}
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
            format(ph_call_string[playerid], 64, "~n~555");
			ph_menuid[playerid]=7;
			ph_sub_menuid[playerid]=1;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

			SendClientMessage(playerid, COLOR_YELLOW, "Mecanica diz (celular): Em que podemos lhe ajudar?");
			PlayerData[playerid][pCallLine] = 555;
			PlayerData[playerid][pIncomingCall] = 0;
			return 1;
		}
  		else if(pnumber == 544)
		{
			PlayerPlaySoundEx(playerid, 3600);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s disca um número em seu telefone.", ReturnName(playerid, 0));

			if(!ph_opening{ playerid })
			{
				SendClientMessage(playerid, COLOR_WHITE, "[!] Nota: para alternar o telefone, use /celular. Para abrir o mouse, use /cc.");
				ShowPlayerPhone(playerid);
			}
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
            format(ph_call_string[playerid], 64, "~n~544");
			ph_menuid[playerid]=7;
			ph_sub_menuid[playerid]=1;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

			SendClientMessage(playerid, COLOR_YELLOW, "Central de taxi diz (celular): Em que podemos lhe ajudar?");
			PlayerData[playerid][pCallLine] = 544;
			PlayerData[playerid][pIncomingCall] = 0;
			return 1;
		}
		else
		{
			new nid = -1;
			//new nstring[12];

			for(new i = 0; i != 40; ++i)
			{
			    //Int32(nstring, ContactData[playerid][i][contactNumber]);

				if(ContactData[playerid][i][contactNumber] > 0 && (!strcmp(ContactData[playerid][i][contactName], phonenumb, true) || ContactData[playerid][i][contactNumber] == pnumber))
				{
					nid = i;
					//printf("id %d ] %s search string = %s", nid, ContactData[playerid][i][contactName], phonenumb);
				 	break;
				}
			}
			if(nid == -1 && pnumber == 0)
			{
				ph_menuid[playerid]=5;
				ph_sub_menuid[playerid]=1;
				RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				return 1;
			}
			PlayerPlaySoundEx(playerid, 3600);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s disca um número em seu telefone.", ReturnName(playerid, 0));

			if(!ph_opening{ playerid })
			{
				SendClientMessage(playerid, COLOR_WHITE, "[!] Nota: para alternar o telefone, use /celular. Para abrir o mouse, use /cc.");
				ShowPlayerPhone(playerid);
			}
			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);

			/* CALL SCREEN */
			if(nid == -1)
			{
				format(ph_call_string[playerid], 64, "~n~555-%06d", pnumber);
				AddPlayerCallHistory(playerid, pnumber, PH_OUTGOING);
			}
			else {
				format(ph_call_string[playerid], 64, " %s~n~(%d)", ContactData[playerid][nid][contactName], ContactData[playerid][nid][contactNumber]);
                AddPlayerCallHistory(playerid, ContactData[playerid][nid][contactNumber], PH_OUTGOING);
			}
			ph_menuid[playerid]=7;
			ph_sub_menuid[playerid]=0;
			RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

			new signal = GetPhoneSignal(playerid);
			//ligartimer[playerid] = SetTimerEx("SendPlayerCall", ((7 - signal) * 1000) + (6 - signal * 3.3), false, "dd", playerid, nid);
			if(signal > 4) calltimer[playerid] = SetTimerEx("SendPlayerCall", 2000, false, "dddd", playerid, signal, pnumber, nid);
			else if(signal > 3) calltimer[playerid] = SetTimerEx("SendPlayerCall", 2500, false, "dddd", playerid, signal, pnumber, nid);
			else if(signal > 2) calltimer[playerid] = SetTimerEx("SendPlayerCall", 3000, false, "dddd", playerid, signal, pnumber, nid);
			else if(signal > 1) calltimer[playerid] = SetTimerEx("SendPlayerCall", 3500, false, "dddd", playerid, signal, pnumber, nid);
			else calltimer[playerid] = SetTimerEx("SendPlayerCall", 4000, false, "dddd", playerid, signal, pnumber, nid);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui um celular.");

	return 1;
}

CMD:sms(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured] || PlayerData[playerid][pJailed])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode fazer isso agora.");

	if(ph_menuid[playerid] == 6) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode fazer isso agora. (Celular desligado)");
	if(ph_airmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "O seu celular encontra-se em modo avião.");
  	if(calltimer[playerid] || smstimer[playerid] || GetPlayerSpecialAction(playerid) > 0 || PlayerData[playerid][pCash] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui crédito suficiente.");


	new phonenumb[24], sms_text[128];

	if (sscanf(params, "s[24]s[128]", phonenumb, sms_text))
		return SendSyntaxMessage(playerid, "/sms [número] [texto]");

    if(PlayerData[playerid][pPnumber])
	{
	    new phonenumber = strval(phonenumb);


		new nid = -1;

		for(new i = 0; i != 40; ++i)
		{
			if(ContactData[playerid][i][contactNumber] > 0 && (!strcmp(ContactData[playerid][i][contactName], phonenumb, true) || ContactData[playerid][i][contactNumber] == phonenumber))
			{
				nid = i;
    			break;
   			}
  		}

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s digita algo em seu celular.", ReturnName(playerid, 0));

		if(!ph_opening{ playerid }) ShowPlayerPhone(playerid);

		/* SMS SCREEN */
		ph_menuid[playerid]=5;
		ph_sub_menuid[playerid]=4;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);

        SetPVarString(playerid,"SMSPhoneText", sms_text);

		new signal = GetPhoneSignal(playerid);
		if(signal > 4) smstimer[playerid] = SetTimerEx("SendPlayerSMS", 3000, false, "ddd", playerid, nid, phonenumber);
		else if(signal > 3) smstimer[playerid] = SetTimerEx("SendPlayerSMS", 4000, false, "ddd", playerid, nid, phonenumber);
		else if(signal > 2) smstimer[playerid] = SetTimerEx("SendPlayerSMS", 5000, false, "ddd", playerid, nid, phonenumber);
		else if(signal > 1) smstimer[playerid] = SetTimerEx("SendPlayerSMS", 6000, false, "ddd", playerid, nid, phonenumber);
		else smstimer[playerid] = SetTimerEx("SendPlayerSMS", 7000, false, "ddd", playerid, nid, phonenumber);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui um celular.");

	return 1;
}


// ================= [ NEW PHONE SYSTEM ] ========================

CMD:ligarcel(playerid, params[])
{

	if(deathmode[playerid] || PlayerData[playerid][pInjured])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar o celular no momento.");

    if(PlayerData[playerid][pPnumber]) {

	if(ph_menuid[playerid] == 6)
	{
		if(ph_sub_menuid[playerid] == 1) // PHONE ON
		{
	      	ph_menuid[playerid] = 6;
	       	ph_sub_menuid[playerid] = 2;
	      	RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
			SetTimerEx("PhoneTurnOn", 4000, false, "d", playerid);
		}
  	}

	}
  	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui um celular.");

	return 1;
}


CMD:turn_off(playerid, params[])
{

    if(deathmode[playerid] || PlayerData[playerid][pInjured])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar o celular no momento.");

	if(PlayerData[playerid][pPnumber])
	{
        if(ph_menuid[playerid] != 6) {

            ph_menuid[playerid] = 6;
            ph_sub_menuid[playerid] = 0;
            RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
			SetTimerEx("PhoneTurnOff", 4000, false, "d", playerid);

			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
			{
	      		SendClientMessage(PlayerData[playerid][pCallLine],  COLOR_GRAD2, "Chamadas perdidas...");
			    CancelCall(playerid);
			}
			PhoneSelfie_Stop(playerid);
		}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui um celular.");
	return 1;
}

CMD:apagarcel(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar o celular no momento.");

	new query[128];
	if(PlayerData[playerid][pPnumber])
	{
	    format(query, sizeof(query), "DELETE FROM phone_contacts WHERE contactAdded = '%d'", PlayerData[playerid][pPnumber]); // Delete Contacts
		mysql_query(dbCon, query);
	    format(query, sizeof(query), "DELETE FROM phone_sms WHERE PhoneReceive = '%d'", PlayerData[playerid][pPnumber]); // Delete a message
		mysql_query(dbCon, query);

		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
	      	SendClientMessage(PlayerData[playerid][pCallLine],  COLOR_GRAD2, "Apagando...");
			CancelCall(playerid);
		}
        PhoneSelfie_Stop(playerid);

     	PlayerData[playerid][pPnumber] = 0;
     	PlayerData[playerid][pPmodel] = 0;
		SendClientMessage(playerid, COLOR_WHITE, "Você deixou seu celular.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui um celular.");
	return 1;
}

CMD:vivavoz(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar o celular no momento.");

	if(ph_speaker[playerid])
	{
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s liga o viva voz do seu celular.", ReturnName(playerid, 0));
		ph_speaker[playerid] = 0;
	}
	else {

	    SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s desliga o viva voz do seu celular.", ReturnName(playerid, 0));
		ph_speaker[playerid] = 1;
	}
	return 1;
}

CMD:atender(playerid, params[])
	return cmd_at(playerid, params);

CMD:at(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar o celular no momento.");

	if(GetPlayerSpecialAction(playerid) > 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode fazer isso agora!");

	if (ph_menuid[playerid] == 7 && ph_sub_menuid[playerid] == 2)
	{
		// player ????    targetid ????

		new targetid = PlayerData[playerid][pCallConnect]; // Good call.

		if(targetid != INVALID_PLAYER_ID) // The caller is not empty.
		{
			SendClientMessage(targetid,  COLOR_GRAD2, "[!] Ele atendeu! Você pode falar usando a caixa de chat."); //Tell the caller to call the owner.

			PlayerData[targetid][pCellTime] = 0;
			PlayerData[targetid][pCallLine] = playerid;

	  		ph_sub_menuid[targetid]=1;
			RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);

			AddPlayerCallHistory(playerid, PlayerData[targetid][pPnumber], PH_INCOMING);
		}
		PlayerData[playerid][pIncomingCall] = 0; // Delete call waiting status
		PlayerData[playerid][pCellTime] = 0;
		PlayerData[playerid][pCallLine] = targetid;
		ph_sub_menuid[playerid]-=1;
  		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
  		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	}
	else return SendClientMessage(playerid,  COLOR_GRAD2, "ERRO: não possui chamadas no momento.");

	return 1;
}

CMD:desligar(playerid, params[])
	return cmd_h(playerid, params);

CMD:h(playerid, params[])
{
    if(deathmode[playerid] || PlayerData[playerid][pInjured])
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar o celular no momento.");

	if(ph_menuid[playerid] == 7)
	{
		new targetid = PlayerData[playerid][pCallConnect];

		if(targetid != INVALID_PLAYER_ID)
		{

			SendClientMessage(targetid, COLOR_GRAD2, "[!] A outra pessoa desligou a ligação.");

			PlayerData[targetid][pCellTime] = 0;
			PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

			ph_menuid[targetid]=0;
			ph_sub_menuid[targetid]=0;
			RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);
			if(GetPlayerSpecialAction(targetid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

			PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;
			PlayerData[targetid][pCallConnect] = INVALID_PLAYER_ID;
		}

		if(ph_menuid[playerid]==7 && ph_sub_menuid[playerid]== 0)
		{
			if(calltimer[playerid]) KillTimer(calltimer[playerid]), calltimer[playerid] = 0;
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "[!] Você desligou a ligação.");

		PlayerData[playerid][pCellTime] = 0;
		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;

		ph_menuid[playerid]=0;
		ph_sub_menuid[playerid]=0;
		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
		if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE) SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	}
	return 1;
}
//-------------------------------[BuyLevel]--------------------------------------------------------------------------
CMD:levelup(playerid, params[])
{
	if(PlayerData[playerid][pLevel])
	{
		new nxtlevel = PlayerData[playerid][pLevel]+1;
		new costlevel = nxtlevel*levelcost;//10k for testing purposes
		new expamount = nxtlevel*levelexp;
		new str[128];
		/*if(PlayerData[playerid][pCash] < costlevel)
		{
			format(str, 128, "ERRO: Você não tem dinheiro suficiente (R$%d)!",costlevel);
			SendClientMessage(playerid, COLOR_LIGHTRED, str);
			return 1;
		}*/
		if (PlayerData[playerid][pExp] < expamount)
		{
			format(str, 128, "Você tem que atualizar %d pontos para o próximo level %d!",expamount,PlayerData[playerid][pExp]);
			SendClientMessage(playerid, COLOR_GRAD1, str);
			return 1;
		}
		else
		{
			format(str, sizeof(str), "~g~LEVEL UP~n~~w~Você agora está no level %d", nxtlevel);
			PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
			PlayerPlayMusic(playerid);
			PlayerData[playerid][pCash] -= costlevel;
			PlayerData[playerid][pLevel]++;
			SetPlayerScore(playerid, PlayerData[playerid][pLevel]);
			if(PlayerData[playerid][pDonateRank] > 0)
			{
				PlayerData[playerid][pExp] -= expamount;
				new total = PlayerData[playerid][pExp];
				if(total > 0)
				{
					PlayerData[playerid][pExp] = total;
				}
				else
				{
					PlayerData[playerid][pExp] = 0;
				}
			}
			else
			{
				PlayerData[playerid][pExp] = 0;
			}
			PlayerData[playerid][pPUpgrade] = PlayerData[playerid][pPUpgrade]+2;
			GameTextForPlayer(playerid, str, 5000, 1);
			format(str, 128, "Você comprou o level %d for (R$%d) use /upgrade", nxtlevel, costlevel);
			SendClientMessage(playerid, COLOR_GRAD1, str);
			format(str, 128, "Você tem %d pontos (Use /upgrade para fazer upgrade)",PlayerData[playerid][pPUpgrade]);
			SendClientMessage(playerid, COLOR_GRAD2, str);
		}
	}
	return 1;
}

CMD:upgrade(playerid, params[])
{
	new chooseid[16];
	new infostring[128];

	if (sscanf(params, "s[16]", chooseid)) {
	    SendClientMessage(playerid, COLOR_WHITE,"*** UPGRADES ***");
		SendSyntaxMessage(playerid, "/upgrade [função] (Você possui %d pontos)",PlayerData[playerid][pPUpgrade]);
		if(PlayerData[playerid][pLevel] == 2) SendClientMessage(playerid, COLOR_GRAD3, "Level 2 Benefícios: alcoolatra, drogas");
		else if(PlayerData[playerid][pLevel] == 3) SendClientMessage(playerid, COLOR_GRAD3, "Level 3 Benefícios: alcoolatra, drogas, avarento");
		else if(PlayerData[playerid][pLevel] == 3) SendClientMessage(playerid, COLOR_GRAD3, "Level 4 Benefícios: alcoolatra, drogas, avarento, comerciante");
		else if(PlayerData[playerid][pLevel] >= 5) SendClientMessage(playerid, COLOR_GRAD3, "Level 5 Benefícios: alcoolatra, drogas, avarento, comerciante, analgesicos");
		SendClientMessage(playerid, COLOR_GRAD5, "Vida extra: vida");
		SendClientMessage(playerid, COLOR_GREEN,"_______________________________________");
		return 1;
	}
	if (PlayerData[playerid][pPUpgrade] > 1)
	{
		if (PlayerData[playerid][pLevel] >= 1 && (!strcmp(chooseid, "bida", true)))
		{
			if (PlayerData[playerid][pSHealth] < 50)
			{
				PlayerData[playerid][pSHealth] = PlayerData[playerid][pSHealth]+5.0;
				format(infostring, 128, "Nova atualização: Você vai ficar com %.2f de vida (+5)",PlayerData[playerid][pSHealth]+50);
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Você tem mais upgrade de vida.");
				return 1;
			}
		}
		else if (PlayerData[playerid][pLevel] >= 2 && (!strcmp(chooseid, "alcoolatra", true)))
		{
			if (PlayerData[playerid][pAlcoholPerk] < 3)
			{
				PlayerData[playerid][pAlcoholPerk] += 1;
				format(infostring, 128, "Novo upgrade: beneficío alcoolico  %d",PlayerData[playerid][pAlcoholPerk]);
				PlayerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Você já tem Benefícios alcoolicos!");
				return 1;
			}
		}
		else if (PlayerData[playerid][pLevel] >= 2 && (!strcmp(chooseid, "drogas", true)))
		{
			if (PlayerData[playerid][pDrugPerk] < 3)
			{
				PlayerData[playerid][pDrugPerk] += 1;
				format(infostring, 128, "Novo upgrade: beneficío de viciado em drogas %d",PlayerData[playerid][pDrugPerk]);
				PlayerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Você já tem Benefícios em drogas.");
				return 1;
			}
		}
		else if (PlayerData[playerid][pLevel] >= 3 && (!strcmp(chooseid, "avarento", true)))
		{
			if (PlayerData[playerid][pMiserPerk] < 3)
			{
				PlayerData[playerid][pMiserPerk] += 1;
				format(infostring, 128, "Novo upgrade: beneficío de avarento %d",PlayerData[playerid][pMiserPerk]);
				PlayerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Você já tem Benefícios em avarento.");
				return 1;
			}
		}
		else if (PlayerData[playerid][pLevel] >= 4 && (!strcmp(chooseid, "comerciante", true)))
		{
			if (PlayerData[playerid][pTraderPerk] < 3)
			{
				PlayerData[playerid][pTraderPerk] += 1;
				format(infostring, 128, "Novo upgrade: beneficío de comerciante %d",PlayerData[playerid][pTraderPerk]);
				PlayerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Você já tem Benefícios de comerciante.");
				return 1;
			}
		}
		else if (PlayerData[playerid][pLevel] >= 5 && (!strcmp(chooseid, "analgesicos", true)))
		{
			if (PlayerData[playerid][pPainPerk] < 3)
			{
				PlayerData[playerid][pPainPerk] += 1;
				format(infostring, 128, "Novo upgrade: beneficío de analgesicos %d",PlayerData[playerid][pPainPerk]);
				PlayerData[playerid][pPUpgrade]--;
			}
			else
			{
				SendClientMessage(playerid, COLOR_GRAD6, "Você já tem Benefícios de analgesicos.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_GRAD6, "Upgrade desconhecido");
			return 1;
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD6, "Você tem que atualizar 0 pontos");
		return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD6, infostring);
	PlayerData[playerid][pPUpgrade]--;
	return 1;
}

CMD:resetarupgrades(playerid, params[])
{
	if (PlayerData[playerid][pLevel] < 2) return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter pelo menos nível 2!");

	PlayerData[playerid][pPUpgrade] = (PlayerData[playerid][pLevel]-1)*2;
	PlayerData[playerid][pSHealth] = 0.0;
	PlayerData[playerid][pAlcoholPerk] = 0;
	PlayerData[playerid][pDrugPerk] = 0;
	PlayerData[playerid][pMiserPerk] = 0;
	PlayerData[playerid][pPainPerk] = 0;
	PlayerData[playerid][pTraderPerk] = 0;
	PlayerData[playerid][pCash] -= 100000;
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessageEx(playerid, COLOR_GRAD2, "Você tem %d pontos!",PlayerData[playerid][pPUpgrade]);

	return 1;
}

CMD:aparencia(playerid, params[])
{
	new
		attr[128], clean_attr[128];

	if (sscanf(params, "s[128]", attr)) {
	    SendSyntaxMessage(playerid, "/aparencia [Propriedades do personagem (Altura, peso, cor do cabelo ou aparência fora do seu personagem.)]");
	    if(strlen(PlayerData[playerid][pAttribute])) {
	    	SendClientMessageEx(playerid, COLOR_GRAD1, "aparência: %s", PlayerData[playerid][pAttribute]);
	    }
	    else
	    {
	        SendClientMessage(playerid, COLOR_GRAD1, "Sua aparência não foi definida.");
	    }
		return 1;
	}
	mysql_escape_string(attr,clean_attr);
    format(PlayerData[playerid][pAttribute], 128, attr);
    SendClientMessageEx(playerid, COLOR_GRAD1, "aparência: %s", attr);

	format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Attribute` = '%s' WHERE `ID` = %d", clean_attr, PlayerData[playerid][pID]);
	mysql_query(dbCon, szQuery);

	return 1;
}

CMD:examinar(playerid, params[])
{
	new
		userid;

	if (sscanf(params, "u", userid)) return SendSyntaxMessage(playerid, "/examinar [ID]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar isso em si mesmo.");

 	format(szString, sizeof(szString), "%s%s%s", ReturnName(userid, 0), strlen(PlayerData[userid][pAttribute]) ? (" | ") : (""), PlayerData[userid][pAttribute]);
	SetPlayerChatBubble(userid, szString, COLOR_PURPLE, 30.0, 6000);
	return 1;
}

CMD:pagar(playerid, params[])
{
	new
	    userid,
	    amount,
		emote[24],
		string[128];

	if (sscanf(params, "udS()[24]", userid, amount, emote))
	    return SendSyntaxMessage(playerid, "/pagar [playerid/name] [valor] [emote]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{dS()[24]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador está desconectado.");
		}
	}
	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode pagar pra si mesmo.");

	if (amount < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O valor é muito baixo.");

	if (amount > 5 && PlayerData[playerid][pPlayingHours] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não tem 2 horas de jogo.");

	if (amount > PlayerData[playerid][pCash])
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui dinheiro.");

	PlayerData[playerid][pCash]-=amount;
	PlayerData[userid][pCash]+=amount;

	format(string, sizeof(string), "Você enviou para %s a quantia de R$%d.", ReturnName(userid, 0), amount);
	PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	SendClientMessage(playerid, COLOR_GRAD1, string);

	format(string, sizeof(string), "Você recebeu %d de %s.", amount, ReturnName(playerid, 0));
	SendClientMessage(userid, COLOR_GRAD1, string);

	if(!strlen(emote)) {
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s pega o dinheiro e entrega para %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s %s %s", ReturnName(playerid, 0), emote, ReturnName(userid, 0));
	}

	Log_Write("logs/pagar_log.txt", "[%s] %s (%s) has paid %s to %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), PlayerData[userid][pIP]);

	format(string, sizeof(string), "Valor %d nome %s", amount, ReturnName(userid));
	SQL_LogPay(playerid, "/pagar", string);

	return 1;
}

/*CMD:cover(playerid, params[])
{
	new a, b, c;
    if (!sscanf(params, "hhh", a,b,c)) {

		PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], a);
		PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], b);
	   	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], b);
	   	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], c);

	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][0]);
	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][1]);
	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][2]);
	   	PlayerTextDrawShow(playerid, TDPhone_Model[playerid][12]);
   	}
	return 1;
}*/

Dialog:BuyGun(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[128], type[24];
		GetPVarString(playerid, "buygun_name", type, sizeof(type));
		format(str, 128, "%s %d %d confirm", type, GetPVarInt(playerid, "buygun_ammo"), GetPVarInt(playerid, "buygun_add"));
		cmd_comprararmamento(playerid, str);
	}
	DeletePVar(playerid, "buygun_name");
	DeletePVar(playerid, "buygun_ammo");
	DeletePVar(playerid, "buygun_add");
	return 1;
}

Dialog:BuyWeapon(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[128], type[24];
		GetPVarString(playerid, "buygun_name", type, sizeof(type));
		format(str, 128, "%s %d confirm", type, GetPVarInt(playerid, "buygun_ammo"));
		cmd_comprararma(playerid, str);
	}
	DeletePVar(playerid, "buygun_name");
	DeletePVar(playerid, "buygun_ammo");
	return 1;
}


CMD:comprararma(playerid, params[])
{
    if(PlayerData[playerid][pJob] != JOB_SUPPLIER) return SendClientMessage(playerid, COLOR_GRAD2, "Você não possui o emprego adequeado.");
	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) == FACTION_GANG) {

		new id;
		if((id = Warehouse_Nearest(playerid)) != -1 && WareHouseInfo[id][whType] == 1)
	    {
            if((strlen(WareHouseInfo[id][whPlayer1]) && !strcmp(ReturnName(playerid), WareHouseInfo[id][whPlayer1], true)) || (strlen(WareHouseInfo[id][whPlayer2]) && !strcmp(ReturnName(playerid), WareHouseInfo[id][whPlayer2], true))) {

				if(WareHouseInfo[id][whStock] == 0)
				{
					GameTextForPlayer(playerid, "~r~Sem estoque", 5000, 1);
					return 1;
				}
				new type[24], ammo, price, confirm[16];
				if(sscanf(params,"s[24]D(0)S()[16]", type, ammo, confirm)) {
					SendClientMessage(playerid, COLOR_LIGHTRED, "USE: {FFFFFF}/comprararma [arma] [municao]");
					SendClientMessage(playerid, -1, "[ knife: R$800; ammo: R$800 ] [ katana: R$1500; ammo: R$1500 ]");
					SendClientMessage(playerid, -1, "[ colt: R$12500; ammo: R$25 ] [ deagle: R$17500; ammo: R$38 ] [ s-pistol: R$22500; ammo: R$25 ] [ shotgun: R$17500; ammo: R$38 ]");
					SendClientMessage(playerid, -1, "[ tec9: R$25000; ammo: R$20 ] [ uzi: R$27500; ammo: R$20 ]  [ mp5: R$30000; ammo: R$20 ]");
					SendClientMessage(playerid, -1, "[ ak47: R$45000; ammo: R$43 ] [ m4: R$50000; ammo: R$46 ] [ armour: R$2000; ammo: R$2000 ]");
					return 1;
				}

				if(!strcmp(type, "colt", true) && ammo)
				{
				    new gunid = 22;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 12500 + (ammo * 25);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não tem dinheiro suficiente.", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui espaço para armas.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "Tem certeza que quer comprar %s com %d munições por %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou mais %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "deagle", true) && ammo)
				{
				    new gunid = 24;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui espaço para arma.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "Tem certeza que quer comprar %s com %d munições por %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou mais %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "shotgun", true) && ammo)
				{
				    new gunid = 25;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui espaços para armas.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "Tem certeza que quer comprar %s com %d munições por %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou mais %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "s-pistol", true) && ammo)
				{
				    new gunid = 23;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 22500 + (ammo * 25);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem espaços para armas.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "Tem certeza que quer comprar %s com %d munições por %s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou mais %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "tec9", true) && ammo)
				{
				    new gunid = 32;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 25000 + (ammo * 20);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui espaço o suficiente para guardar armas.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "[Pacote] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou superior a %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "uzi", true) && ammo)
				{
				    new gunid = 28;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 27500 + (ammo * 20);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui espaço suficiente.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "[Pacote] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou superior a %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "mp5", true) && ammo)
				{
				    new gunid = 29;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 30000 + (ammo * 20);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui espaço suficiente.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "[Pacote] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou superior a %d", max_ammo);

					return 1;
				}
				else if(!strcmp(type, "ak47", true) && ammo)
				{
				    new gunid = 30;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 45000 + (ammo * 43);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui espaço suficiente.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "[Pacote] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou superior a %d", max_ammo);

					return 1;
				}

				else if(!strcmp(type, "m4", true) && ammo)
				{
				    new gunid = 31;

					new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

					if(ammo <= max_ammo) {
						price = 50000 + (ammo * 46);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

							if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
							}

							new bool:can_take;

							for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
							{
								if(PlayerData[playerid][pPackageWP][x] == 0) {

									can_take=true;

									PlayerData[playerid][pPackageWP][x] = gunid;
									PlayerData[playerid][pPackageAmmo][x] = ammo;

						            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), ammo, price);
									Log_Write("logs/package.txt", "[%s] %s: buy %s(%d) from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, id, WareHouseInfo[id][whID]);

						            Player_SavePackage(playerid);

						            PlayerData[playerid][pCash] -= price;

						            WareHouseInfo[id][whStock]--;
						            Warehouse_Refresh(id);

									break;
								}
							}
							if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui espaço suficiente.");

						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);

							format(szString, sizeof(szString), "[Pacote] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "A munição não pode ser inferior a 1 ou superior a %d", max_ammo);
					return 1;
				}
				else if(!strcmp(type, "katana", true))
				{
	                new gunid = 8;
					price = 1500, ammo = 1;
					if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

						if(PlayerData[playerid][pCash] < price) {
							GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
							return 1;
						}


						new bool:can_take;

						for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
						{
							if(PlayerData[playerid][pPackageWP][x] == 0) {

								can_take=true;

								PlayerData[playerid][pPackageWP][x] = gunid;
								PlayerData[playerid][pPackageAmmo][x] = ammo;

					            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s por R$%d", GetWeaponPackageName(gunid), price);

								Log_Write("logs/package.txt", "[%s] %s: buy %s from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), id, WareHouseInfo[id][whID]);

					            Player_SavePackage(playerid);

					            PlayerData[playerid][pCash] -= price;

					            WareHouseInfo[id][whStock]--;
                                Warehouse_Refresh(id);
								break;
							}
						}
						if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui espaço suficiente.");
					}
					else {
						SetPVarString(playerid,"buygun_name", type);
						SetPVarInt(playerid, "buygun_ammo", ammo);

						format(szString, sizeof(szString), "Você comprou a arma %s por %s", GetWeaponPackageName(gunid), FormatNumber(price));
						Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
					}
					return 1;
				}
				else if(!strcmp(type, "knife", true))
				{
	                new gunid = 4;
					price = 800, ammo = 1;
					if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

						if(PlayerData[playerid][pCash] < price) {
							GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
							return 1;
						}


						new bool:can_take;

						for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
						{
							if(PlayerData[playerid][pPackageWP][x] == 0) {

								can_take=true;

								PlayerData[playerid][pPackageWP][x] = gunid;
								PlayerData[playerid][pPackageAmmo][x] = ammo;

					            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou a arma %s por R$%d", GetWeaponPackageName(gunid), price);

								Log_Write("logs/package.txt", "[%s] %s: buy %s from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), id, WareHouseInfo[id][whID]);

					            Player_SavePackage(playerid);

					            PlayerData[playerid][pCash] -= price;

					            WareHouseInfo[id][whStock]--;
                                Warehouse_Refresh(id);
								break;
							}
						}
						if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui espaço suficiente.");
					}
					else {
						SetPVarString(playerid,"buygun_name", type);
						SetPVarInt(playerid, "buygun_ammo", ammo);

						format(szString, sizeof(szString), "Você comprou a arma %s por %s", GetWeaponPackageName(gunid), FormatNumber(price));
						Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
					}
					return 1;
				}
				else if(!strcmp(type, "armour", true))
				{
	                new gunid = 47;
					price = 2000, ammo = 1;
					if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

						if(PlayerData[playerid][pCash] < price) {
							GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
							return 1;
						}


						new bool:can_take;

						for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
						{
							if(PlayerData[playerid][pPackageWP][x] == 0) {

								can_take=true;

								PlayerData[playerid][pPackageWP][x] = gunid;
								PlayerData[playerid][pPackageAmmo][x] = ammo;

					            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você comprou %s por R$%d", GetWeaponPackageName(gunid), price);

								Log_Write("logs/package.txt", "[%s] %s: buy %s from warehouse %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), id, WareHouseInfo[id][whID]);

					            Player_SavePackage(playerid);

					            PlayerData[playerid][pCash] -= price;

					            WareHouseInfo[id][whStock]--;

					            Warehouse_Refresh(id);

								break;
							}
						}
						if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui espaço o suficiente.");
					}
					else {
						SetPVarString(playerid,"buygun_name", type);
						SetPVarInt(playerid, "buygun_ammo", ammo);

						format(szString, sizeof(szString), "Você comprou %s por %s", GetWeaponPackageName(gunid), FormatNumber(price));
						Dialog_Show(playerid, BuyWeapon, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
					}
					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /comprararma [weapon] [ammo]");
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização para usar este comando.");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está na WH.");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é de facção ilegal.");

	return 1;
}

CMD:comprararmamento(playerid, params[])
{

	new id;

	if((id = Bizz_Inside(playerid)) != -1)
    {
 	    if(BizEntered[playerid] == id && BizInfo[id][bType] == 2) // Ammunations
	    {
	        if(!PlayerData[playerid][pWepLic]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui porte/posse de armas.");

			if(BizInfo[id][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
				return 1;
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de Estoque", 5000, 1);
				return 1;
			}

			new type[24], ammo, add, price, confirm[16];
			if(sscanf(params,"s[24]D(0)D(0)S()[16]", type, ammo, add, confirm)) {
				SendClientMessage(playerid, COLOR_LIGHTRED, "USE: {FFFFFF}/comprararmamento [arma] [munição]");
				SendClientMessage(playerid, -1, "[ colt: R$12500; ammo: R$25 ] [ deagle: R$17500; ammo: R$38 ] [ shotgun: R$17500; ammo: R$38 ]");
				SendClientMessage(playerid, -1, "[ rifle: R$25000; ammo: R$100 ] [ parachute: R$1250; ammo: R$1250 ] [ armour: R$2000; ammo: R$2000 ]");
				SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] {FFFFFF}Você pode comprar um coldre na loja de ferragens The Mall.");
				return 1;
			}

			if(!strcmp(type, "colt", true) && ammo)
			{
			    new gunid = 22;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 12500 + (ammo * 25);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
				            }
				            PlayerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

						    BizInfo[id][bTill] += floatround(price*0.7);
						    BizInfo[id][bProducts]--;

						    Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);
						    Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "((Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.))");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "[Loja] Você comprou a arma %s com %d munições por R$%s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && PlayerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 25;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(PlayerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
									return 1;
					            }
					            PlayerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, PlayerData[playerid][pSLicense]);

							    BizInfo[id][bTill] += floatround(price*0.7);
							    BizInfo[id][bProducts]--;
							    Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Tem certeza que deseja comprar %d munições %s para %d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "Tem certeza que deseja comprar %d munições %s para %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem uma arma para comprar mais munição.");
				}
				return 1;
			}
			else if(!strcmp(type, "deagle", true) && ammo)
			{
			    new gunid = 24;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
				            }
				            PlayerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

						    BizInfo[id][bTill] += floatround(price*0.7);
						    BizInfo[id][bProducts]--;
						    Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);

						    Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "[Loja] Você comprou a arma %s com %d munições por R$%s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && PlayerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 38;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(PlayerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
									return 1;
					            }
					            PlayerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, PlayerData[playerid][pSLicense]);

								BizInfo[id][bTill] += floatround(price*0.7);
                                BizInfo[id][bProducts]--;
                                Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Tem certeza que deseja comprar %d munições %s para %d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "Are you sure you want to buy Bullet %d appointment for %s for %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have a weapon to buy more ammo.");
				}
				return 1;
			}
			else if(!strcmp(type, "shotgun", true) && ammo)
			{
			    new gunid = 25;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 17500 + (ammo * 38);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
				            }
				            PlayerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

                            BizInfo[id][bTill] += floatround(price*0.7);
                            BizInfo[id][bProducts]--;

                            Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);


							Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "[Loja] Você comprou a arma %s com %d munições por R$%s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && PlayerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 38;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(PlayerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
									return 1;
					            }
					            PlayerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, PlayerData[playerid][pSLicense]);

                                BizInfo[id][bTill] += floatround(price*0.7);
                                BizInfo[id][bProducts]--;
                              	Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Tem certeza que deseja comprar %d munições %s para %d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "Are you sure you want to buy Bullet %d appointment for %s for %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "You don't have a weapon to buy more ammo.");
				}
				return 1;
			}
			else if(!strcmp(type, "rifle", true) && ammo)
			{
			    new gunid = 33;
				new max_ammo = GetWeaponPackage(g_aWeaponSlots[gunid]);

				if(!add) {
					if(ammo <= max_ammo) {
                        price = 25000 + (ammo * 100);

						if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

				            if(PlayerData[playerid][pCash] < price) {
								GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
								return 1;
				            }
				            PlayerData[playerid][pCash] -= price;
						    new pfid = GivePlayerValidWeapon(playerid, gunid, ammo, randomEx(100000,999999));

                            BizInfo[id][bTill] += floatround(price*0.7);
                            BizInfo[id][bProducts]--;

                            Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy %s(%d) from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ReturnWeaponName(gunid), ammo, id, BizInfo[id][bID]);


							Log_Write("logs/license_weapon.txt", "[%s] %s (%s) buy %s(%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(gunid), ammo, pfid);

						    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Você comprou a arma %s com %d munições por R$%d", ReturnWeaponName(gunid), ammo, price);
						    SendClientMessage(playerid, COLOR_LIGHTRED, "Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.");
						}
						else {
							SetPVarString(playerid,"buygun_name", type);
							SetPVarInt(playerid, "buygun_ammo", ammo);
							SetPVarInt(playerid, "buygun_add", add);

							format(szString, sizeof(szString), "[Loja] Você comprou a arma %s com %d munições por R$%s", ReturnWeaponName(gunid), ammo, FormatNumber(price));
							Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
						}
					}
					else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
				}
				else {
				    new current_wp, current_ammo;

				    GetPlayerWeaponData(playerid, g_aWeaponSlots[gunid], current_wp, current_ammo);

					if(current_wp == gunid && PlayerData[playerid][pSLicense]) {
						if(current_ammo + ammo <= max_ammo) {

							price = ammo * 100;

							if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					            if(PlayerData[playerid][pCash] < price) {
									GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
									return 1;
					            }
					            PlayerData[playerid][pCash] -= price;
							    GivePlayerValidWeapon(playerid, gunid, current_ammo + ammo, PlayerData[playerid][pSLicense]);

                                BizInfo[id][bTill] += floatround(price*0.7);
                                BizInfo[id][bProducts]--;
                              	Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy ammo %d for %s from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, ammo, ReturnWeaponName(gunid), id, BizInfo[id][bID]);

							    SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Tem certeza que deseja comprar %d munições %s para %d", ammo, ReturnWeaponName(gunid), price);
							    SendClientMessage(playerid, COLOR_LIGHTRED, "Aviso: Vender/DAR/ A arma, A reserva será plana. Leia o contrato de Licença.");

							}
							else {
								SetPVarString(playerid,"buygun_name", type);
								SetPVarInt(playerid, "buygun_ammo", ammo);
								SetPVarInt(playerid, "buygun_add", add);

								format(szString, sizeof(szString), "[Loja] Tem certeza que deseja comprar %d munições %s para %s", ammo, ReturnWeaponName(gunid), FormatNumber(price));
								Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
							}
						} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO: A munição não pode ser menos 1 ou maior que %d", max_ammo);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem uma arma para comprar mais munição.");
				}
				return 1;
			}
			else if(!strcmp(type, "parachute", true))
			{
                new gunid = 46;
				price = 1250, ammo = 1;

				if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					if(PlayerData[playerid][pCash] < price) {
						GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
						return 1;
					}
					PlayerData[playerid][pCash] -= price;
					GivePlayerValidWeapon(playerid, gunid, ammo);

					BizInfo[id][bTill] += floatround(price*0.7);
					BizInfo[id][bProducts]--;

					Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy %s from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, GetWeaponPackageName(gunid), id, BizInfo[id][bID]);

					SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Você comprou a arma %s com %d munições", GetWeaponPackageName(gunid), price);
				}
				else {
					SetPVarString(playerid,"buygun_name", type);
					SetPVarInt(playerid, "buygun_ammo", ammo);
					SetPVarInt(playerid, "buygun_add", add);

					format(szString, sizeof(szString), "[Loja] Você comprou a arma %s com %d munições por R$%s", GetWeaponPackageName(gunid), FormatNumber(price));
					Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
				}
				return 1;
			}
			else if(!strcmp(type, "armour", true))
			{
                new gunid = 47;
				price = 2000, ammo = 1;
				if(!strcmp(confirm, "confirm", true) && strlen(confirm)) {

					if(PlayerData[playerid][pCash] < price) {
						GameTextForPlayer(playerid, "~r~Você não possui dinheiro suficiente", 5000, 1);
						return 1;
					}
					PlayerData[playerid][pCash] -= price;
					SetPlayerArmour(playerid, 50.0);
					//GivePlayerValidWeapon(playerid, gunid, ammo);

					BizInfo[id][bTill] += floatround(price*0.7);
					BizInfo[id][bProducts]--;

					Log_Write("logs/biz.txt", "[%s] %s: payed R$%d to buy %s from biz %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, GetWeaponPackageName(gunid), id, BizInfo[id][bID]);

					SendClientMessageEx(playerid, COLOR_GREEN, "[Loja] Você comprou a arma %s com %d munições por R$%d", GetWeaponPackageName(gunid), price);
				}
				else {
					SetPVarString(playerid,"buygun_name", type);
					SetPVarInt(playerid, "buygun_ammo", ammo);
					SetPVarInt(playerid, "buygun_add", add);

					format(szString, sizeof(szString), "[Loja] Você comprou a arma %s com %d munições por R$%s", GetWeaponPackageName(gunid), FormatNumber(price));
					Dialog_Show(playerid, BuyGun, DIALOG_STYLE_MSGBOX, "Confirmação", szString, "Sim", "não");
				}
				return 1;
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /comprararmamento [arma] [ammo] [add(0/1)]");
			}
	        return 1;
		}
		else {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está na loja de armas.");
		}
	}
	return 1;
}

CMD:comprar(playerid, params[])
{

	new id = Bizz_Inside(playerid);

	new
	    itemid;

    if(IsPlayerInRangeOfPoint(playerid, 5.0, 1112.4480,-1527.4012,15.7981)) cl_buying[playerid]=BUYSPORTS;
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1096.2791,-1439.8060,15.7981)) cl_buying[playerid]=BUYZIP;
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 2332.8999,-650.1297,80162.4531)) cl_buying[playerid]=BUYGOV; //PMESP
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1373.8729,-29.9260,1000.9219)) cl_buying[playerid]=BUYGOV; //PCESP
	else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1094.7468,-1434.9844,15.7981)) cl_buying[playerid]=BUYNOVOS;
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1095.7863,-1447.4539,15.8016))
    {
		Dialog_Show(playerid, DIALOGLJROUPAS, DIALOG_STYLE_LIST, "Loja de Roupas", "Roupas Masc\nRoupas Fem\nSkin modificadas", "Selecionar", "Cancelar");
		return 1;
	}
    else if(IsPlayerInRangeOfPoint(playerid, 5.0, 1086.8405,-1449.5437,22.7434))
    {
        SendClientMessage(playerid, COLOR_WHITE, "Sugestão: Use {F2EB35} espaço {FFFFFF} para olhar ao redor. Pressione {F2EB35} ESC {FFFFFF} para recusar.");
        PCoverColor[playerid]=0;

	    for(new i=0;i!=sizeof(TD_PhoneCover);i++)
			TextDrawShowForPlayer(playerid, TD_PhoneCover[i]);

	    PlayerTextDrawSetPreviewModel(playerid, TD_PhoneCoverModel[playerid], 18868);
	    PlayerTextDrawShow(playerid, TD_PhoneCoverModel[playerid]);

	    SelectTextDraw(playerid, 0x00000080);
	    PCoverOpening{ playerid } = true;
        return 1;
    }
    else if(id != -1)
    {
 	    if(BizEntered[playerid] == id && BizInfo[id][bType] == 3) // 24-7
	    {
			if(BizInfo[id][bLocked] == 1)
			{
				GameTextForPlayer(playerid, "~r~Fechado", 5000, 1);
				return 1;
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de Estoque", 5000, 1);
				return 1;
			}

	        Business_PurchaseMenu(playerid, id);
	        return 1;
		}
    }
    else return SendClientMessage(playerid, COLOR_GRAD1, "Você não está em uma loja...");

	if (sscanf(params, "d", itemid))
 	{
		new str[3600];
		switch(cl_buying[playerid])
		{
		    case BUYSPORTS:
		    {
				// 459
				for(new i=0;i!=sizeof(cl_SportsData);++i) format(str, 460, "%s %d.%s\t{48E348}R$%d{FFFFFF}\n", str, i, cl_SportsData[i][e_name], cl_SportsData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/comprar Item ID", str, "Ok", "Cancelar");
		    }
		    case BUYZIP:
		    {
				// 3597

				for(new i=0;i!=sizeof(cl_ZipData);++i)
				{
				    if(i == 91)
				    {
				        format(str, 3598, "%s Próxima pagina!", str);
						break;
				    }
				    format(str, 3598, "%s %d.%s\t{48E348}R$%d{FFFFFF}\n", str, i, cl_ZipData[i][e_name], cl_ZipData[i][e_price]);
				}
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/comprar ItemID", str, "Confirmar", "Cancelar");
		    }
		    case BUYGOV:
		    {
				// 459
				for(new i=0;i!=sizeof(cl_GovData);++i) format(str, 460, "%s %d.%s\t{48E348}R$%d{FFFFFF}\n", str, i, cl_GovData[i][e_name], cl_GovData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/comprar Item ID", str, "Ok", "Cancelar");
		    }
		    case BUYNOVOS:
		    {
				// 459
				for(new i=0;i!=sizeof(cl_NovosData);++i) format(str, 460, "%s %d.%s\t{48E348}R$%d{FFFFFF}\n", str, i, cl_NovosData[i][e_name], cl_NovosData[i][e_price]);
		        Dialog_Show(playerid, buyClothing, DIALOG_STYLE_TABLIST, "/comprar Item ID", str, "Ok", "Cancelar");
		    }
		}
		return 1;
	}

	if((cl_buyingpslot[playerid] = ClothingExistSlot(playerid)) != -1)
		if(!PurchaseClothing(playerid, itemid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este item não pode ser comprado.");

	return 1;
}

CMD:itens(playerid,params[])
{
	new
	    name[16],
	    userid,
	    clothingid;

	if (sscanf(params, "s[16]D(-1)U(65535)", name, clothingid, userid))
 	{
		cl_ShowClothingMenu(playerid);

		return 1;
	}
	if(!HasCooldown(playerid,COOLDOWN_CLOTHES))
	{
        clothingid = clothingid-1;

		if (!strcmp(name, "ajuda", true))
		{
			SendSyntaxMessage(playerid, "/itens [funções] [ID]");
	 		SendClientMessage(playerid, COLOR_GREY, "funções: (c)olocar, (d)eletar, (a)justar, (e)ntregar");
		}
		else if (!strcmp(name, "colocar", true) || !strcmp(name, "c", true))
		{
		    if (clothingid < 0)
			{
			    SendSyntaxMessage(playerid, "/itens colocar [ID]");

				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object]) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }

			    return 1;
			}

			if(ClothingData[playerid][clothingid][cl_object]) {
			if(ClothingData[playerid][clothingid][cl_equip]) {

				RemovePlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);
				ClothingData[playerid][clothingid][cl_equip] = 0;
			}
			else
			{
	   			SetPlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot], ClothingData[playerid][clothingid][cl_object], ClothingData[playerid][clothingid][cl_bone], ClothingData[playerid][clothingid][cl_x], ClothingData[playerid][clothingid][cl_y],
				ClothingData[playerid][clothingid][cl_z], ClothingData[playerid][clothingid][cl_rx], ClothingData[playerid][clothingid][cl_ry], ClothingData[playerid][clothingid][cl_rz], ClothingData[playerid][clothingid][cl_scalex], ClothingData[playerid][clothingid][cl_scaley], ClothingData[playerid][clothingid][cl_scalez]);
				SendClientMessageEx(playerid, COLOR_WHITE, "Você posicionou em %s", ClothingData[playerid][clothingid][cl_name]);

				for (new i = 0; i < MAX_CLOTHES; i ++)
				{
					if(ClothingData[playerid][i][cl_object] && ClothingData[playerid][i][cl_equip] && ClothingData[playerid][i][cl_slot] == ClothingData[playerid][clothingid][cl_slot])
					{
						ClothingData[playerid][i][cl_equip] = 0;
					}
				}
				ClothingData[playerid][clothingid][cl_equip] = 1;
			}
			}
            else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não há nada...");
		}
		else if (!strcmp(name, "deletar", true) || !strcmp(name, "d", true))
		{
      		if (clothingid < 0)
			{
			    SendSyntaxMessage(playerid, "/itens deletar [ID]");

				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object]) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }

			    return 1;
			}

			if(ClothingData[playerid][clothingid][cl_object]) {

				if(IsPlayerAttachedObjectSlotUsed(playerid, ClothingData[playerid][clothingid][cl_slot])) RemovePlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);
                ClothingData[playerid][clothingid][cl_object] = 0;

				new
		    		query[128];

				format(query,sizeof(query),"DELETE FROM `clothing` WHERE owner = '%d' and id = '%d'",PlayerData[playerid][pID], ClothingData[playerid][clothingid][cl_sid]);
				mysql_query(dbCon, query);

				SendClientMessageEx(playerid, COLOR_GRAD1, "Você deletou %s #%d", ClothingData[playerid][clothingid][cl_name], clothingid + 1);

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não há nada...");

		}
		else if (!strcmp(name, "ajustar", true) || !strcmp(name, "a", true))
		{
      		if (clothingid < 0)
			{
			    SendSyntaxMessage(playerid, "/itens ajustar [ID]");

				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object]) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }

			    return 1;
			}

            if(ClothingData[playerid][clothingid][cl_object]) {
                cl_selected[playerid] = clothingid;
			    SetPlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot], ClothingData[playerid][clothingid][cl_object], ClothingData[playerid][clothingid][cl_bone], ClothingData[playerid][clothingid][cl_x], ClothingData[playerid][clothingid][cl_y],
				ClothingData[playerid][clothingid][cl_z], ClothingData[playerid][clothingid][cl_rx], ClothingData[playerid][clothingid][cl_ry], ClothingData[playerid][clothingid][cl_rz], ClothingData[playerid][clothingid][cl_scalex], ClothingData[playerid][clothingid][cl_scaley], ClothingData[playerid][clothingid][cl_scalez]);

				ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 4.1, 0, 0, 0, 1, 0, 1);
				EditAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);
				BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_EDITCLOTHING);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não há nada..");
		}
		else if (!strcmp(name, "entregar", true) || !strcmp(name, "e", true))
		{
      		if (clothingid < 0)
			{
			    SendSyntaxMessage(playerid, "/itens entregar [ID] [PlayerID/PartOfName]");

				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object]) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }

			    return 1;
			}


			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "{s[16]D(-1)}s[24]", name);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendSyntaxMessage(playerid, "/ITENS give [ID] [PlayerID/PartOfName]");
				}
			}

			if (!IsPlayerNearPlayer(playerid, userid, 5.0))
                return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");

			if(ClothingData[playerid][clothingid][cl_object]) {
				if(AddPlayerClothing(
				userid,
				ClothingData[playerid][clothingid][cl_object],
				ClothingData[playerid][clothingid][cl_x],
				ClothingData[playerid][clothingid][cl_y],
				ClothingData[playerid][clothingid][cl_z],
				ClothingData[playerid][clothingid][cl_rx],
				ClothingData[playerid][clothingid][cl_ry],
				ClothingData[playerid][clothingid][cl_rz],
				ClothingData[playerid][clothingid][cl_bone],
				ClothingData[playerid][clothingid][cl_slot],
				ClothingData[playerid][clothingid][cl_scalex],
				ClothingData[playerid][clothingid][cl_scaley],
				ClothingData[playerid][clothingid][cl_scalez],
				ClothingData[playerid][clothingid][cl_name],
				ClothingData[playerid][clothingid][cl_sid]) != -1)
				{
				    new query[128];
					format(query,sizeof(query),"UPDATE clothing SET owner = %d, equip = 0 WHERE owner = '%d' and id = '%d'",PlayerData[userid][pID], PlayerData[playerid][pID], ClothingData[playerid][clothingid][cl_sid]);
					mysql_query(dbCon, query);

					if(IsPlayerAttachedObjectSlotUsed(playerid, ClothingData[playerid][clothingid][cl_slot])) RemovePlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);

					SendClientMessageEx(userid, COLOR_GRAD1, "Você deu o item %s#%d para %s", ClothingData[playerid][clothingid][cl_name], clothingid + 1, ReturnName(playerid, 0));
					SendClientMessageEx(playerid, COLOR_GRAD1, "Você deu o intem %s#%d para %s", ClothingData[playerid][clothingid][cl_name], clothingid + 1, ReturnName(userid, 0));

                    ClothingData[playerid][clothingid][cl_object] = 0;
					SetCooldown(playerid,COOLDOWN_CLOTHES,5);
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode dar o item.");


                SetCooldown(playerid,COOLDOWN_CLOTHES,5);
            }
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não há nada..");

		}
		/*else if (!strcmp(name, "give", true) || !strcmp(name, "g", true))
		{

      		if (clothingid < 0)
			{
			    SendSyntaxMessage(playerid, "/clothing adjust [ID]");

				for (new id = 0; id < MAX_CLOTHES; id ++)
				{
				    if(ClothingData[playerid][id][cl_object]) {
				        SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", id+1, ClothingData[playerid][id][cl_name]);
	            	}
	            }

			    return 1;
			}


		    if (userid == INVALID_PLAYER_ID && GetPlayerMaskID(userid) == INVALID_PLAYER_ID)
		        return SendSyntaxMessage(playerid, "/clothing give [ID] [PlayerID/PartOfName]");

			if (!IsPlayerNearPlayer(playerid, userid, 5.0))
                return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: You are not near player.");

            if(ClothingData[playerid][clothingid][cl_object]) {




				if(IsPlayerAttachedObjectSlotUsed(playerid, ClothingData[playerid][clothingid][cl_slot])) RemovePlayerAttachedObject(playerid, ClothingData[playerid][clothingid][cl_slot]);
                ClothingData[playerid][clothingid][cl_object] = 0;

				new
		    		query[128];

				format(query,sizeof(query),"DELETE FROM `clothing` WHERE owner = '%d' and id = '%d'",PlayerData[playerid][pID], ClothingData[playerid][clothingid][cl_sid]);
				mysql_query(dbCon, query);

				SendClientMessageEx(userid, COLOR_GRAD1, "You get %s#%d from %s", ClothingData[playerid][clothingid][cl_name], clothingid + 1, ReturnName(playerid, 0));
				SendClientMessageEx(playerid, COLOR_GRAD1, "You gave %s#%d with %s", ClothingData[playerid][clothingid][cl_name], clothingid + 1, ReturnName(userid, 0));

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
            }
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Nothing at all..");


			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", PlayerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);

		 	if(cache_num_rows())
		 	{
				if(IsPlayerAttachedObjectSlotUsed(playerid, clothingid))
				{
					RemovePlayerAttachedObject(playerid, clothingid);
				}
				cache_get_value_name(0, "name", name);

				format(query,sizeof(query),"UPDATE clothing SET owner = %d, equip = 0 WHERE owner = '%d' and slot = '%d'",PlayerData[userid][pID], PlayerData[playerid][pID], clothingid);
				mysql_query(dbCon, query);

				SendClientMessageEx(userid, COLOR_GRAD1, "You get %s#%d from %s", name, clothingid + 1, ReturnName(playerid, 0));
				SendClientMessageEx(playerid, COLOR_GRAD1, "You gave %s#%d with %s", name, clothingid + 1, ReturnName(userid, 0));

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Nothing at all..");
		}*/
	}
	else SendClientMessageEx(playerid, COLOR_LIGHTRED, "Por favor espere %d segundos para utilizar o comando /clothing again",GetCooldownLevel(playerid,COOLDOWN_CLOTHES));

	return 1;
}

stock CountPlayerClothing(playerid)
{
	new count;
	for (new id = 0; id < MAX_CLOTHES; id ++) if(ClothingData[playerid][id][cl_object]) count++;
	return count;
}

stock AddPlayerClothing(playerid,modelid,Float:fOffsetX,Float:fOffsetY,Float:fOffsetZ,Float:fRotX,Float:fRotY,Float:fRotZ,boneid,index,Float:fScaleX,Float:fScaleY,Float:fScaleZ,Name[], sid = -1)
{
	new num = CountPlayerClothing(playerid), bool:success, clothingid;
	switch(PlayerData[playerid][pDonateRank])
	{
		case 0: if(num >= 6) return -1;
		case 1: if(num >= 8) return -1;
		case 2: if(num >= 10) return -1;
		case 3: if(num >= 15) return -1;
	}

	for (new id = 0; id < MAX_CLOTHES; id ++)
	{
	    if(!ClothingData[playerid][id][cl_object])
	    {
			ClothingData[playerid][id][cl_sid] = sid;
			ClothingData[playerid][id][cl_object] = modelid;
			ClothingData[playerid][id][cl_x] = fOffsetX;
			ClothingData[playerid][id][cl_y] = fOffsetY;
			ClothingData[playerid][id][cl_z] = fOffsetZ;
			ClothingData[playerid][id][cl_rx] = fRotX;
			ClothingData[playerid][id][cl_ry] = fRotY;
			ClothingData[playerid][id][cl_rz] = fRotZ;
			ClothingData[playerid][id][cl_scalex] = fScaleX;
			ClothingData[playerid][id][cl_scaley] = fScaleY;
			ClothingData[playerid][id][cl_scalez] = fScaleZ;
	    	ClothingData[playerid][id][cl_bone] = boneid;
			ClothingData[playerid][id][cl_slot] = index;
			ClothingData[playerid][id][cl_equip] = 0;
			format(ClothingData[playerid][id][cl_name], 32, Name);
			clothingid = id;
	        success = true;
	        break;
	    }
	}
	if(success)
	{
	    return clothingid;
	}
	return -1;
}

//---------------- Clothes
/*CMD:clothing(playerid,params[])
{
	new
	    name[16],
	    userid,
	    clothingid,
		slot;

	if (sscanf(params, "s[16]D(-1)U(65535)", name, clothingid, userid))
 	{
		cl_ShowClothingMenu(playerid);

		return 1;
	}
	if(!HasCooldown(playerid,COOLDOWN_CLOTHES))
	{
		new
		    query[128],
		    rows
		;

        clothingid = clothingid-1;

		if (!strcmp(name, "help", true))
		{
			SendSyntaxMessage(playerid, "/clothing [names] [ID]");
	 		SendClientMessage(playerid, COLOR_GREY, "names: place, drop, adjust, give");
		}
		else if (!strcmp(name, "place", true) || !strcmp(name, "p", true))
		{
		    if (clothingid < 0)
			{
			    SendSyntaxMessage(playerid, "/clothing place [ID]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", PlayerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

			    return 1;
			}


			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and id = '%d'", PlayerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);


		 	if(cache_num_rows())
 			{
				cache_get_value_name_int(0, "slot", slot);


				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and equip = '1' and slot = '%d'", PlayerData[playerid][pID], slot);
			 	mysql_query(dbCon, query);


			 	if(cache_num_rows())
	 			{
					format(query,sizeof(query),"UPDATE clothing SET equip = 0 WHERE owner = '%d' and id = '%d'",PlayerData[playerid][pID], cache_get_value_name_int(0, "id"));
					mysql_query(dbCon, query);

					if(IsPlayerAttachedObjectSlotUsed(playerid, slot)) {
					    RemovePlayerAttachedObject(playerid, slot);
					}
 			    }

				if(IsPlayerAttachedObjectSlotUsed(playerid, slot))
				{
					RemovePlayerAttachedObject(playerid, slot);

					format(query,sizeof(query),"UPDATE clothing SET equip = 0 WHERE owner = '%d' and id = '%d'",PlayerData[playerid][pID], clothingid);
					mysql_query(dbCon, query);
				}
				else
				{
					format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and id = '%d'", PlayerData[playerid][pID], clothingid);
					mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_EQUIPCLOTHES);
				}
				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Nothing at all..");
		}
		else if (!strcmp(name, "drop", true) || !strcmp(name, "d", true))
		{
		    if (clothingid < 0) {

		        SendSyntaxMessage(playerid, "/clothing drop [ID]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", PlayerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

		        return 1;
			}
			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", PlayerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);

		 	if(cache_num_rows())
		 	{
				if(IsPlayerAttachedObjectSlotUsed(playerid, clothingid))
				{
					RemovePlayerAttachedObject(playerid, clothingid);
				}

                cache_get_value_name(0, "name", name);

				format(query,sizeof(query),"DELETE FROM `clothing` WHERE owner = '%d' and slot = '%d'",PlayerData[playerid][pID], clothingid);
				mysql_query(dbCon, query);

				SendClientMessageEx(playerid, COLOR_GRAD1, "You have %s(%d) left", name, clothingid + 1);

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Nothing at all..");
		}
		else if (!strcmp(name, "adjust", true) || !strcmp(name, "a", true))
		{
		    if (clothingid < 0) {

		        SendSyntaxMessage(playerid, "/clothing adjust [ID]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", PlayerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

		        return 1;
			}

			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", PlayerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);

		 	if(cache_num_rows())
		 	{
				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", PlayerData[playerid][pID], clothingid);
				mysql_tquery(dbCon, query, "OnQueryFinished", "dd", playerid, THREAD_ADJUSTCLOTHES);

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Nothing at all..");
		}
		else if (!strcmp(name, "give", true) || !strcmp(name, "g", true))
		{

		    if (clothingid < 0) {

		        SendSyntaxMessage(playerid, "/clothing give [ID] [PlayerID/PartOfName]");

				format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d'", PlayerData[playerid][pID]);
			 	mysql_query(dbCon, query);

			 	if((rows = cache_num_rows()) != 0)
			 	{
					for(new i = 0; i < rows; i++) {

					    clothingid = i;
					    cache_get_value_name(i, "name", name);

					    SendClientMessageEx(playerid, COLOR_WHITE, "%d: %s", clothingid+1, name);
					}
				}

		        return 1;
			}

		    if (userid == INVALID_PLAYER_ID && GetPlayerMaskID(userid) == INVALID_PLAYER_ID)
		        return SendSyntaxMessage(playerid, "/clothing give [ID] [PlayerID/PartOfName]");

			if (!IsPlayerNearPlayer(playerid, userid, 5.0))
                return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: You are not near player.");

			format(query,sizeof(query),"SELECT * FROM clothing WHERE owner = '%d' and slot = '%d'", PlayerData[playerid][pID], clothingid);
		 	mysql_query(dbCon, query);

		 	if(cache_num_rows())
		 	{
				if(IsPlayerAttachedObjectSlotUsed(playerid, clothingid))
				{
					RemovePlayerAttachedObject(playerid, clothingid);
				}
				cache_get_value_name(0, "name", name);

				format(query,sizeof(query),"UPDATE clothing SET owner = %d, equip = 0 WHERE owner = '%d' and slot = '%d'",PlayerData[userid][pID], PlayerData[playerid][pID], clothingid);
				mysql_query(dbCon, query);

				SendClientMessageEx(userid, COLOR_GRAD1, "You get %s(%d) from %s", name, clothingid + 1, ReturnName(playerid, 0));
				SendClientMessageEx(playerid, COLOR_GRAD1, "You gave %s(%d) with %s", name, clothingid + 1, ReturnName(userid, 0));

				SetCooldown(playerid,COOLDOWN_CLOTHES,5);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Nothing at all..");
		}
	}
	else SendClientMessageEx(playerid, COLOR_LIGHTRED, "Please wait %d seconds before attempting to use the command. /clothing again.",GetCooldownLevel(playerid,COOLDOWN_CLOTHES));

	return 1;
}*/
//

CMD:aceitarmorte(playerid, params[])
{
    if(!PlayerData[playerid][pInjured] || deathmode[playerid])
 		return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está morto.");

	if(deathtime[playerid] > 120)
		return SendClientMessage(playerid, COLOR_GRAD1, "Você deve esperar 2 minutos para aceitar morte.");

    SetPlayerChatBubble(playerid, "(( Jogador está morto. ))", 0xFF6347FF, 20.0, 60*1000);
    SendClientMessage(playerid, COLOR_YELLOW, "-> Você está morto agora. Você precisa esperar 60 segundos e então Você será capaz de /respawnhosp");

	deathmode[playerid] = 1;
	deathtime[playerid] = 60;

	return 1;
}

CMD:ferimentos(playerid, params[])
{
	new targetid, str[64*MAX_DAMAGES], bool:count;

	if (sscanf(params, "u", targetid))
		return SendSyntaxMessage(playerid, "/ferimentos [PlayerID/PartOfName]");

	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O jogador está desconectado.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, targetid, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");

	for(new i = 0; i != MAX_DAMAGES; ++i) {
		if(DamageData[targetid][i][dExists])
		{
		    new diff = gettime()-DamageData[targetid][i][dSec];
		    new mins, hours;
			format(str, sizeof(str), "%s%d danos de %s para %s (arma: %d) %s atrês\n", str, DamageData[targetid][i][dDamage], ReturnWeaponNameEx(DamageData[targetid][i][dWeaponid]), GetBodyPartName(DamageData[targetid][i][dShotType]), DamageData[targetid][i][dArmour], ConvertTime(diff, mins, hours));
			count = true;
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, ReturnName(targetid), (count) ? (str) : ("não possui ferimentos. ..."), "Fechar", "");
}

CMD:respawnhosp(playerid, params[])
{
	if(deathmode[playerid] && deathtime[playerid] <= 0)
	{
	    ResetPlayer(playerid);
		ResetDamages(playerid);
		deathmode[playerid] = 0;
		deathtime[playerid] = 0;
		MedicBill[playerid] = 0;
		PlayerData[playerid][pInjured]=0;
		PlayerData[playerid][pHealth]=100;
		SetPlayerPos(playerid, 185.2178,2794.3037,767.7479);
		BitFlag_Off(g_PlayerFlags[playerid], IS_PLAYER_SPAWNED);

		new string[256];
		format(string,sizeof(string),"(( %s aceitou morte. ))", ReturnName(playerid,1));
		ProxDetector(playerid, 20.0, string);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Aguarde 60 segundos.");

	return 1;
}
//***** ADMIN
COMMAND:banappeal(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return 1;
    new targetid;
	new string[256];
    if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}USE:{FFFFFF} /banappeal [id]");
    else
    {
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
        if(PlayerData[playerid][pAdmin] >= 5)
        {
            new admnome[24];
            if(PlayerData[playerid][pAdmin] > 1338) format(admnome, sizeof(admnome), "%s", PlayerData[playerid][pAdminName]);
            else format(admnome, sizeof(admnome), "%s", ReturnName(playerid, 0));

            if(PlayerData[targetid][pBanTeam] == 0)
            {
                PlayerData[targetid][pBanTeam] = 2;
                format(string,sizeof(string),"AdmCmd: Você setou %s na equipe de Banimentos.",ReturnName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"-> %s promoveu você para a equipe de Banimentos, parabéns por esta conquista.",admnome);
                SendClientMessage(targetid, COLOR_YELLOW, string);
				
				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `BanTeam` = %d", PlayerData[playerid][pBanTeam]);
				mysql_query(dbCon, szQuery);
				SQL_SaveCharacter(playerid);
            }
            else
            {
                PlayerData[targetid][pBanTeam] = 0;
                format(string,sizeof(string),"AdmCmd: Você removeu %s da equipe de Banimentos",ReturnName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"AdmCmd: %s removeu você da equipe de Banimentos.",admnome);
                SendClientMessage(targetid, COLOR_LIGHTRED, string);

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `BanTeam` = %d", PlayerData[playerid][pBanTeam]);
				mysql_query(dbCon, szQuery);
				SQL_SaveCharacter(playerid);
            }
        }
    }
    return 1;
}
COMMAND:factionteam(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return 1;
    new targetid;
	new string[256];
    if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}USE:{FFFFFF} /factionteam [id]");
    else
    {
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
        if(PlayerData[playerid][pAdmin] >= 5)
        {
            new admnome[24];
            if(PlayerData[playerid][pAdmin] > 1338) format(admnome, sizeof(admnome), "%s", PlayerData[playerid][pAdminName]);
            else format(admnome, sizeof(admnome), "%s", ReturnName(playerid, 0));

            if(PlayerData[targetid][pFactionTeam] == 0)
            {
                PlayerData[targetid][pFactionTeam] = 2;
                format(string,sizeof(string),"AdmCmd: Você setou %s na equipe de Gerenciamento de Facções.",ReturnName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"-> %s promoveu você para o Gerenciamento de Facções, parabéns por esta conquista.",admnome);
                SendClientMessage(targetid, COLOR_YELLOW, string);
				
				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `FactionTeam` = %d", PlayerData[playerid][pFactionTeam]);
				mysql_query(dbCon, szQuery);
				SQL_SaveCharacter(playerid);
            }
            else
            {
                PlayerData[targetid][pFactionTeam] = 0;
                format(string,sizeof(string),"AdmCmd: Você removeu %s da equipe de Gerenciamento de Facções.",ReturnName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"AdmCmd: %s removeu você da equipe Gerenciamento de Facções.",admnome);
                SendClientMessage(targetid, COLOR_LIGHTRED, string);

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `FactionTeam` = %d", PlayerData[playerid][pFactionTeam]);
				mysql_query(dbCon, szQuery);
				SQL_SaveCharacter(playerid);
            }
        }
    }
    return 1;
}
COMMAND:propertyteam(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5) return 1;
    new targetid;
	new string[256];
    if(sscanf(params, "ui", targetid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}USE:{FFFFFF} /propertyteam [id]");
    else
    {
        if (!IsPlayerConnected(targetid)) return SendClientMessage(playerid, COLOR_WHITE, "{FF6347}Este jogador não está conectado!");
        if(PlayerData[playerid][pAdmin] >= 5)
        {
            new admnome[24];
            if(PlayerData[playerid][pAdmin] > 1338) format(admnome, sizeof(admnome), "%s", PlayerData[playerid][pAdminName]);
            else format(admnome, sizeof(admnome), "%s", ReturnName(playerid, 0));

            if(PlayerData[targetid][pPropertyTeam] == 0)
            {
                PlayerData[targetid][pPropertyTeam] = 2;
                format(string,sizeof(string),"AdmCmd: Você setou %s na equipe de Gerenciamento de Propriedades.",ReturnName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"-> %s promoveu você para o Gerenciamento de Propriedades, parabéns por esta conquista.",admnome);
                SendClientMessage(targetid, COLOR_YELLOW, string);
				
				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `PropertyTeam` = %d", PlayerData[playerid][pPropertyTeam]);
				mysql_query(dbCon, szQuery);
				SQL_SaveCharacter(playerid);
            }
            else
            {
                PlayerData[targetid][pPropertyTeam] = 0;
                format(string,sizeof(string),"AdmCmd: Você removeu %s da equipe de Gerenciamento de Propriedades.",ReturnName(targetid, 0));
                SendClientMessage(playerid, COLOR_LIGHTRED, string);
                format(string,sizeof(string),"AdmCmd: %s removeu você da equipe Gerenciamento de Propriedades.",admnome);
                SendClientMessage(targetid, COLOR_LIGHTRED, string);

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `PropertyTeam` = %d", PlayerData[playerid][pPropertyTeam]);
				mysql_query(dbCon, szQuery);
				SQL_SaveCharacter(playerid);
            }
        }
    }
    return 1;
}

CMD:criarfaccao(playerid, params[])
{
	new
	    id = -1,
		type,
		name[32];

    if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é administrador ou não possui cargo suficiente.");

	if (sscanf(params, "ds[32]", type, name))
	{
	    SendSyntaxMessage(playerid, "/criarfaccao [tipo] [nome da facção]");
	    SendClientMessage(playerid, COLOR_GREY, "Tipos: 1: PMESP | 2: News | 3: GBESP | 4: SPGOV | 5: facção | 6: PCESP");
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendClientMessage(playerid, COLOR_GRAD1, "As categorias vício de 1 a 6.");

	id = Faction_Create(name, type);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "máximo de Facções criadas no servidor.");

	SendClientMessageEx(playerid, COLOR_GRAD1, "facção criada com sucesso! O id é %d", id);
	return 1;
}

CMD:deletarfaccao(playerid, params[])
{
	new
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é administrador ou não possui cargo suficiente.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/deletarfaccao [ID da facção]");

	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você especificou um ID invalido.");

	Faction_Delete(id);
	SendClientMessageEx(playerid, COLOR_GRAD1, "Você deletou a facção com sucesso! O id era %d", id);
	return 1;
}

CMD:editarfaccao(playerid, params[])
{
	new
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é administrador ou não possui cargo suficiente");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarfaccao [id] [função]");
	    SendClientMessage(playerid, COLOR_GRAD1, "funções: nome, cor, tipo, ranks, maxranks");
		return 1;
	}
	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você selecionou um ID invalido!");

    if (!strcmp(type, "nome", true))
	{
	    new name[32], clean_name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarfaccao [id] [nome] [novo nome]");

	    format(FactionData[id][factionName], 32, name);

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s trocou o nome da facção %d para \"%s\"", ReturnName(playerid), id, clean_name);
	}
	else if (!strcmp(type, "maxranks", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return SendSyntaxMessage(playerid, "/editarfaccao [id] [maxranks] [rank máximo]");

		if (ranks < 1 || ranks > 16)
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "A classificação indicada não deve ser inferior a 1 ou superior a 16.");

	    FactionData[id][factionRanks] = ranks;

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s alterou o máximo de ranks da facção id %d para o total de %d", ReturnName(playerid), id, ranks);
	}
	else if (!strcmp(type, "ranks", true))
	{
	    Faction_ShowRanks(playerid, id);
	}
	else if (!strcmp(type, "cor", true))
	{
	    new color;

	    if (sscanf(string, "x", color))
	        return SendSyntaxMessage(playerid, "/editarfaccao [id] [color] [hex color]");

	    FactionData[id][factionColor] = color;
	    Faction_Update(id);

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ajustou a cor {%06x} para a facção id %d", ReturnName(playerid), color >>> 8, id);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editarfaccao [id] [tipo de facção]");
            SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: PMESP | 2: News | 3: GBESP | 4: SPGOV | 5: facção | 6: PCESP");
            return 1;
		}
		if (typeint < 1 || typeint > 6)
		    return SendClientMessage(playerid, COLOR_GRAD1, "Você especificou um valor menor que 1 ou maior que 6.");

	    FactionData[id][factionType] = typeint;

	    Faction_Save(id);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ajustou o tipo de facção para %d da facção %s", ReturnName(playerid), id, GetFactionTypeName(typeint));
	}
	return 1;
}

CMD:faccoes(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é administrador ou não possui cargo suficiente.");

	ViewFactions(playerid);
	return 1;
}

CMD:membros(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ser um membro da facção ou de um grupo.");

	SendClientMessageEx(playerid, COLOR_GRAD1, "Membros %s online:", FactionData[factionid][factionName]);

	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid) {
		SendClientMessageEx(playerid, COLOR_GRAD2, "(ID: %03d) {%s} %s %s", i, (PlayerData[i][pOnDuty]) ? (GetFactionColor(factionid)) : ("BFC0C2"), Faction_GetRank(i), ReturnName(i, 0));
	}
	return 1;
}

CMD:blockf(playerid, params[])
	return cmd_blockfaccao(playerid, params);

CMD:blockfaccao(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você deve ser um membro de facção.");

    if(PlayerData[playerid][pFactionRank] > 4)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui permissão.");

	if(!FactionData[factionid][factionChat])
	{
		FactionData[factionid][factionChat] = 1;
 		SendFactionMessage(factionid, COLOR_FACTION, "(( (%d) %s trancou o chat da facção. ))", PlayerData[playerid][pFactionRank], ReturnName(playerid, 0));
	}
	else
	{
		FactionData[factionid][factionChat] = 0;
		SendFactionMessage(factionid, COLOR_FACTION, "(( (%d) %s destrancou o chat da facção ))", PlayerData[playerid][pFactionRank], ReturnName(playerid, 0));
	}
	return 1;
}


CMD:gov(playerid, params[])
	return cmd_governo(playerid, params);

CMD:governo(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1 || GetFactionType(playerid) == FACTION_GANG)
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pertence a nenhuma facção.");

    if(PlayerData[playerid][pFactionRank] > 2)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui permissão.");

	if(isnull(params))
		return SendSyntaxMessage(playerid, "/(gov)erno [mensagem]");

	new string[128];

	format(string, sizeof(string), "{%s}------ Noticias de %s ------", GetFactionColor(factionid), FactionData[factionid][factionName]);
	SendClientMessageToAll(COLOR_WHITE, string);

	format(string, sizeof(string), "*[HQ] %s: %s", ReturnName(playerid, 0), params);
	SendClientMessageToAll(COLOR_WHITE, string);

	format(string, sizeof(string), "{%s}------ Noticias de %s ------", GetFactionColor(factionid), FactionData[factionid][factionName]);
	SendClientMessageToAll(COLOR_WHITE, string);

	SQL_LogChat(playerid, "/gov", params);
	return 1;
}


CMD:anrp(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui autorização para usar este comando.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/anrp [mensagem]");

    new string[128];

	if (strlen(params) > 80) {
	    format(string, sizeof(string), " %.80s ((ANRP))", params);
	    SendClientMessageToAll(0xFF436FFF, string);
	    format(string, sizeof(string), "... %s", params[80]);
	    SendClientMessageToAll(0xFF436FFF, string);
	}
	else {
	    format(string, sizeof(string), " %s ((ANRP))", params);
	    SendClientMessageToAll(0xFF436FFF, string);
	}
    SQL_LogChat(playerid, "/anrp", params);
	return 1;
}

CMD:f(playerid, params[])
	return cmd_fac(playerid, params);

CMD:fac(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ser um membro de uma facção.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(f)ac [message]");

	if (FactionData[factionid][factionChat])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O chat da facção está trancado.");

    if (BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_FACTION))
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você precisa habilitar o chat de facção.");

	SendFactionMessage(factionid, COLOR_FACTION, "(( (%d) %s %s: %s ))", PlayerData[playerid][pFactionRank], Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	Log_Write("logs/faction_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:convidar(playerid, params[])
{
	new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ser um membro da facção.");

	if (PlayerData[playerid][pFactionRank] > 2)
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "ERRO: Você não é o lider.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/convite [PlayerID/PartOfName]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (PlayerData[userid][pFaction] == PlayerData[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador faz parte da sua facção.");

    if (PlayerData[userid][pFaction] != -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador já faz parte de uma facção");

	PlayerData[userid][pFactionOffer] = playerid;
    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];

    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você enviou um convite para %s entrar na facção \"%s\"", ReturnName(userid, 0), Faction_GetName(playerid));
    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s te convidou \"%s\" (Use \"/aceitar convite\")", ReturnName(playerid, 0), Faction_GetName(playerid));

	return 1;
}

CMD:demitir(playerid, params[])
{
    new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Este jogador não faz parte de uma facção.");

	if (PlayerData[playerid][pFactionRank] > 2)
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "Você não é lider da facção!");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/demitir [PlayerID/PartOfName]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_GRAD1, "O jogador não faz parte da mesma facção.");

    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você demitiu %s da facção \"%s\"", ReturnName(userid, 0), Faction_GetName(playerid));
    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s removeu Você da facção \"%s\"", ReturnName(playerid, 0), Faction_GetName(playerid));

    ResetFaction(userid);

	return 1;
}

CMD:promover(playerid, params[])
{
    new
	    userid,
		rankid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Este jogador não faz parte de uma facção.");

	if (PlayerData[playerid][pFactionRank] > 2)
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "Você não é lider da facção!");

	if (sscanf(params, "ud", userid, rankid))
	    return SendSyntaxMessage(playerid, "/promover [PlayerID/PartOfName] [rank (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador está desconectado.");
		}
	}

	if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode se promover.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Este jogador não faz parte da mesma facção.");

	if (rankid < 0 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "Rank invalido. O rank deve estar entre 1 a %d", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if(PlayerData[userid][pFactionRank] >= rankid)
	{
	    PlayerData[userid][pFactionRank] = rankid;
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você promoveu %s para %s (%d)", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
	    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "Parabéns: %s te promoveu para %s (%d)", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);
	}
	else
	{
	    PlayerData[userid][pFactionRank] = rankid;
	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você rebaixou %s para %s (%d)", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
	    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "LAMENTO: %s te rebaixou para o cargo %s (%d)", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);
	}

	return 1;
}


CMD:editarcargo(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Lamentável: Você não faz parte de uma facção.");

	if (PlayerData[playerid][pFactionRank] > 2)
	    return SendClientMessageEx(playerid, COLOR_GRAD1, "TRISTE: Você não é o lider!");

	Faction_ShowRanks(playerid, PlayerData[playerid][pFaction]);
	return 1;
}

CMD:setarlider(playerid, params[])
{
	new
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ERRO: Você não está autorizado.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/setarlider [PlayerID/PartOfName] [ID facção] (Use -1 para remover)");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador não está logado..");
		}
	}

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você identificou partidos ou Facções com defeito.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você removeu o %s de lider da facção.", ReturnName(userid, 0));
    	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s te removeu da facção.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);

		if (!PlayerData[userid][pFactionRank])
	    	PlayerData[userid][pFactionRank] = 1;

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você setou o %s de lider na facção \"%s\"", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s setou Você de lider na facção. \"%s\"", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:asetnivel(playerid, params[])
{
	new
		userid,
		rank,
		factionid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não está autorizado.");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/asetnivel [PlayerID/PartOfName] [nivel id]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador não está logado.");
		}
	}

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "O jogador não é membro de nenhum facção.");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendClientMessageEx(playerid, COLOR_GRAD1, "A classificação não é valida. A classificação desta facção está entre 1 e %d", FactionData[factionid][factionRanks]);

	PlayerData[userid][pFactionRank] = rank;

	SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você criou uma facção/grupo de pessoas %s estáo %d", ReturnName(userid, 0), rank);
    SendClientMessageEx(userid, COLOR_LIGHTBLUE, "%s tenha sua facção/grupo %d", ReturnName(playerid, 0), rank);

    return 1;
}

CMD:aceitar(playerid, params[])
{
	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/aceitar [nome]");
		SendClientMessage(playerid, COLOR_GREY, "Nomes disponíveis: convite");
		return 1;
	}
	if (!strcmp(params, "convite", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pFactionOffer],
	        factionid = PlayerData[playerid][pFactionOffered];

		if (!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] > 1)
	   	 	return SendClientMessage(playerid, COLOR_GRAD1, "Ofertas Facções ou grupos não estáo disponíveis.");

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = FactionData[factionid][factionRanks];

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "Você aceitou a oferta %s para juntar-se \"%s\"", ReturnName(targetid, 0), Faction_GetName(targetid));
		SendClientMessageEx(targetid, COLOR_LIGHTBLUE, "%s aceitou sua oferta para entrar \"%s\"", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
	}
	return 1;
}

CMD:porta(playerid, params[])
{
	new house=-1;
	if((house = HouseEntered[playerid]) != -1)
	{
		new
			Float:fDistance[2] = {99999.0, 0.0},
			i = -1
		;
		for(new x = 0; x != MAX_FURNITURE; ++x) {
			if(HouseFurniture[house][x][fOn] && isHouseDoor(HouseFurniture[house][x][fModel])) {
			    fDistance[1] = GetPlayerDistanceFromPoint(playerid, HouseFurniture[house][x][fPosX], HouseFurniture[house][x][fPosY], HouseFurniture[house][x][fPosZ]);

				if (fDistance[1] < fDistance[0])
				{
				    fDistance[0] = fDistance[1];
				    i = x;
				}
			}
		}

		if(i != -1 && fDistance[0] < 3) {
			if(HouseFurniture[house][i][fOpened] == 0)
			{
				if(HouseFurniture[house][i][fLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "Porta trancada!");
				MoveDynamicObject(HouseFurniture[house][i][fObject], HouseFurniture[house][i][fPosX], HouseFurniture[house][i][fPosY], HouseFurniture[house][i][fPosZ]/*+0.01*/, /*0.01*/1, HouseFurniture[house][i][fPosRX], HouseFurniture[house][i][fPosRY], HouseFurniture[house][i][fPosRZ]-90.0);
				HouseFurniture[house][i][fOpened] = 1;
			}
			else
			{
				HouseFurniture[house][i][fOpened] = 0;
				MoveDynamicObject(HouseFurniture[house][i][fObject], HouseFurniture[house][i][fPosX], HouseFurniture[house][i][fPosY], HouseFurniture[house][i][fPosZ], /*0.01*/1, HouseFurniture[house][i][fPosRX], HouseFurniture[house][i][fPosRY], HouseFurniture[house][i][fPosRZ]);
			}
			return 1;
		}
		return 1;
	}
	if((house = BizEntered[playerid]) != -1)
	{
		new
			Float:fDistance[2] = {99999.0, 0.0},
			i = -1
		;

		for(new x = 0; x != MAX_FURNITURE; ++x) {
			if(BizFurniture[house][x][fOn] && isHouseDoor(BizFurniture[house][x][fModel])) {
			    fDistance[1] = GetPlayerDistanceFromPoint(playerid, BizFurniture[house][x][fPosX], BizFurniture[house][x][fPosY], BizFurniture[house][x][fPosZ]);

				if (fDistance[1] < fDistance[0])
				{
				    fDistance[0] = fDistance[1];
				    i = x;
				}
			}
		}

		if(i != -1 && fDistance[0] < 3) {
			if(BizFurniture[house][i][fOpened] == 0)
			{
				if(BizFurniture[house][i][fLocked] == 1) return SendClientMessage(playerid, COLOR_GREY, "Porta trancada!");
				MoveDynamicObject(BizFurniture[house][i][fObject], BizFurniture[house][i][fPosX], BizFurniture[house][i][fPosY], BizFurniture[house][i][fPosZ]/*+0.01*/, /*0.01*/1, BizFurniture[house][i][fPosRX], BizFurniture[house][i][fPosRY], BizFurniture[house][i][fPosRZ]-90.0);
				BizFurniture[house][i][fOpened] = 1;
			}
			else
			{
				BizFurniture[house][i][fOpened] = 0;
				MoveDynamicObject(BizFurniture[house][i][fObject], BizFurniture[house][i][fPosX], BizFurniture[house][i][fPosY], BizFurniture[house][i][fPosZ], /*0.01*/1, BizFurniture[house][i][fPosRX], BizFurniture[house][i][fPosRY], BizFurniture[house][i][fPosRZ]);
			}
			return 1;
		}
		return 1;
	}
    else {

		new
			Float:fDistance[2] = {99999.0, 0.0},
			i = -1
		;

		foreach(new x: sv_movedoors)
		{
			fDistance[1] = GetPlayerDistanceFromPoint(playerid, Doors[x][doorPosX], Doors[x][doorPosY], Doors[x][doorPosZ]);

			if (fDistance[1] < fDistance[0])
			{
				fDistance[0] = fDistance[1];
				i = x;
			}
		}

		if(i != -1 && fDistance[0] < 3) {
			if(Doors[i][doorFaction] == -1 || (Doors[i][doorFaction] != -1 && Doors[i][doorFaction] == PlayerData[playerid][pFaction]))
			{
				if(Doors[i][doorOpened] == 1)
				{
					Doors[i][doorOpened] = 0;
					MoveDynamicObject(Doors[i][doorObject], Doors[i][doorPosX], Doors[i][doorPosY], Doors[i][doorPosZ], Doors[i][doorOpenSpeed], Doors[i][doorPosRX], Doors[i][doorPosRY], Doors[i][doorPosRZ]);
				}
				else
				{
					Doors[i][doorOpened] = 1;
					MoveDynamicObject(Doors[i][doorObject], Doors[i][doorMoveX], Doors[i][doorMoveY], Doors[i][doorMoveZ], Doors[i][doorOpenSpeed], Doors[i][doorMoveRX], Doors[i][doorMoveRY], Doors[i][doorMoveRZ]);
				}
				return 1;
			}
		}

		if (GetFactionType(playerid) == FACTION_POLICE) {

			if (IsPlayerInRangeOfPoint(playerid, 3.0, 253.0706,109.0695,1003.2188)) // LSPD DOOR 1
			{
			    if(LSPDDoor[0]) // Openned
			    {
			        MoveDynamicObject(LSPDDoorObject[0], 253.2095, 107.5746, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[1], 253.1822, 110.5749, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
			        LSPDDoor[0] = 0;
			    }
			    else
			    {
			        MoveDynamicObject(LSPDDoorObject[0], 253.2095, 106.5846, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[1], 253.1822, 111.5849, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
			        LSPDDoor[0] = 1;
			    }
		    }
		    else if (IsPlayerInRangeOfPoint(playerid, 3.0, 239.7274,117.5998,1003.2188)) // LSPD DOOR 2
			{
			    if(LSPDDoor[1]) // Openned
			    {
			        MoveDynamicObject(LSPDDoorObject[2], 239.5697, 116.1145, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[3], 239.5820, 119.1149, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
		            LSPDDoor[1] = 0;
			    }
			    else
			    {
			        MoveDynamicObject(LSPDDoorObject[2], 239.5697, 115.0945, 1002.2392, 5, 0.0000, 0.0000, 90.0000);
			        MoveDynamicObject(LSPDDoorObject[3], 239.5820, 120.0849, 1002.2392, 5, 0.0000, 0.0000, -90.0000);
		            LSPDDoor[1] = 1;
			    }
		    }
	    }
	}
	return 1;
}

CMD:entrar(playerid, params[])
{
	new id, str[128];

	if ((id = nearHouse_var[playerid]) != -1)
	{
		if(HouseInfo[id][hLocked] == 1) return GameTextForPlayer(playerid, "~r~Fechada", 5000, 1);
		SetPlayerPosEx(playerid,HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ]);
		SetPlayerInterior(playerid,HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid,HouseInfo[id][hWorld]);
		HouseEntered[playerid] = id;
		BizEntered[playerid] = -1;

		PlayerData[playerid][pInterior] = HouseInfo[id][hInterior];
		PlayerData[playerid][pWorld] = HouseInfo[id][hWorld];
		PlayerData[playerid][pLocal] = id + LOCAL_HOUSE;

		if(PlayerData[playerid][pHouseKey] == id) GameTextForPlayer(playerid, "~w~Bem vindo a sua casa", 5000, 1);

		if(HouseInfo[id][hradioOn]) PlayAudioStreamForPlayer(playerid, HouseInfo[id][hradioURL]);
	}
	else if ((id = Bizz_Nearest(playerid)) != -1 && BizInfo[id][bExitX] != 0.0 && BizInfo[id][bExitY] != 0.0)
	{
		if(PlayerData[playerid][pPbiskey] == id || PlayerData[playerid][pCash] >= BizInfo[id][bEntranceCost] || BizInfo[id][bEntranceCost] <= 0)
		{
			if(PlayerData[playerid][pPbiskey] != id)
			{
				if(BizInfo[id][bLocked] == 1)
				{
					GameTextForPlayer(playerid, "~r~Fechada", 5000, 1);
					return 1;
				}
				if(BizInfo[id][bProducts] == 0)
				{
					GameTextForPlayer(playerid, "~r~Sem estoque", 5000, 1);
					return 1;
				}

				if(BizInfo[id][bEntranceCost])
				{
					PlayerData[playerid][pCash] -= BizInfo[id][bEntranceCost];
					format(str, sizeof(str), "~r~-R$%d~n~~w~digite /sair~n~para sair", BizInfo[id][bEntranceCost]);
					BizInfo[id][bTill] += BizInfo[id][bEntranceCost];
					UpdateBizInfo(id);
					GameTextForPlayer(playerid, str, 5000, 3);
					Log_Write("logs/biz.txt", "[%s] %s: pagou R$%d para entrar no negócio %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), BizInfo[id][bEntranceCost], id, BizInfo[id][bID]);
				}
			}

			switch(BizInfo[id][bType])
			{
			    case 2: {
					SendClientMessageEx(playerid, COLOR_GREEN,"/comprararma para comprar armas.");
				}
			    case 3: {
					SendClientMessageEx(playerid, COLOR_GREEN,"24/7 supermecado /retirar /saldo /comprar");
				}
			    case 9: { // Restaurant
					switch(BizInfo[id][bsubType])
					{
				        case 1: // Pizza
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"Isto é uma {FF6347}pizzaria.");
						}
				        case 2: // Donut
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"Isto é um {FF6347}cafeteria.");
						}
				        case 3: // Burger
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"Isto é um {FF6347}restaurante fast-food.");
						}
				        case 4: // Chicken Bell
				        {
			        		SendClientMessageEx(playerid, COLOR_WHITE,"Isto é uma {FF6347}lanchonete.");
						}
					}
					SendClientMessageEx(playerid, COLOR_WHITE,"Você pode comer neste restaurante. Use {FF6347}/comer{FFFFFF} ou {FF6347}/pedido.");
				}
				case 12: {
					SendClientMessageEx(playerid, COLOR_GREEN,"Banco: /banco /poupanca /sacar /saldo.");
				}
			}

   			GameTextForPlayer(playerid, BizInfo[id][bInfo], 5000, 1);
			SetPlayerVirtualWorld(playerid, BizInfo[id][bWorld]);
			SetPlayerInterior(playerid,BizInfo[id][bInterior]);
			SetPlayerPosEx(playerid,BizInfo[id][bExitX],BizInfo[id][bExitY],BizInfo[id][bExitZ]);
			PlayerData[playerid][pInterior] = BizInfo[id][bInterior];
			PlayerData[playerid][pWorld] = BizInfo[id][bWorld];
			PlayerData[playerid][pLocal] = id + LOCAL_BIZZ;
			BizEntered[playerid] = id;
			HouseEntered[playerid] = -1;
		}
		else
		{
			GameTextForPlayer(playerid, "~r~Você não tem dinheiro", 5000, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1243.7375,-1264.8912,15.6787)) // PCESP 1 ANDAR
	{
		SetPlayerInterior(playerid, -1);
		SetPlayerVirtualWorld(playerid, 97);
		SetPlayerPosEx(playerid, 1410.2965,-10.9775,1001.0098);
		SetPlayerFacingAngle(playerid, 0);
		GameTextForPlayer(playerid, "~w~Bem vindo a Policia Civil!", 5000, 1);
		PlayerData[playerid][pInterior] = 5;
		PlayerData[playerid][pLocal] = 101;
		PlayerData[playerid][pWorld] = 97;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 706.7247,-588.8745,17.3375)) // PMESP
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 10004);
		SetPlayerPosEx(playerid, 2344.9749,-647.6016,80162.4531);
		SetPlayerFacingAngle(playerid, 0);
		GameTextForPlayer(playerid, "~w~Bem-vindo a Policia Militar", 5000, 1);
		PlayerData[playerid][pInterior] = 10;
		PlayerData[playerid][pLocal] = 104;
		PlayerData[playerid][pWorld] = 10004;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1400.2490,-12.1037,1001.0098)) // PCESP 2 ANDAR
	{
		SetPlayerInterior(playerid, 10);
		SetPlayerVirtualWorld(playerid, 10004);
		SetPlayerPosEx(playerid, 1390.2905,-30.3338,1000.9183);
		SetPlayerFacingAngle(playerid, 0);
		GameTextForPlayer(playerid, "~w~Bem-vindo ao segundo andar da Policia Civil", 5000, 1);
		PlayerData[playerid][pInterior] = 5;
		PlayerData[playerid][pLocal] = 101;
		PlayerData[playerid][pWorld] = 97;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 954.6230,-1467.4749,13.5547)) // GBESP GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Apenas o motorista do veículo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi,2296.9138,2498.3650,-7.4531);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi,512);
			SetVehicleZAngle(vehi, 0);



			SetPlayerVirtualWorld(playerid, 512);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 512);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}

		}else{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 512);
			SetPlayerPosEx(playerid, 2296.9138,2498.3650,-7.4531);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Bem-vindo a garagem do GBESP.", 5000, 1);
			PlayerData[playerid][pInterior] = 0;
			PlayerData[playerid][pWorld] = 0;
			PlayerData[playerid][pLocal] = 0;

		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1229.3035,-1243.7617,15.6528)) // PCESP GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Apenas o motorista do veículo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi,-1627.9585,690.3979,6.7627);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi,0);
			SetVehicleZAngle(vehi, 0);



			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}

		}else{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPosEx(playerid, -1627.9585,690.3979,6.7627);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Bem-vindo a garagem da PCESP.", 5000, 1);
			PlayerData[playerid][pInterior] = 0;
			PlayerData[playerid][pWorld] = 0;
			PlayerData[playerid][pLocal] = 0;

		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 708.0598,-573.6811,14.9958)) // PMESP GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Apenas o motorista do veículo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 2318.3911,2446.4016,3.2734);
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi,0);
			SetVehicleZAngle(vehi, 0);



			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}

		}else{
			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerPosEx(playerid, 2318.3911,2446.4016,3.2734);
			SetPlayerFacingAngle(playerid, 0);
			GameTextForPlayer(playerid, "~w~Bem-vindo a garagem da PMESP.", 5000, 1);
			PlayerData[playerid][pInterior] = 0;
			PlayerData[playerid][pWorld] = 0;
			PlayerData[playerid][pLocal] = 101;

		}






		/*SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPosEx(playerid, 2318.3911,2446.4016,3.2734);
		SetVehiclePos(playerid, 2318.3911,2446.4016,3.2734);
		SetPlayerFacingAngle(playerid, 0);
		GameTextForPlayer(playerid, "~w~Bem-vindo a garagem da PMESP.", 5000, 1);*/
		PlayerData[playerid][pInterior] = 0;
		PlayerData[playerid][pWorld] = 0;
		PlayerData[playerid][pLocal] = 101;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1504.6501,-1775.4287,13.5369)) // City Hall
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 15);
		SetPlayerPosEx(playerid, -501.3306,286.1074,2001.0950);
		SetPlayerFacingAngle(playerid, 0);
		GameTextForPlayer(playerid, "~w~Bem vindo a prefeitura", 5000, 1);
		PlayerData[playerid][pInterior] = 1;
		PlayerData[playerid][pWorld] = 15;

		PlayerData[playerid][pLocal] = 102;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1173.1841,-1323.3143,15.3952)) // Hospital
	{
		SetPlayerInterior(playerid, 1);
		SetPlayerVirtualWorld(playerid, 10003);
		SetPlayerPosEx(playerid, 169.1583,2783.4038,767.7469);
		SetPlayerFacingAngle(playerid, 274.0443);
		GameTextForPlayer(playerid, "~w~Bem vindo ao hospital", 5000, 1);
		PlayerData[playerid][pInterior] = 1;
		PlayerData[playerid][pWorld] = 10003;

		PlayerData[playerid][pLocal] = 103;
	}
	/*if ((id = Bizz_Nearest(playerid)) != -1)
	{
		if (EntranceData[id][entranceLocked])
			return SendClientMessage(playerid, COLOR_GRAD1, "This entrance is currently locked.");

		if (EntranceData[id][entranceType] == 2) // BANK
		{
			SendClientMessage(playerid, COLOR_GREEN,"Bank: /bank /savings /withdraw /balance");
		}

		if (EntranceData[id][entranceCustom])
			SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		else
			SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pLocal] = EntranceData[id][entranceID];

		format(str, sizeof(str), "~w~Welcome to the %s", EntranceData[id][entranceName]);
		GameTextForPlayer(playerid, str, 5000, 1);
		return 1;
	}*/
	return 1;
}

CMD:comer(playerid)
{
	new id;
	if ((id = Bizz_Inside(playerid)) != -1)
	{
	    if(BizEntered[playerid] == id && BizInfo[id][bType] == 9)
	    {
			ShowPlayerRestaurantMenu(playerid, id);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está em uma lanchonete.");
	}
	return 1;
}

CMD:pedido(playerid, params[])
{
	new
	    type[24],
		menuid,
		value;

	if (sscanf(params, "s[24]D()D()", type, menuid, value))
 	{
	    SendClientMessage(playerid, COLOR_GRAD3, "Comandos disponíveis:");
	    SendClientMessage(playerid, -1, "{FF6347}/pedido menu {FFFFFF}- para abrir o menu da lanchonete.");
        SendClientMessage(playerid, -1, "{FF6347}/pedido sair {FFFFFF}- para sair do menu.");
        SendClientMessage(playerid, -1, "{FF6347}/pedido colocar {FFFFFF}- se Você estiver segurando uma bandeja de refeição, Você pode coloca-la sobre uma mesa.");
        SendClientMessage(playerid, -1, "{FF6347}/pedido pegar {FFFFFF}- para a bandeja que está na mesa.");
        SendClientMessage(playerid, -1, "{FF6347}/pedido lixo {FFFFFF}- para jogar a bandeja fora.");
        SendClientMessage(playerid, -1, "{FF6347}/pedido config {FFFFFF}- menu de configuração para proprietários da lanchonete");
		return 1;
	}

	if (!strcmp(type, "sair", true))
	{
		for(new i=0;i!=sizeof(TD_Restaurant);i++)
			TextDrawHideForPlayer(playerid, TD_Restaurant[i]);

        for(new i=0;i!=9;i++)
			PlayerTextDrawHide(playerid, PTD_Restaurant[playerid][i]);

        CancelSelectTextDraw(playerid);
	}
	else if (!strcmp(type, "menu", true))
	{
		cmd_comer(playerid);
	}
	else if (!strcmp(type, "colocar", true))
	{
		if(IsPlayerHoldMeal(playerid))
		{
            if(MealObject[playerid] == -1)
            {
		 		new Float:px, Float:py, Float:pz, Float:a;
				GetPlayerPos(playerid, px, py, pz);
				GetPlayerFacingAngle(playerid, a);

				px += (0.2 * floatsin(-a + 90.0, degrees));
				py += (0.2 * floatcos(-a + 90.0, degrees));

				//SetPlayerCheckpoint(playerid, px, py, pz, 1.0);

				px += (1.0 * floatsin(-a, degrees));
				py += (1.0 * floatcos(-a, degrees));


		  		//new Float:rz = 159.500076, Float:a;

		  		//rz += floatsin(-a, degrees);
		  		//92.2354 //159.500076
		  		//-16.799961 //272.2354
				if(MealHolding[playerid] >= 2221 && MealHolding[playerid] <= 2223)
				{
				    MealObject[playerid] = MealPlace(MealHolding[playerid], px,py,pz,0, 0, a + 67.5, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
				}
				else MealObject[playerid] = MealPlace(MealHolding[playerid], px,py,pz,-25.600013, 22.000013, a + 67.5, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));


                EditDynamicObject(playerid, MealDrop[MealObject[playerid]][mObject]);
                SetPlayerThrowMeal(playerid);

                SendClientMessage(playerid, COLOR_GRAD1, "Agora Você pode posicionar sua bandeja de refeição. Pressione ESC para retornar, clique no icone salvar para salvar.");
			}
            else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pediu nenhum lanche.");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está com nenhum lanche.");
	}
	else if (!strcmp(type, "pegar", true))
	{
		if(GetPlayerNearMeal(playerid))
		{
		    MealHolding[playerid] = MealDrop[MealObject[playerid]][mID];
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);

			MealDestroy(MealObject[playerid]);
			MealObject[playerid]=-1;
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está  perto lanche.");
	}
	else if (!strcmp(type, "lixo", true))
	{
    	if(MealObject[playerid] != -1 || IsPlayerHoldMeal(playerid))
      	{
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s Você jogou no lixo.", ReturnName(playerid, 0));

			if(MealObject[playerid] != -1)
			{
			    MealDestroy(MealObject[playerid]);
			    MealObject[playerid]=-1;
			    return 1;
			}
			SetPlayerThrowMeal(playerid);
      	}
      	else SendClientMessage(playerid, -1, "Você não jogou nada.");
	}
	else if (!strcmp(type, "config", true))
	{
	    new id = -1;
		if((id = Bizz_Inside(playerid)) != -1)
		{
			if (Bizz_IsOwner(playerid, id))
			{
			    if(BizInfo[BizEntered[playerid]][bType] == 9)
			    {
				    if(sscanf(params, "{s[24]}dd", menuid, value))
				    {
						SendClientMessage(playerid, COLOR_GRAD2, "USE: /refeicao config [menuid] [preço]");
						SendClientMessage(playerid, -1, "{FF6347}[Menu]");

						switch(BizInfo[BizEntered[playerid]][bsubType])
						{
						    case 1:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Batata frita com pizza - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));
	          					SendClientMessageEx(playerid, -1, "2. Pizza com salada - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
	          					SendClientMessageEx(playerid, -1, "3. Pizza - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
	          					SendClientMessageEx(playerid, -1, "4. Salada - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][3]));
						    }
						    case 2:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Rosca - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));
	          					SendClientMessageEx(playerid, -1, "2. Duas roscas - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
	          					SendClientMessageEx(playerid, -1, "3. Duas roscas grande - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
						    }
						    case 3:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Mclanche feliz - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));
	          					SendClientMessageEx(playerid, -1, "2. Torre de carne - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
	          					SendClientMessageEx(playerid, -1, "3. ratão completo - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
	          					SendClientMessageEx(playerid, -1, "4. Salada - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][3]));
						    }
						    case 4:
						    {
	          					SendClientMessageEx(playerid, -1, "1. Frango pequeno - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][0]));
	          					SendClientMessageEx(playerid, -1, "2. Frango médio - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][1]));
	          					SendClientMessageEx(playerid, -1, "3. Frango grande - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][2]));
	          					SendClientMessageEx(playerid, -1, "4. Salada - %s", FormatNumber(BizInfo[BizEntered[playerid]][bItems][3]));
						    }
						}
				        return 1;
				    }
				    printf("%d %d", menuid, value);
				    if(menuid >= 1 && (menuid <= 3 || (menuid <= 4 && BizInfo[BizEntered[playerid]][bsubType] != 2)))
				    {
						if(value < 1 || value > 9999)
						    return SendClientMessage(playerid, COLOR_GRAD2, "O preço deve estar entre 1 e 9999!");

						BizInfo[BizEntered[playerid]][bItems][menuid-1] = value;
						SendClientMessageEx(playerid, COLOR_WHITE, "Você fixou o preço dos alimentos #%d completo", menuid);
				    }
				    else SendClientMessage(playerid, COLOR_LIGHTRED, "O número do alimento é invalido!");
			    }
			    else SendClientMessage(playerid, COLOR_LIGHTRED, "Apenas para um restaurante!");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é dono de uma lanchonete!");
		}
		else
		{
		    SendClientMessage(playerid, -1, "Você não está em nenhuma lanchonete.");
		}
	}
	return 1;
}



stock ShowPlayerRestaurantMenu(playerid, id)
{
	new string[256];
	SendClientMessage(playerid, COLOR_WHITE, "Se Você ficar preso no menu, pode fecha-lo usando {FF6347A}/refeicao sair");
	PRestaurantOpening{ playerid }=true;

	switch(BizInfo[id][bsubType])
	{
		case 1: // Pizza
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2218);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2219);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2220);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][3], 2355);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][3]);


			format(string, sizeof(string), "Batata frita com pizza~n~~r~São de: +30~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

		    format(string, sizeof(string), "Pizza com salada~n~~r~São de: +60~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

		    format(string, sizeof(string), "Pizza~n~~r~São de: +100~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);

		    format(string, sizeof(string), "Salada~n~~r~São de: +100~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][3]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][7], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][7]);
		}
 		case 2: // Donut
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2221);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2223);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2222);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

            format(string, sizeof(string), "Rosca~n~~r~São de: +30~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

            format(string, sizeof(string), "Duas roscas~n~~r~São de: +60~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

		    format(string, sizeof(string), "Duas roscas grandre~n~~r~São de: +100~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);
		}
 		case 3: // Burger
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2213);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2214);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2212);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][3], 2354);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][3]);

            format(string, sizeof(string), "Mclanche feliz~n~~r~São de: +30~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

            format(string, sizeof(string), "Torre de carne~n~~r~São de: +60~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

            format(string, sizeof(string), "ratão completo~n~~r~São de: +100~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);

            format(string, sizeof(string), "Salada~n~~r~São de: +100~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][3]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][7], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][7]);
		}
 		case 4: // Cluckin
		{
		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][0], 2215);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][0]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][1], 2216);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][1]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][2], 2217);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][2]);

		    PlayerTextDrawSetPreviewModel(playerid,PTD_Restaurant[playerid][3], 2353);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][3]);

            format(string, sizeof(string), "Frango pequeno~n~~r~São de: +30~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][0]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][4], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][4]);

            format(string, sizeof(string), "Frango médio~n~~r~São de: +60~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][1]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][5], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][5]);

            format(string, sizeof(string), "Frango grande~n~~r~São de: +100~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][2]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][6], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][6]);

            format(string, sizeof(string), "Salada~n~~r~São de: +100~n~Remove a fome~n~~b~preço: %s", FormatNumber(BizInfo[id][bItems][3]));
			PlayerTextDrawSetString(playerid,PTD_Restaurant[playerid][7], string);
		    PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][7]);
		}
	}

	for(new i=0;i!=sizeof(TD_Restaurant);i++)
		TextDrawShowForPlayer(playerid, TD_Restaurant[i]);

	//format(string, sizeof(string), "%s", BizInfo[id][bInfo]);
	str_replace(string, "", "~n~");
	str_replace(string, "", "~r~");
	str_replace(string, "", "~g~");
	str_replace(string, "", "~b~");
	str_replace(string, "", "~w~");
	str_replace(string, "", "~y~");
	str_replace(string, "", "~p~");
	str_replace(string, "", "~l~");
    PlayerTextDrawSetString(playerid, PTD_Restaurant[playerid][8], ClearGameTextColor(BizInfo[id][bInfo]));
	PlayerTextDrawShow(playerid, PTD_Restaurant[playerid][8]);

	SelectTextDraw(playerid, 0x00FF00FF);
}

CMD:sair(playerid, params[])
{
	new id;
	if ((id = Bizz_Inside(playerid)) != -1)
	{
	    if(BizEntered[playerid] == id)
	    {
			SetPlayerInterior(playerid,0);
			SetPlayerVirtualWorld(playerid,0);
			PlayerData[playerid][pInterior] = 0;
			SetPlayerPos(playerid,BizInfo[id][bEntranceX],BizInfo[id][bEntranceY],BizInfo[id][bEntranceZ]);
			PlayerData[playerid][pLocal] = 255;
			PlayerData[playerid][pWorld] = 0;
			HouseEntered[playerid] = -1;
			BizEntered[playerid]=-1;
			grantbuild[playerid]=-1;

			if (PlayerData[playerid][pFreeze])
			{
			    KillTimer(PlayerData[playerid][pFreezeTimer]);

			    PlayerData[playerid][pFreeze] = 1;
			    TogglePlayerControllable(playerid, 1);
			}
		}
	}
	else if ((id = House_Inside(playerid)) != -1) {

		if(HouseEntered[playerid] == id)
		{
			SetCameraBehindPlayer(playerid);
			SetPlayerPos(playerid,HouseInfo[id][hEntranceX],HouseInfo[id][hEntranceY],HouseInfo[id][hEntranceZ]);
			SetPlayerVirtualWorld(playerid,0);
			SetPlayerInterior(playerid,0);
			PlayerData[playerid][pInterior] = 0;
			PlayerData[playerid][pWorld] = 0;
			HouseEntered[playerid] = -1;
			BizEntered[playerid]=-1;
			grantbuild[playerid]=-1;
			PlayerData[playerid][pLocal] = 255;

			if (PlayerData[playerid][pFreeze])
			{
			    KillTimer(PlayerData[playerid][pFreezeTimer]);

			    PlayerData[playerid][pFreeze] = 1;
			    TogglePlayerControllable(playerid, 1);
			}
			if(HouseInfo[id][hradioOn]) StopAudioStreamForPlayer(playerid);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1410.2965,-10.9775,1001.0098)) // PCESP ANDAR 1
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1243.7375,-1264.8912,15.6787);
		SetPlayerFacingAngle(playerid, 90.4584);
		PlayerData[playerid][pInterior] = 0;
		PlayerData[playerid][pWorld] = 0;
		PlayerData[playerid][pLocal] = 255;

		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 2344.9749,-647.6016,80162.4531)) // PMESP
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 706.7247,-588.8745,17.3375);
		SetPlayerFacingAngle(playerid, 90.4584);
		PlayerData[playerid][pInterior] = 0;
		PlayerData[playerid][pWorld] = 0;
		PlayerData[playerid][pLocal] = 255;

		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 1390.2905,-30.3338,1000.9183)) // PCESP ANDAR 2
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1400.2490,-12.1037,1001.0098);
		SetPlayerFacingAngle(playerid, 272.4080);
		PlayerData[playerid][pInterior] = 5;
		PlayerData[playerid][pLocal] = 101;
		PlayerData[playerid][pWorld] = 97;

		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 5.0, 2296.9138,2498.3650,-7.4531)) // GBESP GARAGEM
	{

		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Apenas o motorista do veiculo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 954.6230,-1467.4749,13.5547) ;
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi, 0);
			SetVehicleZAngle(vehi, 180);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}
			PlayerData[playerid][pInterior] = 0;
			PlayerData[playerid][pWorld] = 0;
			PlayerData[playerid][pLocal] = 255;
		}else{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 954.6230,-1467.4749,13.5547);
			SetPlayerFacingAngle(playerid, 180);
		}
		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, -1628.0112,690.6479,7.1875)) // PCESP GARAGEM
	{

		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Apenas o motorista do veiculo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 1229.6476,-1253.3733,15.6528) ;
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi, 0);
			SetVehicleZAngle(vehi, 180);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 0);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}
			PlayerData[playerid][pInterior] = 0;
			PlayerData[playerid][pWorld] = 0;
			PlayerData[playerid][pLocal] = 255;
		}else{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 1229.3035,-1243.7617,15.6528);
			SetPlayerFacingAngle(playerid, 180);
		}
		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 2318.3911,2446.4016,3.2734)) // PMESP GARAGEM
	{
		new PlayerNoCarro[4];
		new PlayerNoCarroL[4];
		new count = 0;
		new vehi = GetPlayerVehicleID(playerid);

		PlayerNoCarro[0] = 999;
		PlayerNoCarro[1] = 999;
		PlayerNoCarro[2] = 999;
		PlayerNoCarro[3] = 999;

		if(IsPlayerInAnyVehicle(playerid))
		{
			if(GetPlayerVehicleSeat(playerid) != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}ERRO: Apenas o motorista do veiculo pode utilizar o comando.");
			foreach(new pp : Player)
			{
				if(count < 4)
				{
					if(GetPlayerVehicleID(pp) == vehi)
					{
						PlayerNoCarro[count] = pp;
						PlayerNoCarroL[count] = GetPlayerVehicleSeat(pp);

						count++;
					}
				}
			}

			SetVehiclePos(vehi, 708.0598,-573.6811,14.9958) ;
			LinkVehicleToInterior(vehi, 0);
			SetVehicleVirtualWorld(vehi, 0);
			SetVehicleZAngle(vehi, 180);

			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			PutPlayerInVehicle(playerid, vehi, 180);

			for(new lug = 0; lug < 4; lug++)
			{
				if(PlayerNoCarro[lug] != 999)
				{
					if(IsPlayerConnected(PlayerNoCarro[lug])) {
						SetPlayerVirtualWorld(PlayerNoCarro[lug], 0);
						SetPlayerInterior(PlayerNoCarro[lug], 0);
						PutPlayerInVehicle(PlayerNoCarro[lug], vehi, PlayerNoCarroL[lug]);
					}
				}
			}
			PlayerData[playerid][pInterior] = 0;
			PlayerData[playerid][pWorld] = 0;
			PlayerData[playerid][pLocal] = 255;
		}else{
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
			SetPlayerPos(playerid, 708.0598,-573.6811,14.9958);
			SetPlayerFacingAngle(playerid, 180);
		}
		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}

		/*SetPlayerVirtualWorld(playerid, 500);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 708.0598,-573.6811,14.9958);
		SetVehiclePos(playerid, 708.0598,-573.6811,14.9958);
		SetPlayerFacingAngle(playerid, 180);*/
		PlayerData[playerid][pInterior] = 0;
		PlayerData[playerid][pWorld] = 500;
		PlayerData[playerid][pLocal] = 255;

		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, -501.3306,286.1074,2001.0950)) // City Hall
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1481.0662,-1771.3069,18.7958);
		SetPlayerFacingAngle(playerid, 357.5479);
		PlayerData[playerid][pInterior] = 0;
		PlayerData[playerid][pWorld] = 0;
		PlayerData[playerid][pLocal] = 255;

		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
	else if (IsPlayerInRangeOfPoint(playerid, 3.0, 169.1583,2783.4038,767.7469)) // Hospital
	{
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerInterior(playerid, 0);
		SetPlayerPos(playerid, 1173.1841,-1323.3143,15.3952);
		SetPlayerFacingAngle(playerid, 275.1958);
		PlayerData[playerid][pInterior] = 0;
		PlayerData[playerid][pWorld] = 0;
		PlayerData[playerid][pLocal] = 255;

		if (PlayerData[playerid][pFreeze])
		{
			KillTimer(PlayerData[playerid][pFreezeTimer]);

			PlayerData[playerid][pFreeze] = 1;
			TogglePlayerControllable(playerid, 1);
		}
	}
    /*new id;

	if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
	{
	  	if (EntranceData[id][entranceCustom])
			SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		else
			SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

		SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

		SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
		SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

		SetCameraBehindPlayer(playerid);
		PlayerData[playerid][pLocal] = Entrance_GetLink(playerid);
		return 1;
	}*/
	return 1;
}

CMD:criars(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar este comando.");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/criars [nome]");

	new id = Signal_Create(playerid, params);

	if (id == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode mais criar torres de rádio.");

	SendClientMessageEx(playerid, COLOR_GRAD1, "Você criou uma torre de rádio com o ID: %d", id);
	return 1;
}

CMD:editars(playerid, params[])
{
	new
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editars [id] [nome]");
	    SendClientMessage(playerid, COLOR_GREY, "Variaveis disponíveis: localizacao, alcance, nome");
		return 1;
	}
	if ((id < 0 || id >= MAX_SIGNALTOWER) || !SignalData[id][signalID])
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você identificou a torre de rádio incorreta.");

	if (!strcmp(type, "localizacao", true))
	{
	    GetPlayerPos(playerid, SignalData[id][signalX], SignalData[id][signalY], SignalData[id][signalZ]);

      	/*if (IsValidDynamicObject(SignalData[id][signalObject]))
			DestroyDynamicObject(SignalData[id][signalObject]);

     	SignalData[id][signalObject] = CA_CreateDynamicObject_SC(13758, SignalData[id][signalX], SignalData[id][signalY], SignalData[id][signalZ], 0.00, 0.00, 0.00);
*/
		Signal_Save(id);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s Você ajustou a posição da torre de rádio ID: %d", ReturnName(playerid), id);
	}
	else if (!strcmp(type, "nome", true))
	{
	    new name[64];

	    if (sscanf(string, "s[64]", name))
	        return SendSyntaxMessage(playerid, "/editars [id] [nome] [novo nome]");

	    format(SignalData[id][signalName], 64, name);

	    Signal_Save(id);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s Você ajustou a posição da torre de rádio ID: %d estáo \"%s\"", ReturnName(playerid), id, name);
	}
	else if (!strcmp(type, "alcance", true))
	{

	    new num;

	    if (sscanf(string, "d", num))
	        return SendSyntaxMessage(playerid, "/editars [id] [alcance] [número]");

	    SignalData[id][signalRange] = num;
	    Signal_Save(id);

	    SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s A fase do sinal. Torre de rádio ID: %d", ReturnName(playerid), id);
	}
	return 1;
}

CMD:destruirs(playerid, params[])
{
	new
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destruirs [id do sinal]");

	if ((id < 0 || id >= MAX_SIGNALTOWER) || !SignalData[id][signalExists])
	    return SendClientMessage(playerid, COLOR_GRAD1, "ID invalido");

	Signal_Delete(id);
	SendClientMessageEx(playerid, COLOR_GRAD1, "Você destruiu com sucesso. Torre de rádio ID: %d", id);
	return 1;
}

CMD:ir(playerid, params[])
{
	new pid, Float:x, Float:y, Float:z;
	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");
	if(sscanf(params,"u",pid)) return SendSyntaxMessage(playerid, "/ir [playerid]");

	if(pid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((pid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	GetPlayerPos(pid, x, y, z);
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER) SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
	else {
		if (PlayerData[playerid][pFreeze])
		{
		    KillTimer(PlayerData[playerid][pFreezeTimer]);
		    PlayerData[playerid][pFreeze] = 0;
		}
		SetPlayerPos(playerid, x, y ,z);
	}
    PlayerData[playerid][pInterior] = PlayerData[pid][pInterior];
    SetPlayerInterior(playerid, PlayerData[pid][pInterior]);

    PlayerData[playerid][pWorld] = PlayerData[pid][pWorld];
    SetPlayerVirtualWorld(playerid, PlayerData[pid][pWorld]);

    PlayerData[playerid][pLocal] = PlayerData[pid][pLocal];

    HouseEntered[playerid] = HouseEntered[pid];

    BizEntered[playerid] = BizEntered[pid];

 	SendClientMessageEx(playerid, COLOR_GRAD1, "Você foi até o player %s.", ReturnName(pid));
	return 1;
}

CMD:ircarro(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/ircarro [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD2, "ID do veículo é invalido.");

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	SetPlayerPos(playerid, x, y - 2, z + 2);

	return 1;
}

CMD:trazerveiculo(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/trazerveiculo [veh]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD2, "ID do veículo é invalido.");

	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x, y - 2, z + 2);

	return 1;
}


CMD:trazer(playerid, params[])
{
	new pid, Float:x, Float:y, Float:z;
	if (PlayerData[playerid][pAdmin] < 1) return  SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");
	if(sscanf(params,"u",pid)) return SendSyntaxMessage(playerid, "/trazer [playerid]");

	if(pid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((pid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	GetPlayerPos(playerid, x, y, z);
	if(GetPlayerState(pid) == PLAYER_STATE_DRIVER) SetVehiclePos(GetPlayerVehicleID(pid), x, y, z);
	else {
		if (PlayerData[pid][pFreeze])
		{
		    KillTimer(PlayerData[pid][pFreezeTimer]);
		    PlayerData[pid][pFreeze] = 0;
		}
		SetPlayerPos(pid, x, y ,z);
	}
    PlayerData[pid][pInterior] = PlayerData[playerid][pInterior];
    SetPlayerInterior(pid, PlayerData[playerid][pInterior]);

    PlayerData[pid][pWorld] = PlayerData[playerid][pWorld];
    SetPlayerVirtualWorld(pid, PlayerData[playerid][pWorld]);

    PlayerData[pid][pLocal] = PlayerData[playerid][pLocal];

    HouseEntered[pid] = HouseEntered[playerid];

    BizEntered[pid] = BizEntered[playerid];

    Log_Write("logs/admin_action.txt", "[%s] [/trazer] %s target: %s", ReturnDate(), ReturnName(playerid), ReturnName(pid));

 	SendClientMessageEx(pid, COLOR_WHITE, "Você foi removido pelo o administrador %s.", ReturnName(playerid));
	return 1;
}

CMD:congelar(playerid, params[])
{
	new
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/congelar [PlayerID/nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	TogglePlayerControllable(userid, 0);
	GameTextForPlayer(userid, "~w~Você foi congelado.", 2000, 3);
	//SendClientMessageEx(playerid, "You have frozen the movement %s", ReturnName(userid, 0));
	SendAdminAlert(COLOR_RED, "AdmCmd: %s Você foi congelado pelo o administrador %s.", ReturnName(userid, 0), ReturnName(playerid));
	return 1;
}

CMD:tapa(playerid, params[])
{
	new targetid,Float:slx, Float:sly, Float:slz;
	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params,"d",targetid)) return SendSyntaxMessage(playerid, "/tapa [playerid]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	GetPlayerPos(targetid, slx, sly, slz);
	SetPlayerPos(targetid, slx, sly, slz+5);
	PlayerPlaySound(targetid, 1130, slx, sly, slz+5);
	return 1;
}

CMD:descongelar(playerid, params[])
{
	new
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/descongelar [PlayerID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

    PlayerData[playerid][pFreeze] = 0;
    GameTextForPlayer(userid, "~w~Descongelado.", 2000, 3);
	TogglePlayerControllable(userid, 1);
	SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s descongelou o jogador %s.", ReturnName(userid), ReturnName(playerid));
	//SendAdminAction(playerid, "You freeze the movement of the %s", ReturnName(userid, 0));
	return 1;
}
CMD:irpizza(playerid)
{
	if(PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	SetPlayerPos(playerid, 2087.6670,-1806.5240,13.5469);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, COLOR_GRAD1, "Você foi até uma pizzaria!");
	return 1;
}
CMD:irls(playerid)
{
	if(PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	SetPlayerPos(playerid, 1529.6,-1691.2,13.3);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, COLOR_GRAD1, "Você foi para Los Santos.");
	return 1;
}
CMD:irsf(playerid)
{
    if(PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	SetPlayerPos(playerid, -1973.3322,138.0420,27.6875);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	SendClientMessage(playerid, COLOR_GRAD1, "Você foi para San Fierro.");
	return 1;
}

CMD:irpos(playerid, params[]) {
    new Float:Pos[3], int;
	if(PlayerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params, "fffi", Pos[0], Pos[1], Pos[2], int)) return SendSyntaxMessage(playerid, "/irpos [x] [y] [z] [int]");
	SetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
	SetPlayerInterior(playerid, int);
	return 1;
}

CMD:ircp(playerid, params[]) {
	if(gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE) return 1;
	if(PlayerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	SetPlayerPosEx(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:irrcp(playerid, params[]) {
	if(PlayerData[playerid][pCP_Type] == -1) return 1;
	if(PlayerData[playerid][pAdmin] < 4) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	SetPlayerPosEx(playerid, PlayerData[playerid][pCP_X], PlayerData[playerid][pCP_Y], PlayerData[playerid][pCP_Z]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:trabalho(playerid, params[])
{
	new type = GetFactionType(playerid);
 	if (type == FACTION_POLICE)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 2329.7139,-650.3033,80162.4531)) {

	  		if (!PlayerData[playerid][pOnDuty])
	    	{
                ResetWeapons(playerid);
                GivePlayerWeaponEx(playerid, 41, 5000);
                GivePlayerWeaponEx(playerid, 3, 1);
                GivePlayerWeaponEx(playerid, 24, 150);

	          	PlayerData[playerid][pOnDuty] = true;
	    		SetPlayerArmour(playerid, 100.0);
	    		SetPlayerHealthEx(playerid, 100.0);
	        	SetFactionColor(playerid);
	        	if(PlayerData[playerid][pChar] > 0)
	       		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu colete e equipamentos em seu armário pessoal.", ReturnName(playerid, 0));

				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "** COPOM: %s %s começou a trabalhar neste momento! **", Faction_GetRank(playerid), ReturnName(playerid, 0));
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				PlayerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);
				SetPlayerSkin(playerid, PlayerData[playerid][pModel]);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guarda seu equipamento em seu armário pessoal.", ReturnName(playerid, 0));

				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "** COPOM: %s %s saiu do trabalho agora! **", Faction_GetRank(playerid), ReturnName(playerid, 0));
	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no vestiário!");

 	}
 	if (type == FACTION_SASD)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1372.3121,-26.7843,1000.9219)) {

	  		if (!PlayerData[playerid][pOnDuty])
	    	{
                ResetWeapons(playerid);
                GivePlayerWeaponEx(playerid, 24, 150);

	          	PlayerData[playerid][pOnDuty] = true;
	    		SetPlayerArmour(playerid, 100.0);
	    		SetPlayerHealthEx(playerid, 100.0);
	        	SetFactionColor(playerid);
	        	if(PlayerData[playerid][pChar] > 0)
	       		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pega seu distintivo e seu equipamento em seu armário pessoal.", ReturnName(playerid, 0));

				SendFactionMessageEx(FACTION_SASD, COLOR_RADIO, "** CEPOL: %s %s começou a trabalhar neste momento! **", Faction_GetRank(playerid), ReturnName(playerid, 0));
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				PlayerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);
				SetPlayerSkin(playerid, PlayerData[playerid][pModel]);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guarda seu distintivo e equipamento no armário pessoal.", ReturnName(playerid, 0));

				SendFactionMessageEx(FACTION_SASD, COLOR_RADIO, "** CEPOL: %s %s saiu do trabalho agora! **", Faction_GetRank(playerid), ReturnName(playerid, 0));
	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no vestiário!");

 	}
	else if (type == FACTION_MEDIC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 959.5063,-1440.9656,13.5387)) {
	  		if (!PlayerData[playerid][pOnDuty])
	    	{
	    	    ResetWeapons(playerid);
	          	PlayerData[playerid][pOnDuty] = true;
	    		SetPlayerArmour(playerid, 100.0);
	    		SetPlayerHealthEx(playerid, 150.0);
	        	SetFactionColor(playerid);

				SendFactionMessageEx(FACTION_MEDIC, COLOR_RADIO, "** COBOM: %s %s começou o trabalho neste exato momento! **", Faction_GetRank(playerid), ReturnName(playerid, 0));
	  		}
	 		else
	  		{
	  		    ResetWeapons(playerid);
	  		    SetPlayerWeapons(playerid);
				PlayerData[playerid][pOnDuty] = false;
			 	SetPlayerArmour(playerid, 0.0);
				SetPlayerColor(playerid, DEFAULT_COLOR);

				SendFactionMessageEx(FACTION_MEDIC, COLOR_RADIO, "** COBOM: %s %s saiu do trabalho agora! **", Faction_GetRank(playerid), ReturnName(playerid, 0));

	     	}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no vestiário!");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você não é um membro da equipe!");

	return 1;
}

CMD:uniforme(playerid, params[])
{
	new skinid, type = GetFactionType(playerid);

 	if (type == FACTION_POLICE)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 2329.7139,-650.3033,80162.4531)) {

		    if (sscanf(params, "d", skinid)) {
				SendSyntaxMessage(playerid, "/uniforme [id]");
				SendClientMessage(playerid, COLOR_GRAD4, "0: Fora de serviço");
				SendClientMessage(playerid, COLOR_GRAD4, "1-51: Policial");
		        return 1;
		    }

		    if(skinid < 0 || skinid > 51) return SendClientMessage(playerid, COLOR_GRAD2, "O ID deve estar entre 0 e 51!");

			switch(skinid)
			{
			    case 0: SetPlayerSkin(playerid, PlayerData[playerid][pModel]);
			    case 1:
			    {
				  	SetPlayerSkin(playerid, 20100);
					PlayerData[playerid][pChar] = 20100;
			    }
			    case 2:
			    {
				  	SetPlayerSkin(playerid, 20101);
					PlayerData[playerid][pChar] = 20101;
			    }
			    case 3:
			    {
				  	SetPlayerSkin(playerid, 20102);
					PlayerData[playerid][pChar] = 20102;
			    }
			    case 4:
			    {
				  	SetPlayerSkin(playerid, 20104);
					PlayerData[playerid][pChar] = 20104;
			    }
			    case 5:
			    {
				  	SetPlayerSkin(playerid, 20106);
					PlayerData[playerid][pChar] = 20106;
			    }
			    case 6:
			    {
				  	SetPlayerSkin(playerid, 20107);
					PlayerData[playerid][pChar] = 20107;
			    }
			    case 7:
			    {
				  	SetPlayerSkin(playerid, 20108);
					PlayerData[playerid][pChar] = 20108;
			    }
			    case 8:
			    {
				  	SetPlayerSkin(playerid, 20109);
					PlayerData[playerid][pChar] = 20109;
			    }
			    case 9:
			    {
				  	SetPlayerSkin(playerid, 20110);
					PlayerData[playerid][pChar] = 20110;
			    }
			    case 10:
			    {
				  	SetPlayerSkin(playerid, 20111);
					PlayerData[playerid][pChar] = 20111;
			    }
			    case 11:
			    {
				  	SetPlayerSkin(playerid, 20112);
					PlayerData[playerid][pChar] = 20112;
			    }
			    case 12:
			    {
				  	SetPlayerSkin(playerid, 20113);
					PlayerData[playerid][pChar] = 20113;
			    }
			    case 13:
			    {
				  	SetPlayerSkin(playerid, 20114);
					PlayerData[playerid][pChar] = 20114;
			    }
			    case 14:
			    {
				  	SetPlayerSkin(playerid, 20115);
					PlayerData[playerid][pChar] = 20115;
			    }
			    case 16:
			    {
				  	SetPlayerSkin(playerid, 20116);
					PlayerData[playerid][pChar] = 20116;
			    }
			    case 17:
			    {
				  	SetPlayerSkin(playerid, 20117);
					PlayerData[playerid][pChar] = 20117;
			    }
			    case 18:
			    {
				  	SetPlayerSkin(playerid, 20118);
					PlayerData[playerid][pChar] = 20118;
			    }
			    case 19:
			    {
				  	SetPlayerSkin(playerid, 20119);
					PlayerData[playerid][pChar] = 20119;
			    }
			    case 20:
			    {
				  	SetPlayerSkin(playerid, 20120);
					PlayerData[playerid][pChar] = 20120;
			    }
			    case 21:
			    {
				  	SetPlayerSkin(playerid, 20121);
					PlayerData[playerid][pChar] = 20121;
			    }
			    case 22:
			    {
				  	SetPlayerSkin(playerid, 20122);
					PlayerData[playerid][pChar] = 20122;
			    }
			    case 23:
			    {
				  	SetPlayerSkin(playerid, 20123);
					PlayerData[playerid][pChar] = 20123;
			    }
			    case 24:
			    {
				  	SetPlayerSkin(playerid, 20124);
					PlayerData[playerid][pChar] = 20124;
			    }
			    case 25:
			    {
				  	SetPlayerSkin(playerid, 20125);
					PlayerData[playerid][pChar] = 20125;
			    }
			    case 26:
			    {
				  	SetPlayerSkin(playerid, 20126);
					PlayerData[playerid][pChar] = 20126;
			    }
			    case 27:
			    {
				  	SetPlayerSkin(playerid, 20127);
					PlayerData[playerid][pChar] = 20127;
			    }
			    case 28:
			    {
				  	SetPlayerSkin(playerid, 20128);
					PlayerData[playerid][pChar] = 20128;
			    }
			    case 29:
			    {
				  	SetPlayerSkin(playerid, 20129);
					PlayerData[playerid][pChar] = 20129;
			    }
			    case 30:
			    {
				  	SetPlayerSkin(playerid, 20130);
					PlayerData[playerid][pChar] = 20130;
			    }
			    case 31:
			    {
				  	SetPlayerSkin(playerid, 20131);
					PlayerData[playerid][pChar] = 20131;
			    }
			    case 32:
			    {
				  	SetPlayerSkin(playerid, 20132);
					PlayerData[playerid][pChar] = 20132;
			    }
			    case 33:
			    {
				  	SetPlayerSkin(playerid, 20133);
					PlayerData[playerid][pChar] = 20133;
			    }
			    case 34:
			    {
				  	SetPlayerSkin(playerid, 20134);
					PlayerData[playerid][pChar] = 20134;
			    }
			    case 35:
			    {
				  	SetPlayerSkin(playerid, 20135);
					PlayerData[playerid][pChar] = 20135;
			    }
			    case 36:
			    {
				  	SetPlayerSkin(playerid, 20136);
					PlayerData[playerid][pChar] = 20136;
			    }
			    case 37:
			    {
				  	SetPlayerSkin(playerid, 20137);
					PlayerData[playerid][pChar] = 20137;
			    }
			    case 38:
			    {
				  	SetPlayerSkin(playerid, 20138);
					PlayerData[playerid][pChar] = 20138;
			    }
			    case 39:
			    {
				  	SetPlayerSkin(playerid, 20139);
					PlayerData[playerid][pChar] = 20139;
			    }
			    case 40:
			    {
				  	SetPlayerSkin(playerid, 20140);
					PlayerData[playerid][pChar] = 20140;
			    }
			    case 41:
			    {
				  	SetPlayerSkin(playerid, 20141);
					PlayerData[playerid][pChar] = 20141;
			    }
			    case 42:
			    {
				  	SetPlayerSkin(playerid, 20142);
					PlayerData[playerid][pChar] = 20142;
			    }
			    case 43:
			    {
				  	SetPlayerSkin(playerid, 20143);
					PlayerData[playerid][pChar] = 20143;
			    }
			    case 44:
			    {
				  	SetPlayerSkin(playerid, 20144);
					PlayerData[playerid][pChar] = 20144;
			    }
			    case 45:
			    {
				  	SetPlayerSkin(playerid, 20145);
					PlayerData[playerid][pChar] = 20145;
			    }
			    case 46:
			    {
				  	SetPlayerSkin(playerid, 20146);
					PlayerData[playerid][pChar] = 20146;
			    }
			    case 47:
			    {
				  	SetPlayerSkin(playerid, 20147);
					PlayerData[playerid][pChar] = 20147;
			    }
			    case 48:
			    {
				  	SetPlayerSkin(playerid, 20148);
					PlayerData[playerid][pChar] = 20148;
			    }
			    case 49:
			    {
				  	SetPlayerSkin(playerid, 20149);
					PlayerData[playerid][pChar] = 20149;
			    }
			    case 50:
			    {
				  	SetPlayerSkin(playerid, 20150);
					PlayerData[playerid][pChar] = 20150;
			    }
			    case 51:
			    {
				  	SetPlayerSkin(playerid, 20151);
					PlayerData[playerid][pChar] = 20151;
			    }
			}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no vestiário!");
 	}
 	else if (type == FACTION_SASD)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1372.3121,-26.7843,1000.9219)) {

		    if (sscanf(params, "d", skinid)) {
				SendSyntaxMessage(playerid, "/uniforme [id]");
				SendClientMessage(playerid, COLOR_GRAD4, "0: Fora de serviço");
				SendClientMessage(playerid, COLOR_GRAD4, "1-3: Policial");
		        return 1;
		    }

		    if(skinid < 0 || skinid > 3) return SendClientMessage(playerid, COLOR_GRAD2, "O ID deve estar entre 0 e 3!");

			switch(skinid)
			{
			    case 0: SetPlayerSkin(playerid, PlayerData[playerid][pModel]);
			    case 1:
			    {
				  	SetPlayerSkin(playerid, 20200);
					PlayerData[playerid][pChar] = 20200;
			    }
			    case 2:
			    {
				  	SetPlayerSkin(playerid, 20201);
					PlayerData[playerid][pChar] = 20201;
			    }
			    case 3:
			    {
				  	SetPlayerSkin(playerid, 20202);
					PlayerData[playerid][pChar] = 20202;
			    }
			}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no vestiário!");
 	}
	else if (type == FACTION_MEDIC)
 	{
 	    if (IsPlayerInRangeOfPoint(playerid, 3.0, 959.5063,-1440.9656,13.5387)) {

		    if (sscanf(params, "d", skinid)) {
				SendSyntaxMessage(playerid, "/uniforme [id]");
				SendClientMessage(playerid, COLOR_GRAD4, "0: Fora de serviço");
				SendClientMessage(playerid, COLOR_GRAD4, "1-15: médico");
		        return 1;
		    }

		    if(skinid < 0 || skinid > 15) return SendClientMessage(playerid, COLOR_GRAD2, "O ID deve estar entre 0 e 15!");

			switch(skinid)
			{
			    case 0: SetPlayerSkin(playerid, PlayerData[playerid][pModel]);
			    case 1:
			    {
				  	SetPlayerSkin(playerid, 20300);
					PlayerData[playerid][pChar] = 20300;
			    }
			    case 2:
			    {
				  	SetPlayerSkin(playerid, 20301);
					PlayerData[playerid][pChar] = 20301;
			    }
			    case 3:
			    {
				  	SetPlayerSkin(playerid, 20302);
					PlayerData[playerid][pChar] = 20302;
			    }
			    case 4:
			    {
				  	SetPlayerSkin(playerid, 20302);
					PlayerData[playerid][pChar] = 20302;
			    }
			    case 5:
			    {
				  	SetPlayerSkin(playerid, 20303);
					PlayerData[playerid][pChar] = 20303;
			    }
			    case 6:
			    {
				  	SetPlayerSkin(playerid, 20304);
					PlayerData[playerid][pChar] = 20304;
			    }
			    case 7:
			    {
				  	SetPlayerSkin(playerid, 20305);
					PlayerData[playerid][pChar] = 20305;
			    }
			    case 8:
			    {
				  	SetPlayerSkin(playerid, 20306);
					PlayerData[playerid][pChar] = 20306;
			    }
			    case 9:
			    {
				  	SetPlayerSkin(playerid, 20307);
					PlayerData[playerid][pChar] = 20307;
			    }
			    case 10:
			    {
				  	SetPlayerSkin(playerid, 20308);
					PlayerData[playerid][pChar] = 20308;
			    }
			    case 11:
			    {
				  	SetPlayerSkin(playerid, 20309);
					PlayerData[playerid][pChar] = 20309;
			    }
			    case 12:
			    {
				  	SetPlayerSkin(playerid, 20310);
					PlayerData[playerid][pChar] = 20310;
			    }
			    case 13:
			    {
				  	SetPlayerSkin(playerid, 20311);
					PlayerData[playerid][pChar] = 20312;
			    }
			    case 14:
			    {
				  	SetPlayerSkin(playerid, 20313);
					PlayerData[playerid][pChar] = 20313;
			    }
			    case 15:
			    {
				  	SetPlayerSkin(playerid, 20314);
					PlayerData[playerid][pChar] = 20314;
			    }
			}
 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no vestiário!");
 	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você não é um membro da equipe!");

	return 1;
}

/*CMD:clothes(playerid, params[])
{
 	if (GetFactionType(playerid) == FACTION_POLICE)
 	{
 	    if (IsNearFactionSpawn(playerid)) {

			new clothid;
	  		if (sscanf(params, "d", clothid))
	    		return SendSyntaxMessage(playerid, "/clothes [id(1-12)]");

			switch(clothid)
			{
			    case 0:
			}

 	    }
 	    else SendClientMessage(playerid, COLOR_GRAD2, "You are not in the locker room !");

 	}
	else SendClientMessage(playerid, COLOR_GRAD1, "You are not a cop !");

	return 1;
}*/

CMD:perto(playerid, params[])
{
	new
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

    if ((id = GetClosestSignal(playerid)) != -1)
	    SendClientMessageEx(playerid, COLOR_GRAD1, "Você está perto da torre de rádio de ID: %d", id);

    if ((id = nearHouse_var[playerid]) != -1)
        SendClientMessageEx(playerid, COLOR_GRAD1, "Você está perto da casa de ID: %d", id);

    if ((id = Bizz_Nearest(playerid)) != -1)
        SendClientMessageEx(playerid, COLOR_GRAD1, "Você está perto do negócio de ID: %d", id);

    if ((id = Warehouse_Nearest(playerid)) != -1)
        SendClientMessageEx(playerid, COLOR_GRAD1, "Você está perto do armazenamento de ID: %d", id);

	return 1;
}

CMD:deixararma(playerid, params[])
{
    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nível 2 ou mais.");


	SendClientMessage(playerid, COLOR_LIGHTRED, "Para dropar sua arma, digite /deixararma [ID]");

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] != 0 && PlayerData[playerid][pAmmo][i] != 0) {
	    	SendClientMessageEx(playerid, COLOR_GREY, "[ID: %d] Arma:[%s] - munição:[%d]", PlayerData[playerid][pGuns][i], ReturnWeaponName(PlayerData[playerid][pGuns][i]), PlayerData[playerid][pAmmo][i]);
		}
	}
	return 1;
}

CMD:armac(playerid, params[])
{
	new option[16], weaponname[64], value[64];

	if (sscanf(params, "s[16]S()[64]S()[64]", option, weaponname, value)) {
	//{FF6347}
		SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /armac [ajustar / bone / ocultar / resetar]");
	    return 1;
	}

	if(!strcmp(option, "ajustar", true))
	{
		if(strlen(weaponname)) {
		    new weaponid = -1;
			if((weaponid = GetWeaponByName(weaponname)) != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {
					SetPlayerAttachedObject(playerid, FREESLOT9, GetGunObjectID(weaponid), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					EditAttachedObject(playerid, FREESLOT9);

					SetPVarInt(playerid, "AttachSlot", slot);

				 	BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_EDITWEAPON);

			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} está arma não suporta edição.");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Parametro não reconhecido. %s", weaponname);
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /armac [ajustar] [nome da arma/id]");
	}
	else if(!strcmp(option, "bone", true))
	{
	    new boneid, weaponid = GetWeaponByName(weaponname);
		if(strlen(weaponname) && !sscanf(params, "{s[16]S()[64]}d", boneid)) {

			if(boneid < 1 || boneid > 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Bones apenas entre 1 e 10");

			if(weaponid != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {

			        PlayerAttachWeapon[playerid][slot][awBone] = boneid;

					SetPlayerAttachedObject(playerid, FREESLOT9, GetGunObjectID(weaponid), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					EditAttachedObject(playerid, FREESLOT9);

					SetPVarInt(playerid, "AttachSlot", slot);

				 	BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_EDITWEAPON);

			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} está arma não suporta edição.");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Parametro não reconhecido. %s", weaponname);
		} else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /armac [bone] [nome da arma/id] [bone id]");
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} Bone: 1 (Coluna), 3 (braço esquerdo), 4 (braço direito), 5 (mão esquerda), 6 (mão direita)");
            SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} 7 (braço esquerdo superior), 8 (Coxa direita), 9 (perna esquerdo) e 10 (perna direito)");
		}
	}
	else if(!strcmp(option, "ocultar", true))
	{
		if(strlen(weaponname)) {
		    new weaponid = -1;
			if((weaponid = GetWeaponByName(weaponname)) != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {

			        if(weaponid > 24) return SendClientMessage(playerid, COLOR_LIGHTRED, "Apenas armas pequenas.");

					if(PlayerAttachWeapon[playerid][slot][awHide])
					{
					    PlayerAttachWeapon[playerid][slot][awHide] = 0;
					    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Você definiu um número de arma. %d mostrar", weaponid);
					}
					else {
					    PlayerAttachWeapon[playerid][slot][awHide] = 1;
					    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Você definiu um número de arma. %d não mostrar", weaponid);
					}
			        UpdatePlayerAttachWeapon(playerid, slot);
     				cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));

			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF}  está arma não suporta edição.");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Parametro não reconhecido. %s", weaponname);
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /armac [ocultar] [nome da arma/id]");
	}
	else if(!strcmp(option, "resetar", true))
	{
		if(strlen(weaponname)) {
		    new weaponid = -1;
			if((weaponid = GetWeaponByName(weaponname)) != -1) {
			    new slot = g_aWeaponAttach[weaponid];
			    if(slot != -1) {
			        SetPVarInt(playerid, "ResetWeaponid", weaponid);
					SetPVarInt(playerid, "ResetWeaponSlot", slot);
					Dialog_Show(playerid, WeaponReset, DIALOG_STYLE_MSGBOX, "Você tem certeza?", "Tem certeza que deseja resetar sua arma?", "Sim", "não");
			    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} está arma não suporta edição.");
			} else SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF} Parametro não reconhecido. %s", weaponname);
		} else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /armac [resetar] [nome da arma/id]");
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_LIGHTRED, "USE:{FFFFFF} /armac [ajustar / bone / ocultar / resetar]");
	}
	return 1;
}

Dialog:WeaponReset(playerid, response, listitem, inputtext[])
{
	if(response) {
		new slot = GetPVarInt(playerid, "ResetWeaponSlot");
		PlayerAttachWeapon[playerid][slot][awHide] = 0;
		PlayerAttachWeapon[playerid][slot][awBone] = 1;
		PlayerAttachWeapon[playerid][slot][aPx] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPy] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPz] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPrx] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPry] = 0.0;
		PlayerAttachWeapon[playerid][slot][aPrz] = 0.0;
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ]{FFFFFF} %s seu reset", ReturnWeaponName(GetPVarInt(playerid, "ResetWeaponid")));
		UpdatePlayerAttachWeapon(playerid, slot);
		cl_DressHoldWeapon(playerid, GetPlayerWeapon(playerid));
	}
	DeletePVar(playerid, "ResetWeaponSlot");
	DeletePVar(playerid, "ResetWeaponid");
	return 1;
}
CMD:palcopref(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= 5)
	{
	    if(StatusPalco == 0)
	    {
	        StatusPalco = 1;
			ObjPalco[0] = CreateDynamicObject(16092, 1472.28015, -1679.83911, 13.04093,   0.00000, 0.00000, 0.00000);
			ObjPalco[1] = CreateDynamicObject(16092, 1485.82019, -1679.83911, 13.04090,   0.00000, 0.00000, 0.00000);
			ObjPalco[2] = CreateDynamicObject(16092, 1479.04834, -1686.57324, 13.04090,   0.00000, 0.00000, 90.00000);
			ObjPalco[3] = CreateDynamicObject(16092, 1479.04834, -1673.09314, 13.04090,   0.00000, 0.00000, 90.00000);
			ObjPalco[4] = CreateDynamicObject(16092, 1479.04834, -1673.09314, 6.44090,   0.00000, 0.00000, 90.00000);
			ObjPalco[5] = CreateDynamicObject(16092, 1479.04834, -1686.57324, 6.42090,   0.00000, 0.00000, 90.00000);
			ObjPalco[6] = CreateDynamicObject(16092, 1472.28015, -1679.83911, 6.42090,   0.00000, 0.00000, 0.00000);
			ObjPalco[7] = CreateDynamicObject(16092, 1485.82019, -1679.83911, 6.40090,   0.00000, 0.00000, 0.00000);
			ObjPalco[8] = CreateDynamicObject(16000, 1479.94226, -1680.00854, 21.19600,   -90.00000, 0.00000, 0.00000);
			ObjPalco[9] = CreateDynamicObject(16000, 1479.98535, -1680.11060, 21.19600,   -90.00000, 0.00000, 180.00000);
			ObjPalco[10] = CreateDynamicObject(16000, 1478.90735, -1672.32312, 10.51910,   0.00000, 0.00000, -180.00000);
			ObjPalco[11] = CreateDynamicObject(2395, 1474.57056, -1672.33044, 14.45425,   0.00000, 0.00000, 0.00000);
			ObjPalco[12] = CreateDynamicObject(2395, 1473.60059, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[13] = CreateDynamicObject(2395, 1477.32056, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[14] = CreateDynamicObject(2395, 1481.04065, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[15] = CreateDynamicObject(2395, 1483.44055, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[16] = CreateDynamicObject(2395, 1471.96057, -1674.97925, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[17] = CreateDynamicObject(2395, 1483.44055, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[18] = CreateDynamicObject(2395, 1483.44055, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[19] = CreateDynamicObject(2395, 1483.44055, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[20] = CreateDynamicObject(2395, 1483.44055, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[21] = CreateDynamicObject(2395, 1483.44055, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[22] = CreateDynamicObject(2395, 1481.04065, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[23] = CreateDynamicObject(2395, 1481.04065, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[24] = CreateDynamicObject(2395, 1481.04065, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[25] = CreateDynamicObject(2395, 1481.04065, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[26] = CreateDynamicObject(2395, 1481.04065, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[27] = CreateDynamicObject(2395, 1477.32056, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[28] = CreateDynamicObject(2395, 1477.32056, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[29] = CreateDynamicObject(2395, 1477.32056, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[30] = CreateDynamicObject(2395, 1477.32056, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[31] = CreateDynamicObject(2395, 1477.32056, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[32] = CreateDynamicObject(2395, 1473.60059, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[33] = CreateDynamicObject(2395, 1473.60059, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[34] = CreateDynamicObject(2395, 1473.60059, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[35] = CreateDynamicObject(2395, 1473.60059, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[36] = CreateDynamicObject(2395, 1473.60059, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[37] = CreateDynamicObject(2395, 1471.96057, -1677.71924, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[38] = CreateDynamicObject(2395, 1471.96057, -1680.45923, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[39] = CreateDynamicObject(2395, 1471.96057, -1683.19922, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[40] = CreateDynamicObject(2395, 1471.96057, -1685.93921, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[41] = CreateDynamicObject(2395, 1471.96057, -1687.49915, 14.78340,   -90.00000, 0.00000, 0.00000);
			ObjPalco[42] = CreateDynamicObject(2232, 1473.67200, -1686.46338, 15.33050,   0.00000, 0.00000, 33.00000);
			ObjPalco[43] = CreateDynamicObject(2232, 1484.39783, -1686.68274, 15.33050,   0.00000, 0.00000, -33.00000);
			ObjPalco[44] = CreateDynamicObject(2491, 1479.76038, -1683.85291, 14.15540,   -11.00000, 0.00000, 0.00000);
			ObjPalco[45] = CreateDynamicObject(3876, 1472.58289, -1712.82141, -32.92000,   0.00000, 0.00000, 0.00000);
			ObjPalco[46] = CreateDynamicObject(3398, 1472.49878, -1712.49109, 13.03996,   0.00000, 0.00000, 0.00000);
			ObjPalco[47] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 21.13860,   0.00000, 90.00000, 0.00000);
			ObjPalco[48] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 21.49860,   0.00000, 90.00000, 0.00000);
			ObjPalco[49] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 20.77860,   0.00000, 90.00000, 0.00000);
			ObjPalco[50] = CreateDynamicObject(2229, 1471.86841, -1712.94348, 20.41860,   0.00000, 90.00000, 0.00000);
			ObjPalco[51] = CreateDynamicObject(3398, 1485.55505, -1712.47937, 13.03890,   0.00000, 0.00000, 0.00000);
			ObjPalco[52] = CreateDynamicObject(3876, 1485.53113, -1712.73962, -32.92000,   0.00000, 0.00000, 0.00000);
			ObjPalco[53] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 21.49860,   0.00000, 90.00000, 0.00000);
			ObjPalco[54] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 21.13860,   0.00000, 90.00000, 0.00000);
			ObjPalco[55] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 20.77860,   0.00000, 90.00000, 0.00000);
			ObjPalco[56] = CreateDynamicObject(2229, 1484.78918, -1712.79004, 20.41860,   0.00000, 90.00000, 0.00000);
			ObjPalco[57] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 20.77860,   0.00000, 90.00000, -180.00000);
			ObjPalco[58] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 21.13860,   0.00000, 90.00000, -180.00000);
			ObjPalco[59] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 21.49860,   0.00000, 90.00000, -180.00000);
			ObjPalco[60] = CreateDynamicObject(2229, 1486.18787, -1712.31653, 20.41860,   0.00000, 90.00000, -180.00000);
			ObjPalco[61] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 20.77860,   0.00000, 90.00000, -180.00000);
			ObjPalco[62] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 21.13860,   0.00000, 90.00000, -180.00000);
			ObjPalco[63] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 21.49860,   0.00000, 90.00000, -180.00000);
			ObjPalco[64] = CreateDynamicObject(2229, 1473.25903, -1712.37256, 20.41860,   0.00000, 90.00000, -180.00000);
			ObjPalco[65] = CreateDynamicObject(11472, 1472.62219, -1678.60693, 11.70480,   0.00000, 0.00000, 0.00000);
			SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}USE:{FFFFFF} Palco da prefeitura criado.");
		}
		else
		{
		    StatusPalco = 0;
		    for(new i = 0; i < 66; i++) if(IsValidDynamicObject(ObjPalco[i])) DestroyDynamicObject(ObjPalco[i]);
		    SendClientMessage(playerid, -1, "{33AA33}Você destruiu o palco da prefeitura de LS.");
		}
	}
	return 1;
}
CMD:deixararmas(playerid, params[])
{
	new weaponid, bool:success;

	if (sscanf(params, "d", weaponid))
	    return SendSyntaxMessage(playerid, "/deixararmas [ID]");

    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nível 2 ou mais.");

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] == weaponid) {

		    if(PlayerData[playerid][pGuns][i] == PlayerData[playerid][pGun1])
		        PlayerData[playerid][pGun1] = 0, PlayerData[playerid][pAmmo1] = 0;

		    if(PlayerData[playerid][pGuns][i] == PlayerData[playerid][pGun2])
		        PlayerData[playerid][pGun2] = 0, PlayerData[playerid][pAmmo2] = 0, PlayerData[playerid][pPLicense] = 0;

		    if(PlayerData[playerid][pGuns][i] == PlayerData[playerid][pGun3])
		        PlayerData[playerid][pGun3] = 0, PlayerData[playerid][pAmmo3] = 0, PlayerData[playerid][pSLicense] = 0;

	    	RemoveWeapon(playerid, weaponid);

         	#define SPEED (4.0)
			#define Z_SPEED (4.0)
			#define GRAVITY (13.0)

			new Float:x, Float:y, Float:z, Float:ang;
			GetPlayerPos(playerid, x, y, z);

			GetPlayerFacingAngle(playerid, ang);
			new object = CreateObject(GetGunObjectID(weaponid), x, y - 0.5 * floatcos(-(ang + 90.0), degrees), z, 93.7, 120.0, ang + 60.0);
			PHY_InitObject(object);
			PHY_SetObjectVelocity(object, SPEED * floatsin(-ang, degrees), SPEED * floatcos(-ang, degrees), Z_SPEED);
			PHY_SetObjectFriction(object, 100); // This will stop the object when it touchs the ground.
			PHY_SetObjectGravity(object, GRAVITY);
			PHY_SetObjectZBound(object, z - 1.0, _, 0.0);
			ApplyAnimation(playerid,"GRENADE","WEAPON_throwu",3.0,0,0,0,0,0);
	    	SetTimerEx("DeleteObject", 1500, false, "d", object);
	    	//SendClientMessageEx(playerid, COLOR_GREY, "You have left %s", ReturnWeaponName(weaponid));
	    	success = true;
			break;
		}
	}

	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem está arma.");

	return 1;
}

CMD:dropararma(playerid, params[])
{

    if( GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid) )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode deixar sua arma aqui.");

  	if( GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK )
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está agaixado.");

	new
	    weaponid,
	    Float:x,
	    Float:y,
	    Float:z;

	if (sscanf(params, "d", weaponid))
	    return SendClientMessage(playerid, COLOR_WHITE, "/dropararma weapon_id (use /armas)");

    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nível 2 ou mais.");

	if (weaponid && PlayerData[playerid][pGun1] == weaponid || PlayerData[playerid][pGun2] == weaponid || PlayerData[playerid][pGun3] == weaponid) {

  		GetPlayerPos(playerid, x, y, z);

		if(PlayerData[playerid][pGun1] == weaponid)
		{
			DropGun(playerid, PlayerData[playerid][pGun1], PlayerData[playerid][pAmmo1], _, x, y, z);
			PlayerData[playerid][pGun1] = 0, PlayerData[playerid][pAmmo1] = 0;
		}
		else if(PlayerData[playerid][pGun2] == weaponid)
		{
        	DropGun(playerid, PlayerData[playerid][pGun2], PlayerData[playerid][pAmmo2], PlayerData[playerid][pPLicense], x, y, z);
         	PlayerData[playerid][pGun2] = 0, PlayerData[playerid][pAmmo2] = 0, PlayerData[playerid][pPLicense] = 0;
		}
		else if(PlayerData[playerid][pGun3] == weaponid)
		{
			DropGun(playerid, PlayerData[playerid][pGun3], PlayerData[playerid][pAmmo3], PlayerData[playerid][pSLicense], x, y, z);
			PlayerData[playerid][pGun3] = 0, PlayerData[playerid][pAmmo3] = 0, PlayerData[playerid][pSLicense] = 0;
		}

	 	RemoveWeapon(playerid, weaponid);
	 	SendClientMessage(playerid, COLOR_WHITE, "/pegararma para pegar sua arma.");
	 	SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] {FFFFFF}A arma irá desaparecer se não for apanhada em 30 minutos!");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Desculpe, apenas as armas que estáo no /status");

	return 1;
}

/*CMD:throwgun(playerid, params[])
{

    if( GetPlayerVirtualWorld(playerid) || GetPlayerInterior(playerid) )
        return SendClientMessage(playerid, COLOR_LIGHTRED, "You can not place weapons here.");

  	if( GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK )
    	return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not standing");

	new
	    weaponid;

	if (sscanf(params, "d", weaponid))
	    return SendClientMessage(playerid, COLOR_WHITE, "/leavegun weapon_id (List of IDs in /weapons)");

    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "You must have level 2 or above.");

	if (PlayerData[playerid][pGun1] == weaponid || PlayerData[playerid][pGun2] == weaponid || PlayerData[playerid][pGun3] == weaponid) {

		if(PlayerData[playerid][pGun1] == weaponid)
		{
			ThrowGun(playerid, PlayerData[playerid][pGun1], PlayerData[playerid][pAmmo1]);
			PlayerData[playerid][pGun1] = 0, PlayerData[playerid][pAmmo1] = 0;
		}
		else if(PlayerData[playerid][pGun2] == weaponid)
		{
        	ThrowGun(playerid, PlayerData[playerid][pGun2], PlayerData[playerid][pAmmo2]);
         	PlayerData[playerid][pGun2] = 0, PlayerData[playerid][pAmmo2] = 0;
		}
		else if(PlayerData[playerid][pGun3] == weaponid)
		{
			ThrowGun(playerid, PlayerData[playerid][pGun3], PlayerData[playerid][pAmmo3]);
			PlayerData[playerid][pGun3] = 0, PlayerData[playerid][pAmmo3] = 0;
		}

	 	RemoveWeapon(playerid, weaponid);
	 	SendClientMessage(playerid, COLOR_WHITE, "/grabgun To keep back");
	 	SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ] {FFFFFF}The weapon will disappear if not picked up in 30 minutes.");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Sorry only the weapons are in /stats");

	return 1;
}*/

CMD:pegararma(playerid, params[])
{
    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nível 2 ou mais para usar este comando.");

	new
	    id;

	if((id = DropGun_Nearest(playerid)) != -1)
	{
	    //SendClientMessageEx(playerid, COLOR_GREY, "?????? %s", ReturnWeaponName(GunInfo[id][DropGunAmmount][0]));
		//if((IsMelee(GunInfo[id][DropGunAmmount][0]) && IsMeleeSlotTaken(playerid)) || (IsPrimary(GunInfo[id][DropGunAmmount][0]) && IsPrimarySlotTaken(playerid)) || (IsSecondary(GunInfo[id][DropGunAmmount][0]) && IsSecondarySlotTaken(playerid))) return SendClientMessageEx(playerid, -1, "Weapon: %d - %s The channel is currently in use.", GunInfo[id][DropGunAmmount][0], ReturnWeaponName(GunInfo[id][DropGunAmmount][0]));
		/*if(IsPrimary(GunInfo[id][DropGunAmmount][0]) && IsPrimarySlotTaken(playerid)) return SendClientMessage(playerid, -1, "Your main weapon slot is already in use.");
		if(IsSecondary(GunInfo[id][DropGunAmmount][0]) && IsSecondarySlotTaken(playerid)) return SendClientMessage(playerid, -1, "Your secondary weapon slot is already in use.");
*/
        if(PlayerData[playerid][pGuns][g_aWeaponSlots[GunInfo[id][DropGunAmmount][0]]] != 0) return SendClientMessageEx(playerid, -1, "Arma: %d - %s O canal está em uso.", GunInfo[id][DropGunAmmount][0], ReturnWeaponName(GunInfo[id][DropGunAmmount][0]));

        if(GunInfo[id][DropLicense]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) apanhar %s(%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(GunInfo[id][DropGunAmmount][0]), GunInfo[id][DropGunAmmount][1], GunInfo[id][DropLicense]);

		GivePlayerValidWeapon(playerid, GunInfo[id][DropGunAmmount][0], GunInfo[id][DropGunAmmount][1], GunInfo[id][DropLicense]);
	    ResetDropGun(id);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhuma arma ao seu redor.");

	return 1;
}

CMD:empinfo(playerid, params[])
{
	new bouse = PlayerData[playerid][pPbiskey];
	if(bouse != -1)
	{
		PrintBizInfo(playerid,bouse);
	}
	else
	{
		SendClientMessage(playerid, COLOR_WHITE, "Você não é dono de um negócio.");
	}
	return 1;
}

CMD:comppreco(playerid, params[])
{
	new bouse = PlayerData[playerid][pPbiskey], price;
	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não é dono de um negócio.");
	if (sscanf(params, "d", price)) return SendSyntaxMessage(playerid, "/comppreco [valor]");
	if(price < 0 || price > 20000) return SendClientMessage(playerid, COLOR_WHITE, "O máximo é R$0 a R$20.000");
	if(price > BizInfo[bouse][bTill]) return SendClientMessage(playerid, COLOR_WHITE, "O dinheiro em sua conta não é suficiente.");

	BizInfo[bouse][bPriceProd] = price;
	SendClientMessageEx(playerid, COLOR_WHITE,  "Compra R$%d", BizInfo[bouse][bPriceProd]);
	UpdateBizInfo(bouse);
	return 1;
}

CMD:taxaemp(playerid, params[])
{
	new bouse = PlayerData[playerid][pPbiskey], fee;
	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não é dono de um negócio.");
    if (sscanf(params, "d", fee)) return SendSyntaxMessage(playerid, "/taxaemp [valor]");
	if(fee < 0 || fee > 50000) return SendClientMessage(playerid, COLOR_WHITE, "O máximo é R$0 a R$50.000");

	BizInfo[bouse][bEntranceCost] = fee;
	SendClientMessageEx(playerid, COLOR_WHITE,  "Taxa de entrada R$%d", BizInfo[bouse][bEntranceCost]);
	UpdateBizInfo(bouse);
	return 1;
}

CMD:trancar(playerid, params[])
{
	new
	    id = -1,
	    str[128],
		vehicleid,
		canlock;

	if (!IsPlayerInAnyVehicle(playerid) && (id = (Bizz_Inside(playerid) == -1) ? (Bizz_Nearest(playerid)) : (Bizz_Inside(playerid))) != -1)
	{
		if (Bizz_IsOwner(playerid, id))
		{
			if (!BizInfo[id][bLocked])
			{
				BizInfo[id][bLocked] = true;
				UpdateBizInfo(id);
                GameTextForPlayer(playerid, "~w~Você ~r~trancou~w~ seu negócio!", 5000, 4);
                canlock = 1;
			}
  			else
			{
				BizInfo[id][bLocked] = false;
                UpdateBizInfo(id);
                GameTextForPlayer(playerid, "~w~Você ~r~destrancou~w~ seu negócio!", 5000, 4);
				canlock = 1;
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD2, "Você não é dono de um negócio.");
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (nearHouse_var[playerid]) : (House_Inside(playerid))) != -1)
	{
		if(House_IsOwner(playerid, id) || PlayerData[playerid][pHouseKey] == id)
		{
			new
			    Float:fDistance[2] = {99999.0, 0.0},
			    i = -1
			;
			for(new x = 0; x != MAX_FURNITURE; ++x) {
				if(HouseFurniture[id][x][fOn] && isHouseDoor(HouseFurniture[id][x][fModel])) {
				    fDistance[1] = GetPlayerDistanceFromPoint(playerid, HouseFurniture[id][x][fPosX], HouseFurniture[id][x][fPosY], HouseFurniture[id][x][fPosZ]);

					if (fDistance[1] < fDistance[0])
					{
					    fDistance[0] = fDistance[1];
					    i = x;
					}
				}
			}

			if(i != -1 && fDistance[1] < 3) {
				if(HouseFurniture[id][i][fOpened] == 1) return SendClientMessage(playerid, COLOR_GREY, "Feche a porta antes de tranca-la!");
				if(HouseFurniture[id][i][fLocked] == 0)
				{
					GameTextForPlayer(playerid, "~w~Porta ~r~Trancado(a)", 5000, 6);
					HouseFurniture[id][i][fLocked] = 1;
				}
				else if(HouseFurniture[id][i][fLocked] == 1)
				{
					GameTextForPlayer(playerid, "~w~Porta ~g~Destrancado(a)", 5000, 6);
					HouseFurniture[id][i][fLocked] = 0;
				}
				return 1;
			}

			if(HouseInfo[id][hLocked] == 1)
			{
				HouseInfo[id][hLocked] = 0;
				GameTextForPlayer(playerid, "~w~Casa ~g~Destrancado(a)", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
			if(HouseInfo[id][hLocked] == 0)
			{
				HouseInfo[id][hLocked] = 1;
				GameTextForPlayer(playerid, "~w~Casa ~r~Trancado(a)", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~r~Você não tem a chave", 5000, 6);
			return 1;
		}
	}
	if (!IsPlayerInAnyVehicle(playerid) && (id = (Bizz_Inside(playerid) == -1) ? (Bizz_Nearest(playerid)) : (Bizz_Inside(playerid))) != -1)
	{
		if (Bizz_IsOwner(playerid, id))
		{

			new
			    Float:fDistance[2] = {99999.0, 0.0},
			    i = -1
			;
			for(new x = 0; x != MAX_FURNITURE; ++x) {
				if(BizFurniture[id][x][fOn] && isHouseDoor(BizFurniture[id][x][fModel])) {
				    fDistance[1] = GetPlayerDistanceFromPoint(playerid, BizFurniture[id][x][fPosX], BizFurniture[id][x][fPosY], BizFurniture[id][x][fPosZ]);

					if (fDistance[1] < fDistance[0])
					{
					    fDistance[0] = fDistance[1];
					    i = x;
					}
				}
			}

			if(i != -1 && fDistance[1] < 3) {
				if(HouseFurniture[id][i][fOpened] == 1) return SendClientMessage(playerid, COLOR_GREY, "Feche a porta antes de tranca-la!");
				if(HouseFurniture[id][i][fLocked] == 0)
				{
					GameTextForPlayer(playerid, "~w~Porta ~r~Trancado(a)", 5000, 6);
					HouseFurniture[id][i][fLocked] = 1;
				}
				else if(HouseFurniture[id][i][fLocked] == 1)
				{
					GameTextForPlayer(playerid, "~w~Porta ~g~Destrancado(a)", 5000, 6);
					HouseFurniture[id][i][fLocked] = 0;
				}
				return 1;
			}

			if(HouseInfo[id][hLocked] == 1)
			{
				HouseInfo[id][hLocked] = 0;
				GameTextForPlayer(playerid, "~w~Casa ~g~Destrancado(a)", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
			if(HouseInfo[id][hLocked] == 0)
			{
				HouseInfo[id][hLocked] = 1;
				GameTextForPlayer(playerid, "~w~Casa ~r~Trancado(a)", 5000, 6);
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
		}
		else
		{
			GameTextForPlayer(playerid, "~r~Você não tem a chave", 5000, 6);
			return 1;
		}
	}
	else if( (IsPlayerInAnyVehicle(playerid) ? ((vehicleid = GetPlayerVehicleID(playerid)) != 0) : ((vehicleid = Car_Nearest(playerid)) != -1)) /*&& !IsABicycle(vehicleid) */)
	{
		new
			engine,
			lights,
			alarm,
			doors,
			bonnet,
			boot,
			objective;


		if((id = Car_GetID(vehicleid)) != -1)
		{
			if(id == PlayerData[playerid][pPCarkey] || CarData[id][carDupKey] == PlayerData[playerid][pPDupkey]) {

				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

				if (!CarData[id][carLocked])
				{
					CarData[id][carLocked] = true;
					Car_Save(id);

					format(str, sizeof(str), "~r~%s Trancado(a)", ReturnVehicleModelName(CarData[id][carModel]));
					GameTextForPlayer(playerid, str, 2000, 4);

					PlayerPlaySoundEx(playerid, 1147);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
				}
				else
				{
					CarData[id][carLocked] = false;
					Car_Save(id);

					format(str, sizeof(str), "~g~%s Destrancado(a)", ReturnVehicleModelName(CarData[id][carModel]));
					GameTextForPlayer(playerid, str, 2000, 4);


					PlayerPlaySoundEx(playerid, 1147);
					SetVehicleParamsEx(vehicleid, engine, lights, 0, 0, bonnet, boot, objective);
				}
				canlock = 1;

			}
			else {

                SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Você não pode acessar este veículo.");

				if (CarData[id][carLocked]) {
					if (!isnull(params) && !strcmp(params, "quebrar", true)) {
						SendClientMessage(playerid, COLOR_WHITE, "Você já pode quebrar a porta, digite:");
	                    SendClientMessage(playerid, COLOR_WHITE, "-Mao");
	                    SendClientMessage(playerid, COLOR_WHITE, "-Arma branca");

						if(!IsABike(vehicleid) && !IsABicycle(vehicleid)) {
							CoreVehicles[vehicleid][vbreakin] = 50 + floatround(CarData[id][carLock]*25);
						}
						else CoreVehicles[vehicleid][vbreakin] = 1;
						CoreVehicles[vehicleid][vbreaktime] = 20;
					}
					else
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Para tentar invadir, digite:{FFFF00}{FFFFFF}: \"/trancar quebrar\"");
						return 1;
					}
				}
                return 1;

				//SendClientMessage(playerid, COLOR_GRAD1, "You do not have a key for this vehicle.");
			}
		}
		else
		{

			if (IsPlayerInAnyVehicle(playerid) && !IsVehicleRental(vehicleid)) {

				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

				if(doors != 1)
				{
					format(str, sizeof(str), "~r~%s Trancado(a)", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
					GameTextForPlayer(playerid, str, 2000, 4);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
				}
				else
				{
					format(str, sizeof(str), "~g~%s Destrancado(a)", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
					GameTextForPlayer(playerid, str, 2000, 4);
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
				}
				canlock = 1;
			}
			else
			{
				if( (!IsVehicleRental(vehicleid) && gLastCar[playerid] == vehicleid)  || RentCarKey[playerid] == vehicleid)
				{
					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

					if(doors != 1)
					{
						format(str, sizeof(str), "~r~%s Trancado(a)", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, str, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
					}
					else
					{
						format(str, sizeof(str), "~g~%s Destrancado(a)", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, str, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
					}
					canlock = 1;
				}
			}

		}
	}
	if(!canlock) return SendClientMessage(playerid, COLOR_LIGHTRED, "não há nada próximo a Você para que possa trancar ou destrancar");
	return 1;
}

CMD:cofreretirar(playerid, params[])
{
	new
		bouse = PlayerData[playerid][pPbiskey],
		cashdeposit;

	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não é dono de um negócio.");

	if (sscanf(params, "d", cashdeposit))
	{
		SendSyntaxMessage(playerid, "/cofreretirar [valor]");
		SendClientMessageEx(playerid, COLOR_GRAD3, "Você tem R$%d no cofre do seu negócio.", BizInfo[bouse][bTill]);
		return 1;
	}

	if (cashdeposit > BizInfo[bouse][bTill] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não tem isso tudo.");

	if (bouse == BizEntered[playerid])
	{
		PlayerData[playerid][pCash] += cashdeposit;
		BizInfo[bouse][bTill] -= cashdeposit;
		UpdateBizInfo(bouse);
		SendClientMessageEx(playerid, COLOR_YELLOW, "Você retirou R$%d e agora tem: R$%d ", cashdeposit,BizInfo[bouse][bTill]);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Você está longe do seu negócio.");
	}
	return 1;
}

CMD:cofresaldo(playerid, params[])
{
	new
		bouse = PlayerData[playerid][pPbiskey],
		cashdeposit;

	if (bouse == -1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não é dono de um negócio.");

	if (sscanf(params, "d", cashdeposit))
	{
		SendSyntaxMessage(playerid, "/cofresaldo [valor]");
		SendClientMessageEx(playerid, COLOR_GRAD3, "Você tem R$%d no cofre do seu negócio.", BizInfo[bouse][bTill]);
		return 1;
	}

	if (cashdeposit > PlayerData[playerid][pCash] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não tem isso tudo.");

	if (bouse == BizEntered[playerid])
	{
		PlayerData[playerid][pCash] -= cashdeposit;
		BizInfo[bouse][bTill] += cashdeposit;
		UpdateBizInfo(bouse);
		SendClientMessageEx(playerid, COLOR_YELLOW, "Você depositou R$%d no cofre do seu negócio. Saldo: R$%d ", cashdeposit, BizInfo[bouse][bTill]);

		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
		mysql_query(dbCon, szQuery);
	}
	else
	{
		SendClientMessage(playerid, COLOR_GRAD2, "Você está longe do seu negócio.");
	}
	return 1;
}

CMD:comprarempresa(playerid, params[])
{
	if(OwnBusiness(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "Você ja tem um negócio, digite: /empvender para vende-la");

	new confirm[8], h = -1;

	if ((h = Bizz_Nearest(playerid)) != -1 && BizInfo[h][bOwned] == 0) {

   		if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "sim", true)) {

			if(PlayerData[playerid][pLevel] < BizInfo[h][bLevelNeeded])
			{
				SendClientMessageEx(playerid, COLOR_GRAD1, "Você deve ter nível %d para compra-la.", BizInfo[h][bLevelNeeded]);
				return 1;
			}
			if(PlayerData[playerid][pCash] < BizInfo[h][bBuyPrice]) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode comprar esta propriedade!");


			new
				pname[MAX_PLAYER_NAME + 1];

			GetPlayerName(playerid, pname, sizeof(pname));

			PlayerData[playerid][pPbiskey] = h;
			BizInfo[h][bOwned] = 1;
			BizInfo[h][bLocked] = 1;
			BizInfo[h][bTill] = 0;
			strmid(BizInfo[h][bOwner], pname, 0, strlen(pname), MAX_PLAYER_NAME);
			PlayerData[playerid][pCash] -= BizInfo[h][bBuyPrice];
			SendClientMessage(playerid, COLOR_WHITE, "Parabéns pelo seu novo negócio.");
			SendClientMessage(playerid, COLOR_WHITE, "Use /ajuda para ver os comandos.");
			Bizz_Refresh(h);
			UpdateBizInfo(h);

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d, `PlayerBusinessKey` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], h, PlayerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			SQL_SaveCharacter(playerid);
			return 1;
		}
	 	else
	 	{
	 	    SendSyntaxMessage(playerid, "/comprarempresa sim");
			format(szString, sizeof(szString), "Você deseja comprar este negócio por R$%d?", BizInfo[h][bBuyPrice]);
			SendClientMessage(playerid, COLOR_GREY, szString);
	 	}
 	}
	return 1;
}

CMD:empvender(playerid, params[])
{
	new confirm[8], house = PlayerData[playerid][pPbiskey];

	if(house != -1 && strcmp(ReturnName(playerid), BizInfo[house][bOwner], true) == 0)
	{
		new houseprice = BizInfo[house][bBuyPrice];
		new housetax = ((houseprice*1)/100);

	    if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "sim", true)) {

			if(BizInfo[house][bTill] > 0)
			{
			    PlayerData[playerid][pCash] += BizInfo[house][bTill];
				SendClientMessageEx(playerid, COLOR_GRAD2, "Você recebe R$%d em dinheiro do seu negócio.", BizInfo[house][bTill]);
			}
			BizInfo[house][bLocked] = 1;
			BizInfo[house][bTill] = 0;
			BizInfo[house][bOwned] = 0;
			strmid(BizInfo[house][bOwner], "Do estado", 0, strlen("Do estado"), 24);

			Bizz_Refresh(house);
			PlayerData[playerid][pCash] += houseprice-housetax;
			PlayerPlaySoundEx(playerid, 1052);
			format(szString, sizeof(szString), "~w~Parabéns~n~ Você vendeu sua propriedade por ~n~~g~R$%d", houseprice-housetax);
			GameTextForPlayer(playerid, szString, 10000, 3);
			SendClientMessageEx(playerid, COLOR_GRAD3, "Imposto estadual: R$%d", housetax);
			UpdateBizInfo(house);

			if(BizEntered[playerid] == house)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerPos(playerid,BizInfo[house][bEntranceX], BizInfo[house][bEntranceY], BizInfo[house][bEntranceZ]);
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
				PlayerData[playerid][pInterior] = 0;
				PlayerData[playerid][pWorld] = 0;
				BizEntered[playerid] = -1;
				PlayerData[playerid][pLocal] = 255;
				return 1;
			}

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `PlayerBusinessKey` = %d WHERE `PlayerBusinessKey` = %d", -1, house);
			mysql_query(dbCon, szQuery);

			PlayerData[playerid][pPbiskey] = -1;

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			SQL_SaveCharacter(playerid);
			return 1;
		}
	 	else
	 	{
	 	    SendSyntaxMessage(playerid, "/empvender sim");
			format(szString, sizeof(szString), "Você está vendendo seu negócio por R$%d com uma taxa de R$%d.", houseprice, housetax);
			SendClientMessage(playerid, COLOR_GREY, szString);
	 	}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar próximo do seu negócio.");
	return 1;
}

/*CMD:sellbiz(playerid, params[])
{
	new key = PlayerData[playerid][pPbiskey];
	if(!OwnBusiness(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not a business owner");

	BizInfo[key][bizOwned] = 0;
	BizInfo[key][bizLocked] = 1;
	BizInfo[key][bizRadio] = 0;
	BizInfo[key][bizRadioOn] = 0;
	strmid(BizInfo[key][bizOwner], "The State", 0, strlen("The State"), 255);
	new bizvalue = BizInfo[key][bizPrice] / 4 * 3;
	GiveCash(playerid, bizvalue);
	format(msg, sizeof(msg), "Congratulations You have sold your property for {FFFF00}R$%d", bizvalue);
	SendClientMessage(playerid, COLOR_GRAD1, msg);
	if(BizInfo[key][bizCash] > 0)
	{
		format(msg, sizeof(msg), "As you had R$%d in your cashbox, you got it back.", BizInfo[key][bizCash]);
		SendClientMessage(playerid, COLOR_GRAD1, msg);
		GiveCash(playerid, BizInfo[key][bizCash]);
	}
	BizInfo[key][bizCash] = 0;
	foreach(new i : Player)
	{
		if(BizEntered[i] == key)
		{
			SetPlayerPos(i,BizInfo[key][bizPosX], BizInfo[key][bizPosY], BizInfo[key][bizPosZ]);
			SetInterior(i,0);
			SetWorld(i,0);
			BizEntered[i] = -1;
			FreezePlayer(i);
			SetTimerEx("UnFreezePlayer", 1000, 0, "i", i);
			SendClientMessage(i, COLOR_GRAD1, "The owner has just sold this business, everyone out.");
		}
	}
	UpdateBizInfo(key);
	PlayerData[playerid][pBizKey] = -1;
	return 1;
}*/

//----------------------------------[Bank System]-----------------------------------------------

CMD:sacar(playerid, params[])
{
	new cashdeposit, tax;

    if (IsPlayerInRangeOfPoint(playerid, 3.0, 1235.8274,-1278.8701,60008.1328)) {

			if (sscanf(params, "d", cashdeposit))
			{
				SendSyntaxMessage(playerid, "/sacar [valor]");
				SendClientMessageEx(playerid, COLOR_GRAD3, "Você tem R$%d na conta", PlayerData[playerid][pAccount]);
				return 1;
			}
			if(cashdeposit < 250) return SendClientMessage(playerid, COLOR_LIGHTRED, "Deve ser mais que 250");
			if(PlayerData[playerid][pSavingsCollect]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode usar este comando ao abrir uma conta poupança.");
			if (cashdeposit > PlayerData[playerid][pAccount] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não tem muito!");

			tax = floatround(cashdeposit * 0.002, floatround_round);
			cashdeposit = cashdeposit - tax;
			PlayerData[playerid][pCash] += cashdeposit;
			PlayerData[playerid][pAccount] -= cashdeposit + tax;
			SendClientMessageEx(playerid, COLOR_YELLOW, "Você retirou R$%d da sua conta: R$%d imposto R$%d", cashdeposit + tax, PlayerData[playerid][pAccount], tax);

	}
		else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no banco");
	return 1;
}
CMD:banco(playerid, params[])
{
    new cashdeposit;

	if (IsPlayerInRangeOfPoint(playerid, 100.0, 1235.8274,-1278.8701,60008.1328)) {
		if (sscanf(params, "d", cashdeposit))
		{
			SendSyntaxMessage(playerid, "/banco [valor]");
			SendClientMessageEx(playerid, COLOR_GRAD3, "Você tem R$%d na conta", PlayerData[playerid][pAccount]);
			return 1;
		}

		if(PlayerData[playerid][pSavingsCollect]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode usar este comando ao abrir uma conta poupança.");
		if (cashdeposit > PlayerData[playerid][pCash] || cashdeposit < 1) return SendClientMessage(playerid, COLOR_GRAD2, "Você não tem muito.");

		PlayerData[playerid][pCash] -= cashdeposit;
		new curfunds = PlayerData[playerid][pAccount];
		PlayerData[playerid][pAccount]=cashdeposit+PlayerData[playerid][pAccount];
		SendClientMessage(playerid, COLOR_WHITE, "|___ EXTRATO BANCARIO ___|");
		SendClientMessageEx(playerid, COLOR_FADE1, "Saldo antigo: R$%d", curfunds);
		SendClientMessageEx(playerid, COLOR_FADE1, "Depositou: R$%d",cashdeposit);
		SendClientMessage(playerid, COLOR_WHITE, "|-----------------------------------------|");
		SendClientMessageEx(playerid, COLOR_WHITE, "Novo saldo: R$%d", PlayerData[playerid][pAccount]);
	}
 	    else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no banco");
	return 1;
}
CMD:saldo(playerid, params[])
{
	if (IsPlayerInRangeOfPoint(playerid, 100.0, 1235.8274,-1278.8701,60008.1328)) {
		
		SendClientMessageEx(playerid, COLOR_YELLOW, "Você tem R$%d na conta.",PlayerData[playerid][pAccount]);
	}
		else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no banco");
	return 1;
}
CMD:poupanca(playerid, params[])
{

	if (IsPlayerInRangeOfPoint(playerid, 100.0, 1235.8274,-1278.8701,60008.1328)) {

		if(!strcmp(params, "retirar", true))
		{
			Dialog_Show(playerid, WithdrawSavings, DIALOG_STYLE_MSGBOX, "Confirmação", "Tem certeza de que deseja sacar dinheiro de sua conta poupança?\nnão pode ser revertido e Você tem que começar de novo!", "Sim", "não");
		}
		else
		{
			if(PlayerData[playerid][pSavings])
			{
				SendClientMessage(playerid, COLOR_WHITE, "|_______ EXTRATO BANCARIO _______|");
				SendClientMessageEx(playerid, COLOR_GRAD1, "Saldo da conta poupança: R$%s", FormatNumber(PlayerData[playerid][pSavingsCollect]));
				SendClientMessageEx(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}Você tem R$%s na conta poupança", FormatNumber(PlayerData[playerid][pSavingsCollect]));

				new paycheck = 0, maximum = 10000000;
				new i = PlayerData[playerid][pSavings], currently;

				while(i < maximum)
				{
					i += floatround((i/50.0)*(0.3), floatround_round);
					paycheck++;

					if(PlayerData[playerid][pSavingsCollect] > i) currently = 2 + paycheck;
				}


				SendClientMessageEx(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}Suas economias irão render por %d/%d paydays (%d%s)", currently, paycheck, floatround(float(currently) / float(paycheck) * 50), "%%");
				SendClientMessage(playerid, COLOR_LIGHTRED, "DICA: {FFFFFF} Para retirar o seu dinheiro use /poupanca retirar");
			}
			else
			{
				new savings = strval(params);

				if (!savings)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "DICA:{FFFFFF} Para criar uma conta poupança /poupanca [valor]");

				if(savings == 50000 || savings == 100000)
				{
					if(PlayerData[playerid][pCash] > savings)
					{
						PlayerData[playerid][pSavings] = savings;
						PlayerData[playerid][pSavingsCollect] = savings;
						PlayerData[playerid][pCash] -= savings;

						SendClientMessage(playerid, COLOR_WHITE, "|_______ EXTRATO BANCARIO _______|");
						SendClientMessageEx(playerid, COLOR_GRAD1, "Saldo da conta poupança: R$%s", FormatNumber(savings));
						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}Você tem R$%s na sua conta poupança", FormatNumber(savings));


						new paycheck = 0, maximum = 10000000;
						new i = PlayerData[playerid][pSavings], currently;

						while(i < maximum)
						{
							i += floatround((i/float(50))*(0.3), floatround_round);
							paycheck++;
							if(PlayerData[playerid][pSavingsCollect] > i) currently = 2 + paycheck;
						}


						SendClientMessageEx(playerid, COLOR_LIGHTRED, "[!] {FFFFFF}Suas economias irão render por %d/%d paydays (%d%s)", currently, paycheck, floatround(currently / float(paycheck) * 50), "%%");
						SendClientMessage(playerid, COLOR_LIGHTRED, "USE: {FFFFFF} Para retirar suas economias{FF6347} use /poupanca retirar");
					}
					else SendClientMessage(playerid, COLOR_GRAD1, "Você não tem dinheiro suficiente!");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você tem que depositar um valor entre R$50,000 a R$100,000.");
			}
		}
	}
		else SendClientMessage(playerid, COLOR_GRAD2, "Você não está no banco");
	return 1;
}

CMD:combustivel(playerid, params[]) {

	if (IsPlayerInAnyVehicle(playerid))
	{
	    new str[64], vehicleid = GetPlayerVehicleID(playerid);

		if (!IsDoorVehicle(vehicleid))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Este veículo está sem gasolina.");

		format(str, sizeof(str), "~w~combustivel: ~p~%.2f galão", CoreVehicles[vehicleid][vehFuel]);
		GameTextForPlayer(playerid, str, 5000, 1);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no veículo.");
	return 1;
}

CMD:veh(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 4) {

		new
			carid[32],
			Float: carSpawnPos[4], // 3 for the usual dimensions, +1 for the rotation/angle.
			messageString[64],
			color1,
			color2;

        if (!sscanf(params, "s[32]I(-1)I(-1)", carid, color1, color2)) {

			if ((carid[0] = GetVehicleModelByName(carid)) == 0)
			    return SendClientMessage(playerid, COLOR_GREY, "O ID do veículo deve estar entrar 400 e 611!");

			if(systemVariables[vehicleCounts][0] + systemVariables[vehicleCounts][1] + systemVariables[vehicleCounts][2] < MAX_VEHICLES) {

                for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(!AdminSpawnedVehicles[i])
				{

					GetPlayerPos(playerid, carSpawnPos[0], carSpawnPos[1], carSpawnPos[2]);
					GetPlayerFacingAngle(playerid, carSpawnPos[3]);

					AdminSpawnedVehicles[i] = CreateVehicle(carid[0], carSpawnPos[0], carSpawnPos[1], carSpawnPos[2], carSpawnPos[3], color1, color2, -1);
					systemVariables[vehicleCounts][2]++;

		    		Iter_Add(sv_vehicles, AdminSpawnedVehicles[i]);

		    		ResetVehicle(AdminSpawnedVehicles[i]);

					LinkVehicleToInterior(AdminSpawnedVehicles[i], GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(AdminSpawnedVehicles[i], GetPlayerVirtualWorld(playerid));

					PutPlayerInVehicle(playerid, AdminSpawnedVehicles[i], 0);

					new
						engine,
						lights,
						alarm,
						doors,
						bonnet,
						boot,
						objective;

					GetVehicleParamsEx(AdminSpawnedVehicles[i], engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(AdminSpawnedVehicles[i], 1, lights, alarm, doors, bonnet, boot, objective);

					switch(carid[0]) {
						case 427, 428, 432, 601, 528: SetVehicleHealth(AdminSpawnedVehicles[i], 5000.0);
					}

					format(messageString, sizeof(messageString), "Você criou um(a) %s (veículo ID %d)", ReturnVehicleModelName(carid[0]), AdminSpawnedVehicles[i]);
					SendClientMessage(playerid, COLOR_WHITE, messageString);

					break;
				}
			}
			else {
				SendClientMessage(playerid, COLOR_GENANNOUNCE, "(erro) 01x08");
				printf("ERRO: Limite de veículos atingido (Modelo %d, máximo %d, ADMIN) [01x08]", carid, MAX_VEHICLES);
			}
        }
        else {
            return SendSyntaxMessage(playerid, "/veh [id/nome] <cor 1> <cor 2>");
        }
    }

	return 1;
}

CMD:combustivelv(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 1) {

		new id;

		if (sscanf(params, "d", id))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	id = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/combustivelv [id]");
		}
		if (id < 1 || id > MAX_VEHICLES || !IsValidVehicle(id))
			return SendClientMessage(playerid, COLOR_GRAD2, "O ID do veículo não existe.");

		CoreVehicles[id][vehFuel] = GetVehicleDataFuel(GetVehicleModel(id));
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Você reabasteceu seu veículo %d", id);
		SendAdminAlert(COLOR_YELLOW, "%s veículo de abastecimento %d", ReturnName(playerid), id);
    }
	return 1;
}

CMD:fuelall(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 3) {
        foreach (new i : sv_vehicles) {
			CoreVehicles[i][vehFuel] = GetVehicleDataFuel(GetVehicleModel(i));
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "You have fueled the entire vehicle");
		SendAdminAlert(COLOR_YELLOW, "%s fueled by a whole fleet of vehicles", ReturnName(playerid));
    }
	return 1;
}

CMD:respawncar(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 1) {

		new id;

		if (sscanf(params, "d", id))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	id = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/respawncar [id]");
		}
		SetVehicleToRespawn(id);
    }
	return 1;
}

CMD:destruirveh(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 3) {

		new vehCount;
        for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) {
            if(AdminSpawnedVehicles[i]) {
	            DestroyVehicle(AdminSpawnedVehicles[i]);
				Iter_Remove(sv_vehicles, AdminSpawnedVehicles[i]);
				AdminSpawnedVehicles[i] = 0;
				systemVariables[vehicleCounts][2]--;
				vehCount++;
			}
		}

		if(vehCount)
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s Destruiu todos os veículos %d", ReturnName(playerid), vehCount);
    }
	return 1;
}

CMD:deletarveh(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 3) {

		new id, bool:success;

		if (sscanf(params, "d", id))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	id = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/deletarveh [id]");
		}

        for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(AdminSpawnedVehicles[i] == id)
		{
			SendClientMessageEx(playerid, COLOR_GRAD1, "Você destruiu o veículo %d", AdminSpawnedVehicles[i]);
			DestroyVehicle(AdminSpawnedVehicles[i]);
			Iter_Remove(sv_vehicles, AdminSpawnedVehicles[i]);
			AdminSpawnedVehicles[i] = 0;
			systemVariables[vehicleCounts][2]--;
			success = true;
			return 1;
		}

		if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "You are not in the caregiver's vehicle.");
    }
	return 1;
}

CMD:checarcarro(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 3) {

		new vehicleid, id = -1;

		if (sscanf(params, "d", vehicleid))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	vehicleid = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/checarcarro [id]");
		}

        if((id = Car_GetID(vehicleid)) != -1)
		{
			SendClientMessageEx(playerid, COLOR_WHITE, "Vida Util: Motor[%.2f], Bateria[%.2f], Km's[%.2f]", CarData[id][carEngineL], CarData[id][carBatteryL], CarData[id][carMileage]);
	    	SendClientMessageEx(playerid, COLOR_WHITE, "Segurança: Tranca[%d], Alarme[%d], Immob[%d], Seguro[%d]", CarData[id][carLock], CarData[id][carAlarm], CarData[id][carImmob], CarData[id][carInsurance]);

			if(CarData[id][carArmour]) {
				SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Cor primária[{%06x}#%d{FFFFFF}], Cor secundária[{%06x}#%d{FFFFFF}], Placa[%s], Carcaça[%.2f]",
				g_arrSelectColors[CarData[id][carColor1]] >>> 8, CarData[id][carColor1], g_arrSelectColors[CarData[id][carColor2]] >>> 8, CarData[id][carColor2], CarData[id][carPlate], CarData[id][carArmour]);
		    }
		    else
		    {
				SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Cor primária[{%06x}#%d{FFFFFF}], Cor secundária[{%06x}#%d{FFFFFF}], Placa[%s]",
				g_arrSelectColors[CarData[id][carColor1]] >>> 8, CarData[id][carColor1], g_arrSelectColors[CarData[id][carColor2]] >>> 8, CarData[id][carColor2], CarData[id][carPlate]);
		    }
			SendClientMessageEx(playerid, COLOR_WHITE, "ID do proprietário: %d", CarData[id][carOwner]);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "Este veículo não tem dono.");
		return 1;
    }
    return 0;
}

CMD:despawncar(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 3) {

		new vehicleid, id = -1;

		if (sscanf(params, "d", vehicleid))
	 	{
		 	if (IsPlayerInAnyVehicle(playerid))
			 	vehicleid = GetPlayerVehicleID(playerid);

			else return SendSyntaxMessage(playerid, "/despawncar [id]");
		}

		if((id = Car_GetID(vehicleid)) != -1)
		{
		    foreach(new x : Player) {
		        if(PlayerData[x][pPCarkey] == id) {
	                SaveVehicleDamage(vehicleid);
					Car_Save(vehicleid);
	                Car_DespawnEx(PlayerData[x][pPCarkey]);
	                PlayerData[x][pPCarkey] = 9999;
					break;
				}
			}
			return 1;
		}

		SendClientMessage(playerid, COLOR_LIGHTRED, "Este não é um veículo proprio.");
    }
	return 1;
}

CMD:salvarveh(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] >= 4) {
		if(!IsPlayerInAnyVehicle(playerid))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um veículo para salva-lo.");

		if(GetPVarInt(playerid, "sCc") == 1) {

			new i = Iter_Free(sv_servercar);

		    if(i != -1)
			{
				    new
				        queryString[255],
				        Float: vPos[4],
						vehicleid = GetPlayerVehicleID(playerid); // x, y, z + z angle

				    GetVehiclePos(vehicleid, vPos[0], vPos[1], vPos[2]);
				    GetVehicleZAngle(vehicleid, vPos[3]);

				    format(queryString, sizeof(queryString), "INSERT INTO vehicles (vehicleModelID, vehiclePosX, vehiclePosY, vehiclePosZ, vehiclePosRotation) VALUES('%d', '%f', '%f', '%f', '%f')", GetVehicleModel(vehicleid), vPos[0], vPos[1], vPos[2], vPos[3]);
				    mysql_query(dbCon,queryString);

				    new insertid = cache_insert_id();

				    SendClientMessage(playerid, COLOR_GRAD1, "veículo salvo!");

					vehicleVariables[i][vVehicleID] = insertid;
				    vehicleVariables[i][vVehicleModelID] = GetVehicleModel(vehicleid);
				    vehicleVariables[i][vVehiclePosition][0] = vPos[0];
				    vehicleVariables[i][vVehiclePosition][1] = vPos[1];
				    vehicleVariables[i][vVehiclePosition][2] = vPos[2];
				    vehicleVariables[i][vVehicleRotation] = vPos[3];
				    vehicleVariables[i][vVehicleFaction] = -1;

				    vehicleVariables[i][vVehicleScriptID] = vehicleid;

				    Iter_Add(sv_servercar, i);

					for(new x=0;x!=MAX_ADMIN_VEHICLES;x++) {
						if(AdminSpawnedVehicles[x] == vehicleid) {
         					AdminSpawnedVehicles[x] = 0; // If the vehicle is admin-spawned, we can remove it from the array and move it to the vehicle script enum/arrays.
                            break;
						}
					}

					systemVariables[vehicleCounts][2]--;
					systemVariables[vehicleCounts][0]++;
					DeletePVar(playerid, "sCc");

					return 1;
			}
		}
		else {
		    SetPVarInt(playerid, "sCc", 1);
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "Tem certeza de que deseja salvar este veículo? Use este comando novamente para confirmar.");
		}
	}

	return 1;
}

CMD:deleteveh(playerid, params[])
{
	new
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem nivel suficiente de administrador.");

	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return SendSyntaxMessage(playerid, "/deleteveh [id]");
	}
	if((id = Vehicle_GetID(id)) != -1)
	{
		new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `vehicles` WHERE `vehicleID` = '%d'", vehicleVariables[id][vVehicleID]);
		mysql_tquery(dbCon, string);

		SendClientMessageEx(playerid, COLOR_GRAD1, "Você destruiu o veículo %d", vehicleVariables[id][vVehicleScriptID]);
		DestroyVehicle(vehicleVariables[id][vVehicleScriptID]);
		Iter_Remove(sv_servercar, id);
		Iter_Remove(sv_vehicles, vehicleVariables[id][vVehicleScriptID]);
	}
	return 1;
}

CMD:editarcarro(playerid, params[])
{
	new
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarcarro [id] [name]");
	    SendClientMessage(playerid, COLOR_GREY, "Variaveis disponíveis: local, faccao, cor1, cor2");
		return 1;
	}
	if((id = Vehicle_GetID(id)) != -1)
	{
		if (!strcmp(type, "local", true))
		{
		    if (GetPlayerVehicleID(playerid) == vehicleVariables[id][vVehicleScriptID])
		    {
				GetVehiclePos(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
				GetVehicleZAngle(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleRotation]);
			}
			else
			{
		 		GetPlayerPos(playerid, vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
				GetPlayerFacingAngle(playerid, vehicleVariables[id][vVehicleRotation]);
			}
			Vehicle_Save(id);
			DestroyVehicle(vehicleVariables[id][vVehicleScriptID]);
			Iter_Remove(sv_vehicles, vehicleVariables[id][vVehicleScriptID]);

			vehicleVariables[id][vVehicleScriptID] = CreateVehicle(vehicleVariables[id][vVehicleModelID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2], vehicleVariables[id][vVehicleRotation], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1], 60000);

		  	Iter_Add(sv_vehicles, vehicleVariables[id][vVehicleScriptID]);

			SetPlayerPosEx(playerid, vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2] + 2.0, 1000);
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s mudou a posição do veículo: %d", ReturnName(playerid), vehicleVariables[id][vVehicleScriptID]);

		}
		else if (!strcmp(type, "faccao", true))
		{
		    new typeint;

		    if (sscanf(string, "d", typeint))
		 	{
		 	    SendSyntaxMessage(playerid, "/editarcarro [id] [faccao] [id]");
			 	return 1;
			}

			vehicleVariables[id][vVehicleFaction] = typeint;

			Vehicle_Save(id);

			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s mudou o grupo do veículo: %d are %d", ReturnName(playerid), vehicleVariables[id][vVehicleScriptID], typeint);
		}
		else if (!strcmp(type, "cor1", true))
		{
		    new color1;

		    if (sscanf(string, "d", color1))
				return SendSyntaxMessage(playerid, "/editarcarro [id] [cor1] [cor]");

			if (color1 < 0 || color1 > 255)
			    return SendClientMessage(playerid, COLOR_GRAD1, "Deve ser um número entre 0 e 255!");

			vehicleVariables[id][vVehicleColour][0] = color1;
			ChangeVehicleColor(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1]);

			Vehicle_Save(id);
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s mudou a primeira cor do veículo: %d estáo %d", ReturnName(playerid), vehicleVariables[id][vVehicleScriptID], color1);
		}
		else if (!strcmp(type, "cor2", true))
		{
		    new color2;

		    if (sscanf(string, "d", color2))
				return SendSyntaxMessage(playerid, "/editarcarro [id] [cor2] [cor]");

			if (color2 < 0 || color2 > 255)
			    return SendClientMessage(playerid, COLOR_GRAD1, "Deve ser um número entre 0 e 255!");

			vehicleVariables[id][vVehicleColour][1] = color2;
			ChangeVehicleColor(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1]);

			Vehicle_Save(id);
			SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s mudou a segunda cor do veículo: %d e São %d", ReturnName(playerid), vehicleVariables[id][vVehicleScriptID], color2);
		}
		else
		{
		 	SendSyntaxMessage(playerid, "/editarcarro [id] [nome]");
		    SendClientMessage(playerid, COLOR_GREY, "Variaveis disponíveis: local, faccao, cor1, cor2");
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD2, "ID do veículo é invalido.");
	}
	return 1;
}

CMD:estacionar(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um veículo.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não está como motorista.");

	new vehicleid = GetPlayerVehicleID(playerid), factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ser um membro da facção ou grupo.");

    /*if(PlayerData[playerid][pFactionRank] > 4)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
*/
	new id = -1;
	if((id = IsAFactionCar(vehicleid, factionid)) != -1)
	{
		GetVehiclePos(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2]);
		GetVehicleZAngle(vehicleVariables[id][vVehicleScriptID], vehicleVariables[id][vVehicleRotation]);
		Vehicle_Save(id);

		DestroyVehicle(vehicleVariables[id][vVehicleScriptID]);
		Iter_Remove(sv_vehicles, vehicleVariables[id][vVehicleScriptID]);

		vehicleVariables[id][vVehicleScriptID] = CreateVehicle(vehicleVariables[id][vVehicleModelID], vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2], vehicleVariables[id][vVehicleRotation], vehicleVariables[id][vVehicleColour][0], vehicleVariables[id][vVehicleColour][1], 60000);

		Iter_Add(sv_vehicles, vehicleVariables[id][vVehicleScriptID]);

		//SetPlayerPosEx(playerid, vehicleVariables[id][vVehiclePosition][0], vehicleVariables[id][vVehiclePosition][1], vehicleVariables[id][vVehiclePosition][2] + 2.0, 1000);
        PutPlayerInVehicle(playerid, vehicleVariables[id][vVehicleScriptID], 0);

        SendFactionMessage(factionid, COLOR_FACTION, "(( (%d) %s estacionou o veiculo %d ))", PlayerData[playerid][pFactionRank], ReturnName(playerid), vehicleid);
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em um veículo pertencente há mesma facção que está.");
	}
	return 1;
}

CMD:respawnfaccao(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ser um membro da facção.");

    if(PlayerData[playerid][pFactionRank] > 4)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");


	foreach(new i : sv_servercar) if(vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] == factionid && GetVehicleDriver(vehicleVariables[i][vVehicleScriptID]) == INVALID_PLAYER_ID)
	{
        SetVehicleToRespawn(vehicleVariables[i][vVehicleScriptID]);
	}
	SendFactionMessage(factionid, COLOR_FACTION, "** (( (%d) %s enviou um veículo sem carona do grupo de reverSão ))", PlayerData[playerid][pFactionRank], ReturnName(playerid));
	return 1;
}

/*CMD:changespawn(playerid, params[])
{
	new id;

	if ((id = nearHouse_var[playerid]) != -1 || (id =  House_Inside(playerid)) != -1 && (House_IsOwner(playerid, id) || PlayerData[playerid][pHouseKey] == id))
	{
	    SendClientMessage(playerid, COLOR_GREEN, "You will be born here right now!");
	    PlayerData[playerid][pSpawnPoint] = 2;
	}
	else if (GetFactionType(playerid) == FACTION_POLICE && (IsPlayerInRangeOfPoint(playerid, 3.0, 1554.4711,-1675.6097,16.1953) || IsPlayerInRangeOfPoint(playerid, 3.0, 246.4187,107.9756,1003.2188))) // LSPD
	{
	    SendClientMessage(playerid, COLOR_GREEN, "You will be born here right now!");
	    PlayerData[playerid][pSpawnPoint] = 1;
	    PlayerData[playerid][pSpawnType] = 0;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GREEN, "You will now be born at São Paulo Airport.");
	    PlayerData[playerid][pSpawnPoint] = 0;
	}

	return 1;
}*/

CMD:mudarspawn(playerid, params[])
{
	new type, tmp2[16];
	if(sscanf(params,"dS()[16]",type, tmp2)) return SendSyntaxMessage(playerid, "/mudarspawn [tipos(0-Normal,1-Faccao,2-Casa)]");

	if(type > 2 || type < 0) return SendSyntaxMessage(playerid, "/mudarspawn [0-Normal,1-facção,2-Casa]");
	if(type == 0)
 	{
 		SendClientMessage(playerid, COLOR_YELLOW, "Você mudou o ponto de spawn: Normal");
 		PlayerData[playerid][pSpawnPoint] = 0;
	}
	if(type == 1)
	{
		if(PlayerData[playerid][pFactionID] == -1) return SendClientMessage(playerid, COLOR_GREY, "Você não está em nenhuma facção.");
		SendClientMessage(playerid, COLOR_YELLOW, "Você mudou o ponto de spawn: facção");
		PlayerData[playerid][pSpawnPoint] = 1;
	}
	if(type == 2)
	{
		new houseid;

		if(sscanf(tmp2,"d",houseid)) {

			new hcount;

	        SendClientMessage(playerid, COLOR_YELLOW, "|_______________Casa_______________|");

			foreach(new i : sv_houses)
			{
				if(HouseInfo[i][hOwned] == 1 && ((PlayerData[playerid][pHouseKey] == i) || (!strcmp(HouseInfo[i][hOwner], ReturnName(playerid), true))))
				{
				    SendClientMessageEx(playerid, COLOR_GRAD2, "%d: %s", i, HouseInfo[i][hInfo]);
		      		hcount++;
				}
			}
			if(hcount) {
				SendSyntaxMessage(playerid, "/mudarspawn 2 [ID da casa]");
			}
			else {
			    SendClientMessage(playerid, COLOR_GREY, "Você não tem casa.");
			}
			return 1;
		}

		if(HouseInfo[houseid][hOwned] == 1 && ((PlayerData[playerid][pHouseKey] == houseid) || (!strcmp(HouseInfo[houseid][hOwner], ReturnName(playerid), true))))
		{
			SendClientMessageEx(playerid, COLOR_YELLOW, "Você mudou o ponto de spawn: Casa #%d", houseid);
			PlayerData[playerid][pSpawnPoint] = 2;
  			PlayerData[playerid][pHouseKey] = houseid;
		}
		else SendClientMessage(playerid, COLOR_GREY, "Você não tem casa.");
	}
	return 1;
}

// HOTWIRE
CMD:desembaralhar(playerid, params[])
	return cmd_desem(playerid, params);

CMD:desem(playerid, params[])
{
    new string[128], vehicleid, Float:vhealth;

	if (isnull(params))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /desc <Palavra decifrada>");

	if(IsPlayerInAnyVehicle(playerid) && h_vid[playerid] != -1)
	{
	    vehicleid = CarData[h_vid[playerid]][carVehicle];

		if(GetPlayerVehicleID(playerid) == vehicleid)
		{
		    if(!strcmp(params, ScrambleWord[h_wid[playerid]], true))
		    {
		        h_score[playerid]++;

		        if(h_score[playerid] >= 10)
		        {
		            vehicleid = CarData[h_vid[playerid]][carVehicle];
			    	GetVehicleHealth(vehicleid, vhealth);
	                PlayerPlaySound(playerid, 21002, 0.0, 0.0, 0.0);

	                h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
	                h_word[playerid][0]='\0';

				    if(vhealth > 650)
				    {
						SetEngineStatus(vehicleid, true);
					 	GameTextForPlayer(playerid, "~g~Motor ligado", 2000, 4);
					  	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s liga o motor do veículo %s", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
					}
					else
					{
				 	    new delay = floatround(900/vhealth);
					    if(delay > 3) { delay = 3; }

						if(delay == 0)
						{
							SetEngineStatus(vehicleid, true);
						}
						else
						{
		    	 			CoreVehicles[vehicleid][startup_delay] = delay;
							CoreVehicles[vehicleid][startup_delay_sender] = playerid;
							CoreVehicles[vehicleid][startup_delay_random] = delay;
						}
						GameTextForPlayer(playerid, "~g~Motor ligado", 2000, 4);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s liga o motor do veículo %s", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
					}
					return 1;
			 	}
				else PlayerPlaySound(playerid, 21000, 0.0, 0.0, 0.0);
		    }
		    else PlayerPlaySound(playerid, 21001, 0.0, 0.0, 0.0);

            h_failed[playerid]++;
            if(h_failed[playerid] >= 6)
            {
                // TAZER
				new
				    Float:x,
				    Float:y,
				    Float:z;

				GetPlayerPos(playerid, x, y, z);
				SetPlayerPos(playerid, x, y, z+2);
				ApplyAnimation(playerid, "PED", "KO_skid_front", 4.1, 0, 0, 1, 1, 0, 1);
				//ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
				BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_TAZER);
				SetTimerEx("SetUnTazed", 10000, false, "i", playerid);

	         	h_vid[playerid]=-1; h_times[playerid]=0; h_wid[playerid]=-1; h_score[playerid]=0; h_failed[playerid]=0;
	          	h_word[playerid][0]='\0';

                GameTextForPlayer(playerid, "Você TOMOU UM CHOQUE", 5000, 5);
                ShowPlayerFooter(playerid, "~r~Você errou muitas palavras.");

                return 1;
            }
			h_wid[playerid] = random(sizeof(ScrambleWord));
			h_word[playerid] = CreateScramble(ScrambleWord[h_wid[playerid]]);
            //CreateScramble(ScrambleWord[h_wid[playerid]], h_word[playerid]);

			format(string, sizeof(string), "~y~/desc ~w~<palavra decifrada> ~r~para decifrar a palavra~n~'~w~%s~r~'.", h_word[playerid]);
		 	ShowPlayerFooter(playerid, string, 8000);
		}
	}
	return 1;
}

CMD:motor(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid), id = -1, Float:vhealth, bool:canstart;

	if (!IsEngineVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD1, "Você não está em um veículo.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é o motorista.");

	if (!CoreVehicles[vehicleid][vehFuel])
  		return SendClientMessage(playerid, COLOR_LIGHTRED, "Este veículo está sem combustivel.");

	if(HasCooldown(playerid,COOLDOWN_ENGINE))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não conseguiu ligar o motor, tente novamente.");

    if((id = Car_GetID(vehicleid)) != -1)
    {
        if(PlayerData[playerid][pID] != CarData[id][carOwner] && PlayerData[playerid][pPDupkey] != CarData[id][carDupKey]) {

            if(h_vid[playerid] == -1)
            {
	            new string[128];
	            // Hotwire
			 	h_vid[playerid]=id;
				h_times[playerid] = 25 * (6-CarData[id][carImmob]);
                h_failed[playerid]=0;
				h_wid[playerid] = random(sizeof(ScrambleWord));
				h_word[playerid] = CreateScramble(ScrambleWord[h_wid[playerid]]);
				CreateScramble(h_word[playerid]);

				format(string, sizeof(string), "~y~/desc ~w~<palavra decifrada> ~r~para decifrar a palavra~n~'~w~%s~r~'.~n~You have ~w~%d ~r~seconds left to finish.", h_word[playerid], h_times[playerid]);
	            ShowPlayerFooter(playerid, string, 8000);
			}
            return 1;
        }
        else canstart = true;
    }

	if(Vehicle_GetID(vehicleid) != -1 || RentCarKey[playerid] == vehicleid || canstart)
	{
		switch (GetEngineStatus(vehicleid))
		{
			case false:
			{
				GetVehicleHealth(vehicleid,vhealth);

				if(vhealth > 650)
				{
					SetEngineStatus(vehicleid, true);
					GameTextForPlayer(playerid, "~g~Motor ligado!", 2000, 4);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ligou o motor do %s.", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
				}
				else if(vhealth < 390) {
					if(!CoreVehicles[vehicleid][vehicleBadlyDamage]) {

					 	GameTextForPlayer(playerid, "~r~O MOTOR NÃO PODE LIGAR DEVIDO A DANOS", 5000, 4);
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVE: O motor está muito danificado.");
						SendClientMessage(playerid, COLOR_YELLOW, "DICA: Pressione o botão W para instalar o motor.");
						SendClientMessage(playerid, COLOR_YELLOW, "DICA: Você tem 10 para instalar o motor.");
						CoreVehicles[vehicleid][vehicleBadlyDamage] = 10;
					}
					else {
					    GameTextForPlayer(playerid, "~r~O MOTOR NÃO PODE LIGAR DEVIDO A DANOS", 5000, 4);
					}
					return 1;
				}
				else
				{
				    new owner_delay;
				    if(id != -1) owner_delay = floatround((VehicleData[CarData[id][carModel] - 400][c_engine] - CarData[id][carEngineL]) / 25);
					new delay = floatround(1300/vhealth) + owner_delay;
					if(delay > 5) { delay = 5; }

					if(delay == 0)
					{
						SetEngineStatus(vehicleid, true);
					}
					else
					{
						CoreVehicles[vehicleid][startup_delay] = delay;
						CoreVehicles[vehicleid][startup_delay_sender] = playerid;
						CoreVehicles[vehicleid][startup_delay_random] = delay;
					}
					GameTextForPlayer(playerid, "~g~Motor ligado", 2000, 4);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ligou o motor do %s.", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
				}
				SetCooldown(playerid,COOLDOWN_ENGINE,3);
			}
			case true:
			{
				SetEngineStatus(vehicleid, false);
				SetLightStatus(vehicleid, false);
				GameTextForPlayer(playerid, "~r~Motor desligado", 2000, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desligou o motor do %s.", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
                StopCarBoomBox(vehicleid);
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Este comando está disponível apenas para veículos particulares. Mas Você está em um veículo público.");
		return 1;
	}

	return 1;
}

// Radio System

CMD:m(playerid,params[])
{

	return cmd_megafone(playerid,params);

}

CMD:megafone(playerid,params[])
{
    if(IsACopCar(GetPlayerVehicleID(playerid))) {
	 	if (isnull(params)) return SendSyntaxMessage(playerid, "(/m)egafone [texto]");
		if (GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_SASD)
			SendNearbyMessage(playerid, 60.0, COLOR_YELLOW, "[ %s: %s ]", ReturnName(playerid, 0), params), SQL_LogChat(playerid, "/megafone", params);
		else
			SendClientMessage(playerid, COLOR_GRAD2, "Apenas para a polícia!");
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em uma viatura.");
    return 1;
}

CMD:departamento(playerid, params[]) return cmd_d(playerid, params);

CMD:d(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV && GetFactionType(playerid) != FACTION_SASD)
	    return SendClientMessage(playerid, COLOR_GRAD2,"Você não faz parte de nenhuma equipe!");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "(/d)epartamento [texto]");

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV && GetFactionType(playerid) != FACTION_SASD) {
		SendFactionMessage(i, TEAM_CYAN_COLOR, "** [%s] %s %s: %s **", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
    		

	}
	Log_Write("logs/faction_chat.txt", "[%s] [/departamento] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);


	SQL_LogChat(playerid, "/departamento", params);
	return 1;
}

CMD:r(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r [texto]");

	if (!PlayerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode comprar um rádio em uma conviniencia da sua cidade.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], PlayerData[playerid][pRSlot], ReturnName(playerid, 0), params);
		SendRadioMessage(playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessage(playerid, string);
	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], PlayerData[playerid][pRSlot], ReturnName(playerid, 0), params);
		SendRadioMessage(playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: %d] %s", PlayerData[playerid][pRChannel], PlayerData[playerid][pRSlot], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r1(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r1 [texto]");

	if (PlayerData[playerid][pRadio] < 1)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 1, ReturnName(playerid, 0), params);
		SendRadioMessageEx(1, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(1, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 1, ReturnName(playerid, 0), params);
		SendRadioMessageEx(1, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 1] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r2(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r2 [texto]");

	if (PlayerData[playerid][pRadio] < 2)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 2, ReturnName(playerid, 0), params);
		SendRadioMessageEx(2, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(2, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 2, ReturnName(playerid, 0), params);
		SendRadioMessageEx(2, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 2] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r3(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r3 [texto]");

	if (PlayerData[playerid][pRadio] < 3)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 3, ReturnName(playerid, 0), params);
		SendRadioMessageEx(3, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(3, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 3, ReturnName(playerid, 0), params);
		SendRadioMessageEx(3, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 3] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r4(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r4 [texto]");

	if (PlayerData[playerid][pRadio] < 4)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 4, ReturnName(playerid, 0), params);
		SendRadioMessageEx(4, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(4, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 4, ReturnName(playerid, 0), params);
		SendRadioMessageEx(4, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 4] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r5(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r5 [texto]");

	if (PlayerData[playerid][pRadio] < 5)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 5, ReturnName(playerid, 0), params);
		SendRadioMessageEx(5, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(5, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 5, ReturnName(playerid, 0), params);
		SendRadioMessageEx(5, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 5] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r6(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r6 [texto]");

	if (PlayerData[playerid][pRadio] < 6)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 6, ReturnName(playerid, 0), params);
		SendRadioMessageEx(6, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(6, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 6, ReturnName(playerid, 0), params);
		SendRadioMessageEx(6, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 6] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r7(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r7 [texto]");

	if (PlayerData[playerid][pRadio] < 7)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 7, ReturnName(playerid, 0), params);
		SendRadioMessageEx(7, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(7, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 7, ReturnName(playerid, 0), params);
		SendRadioMessageEx(7, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 7] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:r8(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r8 [texto]");

	if (PlayerData[playerid][pRadio] < 8)
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode usar o rádio 24hr's.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], 8, ReturnName(playerid, 0), params);
		SendRadioMessageEx(8, playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessageEx(8, playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], 8, ReturnName(playerid, 0), params);
		SendRadioMessageEx(8, playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 20.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: 8] %s", PlayerData[playerid][pRChannel], params);
   	SQL_LogChat(playerid, "/radio", szQuery);
	return 1;
}

CMD:rbaixo(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/rbaixo [texto]");

	if (!PlayerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_WHITE,"Você pode comprar um celular em uma conviniência.");

	if (!PlayerData[playerid][pRChannel])
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Você ainda não configurou uma frequencia de rádio.");

	new
	    string[128];

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");

	if (strlen(params) > 80)
	{
		format(string, sizeof(string), "**[CH: %d S: %d] %s: %.80s",PlayerData[playerid][pRChannel], PlayerData[playerid][pRSlot], ReturnName(playerid, 0), params);
		SendRadioMessage(playerid, string);
		format(string, sizeof(string), "...%s **",params[80]);
		SendRadioMessage(playerid, string);

	}
	else {
		format(string, sizeof(string),"**[CH: %d S: %d] %s: %s", PlayerData[playerid][pRChannel], PlayerData[playerid][pRSlot], ReturnName(playerid, 0), params);
		SendRadioMessage(playerid, string);


	}
	format(string, sizeof(string),"(rádio) %s: %s", ReturnName(playerid, 0), params);
	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 5.0, 6000);

	format(szQuery, sizeof(szQuery), "[CH: %d S: %d] %s", PlayerData[playerid][pRChannel], PlayerData[playerid][pRSlot], params);
   	SQL_LogChat(playerid, "/rbaixo", szQuery);
	return 1;
}

CMD:setarslot(playerid, params[])
{
	new
	    slot;

	if (!PlayerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"Você não tem um rádio.");

	if (sscanf(params, "d", slot)) return SendSyntaxMessage(playerid, "/setarslot [1-%d]", PlayerData[playerid][pRadio]);

	if(slot < 1 && slot > PlayerData[playerid][pRadio]) return SendClientMessageEx(playerid, COLOR_GRAD1,"Os slots devem ser entre 1 e %d", PlayerData[playerid][pRadio]);

	if(PlayerData[playerid][pRadio] >= slot) ConnectRadio(playerid, slot, PlayerData[playerid][pRChannel]);
	else SendClientMessage(playerid, COLOR_GRAD1,"Seu rádio não suporta este slot.");

	return 1;
}

CMD:setarcanal(playerid, params[])
{
	new
	    slot, ch;

	if (!PlayerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"Você não tem um rádio.");

	if (sscanf(params, "dd", slot, ch)) return SendSyntaxMessage(playerid, "/setarcanal [slot ID] [canal #]");

	if(PlayerData[playerid][pRChannel] == 190 && GetFactionType(playerid) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais militares.");
	if(PlayerData[playerid][pRChannel] == 191 && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para policiais civis.");
	if(PlayerData[playerid][pRChannel] == 192 && GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para bombeiros.");


	if(PlayerData[playerid][pRadio] >= slot) ConnectRadio(playerid, slot, ch);
	else SendClientMessage(playerid, COLOR_GRAD1, "Seu rádio não suporta este slot.");

	return 1;
}

CMD:rsair(playerid, params[])
{
	if (!PlayerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"Você não tem um rádio.");

	if(PlayerData[playerid][pRChannel])
	{
	    PlayerData[playerid][pRChannel] = 0;
	    SendClientMessage(playerid, COLOR_WHITE, "Você já saiu do rádio.");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em nenhuma estação de rádio.");

	return 1;
}

CMD:rsenha(playerid, params[])
{
    new password[24], esc_password[24];

	if (!PlayerData[playerid][pRadio])
		return SendClientMessage(playerid, COLOR_GRAD1,"Você não tem um rádio.");

	if (sscanf(params, "s[24]", password))
	   	return SendSyntaxMessage(playerid, "/rsenha [password]");

	if(strlen(password) > 16)
		return SendClientMessage(playerid, COLOR_WHITE, "A senha não pode ter mais de 16 caracteres.");

	mysql_escape_string(password,esc_password);
	format(PlayerData[playerid][pRAuth], 16, esc_password);
	SendClientMessage(playerid, COLOR_WHITE, "Você definiu uma senha para sua frequencia de rádio.");

	return 1;
}

CMD:alugarcanal(playerid, params[])
{
	if(PlayerData[playerid][pCash] >= 3000)
	{
		new channel, password[24], query[128];
		if (sscanf(params, "dS(None)[24]", channel, password))
			return SendSyntaxMessage(playerid, "/alugarcanal [canal] [Senha]");

		if(channel == 190) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este canal pertence ao governo.");
		if(channel == 191) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este canal pertence ao governo.");
		if(channel == 192) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este canal pertence ao governo.");

        mysql_escape_string(password, password);

		format(query, sizeof(query), "SELECT * FROM `radio` WHERE `channel` = %d", channel);
		mysql_query(dbCon, query);

		if(cache_num_rows()) {

			new owning_id;
			cache_get_value_name_int(0, "owning_character", owning_id);

			if(PlayerData[playerid][pID] == owning_id)
			{
			    //Update Password

				format(query, sizeof(query), "UPDATE `radio` SET `password` = '%s' WHERE `channel` = %d;", password, channel);
				mysql_query(dbCon, query);

				SendClientMessageEx(playerid, COLOR_WHITE, "Você setou a senha do canal #%d", channel);
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este canal já possui dono. ");
				return 1;
			}
		}
		else
		{
			format(query,sizeof(query),"INSERT INTO `radio` (channel,owning_character,password) VALUES ('%d','%d','%s')", channel, PlayerData[playerid][pID], password);
			mysql_query(dbCon, query);

			PlayerData[playerid][pCash]-=5000;


			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			SQL_SaveCharacter(playerid);

			SendClientMessageEx(playerid, COLOR_WHITE, "Você alugou o canal #%d por R$3,000",channel);
		}
	}
	else
	{

		SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui dinheiro suficiente. (R$5,000) !");
		return 1;

	}
	return 1;
}

CMD:kickoffradio(playerid, params[])
{
	new targetid, query[128];

	if (sscanf(params, "u", targetid))
		return SendSyntaxMessage(playerid, "/kickoffradio [ID]");

    if(playerid == targetid) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode kickar Você mesmo!");

	if(IsPlayerConnected(targetid))
	{
	    if(PlayerData[playerid][pRChannel] == PlayerData[targetid][pRChannel] && PlayerData[playerid][pRChannel] != 0)
	    {
			format(query, sizeof(query), "SELECT * FROM `radio` WHERE `channel` = %d", PlayerData[playerid][pRChannel]);
			mysql_query(dbCon, query);

			if(cache_num_rows()) {

				new owning_id;
				cache_get_value_name_int(0, "owning_character", owning_id);

				if(PlayerData[playerid][pID] == owning_id)
				{
				    PlayerData[targetid][pRChannel] = 0;
					SendClientMessageEx(playerid, COLOR_GRAD1, "Você expulsou %s do seu canal.", ReturnName(targetid, 0));
					SendClientMessageEx(targetid, COLOR_GRAD1, "Você retirou %s do seu canal de rádio.", ReturnName(playerid, 0));
				}
				else
				{
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é dono deste canal de rádio.");
					return 1;
				}
			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é dono deste canal de rádio.");
				return 1;
			}
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é dono deste canal de rádio.");
			return 1;
		}
	}
	return 1;
}

// Radio System


// Private Vehicle System
CMD:veiculo(playerid, params[])
	return cmd_v(playerid, params);

CMD:v(playerid, params[])
{
	new
	    type[24],
		vehicleid,
		query[128],
		cf[16],
		cf2[16],
		mec,
		cf3[16];

	if (sscanf(params, "s[24]S()[16]S()[16]S()[16]", type, cf, cf2, cf3))
 	{
 	    SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
	 	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo [opção]");
	    SendClientMessage(playerid, COLOR_YELLOW3, "[Comandos] spawn, estacionar, vender, registrar, cancelarregistro, comprar, upgrade, luzes");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Comandos] status, rebocar, copiarchave, encontrar, comprarvaga, fechadura");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Delete] sucatear (Aviso): seu veículo será completamente excluido.)");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Dica] Existem instruções sobre como usar todas essas funções. forum.sp-roleplay.com.br");
		SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
		return 1;
	}

	if (!strcmp(type, "lista", true) || !strcmp(type, "spawn", true))
	{
		if(GetNumberOwnerCar(playerid)) ShowPlayerCarMenu(playerid);
		else SendClientMessage(playerid, COLOR_GRAD1, "Você não possui um veículo.");
	}
	/*else if (!strcmp(type, "tickets", true)) cmd_vehiclefines(playerid);
	else if (!strcmp(type, "payticket", true)) {

		new slot, id;

		if(sscanf(params, "{s[24]}du", slot, id)) return SendSyntaxMessage(playerid, "/v payticket [slot] [OfficerID]");

		new carid = PlayerData[playerid][pPCarkey];
		if(carid == 9999 || CarData[carid][carOwner] != PlayerData[playerid][pID]) return SendClientMessage(playerid, COLOR_LIGHTRED, "There are no vehicles currently.");

		if(CarData[carid][carTicket][slot] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "You have no fines in this box!");
    	if(PlayerData[playerid][pCash] < CarData[carid][carTicket][slot]) return SendClientMessage(playerid, COLOR_GREY, "You do not have enough money to pay this fine!");

		if(id == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "{s[24]d}s[24]", maskid);
			if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
			}
		}

		if(id == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "You can not pay for yourself.");
		if(GetFactionType(id) != FACTION_POLICE) return SendClientMessage(playerid, COLOR_GREY,"The player is not a police.");

		SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "You paid the order %d for: R$%d to the staff %s", slot, CarData[carid][carTicket][slot], ReturnName(id, 0));
		SendClientMessageEx(id, COLOR_YELLOW, "%s have paid the order in the price R$%d", ReturnName(playerid, 0), CarData[carid][carTicket][slot]);
		PlayerData[playerid][pCash] -= CarData[carid][carTicket][slot];
        CarData[carid][carTicket][slot] = 0;
	}*/
	else if (!strcmp(type, "vender", true))
	{
        vehicleid = GetPlayerVehicleID(playerid);
       	if((mec = Car_GetID(vehicleid)) != -1)
		{
        
			if(CarData[mec][carOwner] == PlayerData[playerid][pID]) {

				if(!IsPlayerInAnyVehicle(playerid) || vehicleid != CarData[mec][carVehicle])
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar dentro do veículo.");

				if(IsDonateCar(CarData[mec][carModel])) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode vender veiculo premium.");

				new userid = INVALID_PLAYER_ID, price;

				if(sscanf(params, "{s[24]}ud", userid, price)) return SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo vender [ID/Nome] [preço]");

				if(userid == INVALID_PLAYER_ID) {
					new maskid[MAX_PLAYER_NAME];
					sscanf(params, "{s[24]}s[24]{d}", maskid);
					if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
						return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está perto o suficiente!");
					}
				}

				if(userid == playerid)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode vender para sí mesmo!");

				if(tToAccept[userid] != OFFER_TYPE_NONE)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador tem uma oferta em andamente!");


				if (!IsPlayerNearPlayer(playerid, userid, 5.0))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está perto o suficiente!");


				if(GetNumberOwnerCar(userid) >= 10)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador já está no limite de veículos!");

				if(price < 0)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Este preço não é valido!");

				SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Oferta enviada.");

				pToAccept[userid] = playerid;
				vToAccept[userid] = PlayerData[playerid][pPCarkey];
				prToAccept[userid] = price;
				tToAccept[userid] = OFFER_TYPE_VSELL;

				format(query, sizeof(query), "%s ofereceu-se para lhe vender o seu ~y~%s ~n~~w~para ~g~%s~n~~p~pressione ~g~Y~p~ para aceitar ou ~r~N ~p~para negar.", ReturnName(pToAccept[userid], 0), g_arrVehicleNames[CarData[vToAccept[userid]][carModel] - 400], FormatNumber(prToAccept[userid]));
			 	ShowPlayerFooter(userid, query, -1);

			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "não há veículos ofertados atualmente.");
		}
	}
	else if (!strcmp(type, "copiarchave", true))
	{
     	if((mec = Car_GetID(vehicleid)) != -1)
		{
		    if(CarData[mec][carOwner] == PlayerData[playerid][pID]) {

	        	if(!IsPlayerInAnyVehicle(playerid) && vehicleid == CarData[mec][carVehicle]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está em um veículo.");

				if(PlayerData[playerid][pCash] < 500)
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem o suficiente(R$500)!");

				new userid;

				if (sscanf(cf, "u", userid))
					return SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo copiarchave [ID/Nome]");

				if (userid == playerid)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode duplicar para sí mesmo!");

				if(userid == INVALID_PLAYER_ID) {
					new maskid[MAX_PLAYER_NAME];
					sscanf(cf, "s[24]", maskid);
					if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
						return SendClientMessage(playerid, COLOR_LIGHTRED, "não está perto o suficiente!");
					}
				}

				if (!IsPlayerNearPlayer(playerid, userid, 5.0))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "não está perto o suficiente!");


		        SendNearbyMessage(playerid, 30.0, COLOR_GREEN, "* %s deu a cópia da chave do veiculo %s para %s.", ReturnName(playerid, 0), g_arrVehicleNames[CarData[mec][carModel] - 400], ReturnName(userid, 0));
	            PlayerData[userid][pPDupkey] = CarData[mec][carDupKey];
	            PlayerData[playerid][pCash]-=500;

			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "não há veículos atualmente.");
		}
	}
	else if (!strcmp(type, "upgrade", true))
	{
		new id = -1;

		if ((id = Bizz_Nearest(playerid, 10.0)) != -1 && BizInfo[id][bType] == 4)
		{
			vehicleid = GetPlayerVehicleID(playerid);
		    if(PlayerData[playerid][pPCarkey] != 9999 && CarData[PlayerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new uplevel = strval(cf2);

		        if(!strlen(cf))
		        {
	             	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade [upgrade] [upgrade-nível]");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] fechadura, alarme, immob, seguro, carcaca");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] bateria, motor");
	         	}
				else if(!strcmp(cf,"fechadura",true))
				{
					if(uplevel > 0 && uplevel < 5)
					{
						if(!strcmp(cf3,"sim",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADELOCK, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "Esta operação requer %s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[uplevel-1][u_rate]) + VehicleUpgradeLock[uplevel-1][u_price]));
					        SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade [upgrade] [upgrade-nível] {FFFF00}sim");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade fechadura [fechadura-nível]");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Fechadura 1 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[0][u_rate]) + VehicleUpgradeLock[0][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Fechadura 2 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[1][u_rate]) + VehicleUpgradeLock[1][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Fechadura 3 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[2][u_rate]) + VehicleUpgradeLock[2][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Fechadura 4 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeLock[3][u_rate]) + VehicleUpgradeLock[3][u_price]));
					}
				}
				else if(!strcmp(cf,"alarme",true))
				{
					if(uplevel > 0 && uplevel < 5)
					{
						if(!strcmp(cf3,"sim",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEALARM, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "Esta operação requer %s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[uplevel-1][u_rate]) + VehicleUpgradeAlarm[uplevel-1][u_price]));
					        SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade [upgrade] [upgrade-nível] {FFFF00}sim");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade alarme [alarme-nível]");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Alarme 1 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[0][u_rate]) + VehicleUpgradeAlarm[0][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Alarme 2 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[1][u_rate]) + VehicleUpgradeAlarm[1][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Alarme 3 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[2][u_rate]) + VehicleUpgradeAlarm[2][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Alarme 4 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeAlarm[3][u_rate]) + VehicleUpgradeAlarm[3][u_price]));
					}
				}
				else if(!strcmp(cf,"immob",true))
				{
					if(uplevel > 0 && uplevel < 5)
					{
						if(!strcmp(cf3,"sim",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEIMMOB, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "Esta operação requer %s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[uplevel-1][u_rate]) + VehicleUpgradeImmob[uplevel-1][u_price]));
					        SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade [upgrade] [upgrade-nível] {FFFF00}sim");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade immob [immob-nível]");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob 1 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[0][u_rate]) + VehicleUpgradeImmob[0][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob 2 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[1][u_rate]) + VehicleUpgradeImmob[1][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob 3 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[2][u_rate]) + VehicleUpgradeImmob[2][u_price]));
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "Immob 4 - {33AA33}%s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / VehicleUpgradeImmob[3][u_rate]) + VehicleUpgradeImmob[3][u_price]));
					}
				}
				else if(!strcmp(cf,"seguro",true))
				{
					if(uplevel > 0 && uplevel < 4 && !IsABike(vehicleid) && !IsABicycle(vehicleid))
					{
						if(!strcmp(cf3,"sim",true) && strlen(cf3))
					    {
					        //if(IsABicycle(vehicleid) && IsABike(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Sorry, it does not seem to work with this bike.");
							//if(IsABike(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Sorry it looks like it won't work with this motorcycle.");

							if(!VehicleLabel[vehicleid][vLabelTime])
							{
							 	SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEINSURANCE, 10);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "Esta operação requer %s", FormatNumber(((IsABike(vehicleid)) ? 1000 : 2500) *uplevel));
							SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade [upgrade] [upgrade-nível] {FFFF00}sim");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade seguro [seguro-nível]");
		                SendClientMessage(playerid, COLOR_YELLOW3, "seguro 1 nível: O veículo tem mais resistência.");
						SendClientMessage(playerid, COLOR_YELLOW3, "seguro 2 nível: O veículo com dano estático, quando estacionado fica como novo.");
                        SendClientMessage(playerid, COLOR_YELLOW3, "seguro 3 nível: proteção de refinamento de veículos, manteremos o layout personalizado e a mêsica do XM rádio.");
					}
				}
				else if(!strcmp(cf,"carcaca",true))
				{
					if(uplevel >= 10 && uplevel <= 250 && (CarData[PlayerData[playerid][pPCarkey]][carArmour] + float(uplevel)) <= 250)
					{
						if(!strcmp(cf3,"sim",true) && strlen(cf3))
					    {
							if(!VehicleLabel[vehicleid][vLabelTime])
							{
								new time = 5;
								if(uplevel >= 20) time = uplevel/10;

							 	SetVehicleLabel(vehicleid, VLT_TYPE_ARMOUR, time);
								CoreVehicles[vehicleid][vOwnerID] = playerid;
								CoreVehicles[vehicleid][vUpgradeID] = uplevel;
							}
							else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
					    }
					    else
					    {
					        SendClientMessageEx(playerid, COLOR_YELLOW, "Esta operação requer %s.", FormatNumber(uplevel * GetVehicleDataArmourCost(CarData[PlayerData[playerid][pPCarkey]][carModel])));
					        SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade [upgrade] [upgrade-level] {FFFF00}sim");
					    }
					}
					else
					{
		                SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade carcaca [valor]");
		                SendClientMessage(playerid, COLOR_YELLOW3, "Valor: 10-250");
		                SendClientMessageEx(playerid, COLOR_YELLOW3, "{33AA33}R$%d{F0EA92} por ponto de Carcaça.", GetVehicleDataArmourCost(CarData[PlayerData[playerid][pPCarkey]][carModel]));
					}
				}
				else if(!strcmp(cf,"bateria",true))
				{
					if(!strcmp(cf2,"sim",true) && strlen(cf2))
					{
						if(!VehicleLabel[vehicleid][vLabelTime])
						{
							SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEBATTERY, 30);
							CoreVehicles[vehicleid][vOwnerID] = playerid;
							CoreVehicles[vehicleid][vUpgradeID] = uplevel;
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
					}
					else
					{
					   	SendClientMessageEx(playerid, COLOR_YELLOW, "Esta operação requer %s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / 0.48) + floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_battery] * 13.0)));
					  	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade bateria {FFFF00}sim");
					}
				}
				else if(!strcmp(cf,"motor",true))
				{
					if(!strcmp(cf2,"sim",true) && strlen(cf2))
					{
						if(!VehicleLabel[vehicleid][vLabelTime])
						{
							SetVehicleLabel(vehicleid, VLT_TYPE_UPGRADEENGINE, 30);
							CoreVehicles[vehicleid][vOwnerID] = playerid;
							CoreVehicles[vehicleid][vUpgradeID] = uplevel;
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
					}
					else
					{
					   	SendClientMessageEx(playerid, COLOR_YELLOW, "Esta operação requer %s", FormatNumber(floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_price] / 0.72) + floatround(VehicleData[CarData[PlayerData[playerid][pPCarkey]][carModel] - 400][c_engine] * 13.0)));
					  	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade motor {FFFF00}sim");
					}
				}
				else
				{
	             	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo upgrade [upgrade] [upgrade-nível]");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] fechadura, alarme, immob, seguro, carcaca");
	                SendClientMessage(playerid, COLOR_YELLOW3, "[UPGRADES] bateria, motor");
				}
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar no veículo.");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Você não está na concessionaria.");
	}
	else if (!strcmp(type, "sucatear", true))
	{
		vehicleid = GetPlayerVehicleID(playerid);
	    if(PlayerData[playerid][pPCarkey] != 9999 && CarData[PlayerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new scrap_price = VehicleData[GetVehicleModel(vehicleid) - 400][c_scrap];
	        if(scrap_price)
	        {
			    if(!strcmp(cf,"sim",true) && strlen(cf))
			    {
					format(query, sizeof(query), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[PlayerData[playerid][pPCarkey]][carID]);
					mysql_tquery(dbCon, query, "OnPlayerVehicleScrap", "dd", playerid, scrap_price);
			    }
			    else
			    {
			 	    SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: Você optou por tornar o veículo um entulho.");
				 	SendClientMessageEx(playerid, COLOR_YELLOW3, "SERVER: Você receberia apenas %s dos escombros.", FormatNumber(scrap_price));
				    SendClientMessage(playerid, COLOR_YELLOW3, "SERVER: Quando Você destruiu um entulho, o veículo será removido.");
			        SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo sucatear sim");
			    }
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Entre em contato com o administrador. Por causa do preço mais baixo R$1");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar no veículo.");
	}
	else if (!strcmp(type, "comprar", true))
	{
	    new id = -1;

		if ((id = Bizz_Nearest(playerid)) != -1 && BizInfo[id][bType] == 4)
		{
            ShowPlayerDealershipMenu(playerid);
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Você não está na concessionaria.");
	}
	else if (!strcmp(type, "encontrar", true))
	{
	    if(PlayerData[playerid][pPCarkey] != 9999 && CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID]) {
			new vid = CarData[PlayerData[playerid][pPCarkey]][carVehicle];
			if(GetVehicleDriver(vid) == INVALID_PLAYER_ID && !VehicleLabel[vid][vLabelTime])
			{
			    new Float:vehDistance[3];
			    GetVehiclePos(vid, vehDistance[0], vehDistance[1], vehDistance[2]);
				SetPlayerCheckpoint(playerid,vehDistance[0], vehDistance[1], vehDistance[2], 4.0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Tem alguém no seu veículo por isso não conseguimos encontrar!");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhum veículo foi encontrado.");
	}
/*	else if (!strcmp(type, "estacionar", true))
	{
	    vehicleid = GetPlayerVehicleID(playerid);
	    if(PlayerData[playerid][pPCarkey] != 9999 && CarData[PlayerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
		    if (IsPlayerInRangeOfPoint(playerid, 4.0, CarData[PlayerData[playerid][pPCarkey]][carPos][0], CarData[PlayerData[playerid][pPCarkey]][carPos][1], CarData[PlayerData[playerid][pPCarkey]][carPos][2])) {
                SaveVehicleDamage(vehicleid);
				Car_Save(vehicleid);
                Car_DespawnEx(PlayerData[playerid][pPCarkey]);
                PlayerData[playerid][pPCarkey] = 9999;
                SendClientMessage(playerid, COLOR_GREEN, "Veiculo estacionado.");
		    }
		    else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa comprar essa vaga para poder estacionar seus veículo.");
			    SetPlayerCheckpoint(playerid,CarData[PlayerData[playerid][pPCarkey]][carPos][0], CarData[PlayerData[playerid][pPCarkey]][carPos][1], CarData[PlayerData[playerid][pPCarkey]][carPos][2], 4.0);
				gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
			}
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar no veículo.");
	}*/
	//// ESTACIONAR BY IMAC /////////
	else if (!strcmp(type, "estacionar", true))
	{
	    vehicleid = GetPlayerVehicleID(playerid);
     	if((mec = Car_GetID(vehicleid)) != -1)
		{
		    if(CarData[mec][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
			    if (IsPlayerInRangeOfPoint(playerid, 4.0, CarData[mec][carPos][0], CarData[mec][carPos][1], CarData[mec][carPos][2])) {
	                SaveVehicleDamage(vehicleid);
	                CarData[mec][spawnado] = 0;
					Car_Save(vehicleid);
	                Car_DespawnEx(mec);
	                //PlayerData[playerid][pPCarkey] = 9999;
	                SendClientMessage(playerid, COLOR_GREEN, "Veiculo estacionado.");
			    }
			    else {
					SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa comprar essa vaga para poder estacionar seus veículo.");
				    SetPlayerCheckpoint(playerid,CarData[mec][carPos][0], CarData[mec][carPos][1], CarData[mec][carPos][2], 4.0);
					gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
				}
		    }
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar no veículo.");
		}
	}
	else if (!strcmp(type, "comprarvaga", true))
	{
	    vehicleid = GetPlayerVehicleID(playerid);
     	if((mec = Car_GetID(vehicleid)) != -1)
		{
		    if(CarData[mec][carVehicle] == vehicleid && CarData[mec][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		    {
		        new bool:housepark = false;

			    foreach(new i : sv_houses) if (IsPlayerInRangeOfPoint(playerid, 20.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ]) && HouseInfo[i][hOwned] != 0 && PlayerData[playerid][pHouseKey] == i) {
					housepark = true;
					break;
				}
		        if(PlayerData[playerid][pCash] < 1000 && !housepark)
					return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem o suficiente(R$1,000)!");

				format(query, sizeof(query), "SELECT carPosX, carPosY, carPosZ FROM `cars`");
				mysql_query(dbCon, query);

				new
					Float:vehDistance[4],
					bool:checked = false
				;

				new rows;
				cache_get_row_count(rows);

				for (new i = 0; i < rows; i ++)
				{
					cache_get_value_index_float(i, 0,	vehDistance[0]);
					cache_get_value_index_float(i, 1,	vehDistance[1]);
					cache_get_value_index_float(i, 2,	vehDistance[2]);

				    if (IsPlayerInRangeOfPoint(playerid, 4.5, vehDistance[0], vehDistance[1], vehDistance[2])) {
						checked = true;
						break;
					}
				}

				if(!checked)
				{
				    GetVehiclePos(vehicleid, vehDistance[0], vehDistance[1], vehDistance[2]);
				    GetVehicleZAngle(vehicleid, vehDistance[3]);

	                CarData[mec][carPos][0]=vehDistance[0];
	                CarData[mec][carPos][1]=vehDistance[1];
	                CarData[mec][carPos][2]=vehDistance[2];
	                CarData[mec][carPos][3]=vehDistance[3];
	                SaveVehicleDamage(vehicleid);
	                Car_Save(vehicleid);
	                Car_DespawnEx(mec);
	                //PlayerData[playerid][pPCarkey] = 9999;
	                SendClientMessage(playerid, COLOR_GREEN, "Veiculo estacionado.");

		         	if(!housepark) {
					 	PlayerData[playerid][pCash] -= 5000;

						format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
						mysql_query(dbCon, szQuery);
					}
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Esta vaga já está sendo usado.");
			}
		    else SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar no veículo.");
	    }
	}
	else if (!strcmp(type, "status", true))
	{
	    vehicleid = GetPlayerVehicleID(playerid);
    	if((mec = Car_GetID(vehicleid)) != -1)
		{
		    if(CarData[mec][carVehicle] == vehicleid && CarData[mec][carOwner] == PlayerData[playerid][pID] && GetPlayerVehicleID(playerid) == CarData[mec][carVehicle] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {
				SendClientMessageEx(playerid, COLOR_WHITE, "Vida útil: Motor[%.2f], Bateria[%.2f], Km's rodados[%.2f]", CarData[mec][carEngineL], CarData[mec][carBatteryL], CarData[mec][carMileage]);
		    	SendClientMessageEx(playerid, COLOR_WHITE, "Segurança: Fechadura[%d], Alarme[%d], Immob[%d], Seguro[%d]", CarData[mec][carLock], CarData[mec][carAlarm], CarData[mec][carImmob], CarData[mec][carInsurance]);

				if(CarData[mec][carArmour]) {
					SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Cor primária[{%06x}#%d{FFFFFF}], Cor secundária[{%06x}#%d{FFFFFF}], Placa[%s], Carcaça[%.2f]",
					g_arrSelectColors[CarData[mec][carColor1]] >>> 8, CarData[mec][carColor1], g_arrSelectColors[CarData[mec][carColor2]] >>> 8, CarData[mec][carColor2], CarData[mec][carPlate], CarData[mec][carArmour]);
			    }
			    else
			    {
					SendClientMessageEx(playerid, COLOR_WHITE, "Misc: Cor primária[{%06x}#%d{FFFFFF}], Cor secundária[{%06x}#%d{FFFFFF}], Placa[%s]",
					g_arrSelectColors[CarData[mec][carColor1]] >>> 8, CarData[mec][carColor1], g_arrSelectColors[CarData[mec][carColor2]] >>> 8, CarData[mec][carColor2], CarData[mec][carPlate]);
			    }
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa estar no veículo.");
		}
	}
	else if (!strcmp(type, "registrar", true))
	{

		if(PlayerData[playerid][pCash] < 100)
			return SendClientMessage(playerid, COLOR_YELLOW3, "Esta operação requer R$100");

		new id = -1;

		if ((id = Bizz_Nearest(playerid)) != -1 && BizInfo[id][bType] == 13)
		{
		    vehicleid = GetPlayerVehicleID(playerid);
	     	if((mec = Car_GetID(vehicleid)) != -1)
			{
			    if(CarData[mec][carVehicle] == vehicleid && CarData[mec][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
					if(!VehicleLabel[vehicleid][vLabelTime])
					{
			         	SetVehicleLabel(vehicleid, VLT_TYPE_REGISTER, 10);
						CoreVehicles[vehicleid][vOwnerID] = playerid;
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED, "O veiculo atual já iniciou a operação.");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhum veículo foi encontrado.");
			}
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "Você não está no dentran.");
	}
	else if (!strcmp(type, "cancelarregistro", true))
	{
	    if (IsAtBlackMarket(playerid)) {
		    vehicleid = GetPlayerVehicleID(playerid);
	     	if((mec = Car_GetID(vehicleid)) != -1)
			{
			    if(CarData[mec][carVehicle] == vehicleid && CarData[mec][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			    {
					if(!VehicleLabel[vehicleid][vLabelTime])
					{
			         	SetVehicleLabel(vehicleid, VLT_TYPE_UNREGISTER, 10);

						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: A remoção do registro do veículo começou...");
						CoreVehicles[vehicleid][vOwnerID] = playerid;
					}
					else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhum veículo foi encontrado.");
			}
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no lado negro.");
	}
	else if (!strcmp(type, "rebocar", true))
	{
	    if(PlayerData[playerid][pPCarkey] != 9999 && CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID]) {

		 	if(PlayerData[playerid][pCash] < 2000)
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem o suficiente(R$2,000)!");

			new vid = CarData[PlayerData[playerid][pPCarkey]][carVehicle];
			if(GetVehicleDriver(vid) == INVALID_PLAYER_ID)
			{
			    if(!VehicleLabel[vid][vLabelTime])
			    {
	                SetVehicleLabel(vid, VLT_TYPE_TOWING, 15);
					SendClientMessage(playerid, COLOR_GREEN, "O veiculo está sendo rebocado.");
					PlayerData[playerid][pCash] -= 2000;
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "O veiculo atual já iniciou a operação.");
			}
			else SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s foi usado o /quebrar tranca", g_arrVehicleNames[GetVehicleModel(vid) - 400]);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhum veiculo foi encontrado.");
	}
	else if (!strcmp(type, "luzes", true))
	{
	    if (IsPlayerInAnyVehicle(playerid)) {

			vehicleid = GetPlayerVehicleID(playerid);

			if (!IsEngineVehicle(vehicleid))
				return SendClientMessage(playerid, COLOR_GRAD1, "Você não está no veículo");

			if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é o motorista.");

			switch (GetLightStatus(vehicleid))
			{
			    case false:
			    {
			        SetLightStatus(vehicleid, true);
			        GameTextForPlayer(playerid, "~g~Luzes ligadas", 2000, 4);
				}
				case true:
				{
				    SetLightStatus(vehicleid, false);
				    GameTextForPlayer(playerid, "~r~Luzes desligadas", 2000, 4);
				}
			}

		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no veículo.");
	}
	else if (!strcmp(type, "trancar", true))
	{

		if( (IsPlayerInAnyVehicle(playerid) ? ((vehicleid = GetPlayerVehicleID(playerid)) != 0) : ((vehicleid = Car_Nearest(playerid)) != -1)) /*&& !IsABicycle(vehicleid)*/)
		{
	 		new
	 		    id,
			    engine,
			    lights,
			    alarm,
			    doors,
			    bonnet,
			    boot,
			    objective;


		    if((id = Car_GetID(vehicleid)) != -1)
		    {
				if((CarData[id][carOwner] == PlayerData[playerid][pID]) || id == PlayerData[playerid][pPDupkey]) {

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

					if (!CarData[id][carLocked])
					{
						CarData[id][carLocked] = true;
						Car_Save(id);

	                    format(query, sizeof(query), "~r~%s Trancada", ReturnVehicleModelName(CarData[id][carModel]));
						GameTextForPlayer(playerid, query, 2000, 4);

						//PlayerPlaySoundEx(playerid, 24600);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
					}
					else
					{
						CarData[id][carLocked] = false;
						Car_Save(id);

	                    format(query, sizeof(query), "~g~%s Destrancada", ReturnVehicleModelName(CarData[id][carModel]));
						GameTextForPlayer(playerid, query, 2000, 4);


						//PlayerPlaySoundEx(playerid, 24600);
						SetVehicleParamsEx(vehicleid, engine, lights, 0, 0, bonnet, boot, objective);
					}

				}
				else {

					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Você não pode acessar este veículo.");
					if (CarData[id][carLocked]) {
						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Para tentar entrar digite: \"/tranca quebrar\"");
					}
				}
		    }
		    else
		    {

                if (IsPlayerInAnyVehicle(playerid)) {

					GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

					if(doors != 1)
					{
					    format(query, sizeof(query), "~r~%s Trancada", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, query, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
					}
					else
					{
					    format(query, sizeof(query), "~g~%s Destrancada", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
						GameTextForPlayer(playerid, query, 2000, 4);
						SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
					}

				}
				else
				{
				    if(gLastCar[playerid] == vehicleid)
				    {
						GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

						if(doors != 1)
						{
						    format(query, sizeof(query), "~r~%s Trancada", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
							GameTextForPlayer(playerid, query, 2000, 4);
							SetVehicleParamsEx(vehicleid, engine, lights, alarm, 1, bonnet, boot, objective);
						}
						else
						{
						    format(query, sizeof(query), "~g~%s Destrancada", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
							GameTextForPlayer(playerid, query, 2000, 4);
							SetVehicleParamsEx(vehicleid, engine, lights, alarm, 0, bonnet, boot, objective);
						}
				    }
				}

		    }
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "não há veículos perto de Você.");
		//if (IsPlayerInAnyVehicle(playerid))
	    /*if(PlayerData[playerid][pPCarkey] != 999) {

			vehicleid = CarData[PlayerData[playerid][pPCarkey]][carVehicle];

			switch (GetLightStatus(vehicleid))
			{
			    case false:
			    {
			        SetLightStatus(vehicleid, true);
			        GameTextForPlayer(playerid, "~g~Lights On", 2000, 4);
				}
				case true:
				{
				    SetLightStatus(vehicleid, false);
				    GameTextForPlayer(playerid, "~r~Lights Off", 2000, 4);
				}
			}

		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "No vehicles are currently called.");*/
	}
	else
	{
 	    SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
	 	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /(v)eiculo [OPÇÃO]");
	    SendClientMessage(playerid, COLOR_YELLOW3, "[OPÇÃO] lista, estacionar, vender, registrar, cancelarregistro, comprar, upgrade, luzes");
        SendClientMessage(playerid, COLOR_YELLOW3, "[OPÇÃO] status, rebocar, copiarchaves, faction, encontrar, comprarvaga, fechadura");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Delete] sucatear (Um aviso: Seu veículo será completamente removido.)");
        SendClientMessage(playerid, COLOR_YELLOW3, "[Dica] Existem instruções para usar todas essas práticas. forum.sp-roleplay.com.br");
		SendClientMessage(playerid, COLOR_YELLOW3, "___________________________________________________________");
	}
	return 1;
}


CMD:verchassi(playerid, params[]){
	//new vehicleid = GetPlayerVehicleID(playerid);
	foreach(new i : sv_playercar) if (IsPlayerNearHood(playerid, CarData[i][carVehicle])) if(GetHoodStatus(CarData[i][carVehicle]) || !IsDoorVehicle(CarData[i][carVehicle]))
	{
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "Chassi: %s", CarData[i][carChassi]);
	}
	return 1;
}

CMD:capo(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearHood(playerid, i) || GetPlayerVehicleID(playerid) == i)
	{
	    if (!IsDoorVehicle(i))
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Este carro não tem capo.");

		if (GetEngineStatus(i))
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "O veiculo deve estar desligado.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abriu o capô do carro.", ReturnName(playerid, 0));
	        GameTextForPlayer(playerid, "~g~capô aberto", 2000, 4);
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s fechou o capô do carro.", ReturnName(playerid, 0));
	        GameTextForPlayer(playerid, "~r~capô fechado", 2000, 4);
		}
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar na frente do carro.");
	return 1;
}


CMD:portamalas(playerid, params[]){
	new opcao[24], weaponid;
	if(sscanf(params, "s[24]I(99)", opcao, weaponid))
		return SendClientMessage(playerid,COLOR_LIGHTRED,"{FF6347}USE:{FFFFFF} /portamalas [(tog/abrir/fechar) | (checa/ver) | (colocar/guardar) | (pegar/retirar)]");

	if(strcmp(opcao, "abrir", true) == 0 || strcmp(opcao, "fechar", true) == 0) {
		for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) || GetPlayerVehicleID(playerid) == i)
		{
			if (!IsDoorVehicle(i))
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este veículo não tem porta-malas.");

			if(IsVehicleTrunkBroken(i))
			{
				SendClientMessage(playerid, COLOR_YELLOW, "(( A porta do porta-malas caiu do chassi.))");
				SendClientMessage(playerid, COLOR_YELLOW, "((Enquanto o veiculo estiver sem portamalas ou com portamalas aberto. Você poderia utilizar os demais comandos.))");
				return 1;
			}

			if (GetLockStatus(i))
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: veículo trancado");

			if (!GetTrunkStatus(i))
			{
				SetTrunkStatus(i, true);
				SendClientMessage(playerid, COLOR_YELLOW, "Você abriu o porta-malas do carro.");
				if(Car_GetID(i) != -1 && IsVehicleTrunk(i)) SendClientMessage(playerid, COLOR_WHITE, "Você pode utilizar os demais comandos.");

				format(szString, sizeof(szString), "* %s abre o porta-malas do veículo %s", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(i) - 400]);
				SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
				SendClientMessage(playerid, COLOR_PURPLE, szString);

			}
			else
			{
				SetTrunkStatus(i, false);
				SendClientMessage(playerid, COLOR_YELLOW, "Você fechou o porta-malas do veículo.");

				format(szString, sizeof(szString), "* %s fecha o porta-malas do veículo %s", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(i) - 400]);
				SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
				SendClientMessage(playerid, COLOR_PURPLE, szString);
			}
			return 1;
		}
		SendClientMessage(playerid, COLOR_GRAD1, "Você não está no portamalas do veículo.");
	}else if(strcmp(opcao, "ver" , true) == 0 || strcmp(opcao, "checar" , true) == 0){

		if(PlayerData[playerid][pLevel] < 2)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nível 2 ou mais para usar este comando.");


		new bool:success;

		new vehicleid = GetPlayerVehicleID(playerid);
		foreach(new i : sv_playercar)
		{
			if(vehicleid == CarData[i][carVehicle]  || (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))))
			{
				new string[128];

				for(new x = 0; x != MAX_CAR_WEAPONS; x++) {
					if(CarData[i][carWeapon][x] != 0) {
						if(IsMelee(CarData[i][carWeapon][x])) {
							format(string, sizeof(string), "%s(%d)%s\n", string, x+1, ReturnWeaponName(CarData[i][carWeapon][x]));
						}
						else format(string, sizeof(string), "%s(%d)%s[munição:%d]\n", string, x+1, ReturnWeaponName(CarData[i][carWeapon][x]), CarData[i][carAmmo][x]);
					}
					else format(string, sizeof(string), "%s[VAZIO]\n", string);
				}
				Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Armazenamento de armas", string, ">>", "");
				success = true;
				return 1;
			}
		//	else return SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: You are not near the storage of the vehicle.");
		}
		if(!success) SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você deve estar perto de um veículo ou dentro da sua casa para armazenar qualquer tipo de arma.");
	}
	else if(strcmp(opcao, "colocar", true) == 0 || strcmp(opcao, "guardar", true) == 0)
	{
		new vid = GetPlayerVehicleID(playerid);
		new bool:success;
		if(!vid) foreach(new i : sv_vehicles) if (IsPlayerNearBoot(playerid, i) && (GetTrunkStatus(i) || IsVehicleTrunkBroken(i))) { vid = i; break; }

		new vehicle_fid = -1;
		if(GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_SASD && vid && (vehicle_fid = IsACopCar(vid)) != -1 && (vehicleVariables[vehicle_fid][vVehicleModelID] >= 596 && vehicleVariables[vehicle_fid][vVehicleModelID] <= 599 || vehicleVariables[vehicle_fid][vVehicleModelID] == 427))
		{
			//new weaponid;
			/*if (sscanf(params, "d", weaponid) || !weaponid)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "/portamalas colocar [WEAPON ID (25/29/31/27/34)]");*/
			if(weaponid == 99)
				return SendClientMessage(playerid, COLOR_LIGHTRED,"USE:{FFFFFF} /portamalas colocar [id (24 EX:Desert Eagle)]");

			if(weaponid == 25 || weaponid == 29 || weaponid == 31 || weaponid == 27 || weaponid == 34) {
				for (new i = 0; i < 13; i ++) {
				    if (PlayerData[playerid][pGuns][i] == weaponid) {
					    RemoveWeapon(playerid, weaponid);
					    SendClientMessageEx(playerid, COLOR_YELLOW,"Você armazenou %s no %s", ReturnWeaponName(weaponid), g_arrVehicleNames[vehicleVariables[vehicle_fid][vVehicleModelID]-400]);
						return 1;
					}
				}
				return SendClientMessage(playerid, COLOR_LIGHTRED,"Você não tem armas desse tipo.");
			}
			else {
			    return SendClientMessage(playerid, COLOR_LIGHTRED,"Desculpe, não há lugar para esta arma.");
			}
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			foreach(new i : sv_playercar) if (IsPlayerNearBoot(playerid, CarData[i][carVehicle])) if(GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))
			{
				if(weaponid == 99)
					return SendClientMessage(playerid, COLOR_LIGHTRED,"USE:{FFFFFF} /portamalas colocar [id (24 EX:Desert Eagle)]");

				if (PlayerData[playerid][pGun1] == weaponid || PlayerData[playerid][pGun2] == weaponid || PlayerData[playerid][pGun3] == weaponid) {

					new ammo, license, slot;

					if(PlayerData[playerid][pGun1] == weaponid)
					{
					    ammo = PlayerData[playerid][pAmmo1];
					    PlayerData[playerid][pGun1]=0;
					    PlayerData[playerid][pAmmo1]=0;
					}
					else if(PlayerData[playerid][pGun2] == weaponid)
					{
					    ammo = PlayerData[playerid][pAmmo2];
					    license = PlayerData[playerid][pPLicense];
					    PlayerData[playerid][pGun2]=0;
					    PlayerData[playerid][pAmmo2]=0;
					    PlayerData[playerid][pPLicense]=0;
					}
					else
					{
					    ammo = PlayerData[playerid][pAmmo3];
					    license = PlayerData[playerid][pSLicense];
					    PlayerData[playerid][pGun3]=0;
					    PlayerData[playerid][pAmmo3]=0;
					    PlayerData[playerid][pSLicense]=0;
					}
					RemoveWeapon(playerid, weaponid);

					if(!CarData[i][carWeapon][0])
					{
					    CarData[i][carWeapon][0] = weaponid;
					    CarData[i][carAmmo][0] = ammo;
					    CarData[i][carWeaponLicense][0]=license;
					    slot=0;
					}
					else if(!CarData[i][carWeapon][1])
					{
					    CarData[i][carWeapon][1] = weaponid;
					    CarData[i][carAmmo][1] = ammo;
					    CarData[i][carWeaponLicense][1]=license;
					    slot=1;
					}
					else if(!CarData[i][carWeapon][2])
					{
					    CarData[i][carWeapon][2] = weaponid;
					    CarData[i][carAmmo][2] = ammo;
					    CarData[i][carWeaponLicense][2]=license;
					    slot=2;
					}
					else if(!CarData[i][carWeapon][3])
					{
                        CarData[i][carWeapon][3] = weaponid;
                        CarData[i][carAmmo][3] = ammo;
                        CarData[i][carWeaponLicense][3]=license;
                        slot=3;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"não há mais espaço neste carro.");

					if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) colocou %s(%d) em seu carro %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, i, CarData[i][carID], license);

                    SendClientMessage(playerid, COLOR_LIGHTRED,"[ ! ] {FFFFFF}Para mover sua camera, segure espaço{FFFFFF} e mova o mouse.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Você armazenou %s no %s", ReturnWeaponName(weaponid), g_arrVehicleNames[CarData[i][carModel] - 400]);
                    SendClientMessage(playerid, COLOR_LIGHTRED,"(/portamalas pegar) para pegar sua arma em sua casa ou carro.");

					new
						Float:fX,
						Float:fY,
						Float:fZ,
						Float:vA,
						Float:finalx,
						Float:finaly,
						Float:finalz,
						Float:finalrz;

					GetVehicleBootInside(CarData[i][carVehicle], fX, fY, fZ);
					GetVehicleZAngle(CarData[i][carVehicle], vA);

					CarPlace[i][slot][cPobj] = CreateDynamicObject(GetGunObjectID(weaponid), fX, fY, fZ + 0.1, 90.0, 270, vA+135);

					GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ + 0.1, vA+135, finalx, finaly, finalz, finalrz);

					CarPlace[i][slot][cPx]=finalx;
					CarPlace[i][slot][cPy]=finaly;
					CarPlace[i][slot][cPz]=finalz;
					CarPlace[i][slot][cPrx]=90.0;
					CarPlace[i][slot][cPry]=270.0;
					CarPlace[i][slot][cPrz]=finalrz;
					//CarPlace[i][slot][cPType]=0;

						//TestObject[playerid] = CreateDynamicObject(326, fX, fY, fZ, -100.0, -45, vA+135);
					EditDynamicObject(playerid, CarPlace[i][slot][cPobj]);

					PlayerPlaceSlot[playerid]=slot;
					PlayerPlaceCar[playerid]=i;

				} else return SendClientMessage(playerid, COLOR_LIGHTRED,"Desculpe, apenas as armas que estáo no /status");

				success = true;
				break;
			}
			if(!success) return SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você deve estar perto do porta-malas do veículo para utilizar este comando.");
		}
	}else if(strcmp(opcao, "pegar", true) == 0 || strcmp(opcao, "retirar", true) == 0){
		new vid = GetPlayerVehicleID(playerid);
		new bool:success;
		if(!vid) foreach(new i : sv_vehicles) if (IsPlayerNearBoot(playerid, i) && (GetTrunkStatus(i) || IsVehicleTrunkBroken(i))) { vid = i; break; }

		new vehicle_fid = -1;
		if(GetFactionType(playerid) == FACTION_POLICE && GetFactionType(playerid) == FACTION_SASD && vid && (vehicle_fid = IsACopCar(vid)) != -1 && (vehicleVariables[vehicle_fid][vVehicleModelID] >= 596 && vehicleVariables[vehicle_fid][vVehicleModelID] <= 599 || vehicleVariables[vehicle_fid][vVehicleModelID] == 427))
		{
			if (weaponid == 99)
				return SendClientMessage(playerid, COLOR_WHITE, "/portamalas pegar/retirar [SLOT ID (1/2/3/4/5)]");

			if(weaponid >= 1 && weaponid <= 5) {
			    new armaid,ammo;

			    if(weaponid >= 4 && !PlayerData[playerid][pSwat]) return SendClientMessage(playerid, COLOR_LIGHTRED,"Este arma sí pode ser usada pelas as divisÃµes especiais das policias.");

				switch(weaponid) {
			        case 1: armaid = 25, ammo = 100;
			        case 2: armaid = 29, ammo = 500;
			        case 3: armaid = 31, ammo = 500;
			        case 4: armaid = 27, ammo = 100;
			        case 5: armaid = 34, ammo = 50;
			    }
				if(PlayerData[playerid][pGuns][g_aWeaponSlots[armaid]] == 0) {
					GivePlayerWeaponEx(playerid, armaid, ammo);
				    return 1;
				}
				return SendClientMessageEx(playerid, -1, "Arma: %d - %s Este slot está em uso.", PlayerData[playerid][pGuns][g_aWeaponSlots[armaid]], ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[armaid]]));
			}
			else {
			    return SendClientMessage(playerid, COLOR_LIGHTRED,"Desculpe, nenhuma dessas armas foi encontrada.");
			}
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			foreach(new i : sv_playercar) if (IsPlayerNearBoot(playerid, CarData[i][carVehicle])) if(GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))
			{
				if (weaponid == 99)
					return SendClientMessage(playerid, COLOR_WHITE, "/portamalas pegar [SLOT ID (1/2/3/4/5)]");

				if (!GetEngineStatus(CarData[i][carVehicle]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O motor deve estar ligado.");

                weaponid--;

				if(weaponid >= 0 && weaponid < MAX_CAR_WEAPONS && CarData[i][carWeapon][weaponid])
				{
					if (!CarPlace[i][weaponid][cPType] || !IsDoorVehicle(CarData[i][carVehicle]))
					{
						if(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][weaponid]]] != 0) {
							SendClientMessageEx(playerid, -1, "Arma: %d - %s Este slot está em uso.", PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][weaponid]]], ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][weaponid]]]));
						    return 1;
						}
					    DestroyDynamicObject(CarPlace[i][weaponid][cPobj]);
						GivePlayerValidWeapon(playerid, CarData[i][carWeapon][weaponid], CarData[i][carAmmo][weaponid], CarData[i][carWeaponLicense][weaponid]);

						if(CarData[i][carWeaponLicense][weaponid]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) pegou %s(%d) do carro %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][weaponid]), CarData[i][carAmmo][weaponid], i, CarData[i][carID], CarData[i][carWeaponLicense][weaponid]);

						CarData[i][carWeapon][weaponid]=0;
						CarData[i][carAmmo][weaponid]=0;
						CarData[i][carWeaponLicense][weaponid]=0;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"Nenhuma arma encontrada!");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");

				success = true;
				break;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");
			}
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new i = -1;

			if((i = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

				if (weaponid == 99)
					return SendClientMessage(playerid, COLOR_WHITE, "/portamalas pegar [SLOT ID (1/2/3/4/5)]");

				if (!GetEngineStatus(CarData[i][carVehicle]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O motor deve estar ligado.");

                weaponid--;
				if(weaponid >= 0 && weaponid < MAX_CAR_WEAPONS && CarData[i][carWeapon][weaponid])
				{
					if (CarPlace[i][weaponid][cPType] || !IsDoorVehicle(CarData[i][carVehicle]))
					{
						if(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][weaponid]]] != 0) {
							SendClientMessageEx(playerid, -1, "Arma: %d - %s Este slot está em uso.", PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][weaponid]]], ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][weaponid]]]));
						    return 1;
						}
					    DestroyDynamicObject(CarPlace[i][weaponid][cPobj]);
						GivePlayerValidWeapon(playerid, CarData[i][carWeapon][weaponid], CarData[i][carAmmo][weaponid], CarData[i][carWeaponLicense][weaponid]);

                        if(CarData[i][carWeaponLicense][weaponid]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) pegou %s(%d) do carro %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][weaponid]), CarData[i][carAmmo][weaponid], i, CarData[i][carID], CarData[i][carWeaponLicense][weaponid]);

						CarData[i][carWeapon][weaponid]=0;
						CarData[i][carAmmo][weaponid]=0;
						CarData[i][carWeaponLicense][weaponid]=0;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"não tem nenhuma arma próximo a Você!");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");

				success = true;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");
			}
		}
	}
	return 1;
}


/*CMD:portamalas(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) || GetPlayerVehicleID(playerid) == i)
	{
	    if (!IsDoorVehicle(i))
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este veículo não tem porta-malas.");

		if(IsVehicleTrunkBroken(i))
		{
			SendClientMessage(playerid, COLOR_YELLOW, "(( A porta do porta-malas caiu do chassi.");
			SendClientMessage(playerid, COLOR_YELLOW, "(( Enquanto estiver quebrado/espaço aberto teria acesso concedido /takegun e /place");
		    return 1;
		}

		if (GetLockStatus(i))
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: veículo trancado");

	    if (!GetTrunkStatus(i))
		{
	        SetTrunkStatus(i, true);
	        SendClientMessage(playerid, COLOR_YELLOW, "Você abriu o porta-malas do carro.");
	        if(Car_GetID(i) != -1 && IsVehicleTrunk(i)) SendClientMessage(playerid, COLOR_WHITE, "Use /place e /takegun");

			format(szString, sizeof(szString), "* %s abre o porta-malas do veículo %s", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(i) - 400]);
		 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
		 	SendClientMessage(playerid, COLOR_PURPLE, szString);

		}
		else
		{
			SetTrunkStatus(i, false);
			SendClientMessage(playerid, COLOR_YELLOW, "Você fechou o porta-malas do veículo.");

			format(szString, sizeof(szString), "* %s fecha o porta-malas do veículo %s", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(i) - 400]);
		 	SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);
		 	SendClientMessage(playerid, COLOR_PURPLE, szString);
		}
	    return 1;
	}
	SendClientMessage(playerid, COLOR_GRAD1, "Você tem que ficar perto da parte de três do carro ou no carro.");

	return 1;
}*/
 /*
stock GetDoorState(doorStates, Door:door, DoorState:doorState)
	return (doorStates >>> (8 * door)) & doorState;
	*/
stock IsVehicleTrunkBroken(vehicleid)
{
	new damage1, damage2, damage3, damage4;
  	GetVehicleDamageStatus(vehicleid, damage1, damage2, damage3, damage4);
	//new RearBumper = damage1 >> 24 & 15;
	//new RearBumper = damage1 >> 8 * damage1 & 15;
	/*printf("Panels %d %d %d %d", (damage1 >>> (8 * 1) & 15), (damage1 >>> (8 * 2) & 15), (damage1 >>> (8 * 3) & 15), (damage1 >>> (8 * 4) & 15));
	printf("Doors %d %d %d %d", (damage2 >>> (8 * 1) & 15), (damage2 >>> (8 * 2) & 15), (damage2 >>> (8 * 3) & 15), (damage2 >>> (8 * 4) & 15));
	printf("Lights %d %d %d %d", (damage3 >>> (8 * 1) & 15), (damage3 >>> (8 * 2) & 15), (damage3 >>> (8 * 3) & 15), (damage3 >>> (8 * 4) & 15));
	printf("Tired %d %d %d %d", (damage4 >>> (8 * 1) & 15), (damage4 >>> (8 * 2) & 15), (damage4 >>> (8 * 3) & 15), (damage4 >>> (8 * 4) & 15));*/
	return (damage2 >>> 8 & 15) >= 4 ? true:false;
	// damage2 >>> (8 * 1) & 15 Truck Remove 4
	// damage2 >>> (8 * 2) & 15 Door Left
	// damage2 >>> (8 * 3) & 15 Door Right
	// damage2 >>> (8 * 4) & 15 Hood Remove 4

	//return RearBumper;
}

/*stock GetVehiclePanelsDamageStatus(vehicleid, &FrontLeft, &FrontRight, &RearLeft, &RearRight, &WindShield, &FrontBumper, &RearBumper)
{
	new Panels, Doors, Lights, Tires;
	GetVehicleDamageStatus(vehicleid, Panels, Doors, Lights, Tires);
	FrontLeft = Panels & 15;
	FrontRight = Panels >> 4 & 15;
	RearLeft = Panels >> 8 & 15;
	RearRight = Panels >> 12 & 15;
	WindShield = Panels >> 16 & 15;
	FrontBumper = Panels >> 20 & 15;
	RearBumper = Panels >> 24 & 15;
	return true;
}*/

stock IsVehicleTrunk(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	switch(model)
	{
	    case 415,517,525,473,541,545,542,562,480,475,603,402,559,474,500,401,410,589,532,496,491,526,536,549,518,436: return 10;
	    case 492,445,405,438,426,421,467,507,550,585,604,404,546,547,422,551,420,596,597,412,533,419,600,534,575,540,516,529,561,483: return 15;
	    case 580,479,567,560,535,554,478,566,446,430,601,497,487,488: return 20;
	    case 579,400,489,418,409,453,599,423: return 25;
	    case 431,582,482,508,417,408,588,454,416,490,427: return 30;
	}
	return 0;
}
// Private Vehicle System



// CHEQUE SYSTEM
CMD:cheque(playerid,params[])
{
	new tmp[32], tmp2[32], query[256];
	if (sscanf(params, "s[32]S()[32]", tmp, tmp2)) {
		SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque [param]");
		//SendClientMessage(playerid,COLOR_WHITE,"/cheque rip - Destroy the current check that you created.");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque ver - Verifique o cheque e seu conteudo.");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque entregar - Entregue o cheque para outra pessoa.");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque valor - Verifique o valor");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque pagar - faça o pagamento do cheque.");
        SendClientMessage(playerid,COLOR_WHITE,"/cheque codigo - Verifique o código do cheque.");
		return 1;
	}
	if(strcmp(tmp,"ver",true) == 0)
	{
	    new string[32];

		if (sscanf(tmp2, "s[32]", string)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque ver todos ou chequeID");

        if(strcmp(string,"todos",true) == 0)
		{
			format(query,sizeof(query),"SELECT * FROM cheques WHERE owner_ID = '%d' ORDER BY id ASC", PlayerData[playerid][pID]);
			mysql_query(dbCon, query);

			if(cache_num_rows())
			{
			    new playername[MAX_PLAYER_NAME+1], rec[MAX_PLAYER_NAME+1], sen[MAX_PLAYER_NAME+1], code[64], amount, id;
			    GetPlayerName(playerid, playername, sizeof(playername));

			    for(new i = 0; i != cache_num_rows(); ++i)
			    {
				    cache_get_value_name(i, "sender", sen);
				    cache_get_value_name(i, "reciever", rec);
				    cache_get_value_name(i, "code", code);
					cache_get_value_name_int(i, "amount", amount);
					cache_get_value_name_int(i, "id", id);

                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Cheque_ID:_%06d_|", id);
                    SendClientMessage(playerid,COLOR_YELLOW3,     "|_Caixa Economica Federal.");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Pagar para a ordem de: %s |_ De: %s", rec, sen);
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_No total de: R$%d", amount);
                    SendClientMessage(playerid,COLOR_YELLOW3,     "| Assinatura: Caixa economica federal.");
                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");

                    if(!strcmp(playername, rec, true))
                    {
                    	SendClientMessageEx(playerid,COLOR_YELLOW3,   "|=== Codigo: %s", code);
                    }
			    }
			}
		}
		else
		{
			if(IsNumeric(string))
			{
				format(query,sizeof(query),"SELECT * FROM cheques WHERE owner_ID = '%d' AND id = '%s'", PlayerData[playerid][pID], string);
				mysql_query(dbCon, query);

				if(cache_num_rows())
				{
				    new playername[MAX_PLAYER_NAME+1], rec[MAX_PLAYER_NAME+1], sen[MAX_PLAYER_NAME+1], code[64];

				    cache_get_value_name(0, "sender", sen);
				    cache_get_value_name(0, "reciever", rec);
				    cache_get_value_name(0, "code", code);

					new amount;
					cache_get_value_name_int(0, "amount", amount);

                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Cheque ID:_%06d_|", strval(string));
                    SendClientMessage(playerid,COLOR_YELLOW3,     "|_Caixa Economica Federal.");
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Pagar para a ordem de: %s |_ De: %s", rec, sen);
                    SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_No total de: R$%d", amount);
                    SendClientMessage(playerid,COLOR_YELLOW3,     "| Assinatura: Caixa economica federal.");
                    SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");

                    if(!strcmp(playername, rec, true))
                    {
                    	SendClientMessageEx(playerid,COLOR_YELLOW3,   "|=== Codigo: %s", code);
                    }
				}
			}
		}
		return 1;

	}
	else if(strcmp(tmp,"pagar",true) == 0)
	{
	    //if(PlayerData[playerid][pLocal] != 502 && PlayerData[playerid][pLocal] != 503 && PlayerData[playerid][pLocal] != 504) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não está no banco");


	    new string[16];
		if (sscanf(tmp2, "s[16]", string)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque pagar sim para confirmar o pagamento");

        if(strcmp(string,"sim",true) == 0)
		{
            printf("Pagamento feito");
		}
		return 1;

	}
	else if(strcmp(tmp,"valor",true) == 0)
	{
	    //if(PlayerData[playerid][pLocal] != 502 && PlayerData[playerid][pLocal] != 503 && PlayerData[playerid][pLocal] != 504) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não está no banco");


		new chequeid;
		if (sscanf(tmp2, "d", chequeid)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque valor chequeID");

		format(query,sizeof(query),"SELECT * FROM cheques WHERE owner_ID = '%d' AND id = '%d'", PlayerData[playerid][pID], chequeid);
		mysql_query(dbCon, query);

		if(cache_num_rows())
		{
			new playername[MAX_PLAYER_NAME+1], rec[MAX_PLAYER_NAME+1], sen[MAX_PLAYER_NAME+1], code[64];

			cache_get_value_name(0, "sender", sen);
			cache_get_value_name(0, "reciever", rec);
			cache_get_value_name(0, "code", code);

          	GetPlayerName(playerid, playername, sizeof(playername));
          	if(!strcmp(playername, rec, true))
          	{
          	    new amount;
				cache_get_value_name_int(0, "amount", amount);
				PlayerData[playerid][pChequeCash] += amount;

				SendClientMessage(playerid, COLOR_WHITE, "|___CAIXA ECONOMICA FEDERAL___|");
				SendClientMessageEx(playerid, COLOR_FADE1, "número do cheque: %06d", chequeid);
				SendClientMessageEx(playerid, COLOR_FADE1, "Pago para: %s", rec);
				SendClientMessageEx(playerid, COLOR_FADE1, "De: %s", sen);
				SendClientMessage(playerid, COLOR_WHITE, "|-----------------------------------------|");
				SendClientMessageEx(playerid, COLOR_WHITE, "Valor total: R$%d", amount);
          	    SendClientMessage(playerid,COLOR_WHITE, "O cheque será pago no próximo paycheck!");

				format(query,sizeof(query),"DELETE FROM `cheques` WHERE `id` = '%d'", chequeid);
				mysql_query(dbCon, query);
           	}
           	else // Need Code
           	{
           	    new string[16];
				new pass[64];
           	    if (sscanf(tmp2, "s[16]s[64]", string, pass)) return SendClientMessage(playerid,COLOR_LIGHTRED,"/cheque cash chequeID code [pass]");

				if(strcmp(string,"codigo",true) == 0)
				{
				    if(!strcmp(code, pass, true))
				    {
		          	    new amount;
						cache_get_value_name_int(0, "amount", amount);
						PlayerData[playerid][pChequeCash] += amount;
						SendClientMessage(playerid, COLOR_WHITE, "|___CAIXA ECONOMICA FEDERAL___|");
						SendClientMessageEx(playerid, COLOR_FADE1, "número do cheque: %06d", chequeid);
						SendClientMessageEx(playerid, COLOR_FADE1, "Pago para: %s", rec);
						SendClientMessageEx(playerid, COLOR_FADE1, "De: %s", sen);
						SendClientMessage(playerid, COLOR_WHITE, "|-----------------------------------------|");
						SendClientMessageEx(playerid, COLOR_WHITE, "Valor total: R$%d", amount);
		          	    SendClientMessage(playerid,COLOR_WHITE, "O cheque será pago no próximo paycheck!");
						format(query,sizeof(query),"DELETE FROM `cheques` WHERE `id` = '%d'", chequeid);
						mysql_query(dbCon, query);
				    }
				}
			}
		}

	}
	return 1;

}

CMD:admins(playerid, params[])
{
	new str[128];
	SendClientMessage(playerid, COLOR_GREY, "Administradores em serviço:");
	foreach(new i : Player)
	{
		if(PlayerData[i][pAdmin] >= 1)
		{
			if(!isAdminDuty(i))
			{
				format(str, 128, "(Level: %d) %s (%s) Em serviço: não", PlayerData[i][pAdmin], ReturnName(i), PlayerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREY, str);
			}
			else
			{
				format(str, 128, "(Level: %d) %s (%s) Em serviço: Sim", PlayerData[i][pAdmin], ReturnName(i), PlayerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREEN2, str);
			}
		}
	}
	return 1;
}

CMD:moderadores(playerid, params[])
{
	new str[128];
	SendClientMessage(playerid, COLOR_GREY, "Moderadores em serviço:");
	foreach(new i : Player)
	{
		if(PlayerData[i][pTester] >= 1)
		{
			if(!isTesterDuty(i))
			{
				format(str, 128, "(Level: %d) %s (%s) Em serviço: não", PlayerData[i][pTester], ReturnName(i), PlayerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREY, str);
			}
			else
			{
				format(str, 128, "(Level: %d) %s (%s) Em serviço: Sim", PlayerData[i][pTester], ReturnName(i), PlayerData[i][pAdminName]);
				SendClientMessage(playerid, COLOR_GREEN2, str);
			}
		}
	}
	return 1;
}

CMD:tduty(playerid, params[])
{
	if (PlayerData[playerid][pTester] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(!strcmp(PlayerData[playerid][pAdminName], "(null)", true)) {
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Entre em contato com um supervisor administrativo para corrigir seu cargo.");
	}
	else {
		if(!isTesterDuty(playerid))
		{
			SendTesterAlert(0x008080FF, "{FFA500}[MODERADOR]{CCCC7A} %s está de serviço como moderador.", ReturnName(playerid));

			SetPVarInt(playerid, "TesterDuty", 1);
			SetPlayerHealthEx(playerid, 100);
			SetPlayerToTeamColor(playerid);

	      	foreach (new i : Player)
	     	{
				if(i != playerid)
		      	{
					RefreshMaskStatus(playerid,i);
				}
	     	}
			return 1;
		}
		else if(isTesterDuty(playerid))
		{
			SendTesterAlert(0x008080FF, "{FFA500}[MODERADOR]{CCCC7A} %s não está de serviço como moderador.", ReturnName(playerid));

			DeletePVar(playerid, "TesterDuty");
			SetPlayerHealthEx(playerid, 100);
	        SetPlayerToTeamColor(playerid);

	      	foreach (new i : Player)
	     	{
				if(i != playerid)
		      	{
					RefreshMaskStatus(playerid,i);
				}
	     	}
			return 1;
		}
	}
	return 1;
}

CMD:aduty(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(!strcmp(PlayerData[playerid][pAdminName], "(null)", true)) {
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Entre em contato com um supervisor administrativo para corrigir seu cargo.");
	}
	else {
		if(!isAdminDuty(playerid))
		{
			SendAdminAlert(0x008080FF, "{FFA500}[ADMIN]{CCCC7A} %s está em serviço administrativo.", ReturnName(playerid));

			SetPVarInt(playerid, "AdminDuty", 1);
			SetPlayerHealthEx(playerid, 999);
			SetPlayerToTeamColor(playerid);

	      	foreach (new i : Player)
	     	{
				if(i != playerid)
		      	{
					RefreshMaskStatus(playerid,i);
				}
	     	}
			return 1;
		}
		else if(isAdminDuty(playerid))
		{
			SendAdminAlert(0x008080FF, "{FFA500}[ADMIN]{CCCC7A} %s não está em serviço administrativo.", ReturnName(playerid));

			DeletePVar(playerid, "AdminDuty");
			SetPlayerHealthEx(playerid, 100);
	        SetPlayerToTeamColor(playerid);

	      	foreach (new i : Player)
	     	{
				if(i != playerid)
		      	{
					RefreshMaskStatus(playerid,i);
				}
	     	}
			return 1;
		}
	}
	return 1;
}

// Car GUI System

stock RenderPlayerCarMenu(playerid, page, caramount, data[][], header[] = "", dealership = 0)
{
	new count = 0, str[32];

	new Float:sX = 118, Float:sY = 118;
	new Float:nX = 183, Float:nY = 228;
	new Float:pX = 131, Float:pY = 141;

	for (new i = 0; i < 6; i ++)
	{
		if(data[i][0] != 0)
		{
			PCARTextSlot[playerid][i] = CreatePlayerTextDraw(playerid, sX, sY, "_");
			if(!dealership) PlayerTextDrawBackgroundColor(playerid,PCARTextSlot[playerid][i], data[i][3] ? 0x7A936AAA : 0xBDBDBDAA);
			else PlayerTextDrawBackgroundColor(playerid,PCARTextSlot[playerid][i], data[i][3] ? 0x7A936A60 : 0x92698160);

			PlayerTextDrawFont(playerid,PCARTextSlot[playerid][i], 5);
			PlayerTextDrawLetterSize(playerid,PCARTextSlot[playerid][i], 0.710000, 7.500000);
			PlayerTextDrawColor(playerid,PCARTextSlot[playerid][i], -1);
			PlayerTextDrawSetOutline(playerid,PCARTextSlot[playerid][i], 0);
			PlayerTextDrawSetProportional(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawSetShadow(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawUseBox(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawBoxColor(playerid,PCARTextSlot[playerid][i], -491797408);
			PlayerTextDrawTextSize(playerid,PCARTextSlot[playerid][i], 130.000000, 130.000000);
			PlayerTextDrawSetPreviewRot(playerid, PCARTextSlot[playerid][i], -16.000000, 0.000000, -55.000000, 0.850000);
			PlayerTextDrawSetPreviewModel(playerid, PCARTextSlot[playerid][i], data[i][0]);
			PlayerTextDrawSetPreviewVehCol(playerid, PCARTextSlot[playerid][i], data[i][1], data[i][2]);
			PlayerTextDrawSetSelectable(playerid,PCARTextSlot[playerid][i], 1);
			PlayerTextDrawShow(playerid, PCARTextSlot[playerid][i]);

			if(dealership && VDealerSelectCatalog[playerid] == -1)
			{
				for(new x = 0; x != sizeof(VehicleMenuInfo); x ++ )
				{
				    if(VehicleMenuInfo[x][0] == data[i][0])
				    {
				        PCARTextName[playerid][i] = CreatePlayerTextDraw(playerid,nX, nY, VehicleMenuInfo[x][1]);
						break;
				    }
				}
			}
			else PCARTextName[playerid][i] = CreatePlayerTextDraw(playerid,nX, nY, ReturnVehicleModelNameEx(data[i][0]));

			PlayerTextDrawAlignment(playerid,PCARTextName[playerid][i], 2);
			PlayerTextDrawBackgroundColor(playerid,PCARTextName[playerid][i], 255);
			PlayerTextDrawFont(playerid,PCARTextName[playerid][i], 3);
			PlayerTextDrawLetterSize(playerid,PCARTextName[playerid][i], 0.460000, 2.000000);
			PlayerTextDrawColor(playerid,PCARTextName[playerid][i], -1);
			PlayerTextDrawSetOutline(playerid,PCARTextName[playerid][i], 1);
			PlayerTextDrawSetProportional(playerid,PCARTextName[playerid][i], 1);
			PlayerTextDrawUseBox(playerid,PCARTextName[playerid][i], 1);
			PlayerTextDrawBoxColor(playerid,PCARTextName[playerid][i], 255);
			PlayerTextDrawTextSize(playerid,PCARTextName[playerid][i], 0.000000, -134.000000);
			PlayerTextDrawSetSelectable(playerid,PCARTextName[playerid][i], 0);
			PlayerTextDrawShow(playerid, PCARTextName[playerid][i]);

			if(dealership && data[i][4])
			{
				format(str, sizeof(str), "%s", FormatNumber(data[i][4]));
				PCARTextPrice[playerid][i] = CreatePlayerTextDraw(playerid,pX, pY, str);
				PlayerTextDrawBackgroundColor(playerid,PCARTextPrice[playerid][i], 255);
				PlayerTextDrawFont(playerid,PCARTextPrice[playerid][i], 1);
				PlayerTextDrawLetterSize(playerid,PCARTextPrice[playerid][i], 0.529999, 2.000000);
				PlayerTextDrawColor(playerid,PCARTextPrice[playerid][i], -1);
				PlayerTextDrawSetOutline(playerid,PCARTextPrice[playerid][i], 0);
				PlayerTextDrawSetProportional(playerid,PCARTextPrice[playerid][i], 1);
				PlayerTextDrawSetShadow(playerid,PCARTextPrice[playerid][i], 1);
				PlayerTextDrawSetSelectable(playerid,PCARTextPrice[playerid][i], 0);
				PlayerTextDrawShow(playerid, PCARTextPrice[playerid][i]);
			}

			if(count == 2)
			{
				sX = 118;
				sY = 248;


				nX = 183;
				nY = 358;

				if(dealership) pX = 131, pY = 262;
			}
			else
			{
				sX += 130;
				nX += 130;
				if(dealership) pX += 130;
			}

			count++;

			if(count > 5)
				break;
		}
	}

	if(!isnull(header))
	{
		PCARTextHeader[playerid] = CreatePlayerTextDraw(playerid, 124.000137, 82.133392, header);
		PlayerTextDrawLetterSize(playerid, PCARTextHeader[playerid], 0.992799, 5.278573);
		PlayerTextDrawTextSize(playerid, PCARTextHeader[playerid], 306.400100, 57.742218);
		PlayerTextDrawAlignment(playerid, PCARTextHeader[playerid], 1);
		PlayerTextDrawColor(playerid, PCARTextHeader[playerid], -1);
		PlayerTextDrawUseBox(playerid, PCARTextHeader[playerid], true);
		PlayerTextDrawBoxColor(playerid, PCARTextHeader[playerid], -255);
		PlayerTextDrawSetShadow(playerid, PCARTextHeader[playerid], 0);
		PlayerTextDrawSetOutline(playerid, PCARTextHeader[playerid], 1);
		PlayerTextDrawBackgroundColor(playerid, PCARTextHeader[playerid], 255);
		PlayerTextDrawFont(playerid, PCARTextHeader[playerid], 0);
		PlayerTextDrawSetProportional(playerid, PCARTextHeader[playerid], 1);
		PlayerTextDrawSetSelectable(playerid, PCARTextHeader[playerid], true);
	    PlayerTextDrawShow(playerid, PCARTextHeader[playerid]);
	}
	PCARTextLeft[playerid] = CreatePlayerTextDraw(playerid,66.000000, 220.000000, "ld_beat:left");
	PlayerTextDrawBackgroundColor(playerid,PCARTextLeft[playerid], 255);
	PlayerTextDrawFont(playerid,PCARTextLeft[playerid], 4);
	PlayerTextDrawLetterSize(playerid,PCARTextLeft[playerid], 0.599999, 0.599999);
	PlayerTextDrawColor(playerid,PCARTextLeft[playerid], (page > 1) ? 0x7A936AAA : -1);
	PlayerTextDrawSetOutline(playerid,PCARTextLeft[playerid], 0);
	PlayerTextDrawSetProportional(playerid,PCARTextLeft[playerid], 1);
	PlayerTextDrawSetShadow(playerid,PCARTextLeft[playerid], 1);
	PlayerTextDrawUseBox(playerid,PCARTextLeft[playerid], 1);
	PlayerTextDrawBoxColor(playerid,PCARTextLeft[playerid], 255);
	PlayerTextDrawTextSize(playerid,PCARTextLeft[playerid], 69.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid,PCARTextLeft[playerid], (page > 1) ? true : false);
	PlayerTextDrawShow(playerid, PCARTextLeft[playerid]);

	PCARTextRight[playerid] = CreatePlayerTextDraw(playerid,(count < 3) ? 103 + count * 130 : 493, 220.000000, "ld_beat:right");
	PlayerTextDrawBackgroundColor(playerid,PCARTextRight[playerid], 255);
	PlayerTextDrawFont(playerid,PCARTextRight[playerid], 4);
	PlayerTextDrawLetterSize(playerid,PCARTextRight[playerid], 0.599999, 0.599999);
	PlayerTextDrawColor(playerid,PCARTextRight[playerid], (floatround(caramount/(page * 6), floatround_ceil) && caramount % 6 != 0) ? 0x7A936AAA : -1);
	PlayerTextDrawSetOutline(playerid,PCARTextRight[playerid], 0);
	PlayerTextDrawSetProportional(playerid,PCARTextRight[playerid], 1);
	PlayerTextDrawSetShadow(playerid,PCARTextRight[playerid], 1);
	PlayerTextDrawUseBox(playerid,PCARTextRight[playerid], 1);
	PlayerTextDrawBoxColor(playerid,PCARTextRight[playerid], 255);
	PlayerTextDrawTextSize(playerid,PCARTextRight[playerid], 69.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid,PCARTextRight[playerid], (floatround(caramount/(page * 6), floatround_ceil) && caramount % 6 != 0) ? true : false);
	PlayerTextDrawShow(playerid, PCARTextRight[playerid]);
}

stock ClosePlayerCarMenu(playerid, force = 0)
{
    PlayerTextDrawDestroy(playerid, PCARTextHeader[playerid]);
    PlayerTextDrawDestroy(playerid, PCARTextLeft[playerid]);
    PlayerTextDrawDestroy(playerid, PCARTextRight[playerid]);

    for(new i=0;i!=6;++i)
        PlayerTextDrawDestroy(playerid, PCARTextSlot[playerid][i]),
		PlayerTextDrawDestroy(playerid, PCARTextName[playerid][i]),
		PlayerTextDrawDestroy(playerid, PCARTextPrice[playerid][i]);

	if(!force) {
	    CancelSelectTextDraw(playerid);
	    PCarPage[playerid]=1;
	    VDealerSelectCatalog[playerid] = -1;

	    if(PCarType[playerid]==1) {
			for(new i = 0; i != 6; i++)
			{
				VDealerData[playerid][i][0] = 0;
				VDealerData[playerid][i][1] = -1;
				VDealerData[playerid][i][2] = -1;
				VDealerData[playerid][i][3] = 0;
				VDealerData[playerid][i][4] = 0;
			}
		}

		PCarType[playerid]=0;
	}
    PCarOpening{ playerid }=false;
}

stock ShowPlayerCarMenu(playerid)
{
    ClosePlayerCarMenu(playerid, 1);

    VDealerSelectCatalog[playerid]=-1;

    SelectTextDraw(playerid, 0x83C689AA);

    new
		numbveh,
		query[128];

	format(query, sizeof(query), "SELECT * FROM `cars` WHERE `carOwner` = %d ORDER BY `carDate` ASC", PlayerData[playerid][pID]);
	mysql_query(dbCon, query);

	// Getting Data

	new
		Float:vehDistance[3]
	;

    numbveh = cache_num_rows();

	/*for (new i = 0; i < numbveh; i ++)
	{
		cache_get_value_name_float(i, "carPosX",	vehDistance[0]);
		cache_get_value_name_float(i, "carPosY",	vehDistance[1]);
		cache_get_value_name_float(i, "carPosZ",	vehDistance[2]);

		if(IsPlayerInRangeOfPoint(playerid, 200.0, vehDistance[0], vehDistance[1], vehDistance[2]))
		{

		}

	    if (PlayerData[playerid][pLocal] != 255)
		{
			if(PlayerData[playerid][pLocal] == 101) fDistance[1] = GetDistance(1554.4711,-1675.6097,16.1953, vehDistance[0], vehDistance[1], vehDistance[2]);
			else
			{
	 		    for (new x = 0; x != MAX_BIZZ; x ++) if (PlayerData[playerid][pLocal]-LOCAL_BIZZ == x && GetPlayerInterior(playerid) == BizInfo[x][bInterior]) {
					fDistance[1] = GetDistance(BizInfo[x][bEntranceX],BizInfo[x][bEntranceY],BizInfo[x][bEntranceZ], vehDistance[0], vehDistance[1], vehDistance[2]);
				}
			}
		}
		else fDistance[1] = GetPlayerDistanceFromPoint(playerid, vehDistance[0], vehDistance[1], vehDistance[2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    green = i;
		}
	}*/

	new data[6][4], count; // 0 - carModel, 1 - Color 1, 2 - Color 2, 3 - Green, 4 - Price if have

	for (new i = (PCarPage[playerid]==1) ? 0:6; i < ((PCarPage[playerid]==1) ? ((numbveh < 6)) ? numbveh:6 :numbveh); i ++)
	{
		cache_get_value_name_int(i, "carModel", data[count][0]);
		cache_get_value_name_int(i, "carColor1", data[count][1]);
		cache_get_value_name_int(i, "carColor2", data[count][2]);

		cache_get_value_name_float(i, "carPosX",	vehDistance[0]);
		cache_get_value_name_float(i, "carPosY",	vehDistance[1]);
		cache_get_value_name_float(i, "carPosZ",	vehDistance[2]);

		if(IsPlayerInRangeOfPoint(playerid, 200.0, vehDistance[0], vehDistance[1], vehDistance[2]))
		{
            data[count][3] = 1;
		}
       	//data[count][3] = (i==green)?1:0;
        count++;
	}
	RenderPlayerCarMenu(playerid, PCarPage[playerid], numbveh, data);
	PCarOpening{ playerid } = true;
	PCarType[playerid]=0;
}

stock ShowPlayerDealershipMenu(playerid)
{
    ClosePlayerCarMenu(playerid, 1);
    SelectTextDraw(playerid, 0x58585860); // 0x58585890

	new str[128], count, numbveh; // 0 - carModel, 1 - Color 1, 2 - Color 2, 3 - Green, 4 - Price if have

	for(new i = 0; i != 6; i++)
	{
		VDealerData[playerid][i][0] = 0;
		VDealerData[playerid][i][1] = -1;
		VDealerData[playerid][i][2] = -1;
		VDealerData[playerid][i][3] = 0;
		VDealerData[playerid][i][4] = 0;
	}


    if(VDealerSelectCatalog[playerid]==-1) {

		numbveh = sizeof(VehicleMenuInfo);

		for (new i = (PCarPage[playerid]-1) * 6; i < numbveh; i ++)
		{
			VDealerData[playerid][count][0] = VehicleMenuInfo[i][0];
			VDealerData[playerid][count][1] = -1;
			VDealerData[playerid][count][2] = -1;
			VDealerData[playerid][count][3] = 0;

			for (new x = 0; x != sizeof(VehicleDealership); x ++) if(VehicleDealership[x][1] == i) {
			    new price = VehicleData[VehicleDealership[x][0] - 400][c_price];
			    if(PlayerData[playerid][pCash] >= price) {
					VDealerData[playerid][count][3] = 1;
					break;
			    }
			}

		  	count++;

			if(count > 5)
		  		break;
		}
		format(str, sizeof(str), "Categorias");
	}
	else
	{
	    new nextpage = (PCarPage[playerid]-1) * 6;

		for (new x = 0; x != sizeof(VehicleDealership); x ++) if(VehicleDealership[x][1] == VDealerSelectCatalog[playerid])
		{
		    numbveh++;

			if(nextpage)
			{
			    nextpage--;
			    continue;
			}

			if(count < 6)
			{
				VDealerData[playerid][count][0] = VehicleDealership[x][0];
				VDealerData[playerid][count][4] = VehicleData[VehicleDealership[x][0] - 400][c_price];
				VDealerData[playerid][count][1] = -1;
				VDealerData[playerid][count][2] = -1;

			  	VDealerData[playerid][count][3] = (PlayerData[playerid][pCash] >= VDealerData[playerid][count][4]) ? 1:0;

			  	count++;
     		}
		}

		format(str, sizeof(str), "Categorias_->_%s", VehicleMenuInfo[VDealerSelectCatalog[playerid]][1]);
	}
	RenderPlayerCarMenu(playerid, PCarPage[playerid], numbveh, VDealerData[playerid], str, 1);
	PCarOpening{ playerid } = true;
	PCarType[playerid]=1;
}


stock GetNumberOwnerCar(playerid)
{
	new str[128];
	format(str, sizeof(str), "SELECT carID FROM `cars` WHERE `carOwner` = %d", PlayerData[playerid][pID]);
	mysql_query(dbCon, str);
	return cache_num_rows();
}

stock SpawnPlayerCar(playerid, slot)
{
	new query[128], str[256];

	if(PCarOpening{ playerid })
	{
	    /*if(PlayerData[playerid][pPCarkey] != 9999)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: máximo de veículos spwanado no servidor.");
	        return 1;
	    }*/

	    if(PCarPage[playerid]!=1)
            slot = slot + 6;

		format(query, sizeof(query), "SELECT * FROM `cars` WHERE `carOwner` = %d ORDER BY `carDate` ASC", PlayerData[playerid][pID]);
		mysql_query(dbCon, query);

		new i = Iter_Free(sv_playercar);

		if(i != -1) {

			cache_get_value_name_int(slot, "carID", CarData[i][carID]);
			cache_get_value_name_int(slot, "carOwner", CarData[i][carOwner]);
			cache_get_value_name_int(slot, "carModel", CarData[i][carModel]);
			cache_get_value_name_float(slot, "carPosX", CarData[i][carPos][0]);
			cache_get_value_name_float(slot, "carPosY", CarData[i][carPos][1]);
			cache_get_value_name_float(slot, "carPosZ", CarData[i][carPos][2]);
			cache_get_value_name_float(slot, "carPosR", CarData[i][carPos][3]);
			cache_get_value_name_int(slot, "carColor1", CarData[i][carColor1]);
			cache_get_value_name_int(slot, "carColor2", CarData[i][carColor2]);
			cache_get_value_name_int(slot, "carLock", CarData[i][carLock]);
			cache_get_value_name_int(slot, "carAlarm", CarData[i][carAlarm]);
			cache_get_value_name_int(slot, "carXM", CarData[i][carXM]);
			cache_get_value_name_int(slot, "carInsurance", CarData[i][carInsurance]);
			cache_get_value_name_float(slot, "carMileage", CarData[i][carMileage]);
			cache_get_value_name_int(slot, "carImmob", CarData[i][carImmob]);
			cache_get_value_name_float(slot, "carBatteryL", CarData[i][carBatteryL]);
			cache_get_value_name_float(slot, "carEngineL", CarData[i][carEngineL]);
			cache_get_value_name_float(slot, "carFuel", CarData[i][carFuel]);
			cache_get_value_name_int(slot, "carDamage1", CarData[i][carDamage][0]);
			cache_get_value_name_int(slot, "carDamage2", CarData[i][carDamage][1]);
			cache_get_value_name_int(slot, "carDamage3", CarData[i][carDamage][2]);
			cache_get_value_name_int(slot, "carDamage4", CarData[i][carDamage][3]);
			cache_get_value_name_float(slot, "carHealth", CarData[i][carHealth]);
			cache_get_value_name_int(slot, "carComps", CarData[i][carComps]);
			cache_get_value_name_int(slot, "carDuplicate", CarData[i][carDupKey]);
			cache_get_value(slot, "tempoSemPlaca", CarData[i][carSemPlaca], 100);
			cache_get_value(slot, "carChassi", CarData[i][carChassi], 32);
			cache_get_value_name_int(slot, "carPreso", CarData[i][carPreso]);
			cache_get_value_name_int(slot, "diasPreso", CarData[i][diasPreso]);
			cache_get_value_name_int(slot, "spawnado", CarData[i][spawnado]);
			
			if(CarData[i][spawnado] == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "[ERRO] Veiculo já spawnado.");
			
            cache_get_value_name(slot, "carPlate", str);
            format(CarData[i][carPlate], 32, str);

			cache_get_value_name(slot, "carPlacePos", str);
            AssignPlaceItems(i, str);

			cache_get_value_name(slot, "carPackageWeapons", str);
            AssignVehicleWeapons(i, str);

		/*	cache_get_value_name(slot, "carTickets", str);
            AssignVehicleTickets(i, str);*/

            /*cache_get_value_name(slot, "carWeapons", str);
            AssignCarWeapons(i, str);*/

			format(str, sizeof(str), "SELECT * FROM `drugs_car` WHERE `carID` = '%d'", CarData[i][carID]);
			mysql_tquery(dbCon, str, "OnQueryFinished", "dd", i, THREAD_VEHICLE_DRUG);

            cache_get_value_name(slot, "licenseWeapons", str);
            AssignCarLicenseWeapons(i, str);


			CarData[i][carVehicle] = CreateVehicle(CarData[i][carModel], CarData[i][carPos][0], CarData[i][carPos][1], CarData[i][carPos][2], CarData[i][carPos][3], CarData[i][carColor1], CarData[i][carColor2], -1);
			CarData[i][spawnado] = 1;
            SetVehicleNumberPlate(CarData[i][carVehicle], CarData[i][carPlate]);
			for(new x = 0; x != 14; x++)
			{
				format(str, sizeof(str), "carMod%d", x+1);
			   	cache_get_value_name_int(slot, str, CarData[i][carMods][x]);
			   	AddVehicleComponent(CarData[i][carVehicle], CarData[i][carMods][x]);
			}
			for(new x = 0; x != MAX_CAR_WEAPONS; x++)
			{
				format(str, sizeof(str), "carWeapon%d", x);
			   	cache_get_value_name_int(slot, str, CarData[i][carWeapon][x]);

				format(str, sizeof(str), "carAmmo%d", x);
			   	cache_get_value_name_int(slot, str, CarData[i][carAmmo][x]);

			   	if(CarData[i][carWeapon][x] != 0)
			   	{
					CarPlace[i][x][cPobj] = CreateDynamicObject(GetGunObjectID(CarData[i][carWeapon][x]), 0, 0, 0, 0, 0, 0);
			   	    AttachDynamicObjectToVehicle(CarPlace[i][x][cPobj], CarData[i][carVehicle], CarPlace[i][x][cPx], CarPlace[i][x][cPy], CarPlace[i][x][cPz], CarPlace[i][x][cPrx], CarPlace[i][x][cPry], CarPlace[i][x][cPrz]);
			   	}
			}
			//PlayerData[playerid][pPCarkey] = i;

		  	Iter_Add(sv_vehicles, CarData[i][carVehicle]);

		  	Iter_Add(sv_playercar, i);

            CoreVehicles[CarData[i][carVehicle]][vehFuel] = CarData[i][carFuel];

            SetSlotVehicleDamage(i);

            CarData[i][carLocked] = 1;

            format(CarData[i][carOwnerName], MAX_PLAYER_NAME, "%s", ReturnName(playerid));

            //CarData[i][carLabel] = CreateDynamic3DTextLabel("order", COLOR_GRAD2, -1.0, 0.9, 0.5, 20, INVALID_PLAYER_ID, CarData[i][carVehicle],  0, 0, 0, -1, 50);

			SendClientMessageEx(playerid, COLOR_GREEN, "%s Spawnado:", ReturnVehicleModelName(CarData[i][carModel]));
            SendClientMessageEx(playerid, COLOR_WHITE, "Tranca[%d], Alarme[%d], Imobilizador[%d], Seguro[%d]", CarData[i][carLock], CarData[i][carAlarm], CarData[i][carImmob], CarData[i][carInsurance]);
			SendClientMessageEx(playerid, COLOR_WHITE, "Vida: Motor[%.2f], Bateria[%.2f], KM rodado[%.2f]", CarData[i][carEngineL], CarData[i][carBatteryL], CarData[i][carMileage]);
			SendClientMessage(playerid, TEAM_CUN_COLOR, "Dica: siga a marca vermelha para encontrar seu veículo.");

			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective;

			GetVehicleParamsEx(CarData[i][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(CarData[i][carVehicle], engine, lights, alarm, CarData[i][carLocked], bonnet, boot, objective);
			/*if(!IsABicycle(CarData[i][carVehicle])) SetVehicleParamsEx(CarData[i][carVehicle], engine, lights, alarm, CarData[i][carLocked], bonnet, boot, objective);
            else SetVehicleParamsEx(CarData[i][carVehicle], 1, lights, alarm, 0, bonnet, boot, objective);
*/
			SetPlayerCheckpoint(playerid,CarData[i][carPos][0], CarData[i][carPos][1], CarData[i][carPos][2], 4.0);
			gPlayerCheckpointStatus[playerid] = CHECKPOINT_VEH;
			
			new attFin[256];
			format(attFin, sizeof(attFin), "UPDATE `cars` SET `spawnado` = '1' WHERE `carID` = '%d'", CarData[i][carID]);
			mysql_tquery(dbCon, attFin);

		}

		ClosePlayerCarMenu(playerid);
    }
    return 1;
}

/*forward Float:GetPlayerMileage(vehicleid);
public Float:GetPlayerMileage(vehicleid)
{
    new Float:Vx,Float:Vy,Float:Vz,Float:rtn;
    GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
    rtn = floatsqroot(floatabs(floatpower(Vx + Vy + Vz,2)));
    return (((rtn * 100 * 1.61) / 60) / 2) / 1.609;
}*/

forward SetVehicleLabel(vehicleid, type, time);
public SetVehicleLabel(vehicleid, type, time)
{
    if(!IsValidDynamic3DTextLabel(VehicleLabel[vehicleid][vLabel])) {
		switch(type)
		{
		    case VLT_TYPE_TOWING: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nArrastando um veículo", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
		    case VLT_TYPE_PERMITFACTION: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("Você não tem permissão para entrar neste veículo (veículo de facção)", COLOR_WHITE, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
		    case VLT_TYPE_LOCK: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("O veículo está trancada!", 0xFF6347FF, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
		    case VLT_TYPE_UNREGISTER: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nRemover registro", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_REGISTER: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nRegistrar veiculo", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_OPERAFAILED: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("((A operação falhou))", 0xFF6347FF, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADELOCK: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nUpgrade de tranca", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADEIMMOB: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nUpgrades de imobilizadores.", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADEALARM: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nUpgrade de alarmes", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_UPGRADEINSURANCE: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nUpgrade de seguro", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_ARMOUR: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nBlindagem", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			case VLT_TYPE_OPERAOUTOFRANG: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( operação fora da alcance ))", 0xFF6347FF, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
            case VLT_TYPE_REFILL: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nAbastecendo", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
			case VLT_TYPE_UPGRADEBATTERY: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nSubstituição da bateria", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
            case VLT_TYPE_UPGRADEENGINE: VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel("(( ---------- ))\nSubstituição do motor", COLOR_GREEN2, 0, 0, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 100);
			case VLT_TYPE_BREAKIN: {

		       	CoreVehicles[vehicleid][vbreakin]--;
		       	CoreVehicles[vehicleid][vbreaktime]=20;

                new string[4];
                format(string, sizeof(string), "%d", CoreVehicles[vehicleid][vbreakin]);
				VehicleLabel[vehicleid][vLabel] = CreateDynamic3DTextLabel(CoreVehicles[vehicleid][vbreakin] ? (string) : ("Destrancado"), (CoreVehicles[vehicleid][vbreakin]) ? 0xAFAFAFAA : COLOR_GREEN2, -0.9, 0.8, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);
			}
		}
	}
	VehicleLabel[vehicleid][vLabelType] = type;
	VehicleLabel[vehicleid][vLabelTime] = time;
	VehicleLabel[vehicleid][vLabelCount] = 0;

}

stock CreateScramble(s[])
{
	new scam[16];

    strcpy(scam, s);

	new tmp[2], num, len = strlen(scam);
	for(new i=0; scam[i] != EOS; ++i)
	{
	    num = random(len);
		tmp[0] = scam[i];
		tmp[1] = scam[num];
		scam[num] = tmp[0];
		scam[i] = tmp[1];
	}
	return scam;
}

stock strcpy(dest[], src[], sz=sizeof(dest))
{
  dest[0] = 0;
  return strcat(dest,src,sz); //Notice that I have used strcat instead of writing my own loops
}


// NEW PHONE SYSTEM
stock GetPhoneSignal(playerid)
{
	new tower = GetClosestSignal(playerid), signal, Float:dis, Float:cal;
	if(tower == -1) signal = 0;
	else
	{
		if (PlayerData[playerid][pLocal] != 255)
		{
			if(PlayerData[playerid][pLocal] == 101) dis = GetDistance(1554.4711,-1675.6097,16.1953, SignalData[tower][signalX], SignalData[tower][signalY], SignalData[tower][signalZ]);
            else if(PlayerData[playerid][pLocal] == 102) dis = GetDistance(1481.0662,-1771.3069,18.7958,  SignalData[tower][signalX], SignalData[tower][signalY], SignalData[tower][signalZ]);
            else if(PlayerData[playerid][pLocal] == 103) dis = GetDistance(1173.1841,-1323.3143,15.3952,  SignalData[tower][signalX], SignalData[tower][signalY], SignalData[tower][signalZ]);
            else if(PlayerData[playerid][pLocal] == 104) dis = GetDistance(533.4344,-1812.9364,6.5781,  SignalData[tower][signalX], SignalData[tower][signalY], SignalData[tower][signalZ]);
			else
			{
	 		    foreach(new x : sv_business) if (PlayerData[playerid][pLocal]-LOCAL_BIZZ == x && GetPlayerInterior(playerid) == BizInfo[x][bInterior]) {
					dis = GetDistance(BizInfo[x][bEntranceX],BizInfo[x][bEntranceY],BizInfo[x][bEntranceZ], SignalData[tower][signalX], SignalData[tower][signalY], SignalData[tower][signalZ]);
				}
			}
		}
		else dis = GetPlayerDistanceFromPoint(playerid, SignalData[tower][signalX], SignalData[tower][signalY], SignalData[tower][signalZ]);
		cal = SignalData[tower][signalRange] / 5;
		if(dis > cal * 4 ) signal = 1;
	    else if(dis > cal * 3 ) signal = 2;
	    else if(dis > cal * 2 ) signal = 3;
	    else if(dis > cal * 1 ) signal = 4;
	    else signal = 5;
	}
	//printf("Tower Name: %s(%d) | %d", SignalData[tower][signalName], tower, signal);
	return signal;
}

stock IsUnreadSMS(playerid)
{
	new count = false;
	for (new x = 0; x < MAX_SMS; x ++)
	{
		if(SmsData[playerid][x][smsExist] && !SmsData[playerid][x][smsRead])
		{
			count = true;
			break;
		}
	}
	return count;
}

stock CountUnreadSMS(playerid)
{
	new count;
	for (new x = 0; x < MAX_SMS; x ++)
	{
		if(SmsData[playerid][x][smsExist] && !SmsData[playerid][x][smsRead])
		{
			count++;
		}
	}
	return count;
}

stock CountMissedCall(playerid)
{
	new count;
	for (new x = 0; x < MAX_CALLHISTORY; x ++)
	{
		if(CallHistory[playerid][x][chExists] && !CallHistory[playerid][x][chRead] && CallHistory[playerid][x][chType] == 2)
		{
			count++;
		}
	}
	return count;
}

stock RenderPlayerPhone(playerid, menuid, subid, select = 0) {

	if(Dialog_Opened(playerid))
	    Dialog_Close(playerid);

    (menuid == 6 && (subid == 1 || subid == 2)) && PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][6], 0x1C1C1CFF) || PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][6], -1);
	/*if(menuid == 6 && (subid == 1 || subid == 2)) PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][6], 0x1C1C1CFF);
	else PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][6], -1);*/
    PlayerTextDrawShow(playerid, TDPhone_Model[playerid][6]);

    HidePlayerPhoneText(playerid);

	new str[64];

	if(!IsUnreadSMS(playerid) || (menuid == 6 && subid > 0))
	{
		PlayerTextDrawColor(playerid, TDPhone_Model[playerid][3], -1);
		PlayerTextDrawShow(playerid, TDPhone_Model[playerid][3]);
	}
	else
	{
		PlayerTextDrawColor(playerid, TDPhone_Model[playerid][3], 0x298A08FF);
		PlayerTextDrawShow(playerid, TDPhone_Model[playerid][3]);
	}


	switch(menuid)
	{
	    case 0:
	    {
			switch(subid)
			{
				case 0, 2: // Clock page
				{
				 	new
				 	    day, month, year, hour, minute, second;

					getdate(year, month, day);
					gettime(hour, minute, second);

					for(new i=0, j=GetPhoneSignal(playerid); i != j; ++i) format(str, sizeof(str), "%sl", str);

					PlayerTextDrawSetString(playerid, TDPhone_Signal[playerid], (!strlen(str)) ? ("X") : str);
					PlayerTextDrawShow(playerid, TDPhone_Signal[playerid]);

					format(str, sizeof(str), "%02d:%02d", hour, minute);
					PlayerTextDrawSetString(playerid, TDPhone_BigText[playerid], str);
					PlayerTextDrawShow(playerid, TDPhone_BigText[playerid]);

					format(str, sizeof(str), "~n~%s %d%s", MonthDay[month - 1], day, returnOrdinal(day));
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], str);
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					new missed_msg = CountMissedCall(playerid);
					new unread_msg = CountUnreadSMS(playerid);

					if(missed_msg)
					{
		           		format(str, sizeof(str), "%d chamada Perdida", missed_msg);
					}
					else if(unread_msg)
					{
						format(str, sizeof(str), "%d mensagens não lidas", unread_msg);
					}
					else {
					    format(str, sizeof(str), "");
					}

	 				PlayerTextDrawSetString(playerid, TDPhone_NotifyText[playerid], str);
					PlayerTextDrawShow(playerid, TDPhone_NotifyText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Menu");
					PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
				}
				case 1: // List Main menu
				{
					new choice[4][16] = { "Contatos", "SMS", "Ligacoes", "Configuracoes" };

				    for(new i=0;i!=4;++i) {
						PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][i], choice[i]);
						PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][i], (select == i) ? 0x989898FF : 0x000000FF);
						PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][i], (select == i) ? 0x222222FF : 0xAAAAAAFF);
						PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][i]);
				    }
				}
			}
	    }
	    case 1:
	    {
			switch(subid) // Phonebook menu
			{
				case 0:
				{
					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "Adicionar contato");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], "Lista de contatos");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
					PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);

					ph_page[playerid]=0;
					ph_select_data[playerid]=-1;
    			}
				case 1: // List contacts
				{
                    new count = 0, next = ph_page[playerid] * 4;

                    for(new i=0;i!=40;++i)
                    {
                        if(i < 4) ph_data[playerid][i]=-1;

                    	if(ContactData[playerid][i][contactNumber])
				        {
	                        if(next)
	                        {
	                            next--;
	                            continue;
	                        }
							if(count > 3)
							{
							    break;
							}
							PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][count], ContactData[playerid][i][contactName]);
							PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x989898FF : 0x000000FF);
							PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x222222FF : 0xAAAAAAFF);
							PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][count]);
							ph_data[playerid][count] = i + 1;
							count++;
						}
					}

					if(!count)
					{
						PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Sua lista de contatos ~n~está atualmente vazia");
						PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
					else if(count < 4)
					{
						PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
						PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
				}
				case 2: // List contacts --> Details
				{

				    if(ph_select_data[playerid] == -1)
						ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;

					format(str, 32, "~n~%s~n~(%d)", ContactData[playerid][ph_select_data[playerid]][contactName], ContactData[playerid][ph_select_data[playerid]][contactNumber]);

					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], str);
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);


					PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Opcoes");
					PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
				}
				case 3: // List contacts --> Details --> Actions
				{
					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "Ligar");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], "Texto");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][2], "Deletar");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][2]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
				}
			}
	    }
	    case 2:
	    {
			switch(subid) // SMS menu { SMS a contact, SMS a number, Inbox, Archive }
			{
				case 0:
				{
					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "SMS para o contato");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], "SMS para o numero");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][2], "Inbox");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][2]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][3], "Arquivo");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][3], (select == 3) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][3], (select == 3) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][3]);

					ph_page[playerid]=0;
					ph_select_data[playerid]=-1;

				}
				case 1: // SMS a contact
				{
					new count = 0, next = ph_page[playerid] * 4;

                    for(new i=0;i!=40;++i)
                    {
                        if(i < 4) ph_data[playerid][i]=-1;

                    	if(ContactData[playerid][i][contactNumber])
				        {
	                        if(next)
	                        {
	                            next--;
	                            continue;
	                        }
							if(count > 3)
							{
							    break;
							}
							PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][count], ContactData[playerid][i][contactName]);
							PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x989898FF : 0x000000FF);
							PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x222222FF : 0xAAAAAAFF);
							PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][count]);
							ph_data[playerid][count] = i + 1;
							count++;
						}
					}

					if(!count)
					{
						PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Sua lista de contatos ~n~esta vazia");
						PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
					else if(count < 4)
					{
						PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
						PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
				}
				/*case 2: // SMS a number
				{
				    Dialog_Show(playerid, SMSNumber, DIALOG_STYLE_INPUT, "Insert number", "send SMS to Celular\n\n\t\tEnter contact number:", "Proximo", "voltar");
				}*/

				case 3, 4: // 3- INBOX   4- Archive
 				{
					new count = 0, next = ph_page[playerid] * 4;

                    for(new i=0;i!=MAX_SMS;++i) if(subid == 3 && !SmsData[playerid][i][smsArchive] || subid == 4 && SmsData[playerid][i][smsArchive])
                    {
                        if(i < 4) ph_data[playerid][i]=-1;

                    	if(SmsData[playerid][i][smsExist])
				        {
	                        if(next)
	                        {
	                            next--;
	                            continue;
	                        }
							if(count > 3)
							{
							    break;
							}
							format(str, sizeof(str), "%s%s", (!SmsData[playerid][i][smsRead]) ? ("~>~ ") : (""), GetContactName(playerid, SmsData[playerid][i][smsOwner]));
                            //printf(str);
							PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][count], str);
							PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x989898FF : 0x000000FF);
							PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x222222FF : 0xAAAAAAFF);
							PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][count]);
							ph_data[playerid][count] = i + 1;
							count++;
						}
					}

					if(!count)
					{
						PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~nao possui mensagens~n~na caixa.");
						PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
					else if(count < 4)
					{
						PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
						PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
				}
				/*case 4: //Archive
				{
					new count = 0, next = ph_page[playerid] * 4;

                    for(new i=0;i<20;i++)
                    {
                        if(i < 4) ph_data[playerid][i]=0;

                    	if(SmsArcData[playerid][i][smsExist])
				        {
	                        if(next)
	                        {
	                            next--;
	                            continue;
	                        }
							if(count > 3)
							{
							    break;
							}
							format(str, sizeof(str), "%s", GetContactName(playerid, SmsArcData[playerid][i][smsOwner]));
							//printf(str);
							PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][count], str);
							PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x989898FF : 0x000000FF);
							PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x222222FF : 0xAAAAAAFF);
							PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][count]);
							ph_data[playerid][count] = i + 1;
							count++;
						}
					}

					if(!count)
					{
						PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~No messages in this~n~directory");
						PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
					else if(count < 4)
					{
						PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
						PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
				}*/
			}
		}
		case 3: { // Calls
			switch(subid) // Calls SMS { Dial a contact, Dial a number, View call history }
			{
				case 0:
				{
					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "Digite o contato");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], "Digite o número");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][2], "Ver histórico de ligações");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][2]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);

					ph_page[playerid]=0;
					ph_select_data[playerid]=-1;

				}
				case 1: // Dial a contact
				{
					new count = 0, next = ph_page[playerid] * 4;

                    for(new i=0;i!=40;++i)
                    {
                        if(i < 4) ph_data[playerid][i]=-1;

                    	if(ContactData[playerid][i][contactNumber])
				        {
	                        if(next)
	                        {
	                            next--;
	                            continue;
	                        }
							if(count > 3)
							{
							    break;
							}
							PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][count], ContactData[playerid][i][contactName]);
							PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x989898FF : 0x000000FF);
							PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x222222FF : 0xAAAAAAFF);
							PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][count]);
							ph_data[playerid][count] = i + 1;
							count++;
						}
					}

					if(!count)
					{
						PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Sua lista de contatos ~n~está vazia");
						PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
					else if(count < 4)
					{
						PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
						PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
				}
				case 3: // View call history
				{
					new count = 0, next = ph_page[playerid] * 4;

                    for(new i=0;i!=MAX_CALLHISTORY;++i)
                    {
                        if(i < 4) ph_data[playerid][i]=-1;

                    	if(CallHistory[playerid][i][chExists])
				        {
	                        if(next)
	                        {
	                            next--;
	                            continue;
	                        }
							if(count > 3)
							{
							    break;
							}
							format(str, sizeof(str), "%s%s", (!CallHistory[playerid][i][chType]) ? ("~u~") : (CallHistory[playerid][i][chType] == 2) ? ("~d~~r~") : ("~d~"), GetContactName(playerid, CallHistory[playerid][i][chNumber]));
							PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][count], str);
							PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x989898FF : 0x000000FF);
							PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][count], (select == count) ? 0x222222FF : 0xAAAAAAFF);
							PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][count]);
							ph_data[playerid][count] = i + 1;
							count++;
						}
					}

					if(!count)
					{
						PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Seu histórico de chamadas está ~n~vazio");
						PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
					else if(count < 4)
					{
						PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
						PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

						PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
						PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
					}
				}
			}
		}
		case 7:
	    {
	        new callstring[128];
			switch(subid) // Dialing / Call with ...
			{
				case 0://Dialing
				{
				    format(callstring, 128, "~n~Chamada recebida de %s", ph_call_string[playerid]);
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], callstring);
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Desligar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
				}
				case 1://ligar with
				{
				    format(callstring, 128, "~n~Ligando para %s", ph_call_string[playerid]);
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], callstring);
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Desligar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
				}
				case 2://Incoming call
				{
				    format(callstring, 128, "~n~Chamada recebida de %s", ph_call_string[playerid]);
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], callstring);
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Atender");
					PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Ignorar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);

				}
			}
		}
	    case 5: // Noti
	    {
			switch(subid)
			{
			    case 0:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Contato cheio");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
  			    case 1:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Erro!~n~número invalido");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
  			    case 2:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Noticia!~n~A linha está ocupada");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
  			    case 3:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~A ligação falhou");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
  			    case 4:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Enviando...");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
  			    case 5:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Enviado com sucesso");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
  			    case 6:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~O envio falhou");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
  			    case 7:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Sem sinal");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
			}
	    }
	    case 6: { //OFF PHONE
			switch(subid)
			{
			    case 0:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~até logo!");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);
			    }
			    case 2:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Carregando...");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);
			    }
			}
	    }
	    case 4: { //Setting phone
			switch(subid) //Change Ringtone , airplane mode, silent mode, Phone Info
			{
			    case 0:
			    {
					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "Alterar toque");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], (ph_airmode[playerid]) ? ("Desativar modo avião") : ("Ativar modo avião"));
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][2], (ph_silentmode[playerid]) ? ("Desativar modo silencioso") : ("Ativar modo silencioso"));
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][2]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][3], "informações do Celular");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][3], (select == 3) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][3], (select == 3) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][3]);

					ph_page[playerid]=0;
					ph_select_data[playerid]=-1;
			    }
			    case 1: { // Ringtone
			    	PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "Toque de ligação");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], "Toque de texto");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
					PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
			    case 2: { // Ringtone - Call
					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "Toque 1");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], "Toque 2");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][2], "Toque 3");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][2]);

					PlayerTextDrawSetString(playerid, TDPhone_TFButton[playerid], "Selecionar");
					PlayerTextDrawShow(playerid, TDPhone_TFButton[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Voltar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
			    }
			    case 3: { // Ringtone - Text
					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][0], "Toque 1");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][0], (select == 0) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][0]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][1], "Toque 2");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][1], (select == 1) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][1]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][2], "Toque 3");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][2], (select == 2) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][2]);

					PlayerTextDrawSetString(playerid, TDPhone_Choice[playerid][3], "Toque 4");
					PlayerTextDrawColor(playerid, TDPhone_Choice[playerid][3], (select == 3) ? 0x989898FF : 0x000000FF);
					PlayerTextDrawBoxColor(playerid, TDPhone_Choice[playerid][3], (select == 3) ? 0x222222FF : 0xAAAAAAFF);
					PlayerTextDrawShow(playerid, TDPhone_Choice[playerid][3]);
			    }
				case 4: { // Phone Info
					PlayerTextDrawSetString(playerid, TDPhone_ScreenText[playerid], "~n~Framework: v1");
					PlayerTextDrawShow(playerid, TDPhone_ScreenText[playerid]);

					PlayerTextDrawSetString(playerid, TDPhone_TSButton[playerid], "Fechar");
					PlayerTextDrawShow(playerid, TDPhone_TSButton[playerid]);
				}
			}
	    }
	}

	if(!ph_opening{ playerid })
		ClosePlayerPhone(playerid, true);

	ph_selected[playerid] = select;

	//printf("menu %d sub %d", ph_menuid[playerid], ph_sub_menuid[playerid]);
}

stock ShowPlayerPhone(playerid)
{
    ClosePlayerPhone(playerid, true);
    SelectTextDraw(playerid, 0x58ACFAFF);

    switch(PlayerData[playerid][pPmodel])
    { //dark grey, blue, green, yellow, purple and pink.

        case 0: // dark grey
        {
        	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], 286331391); // the machine
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], -858993409); // Left border
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], -858993409); // Right edge
        	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], -1717986902); // Side button
        	SetPlayerAttachedObject(playerid, FREESLOT9, 18868, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        }
        case 1: // Red
		{
        	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], 1628113919);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], -16776961);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], -16776961);
        	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], 1124534271);
        	SetPlayerAttachedObject(playerid, FREESLOT9, 18870, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        }
        case 2: // blue
		{
        	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], 405561855);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], 65535);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], 65535);
        	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], 270418943);
        	SetPlayerAttachedObject(playerid, FREESLOT9, 18872, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        }
        case 3: // green
		{
        	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], 388831231);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], 8388863);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], 8388863);
        	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], 270471423);
            SetPlayerAttachedObject(playerid, FREESLOT9, 18871, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        }
        case 4: // yellow
		{
        	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], 2104099071);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], -65281);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], -65281);
        	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], 1464467711);
        	SetPlayerAttachedObject(playerid, FREESLOT9, 18873, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        }
        case 5: // orange
		{

			//ce9100ff ba7407ff ba7407ff

        	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], 0xce9100ff);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], 0xba7407ff);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], 0xba7407ff);
        	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], 0xba7407ff);
        	SetPlayerAttachedObject(playerid, FREESLOT9, 18865, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
        }
        case 6: // pink
		{
        	PlayerTextDrawBoxColor(playerid, TDPhone_Model[playerid][0], -2063576577);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][1], -16711681);
        	PlayerTextDrawColor(playerid, TDPhone_Model[playerid][2], -16711681);
        	PlayerTextDrawColor(playerid,TDPhone_Model[playerid][12], 1560295679);
        	SetPlayerAttachedObject(playerid, FREESLOT9, 18869, 6, 0.0789, 0.0050, -0.0049, 84.9999, -179.2999, -1.6999, 1.0000, 1.0000, 1.0000);
		}
    }
    for(new i=0;i!=14;++i) PlayerTextDrawShow(playerid, TDPhone_Model[playerid][i]);
	ph_opening{ playerid } = true;
	RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
}


stock ClosePlayerPhone(playerid, bool:noforce = false)
{
	HidePlayerPhoneText(playerid);

    for(new i=0;i!=14;++i) PlayerTextDrawHide(playerid, TDPhone_Model[playerid][i]);

	if(!noforce) {
	    // reset values
		ph_menuid[playerid]=0;
		ph_sub_menuid[playerid]=0;
		ph_selected[playerid]=0;
		ph_select_data[playerid]=-1;
		ph_page[playerid]=0;
	    CancelSelectTextDraw(playerid);
	}
    ph_opening{ playerid }=false;
}

stock HidePlayerPhoneText(playerid)
{
	for(new i=0;i!=4;++i) PlayerTextDrawHide(playerid, TDPhone_Choice[playerid][i]);

	PlayerTextDrawHide(playerid, TDPhone_BigText[playerid]);
	PlayerTextDrawHide(playerid, TDPhone_ScreenText[playerid]);
	PlayerTextDrawHide(playerid, TDPhone_TFButton[playerid]);
	PlayerTextDrawHide(playerid, TDPhone_TSButton[playerid]);
	PlayerTextDrawHide(playerid, TDPhone_Signal[playerid]);
	PlayerTextDrawHide(playerid, TDPhone_NotifyText[playerid]);
	PlayerTextDrawHide(playerid, TDPhone_Picture[playerid]);
}

stock isAdminDuty(playerid)
{
	if (GetPVarInt(playerid, "AdminDuty") == 1)
		return 1;
	else
		return 0;
}

stock isTesterDuty(playerid)
{
	if (GetPVarInt(playerid, "TesterDuty") == 1)
		return 1;
	else
		return 0;
}

stock OnPhoneEvent(playerid, menuid, subid, eventid)
{

	switch(menuid)
	{
		case 0: // MAIN
		{
			switch(subid)
			{
				case 0: // Clock
				{
				    switch(eventid)
				    {
				        case PH_LBUTTON:
				        {
	  						ph_sub_menuid[playerid] = 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
  				        case PH_RBUTTON:
				        {

				            ClosePlayerPhone(playerid, true);
				            CancelSelectTextDraw(playerid);
				            RemovePlayerAttachedObject(playerid, FREESLOT9);

						    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* o celular de %s está tocando.", ReturnName(playerid, 0));
				        }
				    }
				}
 				case 1: // Main Menu { Phonebook, SMS, Calls, Settings }
				{
  				    switch(eventid)
				    {
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 3)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
							ph_menuid[playerid] = ph_selected[playerid] + 1;
							ph_sub_menuid[playerid] = 0;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_RBUTTON:
				        {
                    		ph_sub_menuid[playerid] = 0;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				    }
				}
			}
		}
		case 1: // PHONEBOOK
		{
			switch(subid)
			{
				case 0: // Main Phonebook { Add a contact, List contacts }
				{
				  	switch(eventid)
				    {
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 1)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
            			}
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]--;
                    		ph_sub_menuid[playerid]++;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_CLICKOPEN, PH_LBUTTON:
				        {
                    		if(ph_selected[playerid] == 0)
                    		{
                    			Dialog_Show(playerid, AddContact, DIALOG_STYLE_INPUT, "Inserir nome", "Adicionar contato\n\n\t\tDigite o nome do contato:", "Proximo", "Voltar");
                    		}
                    		else
                    		{
                    		    ph_sub_menuid[playerid]++;
                    		    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
							}
				        }
					}
				}
 				case 1: // List contacts
				{
				  	switch(eventid)
				    {
				        case PH_DOWN:
				        {
							new count = 0;

							for(new i=0;i!=4;++i) if(ph_data[playerid][i] != -1) count++;

							if(ph_selected[playerid] < count-1)
							{
							    ph_selected[playerid]++;
							}
							else
							{
							    if(ph_selected[playerid] == 3)
							    {
				                    for(new i=ph_data[playerid][3];i!=40;++i)
				                    {
				                    	if(ContactData[playerid][i][contactNumber])
								        {
									        ph_selected[playerid]=0;
									        ph_page[playerid]++;
											break;
										}
									}
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							else
							{
							    if(ph_selected[playerid] == 0 && ph_page[playerid] > 0)
							    {
									ph_selected[playerid]=3;
									ph_page[playerid]--;
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
            			}
				        case PH_RBUTTON:
				        {
                    		ph_sub_menuid[playerid]--;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_CLICKOPEN, PH_LBUTTON:
				        {
						    if(ph_select_data[playerid] == -1)
								ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;


	                   		ph_sub_menuid[playerid]++;
	                   		RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}
 				case 2: // Details NAME (NUMBER)
				{
				  	switch(eventid)
				    {
				        case PH_LBUTTON:
				        {
                    		ph_sub_menuid[playerid]++;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_RBUTTON:
				        {
							ph_page[playerid]=0;
							ph_select_data[playerid]=-1;

                    		ph_sub_menuid[playerid]--;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}
 				case 3: // ACTION
				{
				  	switch(eventid)
   					{
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 2)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
							switch(ph_selected[playerid])
							{
							    case 0: {
									new nstring[24];
			   						Int32(nstring, ContactData[playerid][ph_select_data[playerid]][contactNumber]);
									cmd_ligar(playerid, nstring);
								}
							    case 1: {
									new nstring[24];
			   						Int32(nstring, ContactData[playerid][ph_select_data[playerid]][contactNumber]);
							        SetPVarString(playerid,"SMSPhoneNumber", nstring);
                                    Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "SMS", "Digite o texto:", "Enviar", "Voltar");
                       			}
								case 2: Dialog_Show(playerid, DeleteContact, DIALOG_STYLE_MSGBOX, "Você tem certeza?", "Tem certeza que deseja deletar? %s (%d) da sua lista de contatos?", "Sim", "não", ContactData[playerid][ph_select_data[playerid]][contactName], ContactData[playerid][ph_select_data[playerid]][contactNumber]);
							}
				        }
				        case PH_RBUTTON:
				        {
                    		ph_sub_menuid[playerid]--;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}
 				/*case 4: // ACTION -> Call, Text, Delete
				{
					new i = ph_data[playerid][ph_selected[playerid]];
					format(str, 32, "~n~%s~n~(%d)", ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);
				  	switch(eventid)
				    {
				        case PH_RBUTTON:
				        {
                    		ph_sub_menuid[playerid]--;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}*/
			}
		}
		case 2: // SMS
		{
			switch(subid)
			{
				case 0: // Main SMS { SMS a contact, SMS a number, Inbox, Archive }
				{
  				  	switch(eventid)
   					{
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
							ph_sub_menuid[playerid] = ph_selected[playerid] + 1;

							if(ph_sub_menuid[playerid] == 2) {
							    ph_sub_menuid[playerid] = 0;
							    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], 1);
								Dialog_Show(playerid, SMSNumber, DIALOG_STYLE_INPUT, "número", "Enviar SMS para o número\n\n\t\tDigite o número:", "Enviar", "Voltar");
							}
							else
							{
								RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
							}
				        }
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=0;
                    		ph_sub_menuid[playerid]=1;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 3)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
					}
				}
 				case 1: // SMS a contact
				{
					switch(eventid)
				    {
				        case PH_DOWN:
				        {
							new count = 0;

							for(new i=0;i!=4;++i) if(ph_data[playerid][i] != -1) count++;

							if(ph_selected[playerid] < count-1)
							{
							    ph_selected[playerid]++;
							}
							else
							{
							    if(ph_selected[playerid] == 3)
							    {
				                    for(new i=ph_data[playerid][3];i!=40;++i)
				                    {
				                    	if(ContactData[playerid][i][contactNumber])
								        {
									        ph_selected[playerid]=0;
									        ph_page[playerid]++;
											break;
										}
									}
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							else
							{
							    if(ph_selected[playerid] == 0 && ph_page[playerid] > 0)
							    {
									ph_selected[playerid]=3;
									ph_page[playerid]--;
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
            			}
				        case PH_RBUTTON:
				        {
                    		ph_sub_menuid[playerid]--;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_CLICKOPEN, PH_LBUTTON:
				        {
						    if(ph_select_data[playerid] == -1)
								ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;

							new nstring[24];
			   				Int32(nstring, ContactData[playerid][ph_select_data[playerid]][contactNumber]);
							SetPVarString(playerid,"SMSPhoneNumber", nstring);
							Dialog_Show(playerid, SMSText, DIALOG_STYLE_INPUT, "SMS", "Digite o texto:", "Enviar", "Voltar");
				        }
					}
				}
 				/*case 2: // SMS a number
				{

				}*/
 				case 3, 4: // 3- Inbox 4- Archive
				{
					switch(eventid)
				    {
						case PH_DOWN:
				        {
							new count = 0;

							for(new i=0;i!=4;++i) if(ph_data[playerid][i] != -1) count++;

							if(ph_selected[playerid] < count-1)
							{
							    ph_selected[playerid]++;
							}
							else
							{
							    if(ph_selected[playerid] == 3)
							    {
				                    for(new i=ph_data[playerid][3];i!=MAX_SMS;++i) if(subid == 3 && !SmsData[playerid][i][smsArchive] || subid == 4 && SmsData[playerid][i][smsArchive])
				                    {
				                    	if(SmsData[playerid][i][smsExist])
								        {
									        ph_selected[playerid]=0;
									        ph_page[playerid]++;
											break;
										}
									}
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							else
							{
							    if(ph_selected[playerid] == 0 && ph_page[playerid] > 0)
							    {
									ph_selected[playerid]=3;
									ph_page[playerid]--;
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
            			}
				        case PH_RBUTTON:
				        {
                    		ph_sub_menuid[playerid]=0;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_CLICKOPEN, PH_LBUTTON:
				        {
						    ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;

							new id = ph_select_data[playerid];

							if(SmsData[playerid][id][smsRead])
							{
								Dialog_Show(playerid, SMSRead, DIALOG_STYLE_MSGBOX, "SMS", "Remetente:\t\t%s\nEnviado:\t\t%s\n\n%s", "Opções", "Fechar", GetContactName(playerid, SmsData[playerid][id][smsOwner]), SmsData[playerid][id][smsDate], SmsData[playerid][id][smsText]);
	                        }
							else
							{
								SmsData[playerid][id][smsRead] = 1;
								RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
							}
				        }
					}
				}
			}
		}
		case 3: // Calls
		{
			switch(subid)
			{
				case 0: // Calls SMS { Dial a contact, Dial a number, View call history }
				{
  				  	switch(eventid)
   					{
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
							ph_sub_menuid[playerid] = ph_selected[playerid] + 1;

							if(ph_sub_menuid[playerid] == 2) {
							    ph_sub_menuid[playerid] = 0;
							    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], 1);

								Dialog_Show(playerid, CallNumber, DIALOG_STYLE_INPUT, "Insira o número", "Contato por telefone\n\n\t\tInsira o número do contato:", "Ligar", "Voltar");
							}
							else
							{
								RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
							}
				        }
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=0;
                    		ph_sub_menuid[playerid]=1;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 3)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
					}
				}
 				case 1: // Dial a contact
				{
					switch(eventid)
				    {
				        case PH_DOWN:
				        {
							new count = 0;

							for(new i=0;i!=4;++i) if(ph_data[playerid][i] != -1) count++;

							if(ph_selected[playerid] < count-1)
							{
							    ph_selected[playerid]++;
							}
							else
							{
							    if(ph_selected[playerid] == 3)
							    {
				                    for(new i=ph_data[playerid][3];i!=40;++i)
				                    {
				                    	if(ContactData[playerid][i][contactNumber])
								        {
									        ph_selected[playerid]=0;
									        ph_page[playerid]++;
											break;
										}
									}
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							else
							{
							    if(ph_selected[playerid] == 0 && ph_page[playerid] > 0)
							    {
									ph_selected[playerid]=3;
									ph_page[playerid]--;
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
            			}
				        case PH_RBUTTON:
				        {
                    		ph_sub_menuid[playerid]--;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_CLICKOPEN, PH_LBUTTON:
				        {
						    if(ph_select_data[playerid] == -1)
								ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;

							new id = ph_select_data[playerid], nstring[24];
						  	Int32(nstring, ContactData[playerid][id][contactNumber]);
							cmd_ligar(playerid, nstring);
				        }
					}
				}
 				case 3: // View call history
				{
				  	switch(eventid)
				    {
				        case PH_CLICKOPEN, PH_LBUTTON:
				        {
						    if(ph_select_data[playerid] == -1)
								ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;

							new id = ph_select_data[playerid], str[64], list[256];
							new Iscontact = GetContactID(playerid, CallHistory[playerid][id][chNumber]);
							if(Iscontact == -1) format(str, 64, "%s%d", (!CallHistory[playerid][id][chType]) ? ("Chamada de voz para") : (CallHistory[playerid][id][chType] == 2) ? ("Formulário de chamada perdida") : ("Formulário de chamada de entrada"), CallHistory[playerid][id][chNumber]);
							else format(str, 64, "%s%s (%d)", (!CallHistory[playerid][id][chType]) ? ("Chamada de voz para") : (CallHistory[playerid][id][chType] == 2) ? ("Formulário de chamada perdida") : ("Formulário de chamada de entrada"), ContactData[playerid][Iscontact][contactName], ContactData[playerid][Iscontact][contactNumber]);

							CallHistory[playerid][id][chRead] = true;

							new diff = gettime()-CallHistory[playerid][id][chSec];
							new mins, hours;
							format(list, 256, "%s\n%s Atrês\nLigar\nTexto\n%s", str, ConvertTime(diff, mins, hours), (GetContactID(playerid,CallHistory[playerid][id][chNumber]) == -1) ? ("Salvar número") : ("Visualizar contato"));
							Dialog_Show(playerid, CallHistoryDialog, DIALOG_STYLE_LIST, str, list, "Selecionar", "Fechar");
				        }
				        case PH_DOWN:
				        {
							new count = 0;

							for(new i=0;i!=4;++i) if(ph_data[playerid][i] != -1) count++;

							if(ph_selected[playerid] < count-1)
							{
							    ph_selected[playerid]++;
							}
							else
							{
							    if(ph_selected[playerid] == 3)
							    {
				                    for(new i=ph_data[playerid][3];i!=MAX_CALLHISTORY;++i)
				                    {
				                    	if(CallHistory[playerid][i][chExists])
								        {
									        ph_selected[playerid]=0;
									        ph_page[playerid]++;
											break;
										}
									}
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							else
							{
							    if(ph_selected[playerid] == 0 && ph_page[playerid] > 0)
							    {
									ph_selected[playerid]=3;
									ph_page[playerid]--;
							    }
							}
							ph_select_data[playerid] = ph_data[playerid][ph_selected[playerid]] - 1;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
            			}
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=3;
                    		ph_sub_menuid[playerid]=0;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}
			}
		}
	    case 4: { //Setting phone
			switch(subid)
			{
				case 0: //Change Ringtone , airplane mode, silent mode, Phone Info
				{
  				  	switch(eventid)
   					{
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
							switch(ph_selected[playerid])
							{
							    case 0: ph_sub_menuid[playerid] = 1;
			                	case 1: {
		                            if(ph_airmode[playerid]) ph_airmode[playerid] = 0;
		                            else ph_airmode[playerid] = 1;
								}
			                	case 2: {
		                            if(ph_silentmode[playerid]) ph_silentmode[playerid] = 0;
		                            else ph_silentmode[playerid] = 1;
								}
							    case 3: ph_sub_menuid[playerid] = 4;

       						}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=0;
                    		ph_sub_menuid[playerid]=1;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 3)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
					}
				}

				case 1: //Change Ringtone => Call ringtone, Text ringtone
				{
  				  	switch(eventid)
   					{
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
							switch(ph_selected[playerid])
							{
							    case 0: ph_sub_menuid[playerid] = 2;
							    case 1: ph_sub_menuid[playerid] = 3;

       						}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=4;
                    		ph_sub_menuid[playerid]=0;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 1)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
					}
				}

				case 2: //ligar ringtone (1 2 3)
				{
  				  	switch(eventid)
   					{
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
				            SetPVarInt(playerid, "ringtype", 0);
							Dialog_Show(playerid, CallRingtone, DIALOG_STYLE_MSGBOX, "Confirmar", "Gostaria de usar este toque?", "Sim", "não");
				        }
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=4;
                    		ph_sub_menuid[playerid]=1;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 2)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
					}
				}

				case 3: //Text ringtone (1 2 3 4)
				{
  				  	switch(eventid)
   					{
				        case PH_LBUTTON, PH_CLICKOPEN:
				        {
				            SetPVarInt(playerid, "ringtype", 1);
							Dialog_Show(playerid, CallRingtone, DIALOG_STYLE_MSGBOX, "Confirmar", "Gostaria de usar este toque?", "Sim", "não");
				        }
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=4;
                    		ph_sub_menuid[playerid]=1;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
				        case PH_DOWN:
				        {
							if(ph_selected[playerid] < 3)
							{
							    ph_selected[playerid]++;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
						}
  				        case PH_UP:
				        {
							if(ph_selected[playerid] > 0)
							{
							    ph_selected[playerid]--;
							}
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid], ph_selected[playerid]);
				        }
					}
				}

				case 4: //Info
				{
  				  	switch(eventid)
   					{
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=4;
                    		ph_sub_menuid[playerid]=0;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}
			}
		}
		case 5: // Notify
		{
			switch(subid)
			{
				case 0..7: //
				{
				  	switch(eventid)
				    {
				        case PH_RBUTTON:
				        {
                    		ph_menuid[playerid]=1;
                    		ph_sub_menuid[playerid]=0;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}
			}
		}
		case 7: // Dialing / Call with ...
		{
			switch(subid)
			{
				case 0: // Dialing
				{
				  	switch(eventid)
				    {
				        case PH_RBUTTON: //Disconnect phone line
				        {
							if(calltimer[playerid])
								KillTimer(calltimer[playerid]), calltimer[playerid] = 0;

                            new targetid = PlayerData[playerid][pCallConnect]; // People who call
							if(targetid != INVALID_PLAYER_ID) // The people who call are not empty.
				            {
                                AddPlayerCallHistory(targetid, PlayerData[playerid][pPnumber], PH_MISSED);

								SendClientMessage(targetid, COLOR_GRAD2, "[ ! ] Desligar");

	                    		ph_menuid[targetid]=0;
	                    		ph_sub_menuid[targetid]=0;
							    RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);
							    SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

	          					PlayerData[targetid][pCallConnect] = INVALID_PLAYER_ID;
	          					PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;
				            }
                    		ph_menuid[playerid]=0;
                    		ph_sub_menuid[playerid]=0;
                    		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
                    		PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
						    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				        }
					}
				}
				case 1: // Call with
				{
				  	switch(eventid)
				    {
				        case PH_RBUTTON: //Terminate current
				        {
							// player People get targetid, people call

							new targetid = PlayerData[playerid][pCallConnect]; // Good people who say the line.

							if(targetid != INVALID_PLAYER_ID) // I do not know what to say.
				            {

				                SendClientMessage(targetid, COLOR_GRAD2, "[ ! ]Travar");

								PlayerData[targetid][pCellTime] = 0;
								PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

	                    		ph_menuid[targetid]=0;
	                    		ph_sub_menuid[targetid]=0;
							    RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);
							    SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

							    PlayerData[targetid][pCallConnect] = INVALID_PLAYER_ID;
							}

							SendClientMessage(playerid, COLOR_GRAD2, "[ ! ] Destravar");

							PlayerData[playerid][pCellTime] = 0;
							PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
							PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;

	                    	ph_menuid[playerid]=0;
	                    	ph_sub_menuid[playerid]=0;
							RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
							SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
				        }
					}
				}
				case 2: // Incoming
				{
				  	switch(eventid)
				    {
				        case PH_LBUTTON: //Receive calls
				        {
							// player ????    targetid ????

							new targetid = PlayerData[playerid][pCallConnect]; // Good call.

							if(targetid != INVALID_PLAYER_ID) // The caller is not empty.
				            {
				                SendClientMessage(targetid,  COLOR_GRAD2, "[ ! ] Chamada atendida. Você já pode conversar."); //Tell the caller to call the owner.

								PlayerData[targetid][pCellTime] = 0;
								PlayerData[targetid][pCallLine] = playerid;

	                    		ph_sub_menuid[targetid]+=1;
							    RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);

							    AddPlayerCallHistory(playerid, PlayerData[targetid][pPnumber], PH_INCOMING);
							}
							PlayerData[playerid][pIncomingCall] = 0; // Delete call waiting status
							PlayerData[playerid][pCellTime] = 0;
							PlayerData[playerid][pCallLine] = targetid;
                    		ph_sub_menuid[playerid]-=1;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
						    SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
				        }
				        case PH_RBUTTON: //Cancel incoming calls
				        {
				            new targetid = PlayerData[playerid][pCallConnect]; // Good call.

				            if(targetid != INVALID_PLAYER_ID) // The caller is not empty.
				            {
				                SendClientMessage(targetid, COLOR_GRAD2, "[ ! ] Desligar");

	                    		ph_menuid[targetid]=0;
	                    		ph_sub_menuid[targetid]=0;
							    RenderPlayerPhone(targetid, ph_menuid[targetid], ph_sub_menuid[targetid]);
							    SetPlayerSpecialAction(targetid,SPECIAL_ACTION_STOPUSECELLPHONE);

							    PlayerData[targetid][pCallConnect] = INVALID_PLAYER_ID;
                            	PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

							    AddPlayerCallHistory(playerid, PlayerData[targetid][pPnumber], PH_MISSED);
				            }
							SendClientMessage(playerid, COLOR_GRAD2, "[ ! ] Você desligou seu celular.");
				        	PlayerData[playerid][pIncomingCall] = 0;
				        	PlayerData[playerid][pCallConnect] = INVALID_PLAYER_ID;
							PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;

                    		ph_menuid[playerid]=0;
                    		ph_sub_menuid[playerid]=0;
						    RenderPlayerPhone(playerid, ph_menuid[playerid], ph_sub_menuid[playerid]);
				        }
					}
				}
			}
		}
	}
}

stock UpdateHouseInfo(houseid)
{
	new query[512];

	format(query, sizeof(query), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `price`= %d, `levelbuy`= %d, `rentprice` = %d, `rentable` = %d, `interior` = %d, `world` = %d, `cash` = %d WHERE `id` = %d",
	HouseInfo[houseid][hOwner],
	HouseInfo[houseid][hOwned],
	HouseInfo[houseid][hLocked],
	HouseInfo[houseid][hPrice],
	HouseInfo[houseid][hLevelbuy],
	HouseInfo[houseid][hRentprice],
	HouseInfo[houseid][hRentable],
	HouseInfo[houseid][hInterior],
	HouseInfo[houseid][hWorld],
	HouseInfo[houseid][hCash],
	HouseInfo[houseid][hID]);
	mysql_query(dbCon, query);


	format(query, sizeof(query), "UPDATE `houses` SET `checkx` = %f, `checky` = %f, `checkz` = %f, `weapons` = '%s', `radio` = %d WHERE `id` = %d",
	HouseInfo[houseid][hCheckPosX],
	HouseInfo[houseid][hCheckPosY],
	HouseInfo[houseid][hCheckPosZ],
	FormatHouseWeapons(houseid),
	HouseInfo[houseid][hRadio],
	HouseInfo[houseid][hID]);

	mysql_query(dbCon, query);

	return 1;
}

stock FormatCarLicenseWeapons(carid)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_CAR_WEAPONS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%d",CarData[carid][carWeaponLicense][a]);
		else format(tmp,sizeof(tmp),"|%d",CarData[carid][carWeaponLicense][a]);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

stock AssignCarLicenseWeapons(carid, str[])
{
	new wtmp[MAX_CAR_WEAPONS][32];
	explode(wtmp,str,"|");
	for(new z = 0; z != MAX_CAR_WEAPONS; ++z)
	{
		CarData[carid][carWeaponLicense][z] = strval(wtmp[z]);
	}
}

stock FormatHouseWeapons(house)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_HOUSE_WEAPONS; ++a)
	{
		new w = HouseInfo[house][hWeapon][a];
		new am = HouseInfo[house][hAmmo][a];
		new lc = HouseInfo[house][hWeaponLicense][a];

		if(!a) format(tmp,sizeof(tmp),"%d=%d=%d",w,am,lc);
		else format(tmp,sizeof(tmp),"|%d=%d=%d",w,am,lc);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}
FormatDrugAddiction(playerid)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_DRUGS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%d",PlayerData[playerid][pDrugAddiction][a]);
		else format(tmp,sizeof(tmp),"|%d",PlayerData[playerid][pDrugAddiction][a]);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

stock AssignHouseWeapons(house, str[])
{
	new wtmp[MAX_HOUSE_WEAPONS][32];
	explode(wtmp,str,"|");
	for(new z = 0; z != MAX_HOUSE_WEAPONS; ++z)
	{
		new wtmp2[3][32];
		explode(wtmp2,wtmp[z],"=");
		HouseInfo[house][hWeapon][z] = strval(wtmp2[0]);
		HouseInfo[house][hAmmo][z] = strval(wtmp2[1]);
		HouseInfo[house][hWeaponLicense][z] = strval(wtmp2[2]);
	}
}

//hItems

stock FormatHouseItems(house)
{
	new wstr[256];
	new tmp[32];
	for(new a = 0; a != MAX_HOUSE_ITEMS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%d",HouseInfo[house][hItems][a]);
		else format(tmp,sizeof(tmp),"|%d",HouseInfo[house][hItems][a]);
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

stock AssignHouseItems(house, str[])
{
	new wtmp[MAX_HOUSE_ITEMS][32];
	explode(wtmp,str,"|");
	for(new z = 0; z != MAX_HOUSE_ITEMS; ++z)
	{
		HouseInfo[house][hItems][z] = strval(wtmp[z]);
	}
}

stock FormatBusinessItems(business)
{
	new wstr[256];
	new tmp[32];

	for(new a = 0; a != MAX_BUSINESS_ITEM; ++a)
	{
		new w = BizInfo[business][bItems][a];
		if(!a) format(tmp,sizeof(tmp),"%d",w);
		else format(tmp,sizeof(tmp),"|%d",w);
		strins(wstr,tmp,strlen(wstr));
	}

	return wstr;
}

stock AssignBusinessItems(business, str[])
{
	new wtmp[MAX_BUSINESS_ITEM][32];
	explode(wtmp,str,"|");
	for(new z = 0; z != MAX_BUSINESS_ITEM; ++z)
	{
		BizInfo[business][bItems][z] = strval(wtmp[z]);
	}
}

stock FormatPlaceItems(carid)
{
	new wstr[256];
	new tmp[255];

	for(new a = 0; a != MAX_CAR_WEAPONS; ++a)
	{
		if(!a) format(tmp,sizeof(tmp),"%f,%f,%f,%f,%f,%f,%d",CarPlace[carid][a][cPx],CarPlace[carid][a][cPy],CarPlace[carid][a][cPz],CarPlace[carid][a][cPrx],CarPlace[carid][a][cPry],CarPlace[carid][a][cPrz],CarPlace[carid][a][cPType]);
		else format(tmp,sizeof(tmp),"|%f,%f,%f,%f,%f,%f,%d",CarPlace[carid][a][cPx],CarPlace[carid][a][cPy],CarPlace[carid][a][cPz],CarPlace[carid][a][cPrx],CarPlace[carid][a][cPry],CarPlace[carid][a][cPrz],CarPlace[carid][a][cPType]);
		strins(wstr,tmp,strlen(wstr));
	}

	return wstr;
}

stock AssignPlaceItems(carid, str[])
{
	new wtmp[MAX_CAR_WEAPONS][255];
	explode(wtmp,str,"|");
	for(new z = 0; z != MAX_CAR_WEAPONS; ++z)
	{
		new wtmp2[7][64];
		explode(wtmp2,wtmp[z],",");
		CarPlace[carid][z][cPx] = floatstr(wtmp2[0]);
		CarPlace[carid][z][cPy] = floatstr(wtmp2[1]);
		CarPlace[carid][z][cPz] = floatstr(wtmp2[2]);
		CarPlace[carid][z][cPrx] = floatstr(wtmp2[3]);
		CarPlace[carid][z][cPry] = floatstr(wtmp2[4]);
		CarPlace[carid][z][cPrz] = floatstr(wtmp2[5]);
		CarPlace[carid][z][cPType] = strval(wtmp2[6]);
	}
}

stock AddWarehouseToFile(warehouseid) {

	format(szQuery, sizeof(szQuery), "INSERT INTO `faction_warehouse` (fw_type, fw_x, fw_y, fw_z, fw_world, fw_int) VALUES(%d, %f, %f, %f, %d, %d)", WareHouseInfo[warehouseid][whType], WareHouseInfo[warehouseid][whX], WareHouseInfo[warehouseid][whY], WareHouseInfo[warehouseid][whZ], WareHouseInfo[warehouseid][whWorld], WareHouseInfo[warehouseid][whInt]);

	mysql_tquery(dbCon, szQuery, "OnWarehouseInsert", "d", warehouseid);
}

stock AddHouseToFile(houseid, price, houseinfo[], Float:x, Float:y, Float:z)
{
	new biggestQuery[1024];
	format(biggestQuery, sizeof(biggestQuery), "INSERT INTO `houses` (posx, posy, posz, checkx, checky, checkz, info, price, owned, owner, cash, rentprice, rentable, locked, radio) VALUES(%f, %f, %f, %f, %f, %f, '%s', %d, %d, '%s', %d, %d, %d, %d, %d)",
	x, y, z, 0.0, 0.0, 0.0, houseinfo, price, 0, "The State", 0, 0, 0, 1, 0);

	mysql_tquery(dbCon, biggestQuery, "OnHouseInsert", "d", houseid);
	return 1;
}

stock AddBizToFile(bizid, price, type, owner[], info[], Float:x, Float:y, Float:z)
{
	format(szQuery, sizeof(szQuery), "INSERT INTO `business` (biz_enX, biz_enY, biz_enZ, biz_info, biz_owner, biz_owned, biz_locked, biz_price, biz_till, biz_world, biz_type) VALUES(%f, %f, %f, '%s', '%s', %d, %d, %d, %d, %d, %d)",
	x, y, z, info, owner, 0, 1, price, 0, bizid, type);
	mysql_tquery(dbCon, szQuery, "OnBizInsert", "d", bizid);
	return 1;
}

stock AddTeleToFile(teleid, mapname[], interior, Float:LX, Float:LY, Float:LZ)
{
	format(szQuery, sizeof(szQuery), "INSERT INTO `ateles` (mapname, posx, posy, posz, interior) VALUES('%s', %f, %f, %f, %d)", mapname, LX, LY, LZ, interior);
	mysql_tquery(dbCon, szQuery, "OnTeleportInsert", "d", teleid);
	return 1;
}

stock AddMoveDoorToFile(id, modelid, faction, interior, virworld, Float:x, Float:y, Float:z, name[])
{
    new clean_name[64];
    mysql_escape_string(name,clean_name);
	format(szQuery, sizeof(szQuery), "INSERT INTO `movedoors` (model, faction, posx, posy, posz, posrx, posry, posrz, interior, virworld, name) VALUES(%d, %d, %f, %f, %f, 0.0, 0.0, 0.0, %d, %d, '%s')",modelid,faction,x,y,z,interior,virworld,clean_name);
	mysql_tquery(dbCon, szQuery, "OnMoveDoorInsert", "d", id);
	return 1;
}

stock SaveEditedMoveDoor(id, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Doors[id][doorID]);
	mysql_tquery(dbCon, szQuery, "OnEditedMoveDoor", "d", id);
	return 1;
}

stock SaveEditedMoveDoorMove(id, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `movex` = %f, `movey` = %f, `movez` = %f, `moverx` = %f, `movery` = %f, `moverz` = %f WHERE `id` = %d",x,y,z,rx,ry,rz,Doors[id][doorID]);
	mysql_tquery(dbCon, szQuery, "OnEditedMoveDoor", "d", id);
	return 1;
}

forward OnMoveDoorRemove(objectid);
public OnMoveDoorRemove(objectid)
{
	DestroyDynamicObject(Doors[objectid][doorObject]);
	Doors[objectid][doorPosX] = 0.0;
	Doors[objectid][doorPosY] = 0.0;
	Doors[objectid][doorPosZ] = 0.0;
	Doors[objectid][doorPosRX] = 0.0;
	Doors[objectid][doorPosRY] = 0.0;
	Doors[objectid][doorPosRZ] = 0.0;
	Doors[objectid][doorInterior] = 0;
	Doors[objectid][doorFaction] = -1;
	Doors[objectid][doorOpened] = 0;
	Doors[objectid][doorVirtualWorld] = 0;
	return 1;
}

forward OnMoveDoorInsert(id);
public OnMoveDoorInsert(id)
{
	Doors[id][doorID] = cache_insert_id();
	return 1;
}

forward OnEditedMoveDoor(objectid);
public OnEditedMoveDoor(objectid)
{
	new Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz;
	GetDynamicObjectPos(Doors[objectid][doorObject], x, y, z);
	GetDynamicObjectRot(Doors[objectid][doorObject], rx, ry, rz);

	Doors[objectid][doorPosX] = x;
	Doors[objectid][doorPosY] = y;
	Doors[objectid][doorPosZ] = z;
	Doors[objectid][doorPosRX] = rx;
	Doors[objectid][doorPosRY] = ry;
	Doors[objectid][doorPosRZ] = rz;
	return 1;
}

stock GetClosestHouseID(playerid)
{
	foreach(new i : sv_houses) if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseInfo[i][hEntranceX], HouseInfo[i][hEntranceY], HouseInfo[i][hEntranceZ])) return i;
	return -1;
}

forward OnPlayerAttachWeaponInsert(playerid, slot);
public OnPlayerAttachWeaponInsert(playerid, slot)
{
	PlayerAttachWeapon[playerid][slot][awID] = cache_insert_id();
	return 1;
}

forward OnHouseInsert(HouseID);
public OnHouseInsert(HouseID)
{
	HouseInfo[HouseID][hID] = cache_insert_id();
	return 1;
}

forward OnWarehouseInsert(warehouseID);
public OnWarehouseInsert(warehouseID)
{
	WareHouseInfo[warehouseID][whID] = cache_insert_id();
	return 1;
}

forward OnBizInsert(BizzID);
public OnBizInsert(BizzID)
{
	BizInfo[BizzID][bID] = cache_insert_id();
	Iter_Add(sv_business, BizzID);
	return 1;
}

forward OnBizRemove(bizid);
public OnBizRemove(bizid)
{
	BizInfo[bizid][bEntranceX] = 0.0000;
	BizInfo[bizid][bEntranceY] = 0.0000;
	BizInfo[bizid][bEntranceZ] = 0.0000;
	BizInfo[bizid][bExitX] = 0.0000;
	BizInfo[bizid][bExitY] = 0.0000;
	BizInfo[bizid][bExitZ] = 0.0000;
	BizInfo[bizid][bLevelNeeded] = 0;
	BizInfo[bizid][bBuyPrice] = 0;
	BizInfo[bizid][bInterior] = 0;
	BizInfo[bizid][bWorld] = 0;
	BizInfo[bizid][bTill] = 0;
	BizInfo[bizid][bOwned] = 0;
	BizInfo[bizid][bType] = 0;
	BizInfo[bizid][bsubType] = 0;
	BizInfo[bizid][bEntranceCost] = 0;
	BizInfo[bizid][bLocked] = 1;
	BizInfo[bizid][bProducts] = 0;

	BizInfo[bizid][bBuyingCarX] = 0.0;
	BizInfo[bizid][bBuyingCarY] = 0.0;
	BizInfo[bizid][bBuyingCarZ] = 0.0;
	BizInfo[bizid][bBuyingCarA] = 0.0;
	BizInfo[bizid][bBuyingBoatX] = 0.0;
	BizInfo[bizid][bBuyingBoatY] = 0.0;
	BizInfo[bizid][bBuyingBoatZ] = 0.0;
	BizInfo[bizid][bBuyingBoatA] = 0.0;
	BizInfo[bizid][bBuyingAirX] = 0.0;
	BizInfo[bizid][bBuyingAirY] = 0.0;
	BizInfo[bizid][bBuyingAirZ] = 0.0;
	BizInfo[bizid][bBuyingAirA] = 0.0;

	format(BizInfo[bizid][bOwner], 24, "Estado");
	format(BizInfo[bizid][bInfo], 256, "negócio");
	//format(BizInfo[bizid][bMessage], 256, "");
	return 1;
}

forward OnAdminSellBusiness(bizid);
public OnAdminSellBusiness(bizid)
{
	BizInfo[bizid][bTill] = 0;
	BizInfo[bizid][bOwned] = 0;
	BizInfo[bizid][bEntranceCost] = 0;
	BizInfo[bizid][bLocked] = 1;
	format(BizInfo[bizid][bOwner], 24, "Estado");
	return 1;
}

stock GetNextHouseTrunkSlot(house)
{
  for(new i = 0; i != MAX_HOUSE_WEAPONS; ++i) if(HouseInfo[house][hWeapon][i] == 0) return i;
  return -1;
}

stock UpdateHouseText(houseid)
{
	if(!HouseInfo[houseid][hOwned]) {
	    if(!IsValidDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel])) {
	        format(szString, sizeof(szString), ""EMBED_YELLOW"Casa[%d] A venda:\npreço: R$%d\nnível: %d", houseid, HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
	        HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(szString, -1, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			return 1;
		}

		format(szString, sizeof(szString), ""EMBED_YELLOW"Casa[%d] A venda:\npreço: R$%d\nnível: %d", houseid, HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
        UpdateDynamic3DTextLabelText(HouseInfo[houseid][hLabel], -1, szString);
	}
	else
	{
		if(IsValidDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel]);
	}
	/*else
		format(szString, sizeof(szString), ""EMBED_YELLOW"House[%d]\n%s", houseid, HouseInfo[houseid][hInfo]);
*/
	//UpdateDynamic3DTextLabelText(HouseInfo[houseid][hLabel], -1, szString);
	return 1;
}


/*stock PlayPlayerBoomBoxURL(playerid, urlname[], url[])
{
	if(GetPVarInt(playerid, "SelectingHouseRadio"))
	{
	    new msg[128];
		new house = HouseEntered[playerid];

		format(msg, sizeof(msg), "> %s Change the channel to %s", ReturnName(playerid, 0), urlname);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s Change the channel to %s", ReturnName(playerid, 0), urlname);
		SetPlayerChatBubble(playerid, msg, COLOR_GREEN, 15.0, 10000);;

		HouseInfo[house][hRadioOn] = 1;
		format(HouseInfo[house][hRadioURL], 256, "%s", url);
		StartMusicInHouse(house, url);
	}
}*/

/*stock StartMusicInHouse(house, url[])
{
	if(HouseInfo[house][hradioOn])
	{
		foreach(Player, i)
		{
			if(HouseEntered[i] == house)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
				SendClientMessageEx(i, COLOR_LIGHTRED, "Radio changed to Station %s", HouseInfo[house][hradioStation]);
			}
		}
	}
	return 1;
}*/

stock StopBoomBox(playerid)
{
	if(BoomboxData[playerid][boomboxOn])
	{
        BoomboxData[playerid][boomboxOn]=false;

		foreach(new i : Player)
		{
			if(Boombox_Nearest(i) == playerid)
			{
				StopAudioStreamForPlayer(i);
				SendClientMessage(i, COLOR_LIGHTRED, "O rádio está desligado.");
			}

		}
	}
}

stock StopHouseBoomBox(house)
{
	if(HouseInfo[house][hradioOn])
	{
		HouseInfo[house][hradioOn] = false;
		foreach(new i : Player)
		{
			if(HouseEntered[i] == house)
			{
				StopAudioStreamForPlayer(i);
				SendClientMessage(i, COLOR_LIGHTRED, "O rádio está desligado");
			}
		}
	}
	return 1;
}

stock LoadHouseFurnitures(houseid)
{
	format(szQuery, sizeof(szQuery), "SELECT * FROM `house_furnitures` WHERE `houseid` = %d", HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, szQuery, "OnHouseFurnituresLoad", "i", houseid);
	return 1;
}
/*
forward LoadHouseFurnitureMaterials(houseid, furnitureslot);
public LoadHouseFurnitureMaterials(houseid, furnitureslot)
{
	if(HouseFurniture[houseid][furnitureslot][fOn])
	{
		for (new i = 0; i != MAX_MATERIAL; i ++) if(HouseMaterial[furnitureslot][i][mOn]) {
			SetDynamicObjectMaterial(HouseFurniture[houseid][furnitureslot][fObject], HouseMaterial[furnitureslot][i][mIndex], HouseMaterial[furnitureslot][i][mModel], HouseMaterial[furnitureslot][i][mTxd], HouseMaterial[furnitureslot][i][mTexture], HexToInt(HouseMaterial[furnitureslot][i][mColor]));
		}
	}
	return 1;
}
*/

forward LoadBizFurnitureMaterials(bizid, furnitureslot);
public LoadBizFurnitureMaterials(bizid, furnitureslot)
{
	if(BizFurniture[bizid][furnitureslot][fOn])
	{
		for (new i = 0; i != MAX_MATERIAL; i ++) if(BizMaterial[furnitureslot][i][mOn]) {
			SetDynamicObjectMaterial(BizFurniture[bizid][furnitureslot][fObject], BizMaterial[furnitureslot][i][mIndex], BizMaterial[furnitureslot][i][mModel], BizMaterial[furnitureslot][i][mTxd], BizMaterial[furnitureslot][i][mTexture], HexToInt(BizMaterial[furnitureslot][i][mColor]));
		}
	}
	return 1;
}

stock LoadBizFurnitures(bizid)
{
	format(szQuery, sizeof(szQuery), "SELECT * FROM `business_furnitures` WHERE `houseid` = %d", BizInfo[bizid][bID]);
	mysql_tquery(dbCon, szQuery, "OnBizFurnituresLoad", "i", bizid);
	return 1;
}

stock isHouseDoor(model)
{
	switch (model) {
		case 3109, 19857, 3093, 2947, 2955, 2946, 2930, 977, 1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499..1507, 1559, 1569, 1535, 1523, 1533, 1532, 1522:
		    return 1;
	}
	return 0;
}

forward OnHouseFurnituresLoad(houseid);
public OnHouseFurnituresLoad(houseid)
{
    new rows;

    cache_get_row_count(rows);

    if(rows)
    {
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_index_int(i, 0, HouseFurniture[houseid][i][fID]);
			cache_get_value_index_int(i, 1, HouseFurniture[houseid][i][fModel]);

			cache_get_value_index(i, 2, szString);
			format(HouseFurniture[houseid][i][fName], 48, szString);

			HouseFurniture[houseid][i][fHouseID] = houseid;

			cache_get_value_index_int(i, 4, HouseFurniture[houseid][i][fInterior]);
			cache_get_value_index_int(i, 5, HouseFurniture[houseid][i][fVirtualWorld]);
			cache_get_value_index_int(i, 6, HouseFurniture[houseid][i][fMarketPrice]);
			cache_get_value_index_float(i, 7, HouseFurniture[houseid][i][fPosX]);
			cache_get_value_index_float(i, 8, HouseFurniture[houseid][i][fPosY]);
			cache_get_value_index_float(i, 9, HouseFurniture[houseid][i][fPosZ]);
			cache_get_value_index_float(i, 10, HouseFurniture[houseid][i][fPosRX]);
			cache_get_value_index_float(i, 11, HouseFurniture[houseid][i][fPosRY]);
			cache_get_value_index_float(i, 12, HouseFurniture[houseid][i][fPosRZ]);

			HouseFurniture[houseid][i][fOn] = 1;

			HouseFurniture[houseid][i][fObject] = CA_CreateDynamicObject_SC(HouseFurniture[houseid][i][fModel], HouseFurniture[houseid][i][fPosX], HouseFurniture[houseid][i][fPosY], HouseFurniture[houseid][i][fPosZ], HouseFurniture[houseid][i][fPosRX], HouseFurniture[houseid][i][fPosRY], HouseFurniture[houseid][i][fPosRZ], HouseFurniture[houseid][i][fVirtualWorld], HouseFurniture[houseid][i][fInterior], -1, 200.0);

			format(szQuery, sizeof(szQuery), "SELECT * FROM `house_materials` WHERE `furnitureid` = %d", HouseFurniture[houseid][i][fID]);
			mysql_tquery(dbCon, szQuery, "OnHouseMaterialsLoad", "ii", houseid, i);

			if(isHouseDoor(HouseFurniture[houseid][i][fModel]))
			{
				HouseFurniture[houseid][i][fLocked] = 1;
				HouseFurniture[houseid][i][fOpened] = 0;
			}
		}
    }
    return 1;
}

forward OnBizFurnituresLoad(bizid);
public OnBizFurnituresLoad(bizid)
{
    new rows;

    cache_get_row_count(rows);

    if(rows)
    {
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_index_int(i, 0, BizFurniture[bizid][i][fID]);
			cache_get_value_index_int(i, 1, BizFurniture[bizid][i][fModel]);

			cache_get_value_index(i, 2, szString);
			format(BizFurniture[bizid][i][fName], 48, szString);

			BizFurniture[bizid][i][fHouseID] = bizid;

			cache_get_value_index_int(i, 4, BizFurniture[bizid][i][fInterior]);
			cache_get_value_index_int(i, 5, BizFurniture[bizid][i][fVirtualWorld]);
			cache_get_value_index_int(i, 6, BizFurniture[bizid][i][fMarketPrice]);
			cache_get_value_index_float(i, 7, BizFurniture[bizid][i][fPosX]);
			cache_get_value_index_float(i, 8, BizFurniture[bizid][i][fPosY]);
			cache_get_value_index_float(i, 9, BizFurniture[bizid][i][fPosZ]);
			cache_get_value_index_float(i, 10, BizFurniture[bizid][i][fPosRX]);
			cache_get_value_index_float(i, 11, BizFurniture[bizid][i][fPosRY]);
			cache_get_value_index_float(i, 12, BizFurniture[bizid][i][fPosRZ]);

			BizFurniture[bizid][i][fOn] = 1;

			BizFurniture[bizid][i][fObject] = CA_CreateDynamicObject_SC(BizFurniture[bizid][i][fModel], BizFurniture[bizid][i][fPosX], BizFurniture[bizid][i][fPosY], BizFurniture[bizid][i][fPosZ], BizFurniture[bizid][i][fPosRX], BizFurniture[bizid][i][fPosRY], BizFurniture[bizid][i][fPosRZ], BizFurniture[bizid][i][fVirtualWorld], BizFurniture[bizid][i][fInterior], -1, 200.0);

			format(szQuery, sizeof(szQuery), "SELECT * FROM `business_materials` WHERE `furnitureid` = %d", BizFurniture[bizid][i][fID]);
			mysql_tquery(dbCon, szQuery, "OnBizMaterialsLoad", "ii", bizid, i);

			if(isHouseDoor(BizFurniture[bizid][i][fModel]))
			{
				BizFurniture[bizid][i][fLocked] = 1;
				BizFurniture[bizid][i][fOpened] = 0;
			}
		}
    }
    return 1;
}

forward OnHouseMaterialsLoad(houseid, furnitureid);
public OnHouseMaterialsLoad(houseid, furnitureid)
{
    new rows;

    cache_get_row_count(rows);

    if(rows)
    {
		for (new i = 0; i < rows; i ++) if(i < MAX_MATERIAL)
		{
			cache_get_value_index_int(i, 0, HouseMaterial[furnitureid][i][mSid]);
			cache_get_value_index_int(i, 1, HouseMaterial[furnitureid][i][mfID]);
			cache_get_value_index_int(i, 2, HouseMaterial[furnitureid][i][mIndex]);
			cache_get_value_index_int(i, 3, HouseMaterial[furnitureid][i][mModel]);

			cache_get_value_index(i, 4, szString);
			strmid(HouseMaterial[furnitureid][i][mTxd], szString, 0, 32, 32);

			cache_get_value_index(i, 5, szString);
			strmid(HouseMaterial[furnitureid][i][mTexture], szString, 0, 32, 32);

			cache_get_value_index(i, 6, szString);
			strmid(HouseMaterial[furnitureid][i][mColor], szString, 0, 12, 12);

			HouseMaterial[furnitureid][i][mOn] = 1;

			//SetDynamicObjectMaterial(HouseFurniture[houseid][furnitureid][fObject], HouseMaterial[furnitureid][i][mIndex], HouseMaterial[furnitureid][i][mModel], HouseMaterial[furnitureid][i][mTxd], HouseMaterial[furnitureid][i][mTexture], HexToInt(HouseMaterial[furnitureid][i][mColor]));
		}
    }
    //LoadHouseFurnitureMaterials(houseid, furnitureid);
    return 1;
}

forward OnBizMaterialsLoad(bizid, furnitureid);
public OnBizMaterialsLoad(bizid, furnitureid)
{
    new rows;

    cache_get_row_count(rows);

    if(rows)
    {
		for (new i = 0; i < rows; i ++) if(i < MAX_MATERIAL)
		{
			cache_get_value_index_int(i, 0, BizMaterial[furnitureid][i][mSid]);
			cache_get_value_index_int(i, 1, BizMaterial[furnitureid][i][mfID]);
			cache_get_value_index_int(i, 2, BizMaterial[furnitureid][i][mIndex]);
			cache_get_value_index_int(i, 3, BizMaterial[furnitureid][i][mModel]);

			cache_get_value_index(i, 4, szString);
			strmid(BizMaterial[furnitureid][i][mTxd], szString, 0, 32, 32);
			//format(BizMaterial[furnitureid][i][mTxd], 32, szString);

			cache_get_value_index(i, 5, szString);
			//format(BizMaterial[furnitureid][i][mTexture], 32, szString);
			strmid(BizMaterial[furnitureid][i][mTexture], szString, 0, 32, 32);

			cache_get_value_index(i, 6, szString);
			//format(BizMaterial[furnitureid][i][mColor], 12, szString);
			strmid(BizMaterial[furnitureid][i][mColor], szString, 0, 12, 12);

			BizMaterial[furnitureid][i][mOn] = 1;

			SetDynamicObjectMaterial(BizFurniture[bizid][furnitureid][fObject], BizMaterial[furnitureid][i][mIndex], BizMaterial[furnitureid][i][mModel], BizMaterial[furnitureid][i][mTxd], BizMaterial[furnitureid][i][mTexture], HexToInt(BizMaterial[furnitureid][i][mColor]));

		}
    }
    LoadBizFurnitureMaterials(bizid, furnitureid);
    return 1;
}

stock GetNextHouseFurnitureSlot(houseid)
{
	for(new i = 0; i != MAX_FURNITURE; ++i) if(!HouseFurniture[houseid][i][fOn]) return i;
	return -1;
}

stock GetNextBizFurnitureSlot(bizid)
{
	for(new i = 0; i != MAX_FURNITURE; ++i) if(!BizFurniture[bizid][i][fOn]) return i;
	return -1;
}

stock GetHouseFurnitures(houseid)
{
	new count = 0;
	for(new i = 0; i != MAX_FURNITURE; ++i) if(HouseFurniture[houseid][i][fOn]) count++;
	return count;
}

stock GetBizFurnitures(bizid)
{
	new count = 0;
	for(new i = 0; i != MAX_FURNITURE; ++i) if(BizFurniture[bizid][i][fOn]) count++;
	return count;
}

stock OnPlayerBuyHouseFurniture(houseid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z)
{
	format(largeQuery, sizeof(largeQuery), "INSERT INTO `house_furnitures` (model, name, houseid, interior, virworld, marketprice, posx, posy, posz) VALUES (%d, '%s', %d, %d, %d, %d, %f, %f, %f)",
	model, name, HouseInfo[houseid][hID], interior, world, price, x, y ,z);
	mysql_tquery(dbCon, largeQuery, "OnHouseFurnitureInsert", "ii", houseid, furnitureslot);

	HouseFurniture[houseid][furnitureslot][fHouseID] = houseid;
	HouseFurniture[houseid][furnitureslot][fInterior] = interior;
	HouseFurniture[houseid][furnitureslot][fVirtualWorld] = world;
	HouseFurniture[houseid][furnitureslot][fMarketPrice] = price;
	HouseFurniture[houseid][furnitureslot][fModel] = model;
	HouseFurniture[houseid][furnitureslot][fPosX] = x;
	HouseFurniture[houseid][furnitureslot][fPosY] = y;
	HouseFurniture[houseid][furnitureslot][fPosZ] = z;
	HouseFurniture[houseid][furnitureslot][fPosRX] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRY] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRZ] = 0.0;
	HouseFurniture[houseid][furnitureslot][fOn] = 1;
	return 1;
}

stock OnPlayerBuyBizFurniture(bizid, interior, world, furnitureslot, model, price, name[], Float:x, Float:y, Float:z)
{
	format(largeQuery, sizeof(largeQuery), "INSERT INTO `business_furnitures` (model, name, houseid, interior, virworld, marketprice, posx, posy, posz) VALUES (%d, '%s', %d, %d, %d, %d, %f, %f, %f)",
	model, name, BizInfo[bizid][bID], interior, world, price, x, y ,z);
	mysql_tquery(dbCon, largeQuery, "OnBizFurnitureInsert", "ii", bizid, furnitureslot);

	BizFurniture[bizid][furnitureslot][fHouseID] = bizid;
	BizFurniture[bizid][furnitureslot][fInterior] = interior;
	BizFurniture[bizid][furnitureslot][fVirtualWorld] = world;
	BizFurniture[bizid][furnitureslot][fMarketPrice] = price;
	BizFurniture[bizid][furnitureslot][fModel] = model;
	BizFurniture[bizid][furnitureslot][fPosX] = x;
	BizFurniture[bizid][furnitureslot][fPosY] = y;
	BizFurniture[bizid][furnitureslot][fPosZ] = z;
	BizFurniture[bizid][furnitureslot][fPosRX] = 0.0;
	BizFurniture[bizid][furnitureslot][fPosRY] = 0.0;
	BizFurniture[bizid][furnitureslot][fPosRZ] = 0.0;
	BizFurniture[bizid][furnitureslot][fOn] = 1;
	return 1;
}

forward OnHouseFurnitureInsert(houseid, furnitureslot);
public OnHouseFurnitureInsert(houseid, furnitureslot)
{
	HouseFurniture[houseid][furnitureslot][fID] = cache_insert_id();
	return 1;
}

forward OnBizFurnitureInsert(bizid, furnitureslot);
public OnBizFurnitureInsert(bizid, furnitureslot)
{
	BizFurniture[bizid][furnitureslot][fID] = cache_insert_id();
	return 1;
}

stock OnPlayerEditedFurniture(playerid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new houseid = HouseEntered[playerid];
	if(houseid != -1) {
		format(szQuery, sizeof(szQuery), "UPDATE `house_furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",
		x, y, z, rx, ry, rz, HouseFurniture[houseid][furnitureslot][fID]);
		mysql_tquery(dbCon, szQuery, "OnFurnitureUpdatePos", "iiffffff", playerid, furnitureslot, x, y, z, rx, ry, rz);
	}
	houseid = BizEntered[playerid];
	if(houseid != -1) {
		format(szQuery, sizeof(szQuery), "UPDATE `business_furnitures` SET `posx` = %f, `posy` = %f, `posz` = %f, `posrx` = %f, `posry` = %f, `posrz` = %f WHERE `id` = %d",
		x, y, z, rx, ry, rz, BizFurniture[houseid][furnitureslot][fID]);
		mysql_tquery(dbCon, szQuery, "OnFurnitureUpdatePos", "iiffffff", playerid, furnitureslot, x, y, z, rx, ry, rz);
	}
	return 1;
}

forward OnFurnitureUpdatePos(playerid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz);
public OnFurnitureUpdatePos(playerid, furnitureslot, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	new housekey = HouseEntered[playerid];
	if(housekey != -1) {
		HouseFurniture[housekey][furnitureslot][fPosX] = x;
		HouseFurniture[housekey][furnitureslot][fPosY] = y;
		HouseFurniture[housekey][furnitureslot][fPosZ] = z;
		HouseFurniture[housekey][furnitureslot][fPosRX] = rx;
		HouseFurniture[housekey][furnitureslot][fPosRY] = ry;
		HouseFurniture[housekey][furnitureslot][fPosRZ] = rz;
	}

	housekey = BizEntered[playerid];
	if(housekey != -1) {
		BizFurniture[housekey][furnitureslot][fPosX] = x;
		BizFurniture[housekey][furnitureslot][fPosY] = y;
		BizFurniture[housekey][furnitureslot][fPosZ] = z;
		BizFurniture[housekey][furnitureslot][fPosRX] = rx;
		BizFurniture[housekey][furnitureslot][fPosRY] = ry;
		BizFurniture[housekey][furnitureslot][fPosRZ] = rz;
	}
	return 1;
}


stock OnPlayerRenameFurniture(playerid, furnitureslot, name[])
{
	new houseid = HouseEntered[playerid];
	if(houseid != -1) {
		format(szQuery, sizeof(szQuery), "UPDATE `house_furnitures` SET `name` = '%s' WHERE `id` = %d",
		name, HouseFurniture[houseid][furnitureslot][fID]);
		mysql_query(dbCon, szQuery);

		format(HouseFurniture[houseid][furnitureslot][fName], 48, "%s", name);
	}

	houseid = BizEntered[playerid];
	if(houseid != -1) {
		format(szQuery, sizeof(szQuery), "UPDATE `business_furnitures` SET `name` = '%s' WHERE `id` = %d",
		name, BizFurniture[houseid][furnitureslot][fID]);
		mysql_query(dbCon, szQuery);

		format(BizFurniture[houseid][furnitureslot][fName], 48, "%s", name);
	}
	return 1;
}

stock OnPlayerSellHouseFurniture(playerid, houseid, furnitureslot)
{
	format(szQuery, sizeof(szQuery), "DELETE FROM `house_furnitures` WHERE `id` = %d", HouseFurniture[houseid][furnitureslot][fID]);
	mysql_tquery(dbCon, szQuery, "OnPlayerSoldHouseFurniture", "idd", playerid, houseid, furnitureslot);
	return 1;
}

stock OnPlayerSellBizFurniture(playerid, bizid, furnitureslot)
{
	format(szQuery, sizeof(szQuery), "DELETE FROM `business_furnitures` WHERE `id` = %d", BizFurniture[bizid][furnitureslot][fID]);
	mysql_tquery(dbCon, szQuery, "OnPlayerSoldBizFurniture", "idd", playerid, bizid, furnitureslot);
	return 1;
}

forward OnPlayerSoldHouseFurniture(playerid, houseid, furnitureslot);
public OnPlayerSoldHouseFurniture(playerid, houseid, furnitureslot)
{
	HouseFurniture[houseid][furnitureslot][fInterior] = 0;
	HouseFurniture[houseid][furnitureslot][fVirtualWorld] = 0;
	HouseFurniture[houseid][furnitureslot][fMarketPrice] = 0;
	HouseFurniture[houseid][furnitureslot][fModel] = 0;
	HouseFurniture[houseid][furnitureslot][fPosX] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosY] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosZ] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRX] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRY] = 0.0;
	HouseFurniture[houseid][furnitureslot][fPosRZ] = 0.0;
	format(HouseFurniture[houseid][furnitureslot][fName], 48, "invalido");
	HouseFurniture[houseid][furnitureslot][fOn] = 0;
	UpdateHouseInfo(houseid);

	for(new i = 0; i != MAX_MATERIAL; ++i) RemoveHouseFurnitureMaterial(houseid, furnitureslot, i);

	return 1;
}

forward OnPlayerSoldBizFurniture(playerid, bizid, furnitureslot);
public OnPlayerSoldBizFurniture(playerid, bizid, furnitureslot)
{
	BizFurniture[bizid][furnitureslot][fInterior] = 0;
	BizFurniture[bizid][furnitureslot][fVirtualWorld] = 0;
	BizFurniture[bizid][furnitureslot][fMarketPrice] = 0;
	BizFurniture[bizid][furnitureslot][fModel] = 0;
	BizFurniture[bizid][furnitureslot][fPosX] = 0.0;
	BizFurniture[bizid][furnitureslot][fPosY] = 0.0;
	BizFurniture[bizid][furnitureslot][fPosZ] = 0.0;
	BizFurniture[bizid][furnitureslot][fPosRX] = 0.0;
	BizFurniture[bizid][furnitureslot][fPosRY] = 0.0;
	BizFurniture[bizid][furnitureslot][fPosRZ] = 0.0;
	format(BizFurniture[bizid][furnitureslot][fName], 48, "invalido");
	BizFurniture[bizid][furnitureslot][fOn] = 0;
	UpdateBizInfo(bizid);

	for(new i = 0; i != MAX_MATERIAL; ++i) RemoveBizFurnitureMaterial(bizid, furnitureslot, i);

	return 1;
}

stock CountHouseTrunk(house)
{
	new count;
	for(new i = 0; i != MAX_HOUSE_WEAPONS; ++i) if(HouseInfo[house][hWeapon][i] != 0) count++;
	return count;
}

stock GetHouseLocation(playerid)
{
	new string[64], house = PlayerData[playerid][pHouseKey];
	if(house == -1) string = "?????????";
	else Get2DPosZone(HouseInfo[house][hEntranceX],HouseInfo[house][hEntranceY], string, MAX_ZONE_NAME);
	return string;
}

/*public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
    if(response == EDIT_RESPONSE_FINAL) {
		MoveObject(gMainShipObjectId,fX, fY, fZ, 20.0, fRotX, fRotY, fRotZ);
		printf("{%f, %f, %f, %f, %f, %f},", fX, fY, fZ, fRotX, fRotY, fRotZ);
	}
	return 1;
}*/

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if(PlayerPlaceSlot[playerid] != -1 && PlayerPlaceCar[playerid] != -1)
	{
	    new slot = PlayerPlaceSlot[playerid];
	    new i = PlayerPlaceCar[playerid];

		new Float:finalx, Float:finaly, Float:finalz, Float:finalrz;

		GetVehicleAttachCroods(CarData[i][carVehicle], x, y, z, rz, finalx, finaly, finalz, finalrz);

		CarPlace[i][slot][cPx]=finalx;
		CarPlace[i][slot][cPy]=finaly;
		CarPlace[i][slot][cPz]=finalz;
		CarPlace[i][slot][cPrx]=rx;
		CarPlace[i][slot][cPry]=ry;
		CarPlace[i][slot][cPrz]=finalrz;


		new Float:vehicleSize[3];
	    GetVehicleModelInfo(CarData[i][carModel], VEHICLE_MODEL_INFO_SIZE, vehicleSize[0], vehicleSize[1], vehicleSize[2]);

		if((finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: O objeto está fora dos limites. Volte para o veículo.");
		}

		if(response == EDIT_RESPONSE_FINAL || EDIT_RESPONSE_CANCEL)
		{
            if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				new
					Float:fX,
					Float:fY,
					Float:fZ,
					Float:vA;

				GetVehicleInside(CarData[i][carVehicle], fX, fY, fZ);
				GetVehicleZAngle(CarData[i][carVehicle], vA);

				if(!TwoPointCompare(1.0, fX, fY, fZ, x, y, z) || (finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
				{

					GetVehicleBootInside(CarData[i][carVehicle], fX, fY, fZ);
					GetVehicleZAngle(CarData[i][carVehicle], vA);

					if(!TwoPointCompare(1.0, fX, fY, fZ, x, y, z) || (finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
					{
						GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ, vA+135, finalx, finaly, finalz, finalrz);

						CarPlace[i][slot][cPx]=finalx;
						CarPlace[i][slot][cPy]=finaly;
						CarPlace[i][slot][cPz]=finalz;
						CarPlace[i][slot][cPrx]=-100.0;
						CarPlace[i][slot][cPry]=-45.0;
						CarPlace[i][slot][cPrz]=finalrz;
						CarPlace[i][slot][cPType]=1;

						SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: O objeto está fora dos limites. Mova para uma posição intermédiaria.");
					}
				}
			}
			else
			{

				new
					Float:fX,
					Float:fY,
					Float:fZ,
					Float:vA;

				GetVehicleBootInside(CarData[i][carVehicle], fX, fY, fZ);
				GetVehicleZAngle(CarData[i][carVehicle], vA);

				if(!TwoPointCompare(1.0, fX, fY, fZ, x, y, z) || (finalx > vehicleSize[0]/2) || (0 > finalx && finalx < -(vehicleSize[0]/2)) || finaly > vehicleSize[1]/2 || (0 > finaly && finaly < -(vehicleSize[1]/2))  || finalz > vehicleSize[2]/2 || (0 > finalz && finalz < -(vehicleSize[2]/4)))
				{
					GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ + 0.1, vA+135, finalx, finaly, finalz, finalrz);

					CarPlace[i][slot][cPx]=finalx;
					CarPlace[i][slot][cPy]=finaly;
					CarPlace[i][slot][cPz]=finalz;
					CarPlace[i][slot][cPrx]=90.0;
					CarPlace[i][slot][cPry]=270.0;
					CarPlace[i][slot][cPrz]=finalrz;
					CarPlace[i][slot][cPType]=0;


					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: O objeto está fora dos limites. Mova para uma posição intermediaria.");
					SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Os itens sí podem ser armazenados na loja se Você estiver fora do veículo.");
				}

			}
			//printf("%d", CarPlace[i][slot][cPType]);

            AttachDynamicObjectToVehicle(CarPlace[i][slot][cPobj], CarData[i][carVehicle], CarPlace[i][slot][cPx], CarPlace[i][slot][cPy], CarPlace[i][slot][cPz], CarPlace[i][slot][cPrx], CarPlace[i][slot][cPry], CarPlace[i][slot][cPrz]);
		}
		return 1;
	}

	new str[128];

	//=============================================================================================================================
	new Float:oldX, Float:oldY, Float:oldZ,
	Float:oldRotX, Float:oldRotY, Float:oldRotZ;
	GetDynamicObjectPos(objectid, oldX, oldY, oldZ);
	GetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);

	if( GetPVarInt(playerid, "GraffitiCreating") == 1 ) //Checking if player have a positiv variable on GraffitiCreating
	{
	    if( response == EDIT_RESPONSE_FINAL ) // If player press SAVE
		{
            new id = GetPVarInt(playerid, "GraffitiID");

			graff_Info[id][Xpos] = x;
			graff_Info[id][Ypos] = y;
			graff_Info[id][Zpos] = z;

			graff_Info[id][XYpos] = rx;
			graff_Info[id][YYpos] = ry;
			graff_Info[id][ZYpos] = rz;

            SaveGraffiti(id);

			DeletePVar( playerid,"GraffitiCreating" );
		}
		else if( response == EDIT_RESPONSE_CANCEL ) // If he hits ESC
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			DeletePVar( playerid,"GraffitiCreating" );
		}
	}
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingDrugPackage") == 1)
	{
		if(response == EDIT_RESPONSE_CANCEL)
		{
			new data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

			SetDynamicObjectPos(objectid, data[drugObjectX], data[drugObjectY], data[drugObjectZ]);
			SetDynamicObjectRot(objectid, data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ]);
		}
		else if(response == EDIT_RESPONSE_FINAL)
		{
			new data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

			data[drugObjectX] = x;
			data[drugObjectY] = y;
			data[drugObjectZ] = z;
			data[drugObjectRX] = rx;
			data[drugObjectRY] = ry;
			data[drugObjectRZ] = rz;

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

			new XLQuery[256];
			format(XLQuery, sizeof(XLQuery), "UPDATE `drugs_object` SET `drugObjectX`='%f',`drugObjectY`='%f',`drugObjectZ`='%f',`drugObjectRX`='%f',`drugObjectRY`='%f',`drugObjectRZ`='%f' WHERE `drugSID` = '%d'",
			data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ], data[drugSID]);
			mysql_tquery(dbCon, XLQuery);
		}
		DeletePVar(playerid, "EditingDrugPackage");
		return 1;
	}



	if(IsValidDynamicObject(objectid) && MealObject[playerid] != -1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
            MealDrop[MealObject[playerid]][mX]=x;
            MealDrop[MealObject[playerid]][mY]=y;
            MealDrop[MealObject[playerid]][mZ]=z;
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
		    MealHolding[playerid] = MealDrop[MealObject[playerid]][mID];
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			SetPlayerMealHold(playerid, MealHolding[playerid]);

			MealDestroy(MealObject[playerid]);
		    MealObject[playerid]=-1;
		}
		return 1;
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingMoveDoor") == 1 && Iter_Contains(sv_movedoors, GetPVarInt(playerid, "ObjectEditing")))
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    new i = GetPVarInt(playerid, "ObjectEditing");

      		Doors[i][doorPosX] = x;
      		Doors[i][doorPosY] = y;
      		Doors[i][doorPosZ] = z;

      		Doors[i][doorPosRX] = rx;
      		Doors[i][doorPosRY] = ry;
      		Doors[i][doorPosRZ] = rz;

			SaveEditedMoveDoor(i, x, y, z, rx, ry, rz);

			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessageEx(playerid, COLOR_YELLOW, "SERVER: A posição da porta foi editada com sucesso %f, %f, %f", x, y, z);
			DeletePVar(playerid, "EditingMoveDoor");
			DeletePVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Você desmarcou a posição da porta!");
			DeletePVar(playerid, "EditingMoveDoor");
			DeletePVar(playerid, "ObjectEditing");
		}
		return 1;
	}
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingMoveDoorMove") == 1 && Iter_Contains(sv_movedoors, GetPVarInt(playerid, "ObjectEditing")))
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			new i = GetPVarInt(playerid, "ObjectEditing");

      		Doors[i][doorMoveX] = x;
      		Doors[i][doorMoveY] = y;
      		Doors[i][doorMoveZ] = z;

      		Doors[i][doorMoveRX] = rx;
      		Doors[i][doorMoveRY] = ry;
      		Doors[i][doorMoveRZ] = rz;

			SaveEditedMoveDoorMove(i, x, y, z, rx, ry, rz);
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessageEx(playerid, COLOR_YELLOW, "SERVER: posição deslizante da porta concluída %f, %f, %f", x, y, z);
			DeletePVar(playerid, "EditingMoveDoorMove");
			DeletePVar(playerid, "ObjectEditing");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: Você desmarcou a posição deslizante da porta.");
			DeletePVar(playerid, "EditingMoveDoorMove");
			DeletePVar(playerid, "ObjectEditing");
		}
		return 1;
	}
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingFurniture") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessage(playerid, COLOR_GRAD1, "Você já editou a posição da animação.");
			OnPlayerEditedFurniture(playerid, GetPVarInt(playerid, "ChosenFurnitureSlot"), x, y, z, rx, ry, rz);
			DeletePVar(playerid, "EditingFurniture");

			ShowPlayerCurrentFurniture(playerid);
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			SendClientMessage(playerid, COLOR_GRAD1, "Você alterou a posição dos moveis.");
			DeletePVar(playerid, "EditingFurniture");

			ShowPlayerCurrentFurniture(playerid);
		}
		return 1;
	}

	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "JustBoughtFurniture") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			SendClientMessage(playerid, COLOR_GRAD1, "Você já editou a posição da animação.");
			OnPlayerEditedFurniture(playerid, GetPVarInt(playerid, "ChosenFurnitureSlot"), x, y, z, rx, ry, rz);
			DeletePVar(playerid, "JustBoughtFurniture");

			ShowPlayerCurrentFurniture(playerid);
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
		    new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");
			new houseid = HouseEntered[playerid];
			if(houseid != -1) {
				format(str, sizeof(str), "{AFAFAF}[CASA]{FFFFFF}: Você cancelou sua compra. %s e recebeu um reembolso de R$%d", HouseFurniture[houseid][furnitureslot][fName], HouseFurniture[houseid][furnitureslot][fMarketPrice]);
				SendClientMessage(playerid, COLOR_GRAD4, str);
				PlayerData[playerid][pCash] += HouseFurniture[houseid][furnitureslot][fMarketPrice];
				DestroyDynamicObject(HouseFurniture[houseid][furnitureslot][fObject]);
				OnPlayerSellHouseFurniture(playerid, houseid, furnitureslot);
				DeletePVar(playerid, "JustBoughtFurniture");
			}

			houseid = BizEntered[playerid];
			if(houseid != -1) {
				format(str, sizeof(str), "{AFAFAF}[NEGOCIO]{FFFFFF}: Você cancelou sua compra. %s e recebeu um reembolso de R$%d", BizFurniture[houseid][furnitureslot][fName], BizFurniture[houseid][furnitureslot][fMarketPrice]);
				SendClientMessage(playerid, COLOR_GRAD4, str);
				PlayerData[playerid][pCash] += BizFurniture[houseid][furnitureslot][fMarketPrice];
				DestroyDynamicObject(BizFurniture[houseid][furnitureslot][fObject]);
				OnPlayerSellBizFurniture(playerid, houseid, furnitureslot);
				DeletePVar(playerid, "JustBoughtFurniture");
			}

			Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Menu principal de moveis:", "Comprar móvel\nmoveis atuais\ninformações", "Selecionar", "<<");
		}
		DeletePVar(playerid, "FurnitureModelBuying");
		DeletePVar(playerid, "FurniturePriceBuying");
		DeletePVar(playerid, "FurnitureNameBuying");
		return 1;
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "BoomboxAdjust") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
		    DeletePVar(playerid, "BoomboxAdjust");

		    foreach(new i : Player) {
				if (playerid != i && BoomboxData[i][boomboxPlaced] && GetDistance(BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2], BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2]) <= 30.0) {
					SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
					SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
					SendClientMessage(playerid, COLOR_LIGHTRED, "não pode colocar aqui");
			        return 1;
				}
			}



			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);

			BoomboxData[playerid][boomboxPos][0] = x;
			BoomboxData[playerid][boomboxPos][1] = y;
			BoomboxData[playerid][boomboxPos][2] = z;

			if(BoomboxData[playerid][boomboxOn]) {

				foreach(new i : Player) if(Boombox_Nearest(i) == playerid)
				{
					strunpack(str, BoomboxData[playerid][boomboxURL]);
					StopAudioStreamForPlayer(i);
					PlayAudioStreamForPlayer(i, str, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
				}
			}

		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			DeletePVar(playerid, "BoomboxAdjust");
		}
		return 1;
	}
	//=============================================================================================================================
	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "EditingRB") == 1)
	{
		if(response == EDIT_RESPONSE_FINAL)
		{
			SetDynamicObjectPos(objectid, x, y, z);
			SetDynamicObjectRot(objectid, rx, ry, rz);
			DeletePVar(playerid, "EditingRB");
		}
		if(response == EDIT_RESPONSE_CANCEL)
		{
			SetDynamicObjectPos(objectid, oldX, oldY, oldZ);
			SetDynamicObjectRot(objectid, oldRotX, oldRotY, oldRotZ);
			EditDynamicObject(playerid, objectid);
  			SendClientMessage(playerid, COLOR_WHITE, "Por favor, pressione o botão SALVAR no editor.");
		}
		return 1;
	}
	//=============================================================================================================================

	return 1;
}

/*public OnPlayerEnterDynamicCP(playerid, checkpointid)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && PlayerData[playerid][pCP_Type] == -1 && gPlayerCheckpointStatus[playerid] == CHECKPOINT_NONE)
    {
		for(new i = 0; i != sizeof(HouseInfo); ++i)
		{
			if(checkpointid == HouseInfo[i][hCheckPoint])
			{
				if(HouseInfo[i][hOwned] == 1 && !strcmp(HouseInfo[i][hOwner], ReturnName(playerid), true))
				{
					SendClientMessage(playerid, COLOR_GREEN, "Welcome to your home balcony.");
					SendClientMessage(playerid, COLOR_WHITE, "Available commands: /entrar, /ds(hout), ddo, /knock");
				}
				else if(HouseInfo[i][hOwned] == 1)
				{
					if(HouseInfo[i][hRentable] == 1)
					{
						SendClientMessage(playerid, COLOR_LIGHTRED, "This house is rent.:");
						SendClientMessageEx(playerid, COLOR_WHITE, "R$%d", HouseInfo[i][hRentprice]);
					    SendClientMessage(playerid, COLOR_WHITE, "Want to rent here? /rentroom");
						format(szString, sizeof(szString), "Welcome to the home terrace of %s",HouseInfo[i][hOwner]);
						SendClientMessage(playerid, COLOR_GREEN, szString);
						SendClientMessage(playerid, COLOR_WHITE, "Available commands: /entrar, /ds(hout), ddo, /knock");
					}
					else
					{
						format(szString, sizeof(szString), "Welcome to the home terrace of %s",HouseInfo[i][hOwner]);
						SendClientMessage(playerid, COLOR_GREEN, szString);
						SendClientMessage(playerid, COLOR_WHITE, "Available commands: /entrar, /ds(hout), ddo, /knock");
					}
				}
				if(HouseInfo[i][hOwned] == 0)
				{
					SendClientMessage(playerid, COLOR_GREEN, "Welcome to the terrace");
					format(szString, sizeof(szString), "This house price is: R$%d",HouseInfo[i][hPrice]);
					SendClientMessage(playerid, COLOR_GREEN, szString);
					SendClientMessage(playerid, COLOR_WHITE, "Command: /comprarcasa");
				}
			}
		}
	}
	return 1;
}*/

forward OnHouseRemove(houseid);
public OnHouseRemove(houseid)
{
	HouseInfo[houseid][hEntranceX] = 0.0000;
	HouseInfo[houseid][hEntranceY] = 0.0000;
	HouseInfo[houseid][hEntranceZ] = 0.0000;
	HouseInfo[houseid][hExitX] = 0.0000;
	HouseInfo[houseid][hExitY] = 0.0000;
	HouseInfo[houseid][hExitZ] = 0.0000;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	HouseInfo[houseid][hLevelbuy] = 0;
	HouseInfo[houseid][hPrice] = 0;
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 0;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hInterior] = 0;
	HouseInfo[houseid][hWorld] = 0;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hRadio] = 0;
	format(HouseInfo[houseid][hOwner], 256, "Estado");
	HouseInfo[houseid][hLabel] = Text3D:INVALID_3DTEXT_ID;
	Iter_Remove(sv_houses, houseid);
	return 1;
}

forward OnWarehouseRemove(warehouseid);
public OnWarehouseRemove(warehouseid)
{
	WareHouseInfo[warehouseid][whX] = 0.0000;
	WareHouseInfo[warehouseid][whY] = 0.0000;
	WareHouseInfo[warehouseid][whZ] = 0.0000;
	WareHouseInfo[warehouseid][whInt] = 0;
	WareHouseInfo[warehouseid][whWorld] = 0;
	WareHouseInfo[warehouseid][whType] = 0;

	format(WareHouseInfo[warehouseid][whPlayer1], 24, "");
	format(WareHouseInfo[warehouseid][whPlayer2], 24, "");

	Iter_Remove(sv_warehouse, warehouseid);
	return 1;
}

forward OnAdminSellHouse(houseid);
public OnAdminSellHouse(houseid)
{
	foreach(new i : Player)
	{
		if(PlayerData[i][pHouseKey] == houseid)
		{
			SendClientMessage(i, COLOR_GRAD1, "A casa que Você alugou foi vendida. Agora Você não tem casa.");
			PlayerData[i][pHouseKey] = -1;
		}
	}
	HouseInfo[houseid][hOwned] = 0;
	HouseInfo[houseid][hLocked] = 1;
	HouseInfo[houseid][hRentprice] = 0;
	HouseInfo[houseid][hRentable] = 0;
	HouseInfo[houseid][hCash] = 0;
	HouseInfo[houseid][hRadio] = 0;
	HouseInfo[houseid][hCheckPosX] = 0.0000;
	HouseInfo[houseid][hCheckPosY] = 0.0000;
	HouseInfo[houseid][hCheckPosZ] = 0.0000;
	format(HouseInfo[houseid][hOwner], 256, "Estado");
	UpdateHouseText(houseid);
	return 1;
}

forward OnHouseMoved(houseid, Float:x, Float:y, Float:z);
public OnHouseMoved(houseid, Float:x, Float:y, Float:z)
{
	HouseInfo[houseid][hEntranceX] = x;
	HouseInfo[houseid][hEntranceY] = y;
	HouseInfo[houseid][hEntranceZ] = z;
	return 1;
}

forward OnHouseExitMoved(houseid, interior, world, Float:x, Float:y, Float:z);
public OnHouseExitMoved(houseid, interior, world, Float:x, Float:y, Float:z)
{
	HouseInfo[houseid][hExitX] = x;
	HouseInfo[houseid][hExitY] = y;
	HouseInfo[houseid][hExitZ] = z;
	HouseInfo[houseid][hInterior] = interior;
	HouseInfo[houseid][hWorld] = world;
	return 1;
}

forward OnTeleportRemove(teleid);
public OnTeleportRemove(teleid)
{
	HouseInteriors[teleid][aPosX] = 0.0000;
	HouseInteriors[teleid][aPosY] = 0.0000;
	HouseInteriors[teleid][aPosZ] = 0.0000;
	HouseInteriors[teleid][aTeleOn] = 0;
	return 1;
}

forward SalvamentoPlayer();
public SalvamentoPlayer(){
	foreach(new i : Player)
	{
		AntiImac(i);
		
	}	
	return 1;
}

forward GlobalSaving();
public GlobalSaving()
{
	//-------------------------------------------------
	foreach(new i : Player)
	{
		SQL_SaveCharacter(i);
	}
	//-------------------------------------------------
	foreach(new a : sv_houses) UpdateHouseInfo(a);
	foreach(new b : sv_business) UpdateBizInfo(b);
	foreach(new c : sv_playercar) Car_SaveID(c);
	return 1;
}

forward Industry_Load();
public Industry_Load()
{
    new rows, total, msg[128];

    cache_get_row_count(rows);

    if(rows)
    {
		for (new i = 0; i < rows; i ++) if(i < MAX_ITEM_STORAGE)
		{
			cache_get_value_index_int(i, 0, StorageData[i][in_id]);
			cache_get_value_index_float(i, 1, StorageData[i][in_posx]);
			cache_get_value_index_float(i, 2, StorageData[i][in_posy]);
			cache_get_value_index_float(i, 3, StorageData[i][in_posz]);
			cache_get_value_index_int(i, 4, StorageData[i][in_item]);
			cache_get_value_index_int(i, 5, StorageData[i][in_industryid]);
			cache_get_value_index_int(i, 6, StorageData[i][in_trading_type]);
			cache_get_value_index_int(i, 7, StorageData[i][in_price]);
			cache_get_value_index_int(i, 8, StorageData[i][in_consumption]);
			cache_get_value_index_int(i, 9, StorageData[i][in_stock]);
			cache_get_value_index_int(i, 10, StorageData[i][in_maximum]);

			//if(StorageData[i][in_item] == 23) printf("%d", i);

			if(!IndustryData[StorageData[i][in_industryid]][in_close])
			{
				StorageData[i][in_pickup] = CreateDynamicPickup(1318, 23, StorageData[i][in_posx], StorageData[i][in_posy], StorageData[i][in_posz], 0, 0);

				format(msg, 128, "[{E5FF00}%s{FFFFFF}]\nArmazenamento: %d / %d\npreço: %s / unidade", g_arrIndItemNames[StorageData[i][in_item]], StorageData[i][in_stock], StorageData[i][in_maximum], FormatNumber(StorageData[i][in_price]));
				StorageData[i][in_label] = CreateDynamic3DTextLabel(msg, -1, StorageData[i][in_posx], StorageData[i][in_posy], StorageData[i][in_posz], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
			}
            total++;

            Iter_Add(sv_industry, i);
		}
    }
	printf("Loaded %d storage from MySQL.", total);
    return 1;
}


forward DynamicTele_Load();
public DynamicTele_Load()
{
    new rows, total;

    cache_get_row_count(rows);

    new msg[128];

    if(rows)
    {
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_index_int(i, 0, HouseInteriors[i][aID]);

			cache_get_value_index(i, 1, msg);
			format(HouseInteriors[i][aMapName], 32, "%s", msg);

			cache_get_value_index_float(i, 2, HouseInteriors[i][aPosX]);
			cache_get_value_index_float(i, 3, HouseInteriors[i][aPosY]);
			cache_get_value_index_float(i, 4, HouseInteriors[i][aPosZ]);

			cache_get_value_index_int(i, 5, HouseInteriors[i][aInterior]);

			HouseInteriors[i][aTeleOn] = 1;
            total++;
		}
    }
	printf("Carregado %d teleportes administrativos no banco de dados.", total);
    return 1;
}

forward OnTeleportInsert(TeleID);
public OnTeleportInsert(TeleID)
{
	HouseInteriors[TeleID][aID] = cache_insert_id();
	return 1;
}

forward ShowTenantsAmount(playerid);
public ShowTenantsAmount(playerid)
{
	new rows;
	new tenantname[128];
	cache_get_row_count(rows);
	if(!rows) return SendClientMessage(playerid, COLOR_GRAD1, "Ninguém alugou sua casa.");
	SendClientMessage(playerid, COLOR_YELLOW, "|_______________Inquilinos_______________|");
	for(new i=0; i!=rows; ++i)
	{
		cache_get_value_index(i, 0, tenantname);

		if(strcmp(ReturnName(playerid), tenantname, true))
		{
			format(szString, sizeof(szString), "[Inquilinos %d] %s", i, tenantname);
			if(strcmp(tenantname, ReturnName(playerid), true)) SendClientMessage(playerid, COLOR_GREEN, szString);
		}
	}
	SendClientMessage(playerid, COLOR_YELLOW, "|_______________Inquilinos_______________|");
	return 1;
}

forward OnPlayerSellHouse(house);
public OnPlayerSellHouse(house)
{
	foreach(new i : Player)
	{
		if(PlayerData[i][pHouseKey] == house)
		{
			SendClientMessage(i, COLOR_GRAD1, "A casa que Você alugou foi vendida. Agora Você não tem casa.");
			PlayerData[i][pHouseKey] = -1;
		}
	}
	return 1;
}

forward OnPlayerEvictTenant(playerid, house);
public OnPlayerEvictTenant(playerid, house)
{
	foreach(new i : Player)
	{
		if(i == playerid) continue;

		if(PlayerData[i][pHouseKey] == house)
		{
			PlayerData[i][pHouseKey] = -1;
			SendClientMessage(i, COLOR_YELLOW, "Você foi expulso da casa pelo proprietário.");
		}
	}
	return 1;
}
Dialog:AdminTeles(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetPlayerPosEx(playerid, HouseInteriors[listitem][aPosX], HouseInteriors[listitem][aPosY], HouseInteriors[listitem][aPosZ]);
		SetPlayerInterior(playerid, HouseInteriors[listitem][aInterior]);
	}
	return 1;
}

Dialog:AdminBusinesses(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		SetPlayerPosEx(playerid, BizInfo[listitem][bEntranceX], BizInfo[listitem][bEntranceY], BizInfo[listitem][bEntranceZ]);
	}
	return 1;
}

Dialog:Teles(playerid, response, listitem, inputtext[]) {
	if(!response) return 1;

	switch(listitem)
		{
		    case 0:
		    {
		        SetPlayerPos(playerid, -25.884498,-185.868988,1003.546875);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}24/7 1");
			    return 1;
		    }
		    case 1:
		    {
		        SetPlayerPos(playerid, 6.091179,-29.271898,1003.549438);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}24/7 2");
			    return 1;
		    }
		    case 2:
		    {
		        SetPlayerPos(playerid, -30.946699,-89.609596,1003.546875);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}24/7 3");
			    return 1;
		    }
		    case 3:
		    {
		        SetPlayerPos(playerid, -25.132598,-139.066986,1003.546875);
		        SetPlayerInterior(playerid, 16);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}24/7 4");
			    return 1;
		    }
		    case 4:
		    {
		        SetPlayerPos(playerid, -27.312299,-29.277599,1003.557250);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}24/7 5");
			    return 1;
		    }
		    case 5:
		    {
		        SetPlayerPos(playerid, -26.691598,-55.714897,1003.546875);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}24/7 6");
			    return 1;
		    }
		    case 6:
		    {
		        SetPlayerPos(playerid, -1827.147338,7.207417,1061.143554);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Aeropoto 1");
			    return 1;
		    }
		    case 7:
		    {
		        SetPlayerPos(playerid, -1861.936889,54.908092,1061.143554);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Aeropoto 2");
			    return 1;
		    }
		    case 8:
		    {
		        SetPlayerPos(playerid, 1.808619,32.384357,1199.593750);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Shamal");
			    return 1;
		    }
		    case 9:
		    {
		        SetPlayerPos(playerid, 315.745086,984.969299,1958.919067);
		        SetPlayerInterior(playerid, 9);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Andromada");
			    return 1;
		    }
		    case 10:
		    {
		        SetPlayerPos(playerid, 286.148986,-40.644397,1001.515625);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Ou{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ammunation 1");
			    return 1;
		    }
		    case 11:
		    {
		        SetPlayerPos(playerid, 286.800994,-82.547599,1001.515625);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ammunation 2");
			    return 1;
		    }
		    case 12:
		    {
		        SetPlayerPos(playerid, 296.919982,-108.071998,1001.515625);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ammunation 3");
			    return 1;
		    }
		    case 13:
		    {
		        SetPlayerPos(playerid, 314.820983,-141.431991,999.601562);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ammunation 4");
			    return 1;
		    }
		    case 14:
		    {
		        SetPlayerPos(playerid, 316.524993,-167.706985,999.593750);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ammunation 5");
			    return 1;
		    }
		    case 15:
		    {
		        SetPlayerPos(playerid, 302.292877,-143.139099,1004.062500);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Estande da Ammunation");
			    return 1;
		    }
		    case 16:
		    {
		        SetPlayerPos(playerid, 298.507934,-141.647048,1004.054748);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ammunation Range");
			    return 1;
		    }
		    case 17:
		    {
		        SetPlayerPos(playerid, 1038.531372,0.111030,1001.284484);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Blastin Fools Hallway");
			    return 1;
		    }
		    case 18:
		    {
		        SetPlayerPos(playerid, 444.646911,508.239044,1001.419494);
		        SetPlayerInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Budget Inn Motel Room");
			    return 1;
		    }
		    case 19:
		    {
		        SetPlayerPos(playerid, 2215.454833,-1147.475585,1025.796875);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Jefferson Motel");
			    return 1;
		    }
		    case 20:
		    {
		        SetPlayerPos(playerid, 833.269775,10.588416,1004.179687);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Off Track Betting Shop");
			    return 1;
		    }
		    case 21:
		    {
		        SetPlayerPos(playerid, -103.559165,-24.225606,1000.718750);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Sex Shop");
			    return 1;
		    }
		    case 22:
		    {
		        SetPlayerPos(playerid, 963.418762,2108.292480,1011.030273);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Meat Factory");
			    return 1;
		    }
		    case 23:
		    {
		        SetPlayerPos(playerid, -2240.468505,137.060440,1035.414062);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Zero's RC Shop");
			    return 1;
		    }
		    case 24:
		    {
		        SetPlayerPos(playerid, 663.836242,-575.605407,16.343263);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Dillmore Gas Station");
			    return 1;
		    }
		    case 25:
		    {
		        SetPlayerPos(playerid, 2169.461181,1618.798339,999.976562);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Catigula's Basement");
			    return 1;
		    }
			case 26:
		    {
		        SetPlayerPos(playerid, 1889.953369,1017.438293,31.882812);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}FDC Janitors Room");
			    return 1;
		    }
		    case 27:
		    {
		        SetPlayerPos(playerid, -2159.122802,641.517517,1052.381713);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Woozie's Office");
			    return 1;
		    }
		    case 28:
		    {
		        SetPlayerPos(playerid, 207.737991,-109.019996,1005.132812);
		        SetPlayerInterior(playerid, 15);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Binco");
			    return 1;
		    }
		    case 29:
		    {
		        SetPlayerPos(playerid, 204.332992,-166.694992,1000.523437);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Didier Sachs");
			    return 1;
		    }
		    case 30:
		    {
		        SetPlayerPos(playerid, 207.054992,-138.804992,1003.507812);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Prolaps");
			    return 1;
		    }
		    case 31:
		    {
		        SetPlayerPos(playerid, 203.777999,-48.492397,1001.804687);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Suburban");
			    return 1;
		    }
		    case 32:
		    {
		        SetPlayerPos(playerid, 226.293991,-7.431529,1002.210937);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Victim");
			    return 1;
		    }
		    case 33:
		    {
		        SetPlayerPos(playerid, 161.391006,-93.159156,1001.804687);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}ZIP");
			    return 1;
		    }
		    case 34:
		    {
		        SetPlayerPos(playerid, 493.390991,-22.722799,1000.679687);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Alhambra");
			    return 1;
		    }
		    case 35:
		    {
		        SetPlayerPos(playerid, 501.980987,-69.150199,998.757812);
		        SetPlayerInterior(playerid, 11);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ten Green Bottles");
			    return 1;
		    }
		    case 36:
		    {
		        SetPlayerPos(playerid, -227.027999,1401.229980,27.765625);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Lil' Probe Inn");
			    return 1;
		    }
		    case 37:
		    {
		        SetPlayerPos(playerid, 457.304748,-88.428497,999.554687);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Jay's Dinner");
			    return 1;
		    }
		    case 38:
		    {
		        SetPlayerPos(playerid, 454.973937,-110.104995,1000.077209);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Gant Bridge Dinner");
			    return 1;
		    }
		    case 39:
		    {
		        SetPlayerPos(playerid, 435.271331,-80.958938,999.554687);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Secret Valley Dinner");
			    return 1;
		    }
		    case 40:
		    {
		        SetPlayerPos(playerid, 452.489990,-18.179698,1001.132812);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}World of Coq");
			    return 1;
		    }
		    case 41:
		    {
		        SetPlayerPos(playerid, 681.557861,-455.680053,-25.609874);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Welcome Pump");
			    return 1;
		    }
		    case 42:
		    {
		        SetPlayerPos(playerid, 375.962463,-65.816848,1001.507812);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Burger Shot");
			    return 1;
		    }
		    case 43:
		    {
		        SetPlayerPos(playerid, 369.579528,-4.487294,1001.858886);
		        SetPlayerInterior(playerid, 9);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Cluckin' Bell");
			    return 1;
		    }
		    case 44:
		    {
		        SetPlayerPos(playerid, 373.825653,-117.270904,1001.499511);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Well Stacked Pizza");
			    return 1;
		    }
		    case 45:
		    {
		        SetPlayerPos(playerid, 381.169189,-188.803024,1000.632812);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Jimmy's Sticky Ring");
			    return 1;
		    }
		    case 46:
		    {
		        SetPlayerPos(playerid, 244.411987,305.032989,999.148437);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Denise Room");
			    return 1;
		    }
		    case 47:
		    {
		        SetPlayerPos(playerid, 271.884979,306.631988,999.148437);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Katie Room");
			    return 1;
		    }
		    case 48:
		    {
		        SetPlayerPos(playerid, 291.282989,310.031982,999.148437);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Helena Room");
			    return 1;
		    }
		    case 49:
		    {
		        SetPlayerPos(playerid, 302.180999,300.722991,999.148437);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Michelle Room");
			    return 1;
		    }
		    case 50:
		    {
		        SetPlayerPos(playerid, 322.197998,302.497985,999.148437);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Barbara Room");
			    return 1;
		    }
		    case 51:
		    {
		        SetPlayerPos(playerid, 346.870025,309.259033,999.155700);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Millie Room");
			    return 1;
		    }
		    case 52:
		    {
		        SetPlayerPos(playerid, -959.564392,1848.576782,9.000000);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Sherman Dam");
			    return 1;
		    }
		    case 53:
		    {
		        SetPlayerPos(playerid, 384.808624,173.804992,1008.382812);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Planning Dept.");
			    return 1;
		    }
		    case 54:
		    {
		        SetPlayerPos(playerid, 223.431976,1872.400268,13.734375);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Area 51");
			    return 1;
		    }
		    case 55:
		    {
		        SetPlayerPos(playerid, 772.111999,-3.898649,1000.728820);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LS Gym");
			    return 1;
		    }
		    case 56:
		    {
		        SetPlayerPos(playerid, 774.213989,-48.924297,1000.585937);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}SF Gym");
			    return 1;
		    }
		    case 57:
		    {
		        SetPlayerPos(playerid, 773.579956,-77.096694,1000.655029);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LV Gym");
			    return 1;
		    }
		    case 58:
		    {
		        SetPlayerPos(playerid, 1527.229980,-11.574499,1002.097106);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}B Dup's House");
			    return 1;
		    }
		    case 59:
		    {
		        SetPlayerPos(playerid, 1523.509887,-47.821197,1002.130981);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}B Dup's Crack Pad");
			    return 1;
		    }
		    case 60:
		    {
		        SetPlayerPos(playerid, 2496.049804,-1695.238159,1014.742187);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}CJ's House");
			    return 1;
		    }
		    case 61:
		    {
		        SetPlayerPos(playerid, 1267.663208,-781.323242,1091.906250);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Madd Dogg's Mansion");
			    return 1;
		    }
		    case 62:
		    {
		        SetPlayerPos(playerid, 513.882507,-11.269994,1001.565307);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}OG Loc's House");
			    return 1;
		    }
		    case 63:
		    {
		        SetPlayerPos(playerid, 2454.717041,-1700.871582,1013.515197);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Ryder's House");
			    return 1;
		    }
		    case 64:
		    {
		        SetPlayerPos(playerid, 2527.654052,-1679.388305,1015.498596);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Sweet's House");
			    return 1;
		    }
		    case 65:
		    {
		        SetPlayerPos(playerid, 2543.462646,-1308.379882,1026.728393);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Crack Factory");
			    return 1;
		    }
		    case 66:
		    {
		        SetPlayerPos(playerid, 1212.019897,-28.663099,1000.953125);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Big Spread Ranch");
			    return 1;
		    }
		    case 67:
		    {
		        SetPlayerPos(playerid, 761.412963,1440.191650,1102.703125);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Fanny Batters");
			    return 1;
		    }
		    case 68:
		    {
		        SetPlayerPos(playerid, 1204.809936,-11.586799,1000.921875);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Strip Club");
			    return 1;
		    }
		    case 69:
		    {
		        SetPlayerPos(playerid, 1204.809936,13.897239,1000.921875);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Strip Club Private Room");
			    return 1;
		    }
		    case 70:
		    {
		        SetPlayerPos(playerid, 942.171997,-16.542755,1000.929687);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Unnamed Brothel");
			    return 1;
		    }
		    case 71:
		    {
		        SetPlayerPos(playerid, 964.106994,-53.205497,1001.124572);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Tiger Skin Brothel");
			    return 1;
		    }
		    case 72:
		    {
		        SetPlayerPos(playerid, -2640.762939,1406.682006,906.460937);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Pleasure Domes");
			    return 1;
		    }
		    case 73:
		    {
		        SetPlayerPos(playerid, -729.276000,503.086944,1371.971801);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Liberty City Outside");
			    return 1;
		    }
		    case 74:
		    {
		        SetPlayerPos(playerid, -794.806396,497.738037,1376.195312);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Liberty City Inside");
			    return 1;
		    }
		    case 75:
		    {
		        SetPlayerPos(playerid, 	2350.339843,-1181.649902,1027.976562);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Gang House");
			    return 1;
		    }
		    case 76:
		    {
		        SetPlayerPos(playerid, 2807.619873,-1171.899902,1025.570312);
		        SetPlayerInterior(playerid, 8);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Colonel Furhberger's House");
			    return 1;
		    }
		    case 77:
		    {
		        SetPlayerPos(playerid, 18.564971,1118.209960,1083.882812);
		        SetPlayerInterior(playerid, 5);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Crack Den");
			    return 1;
		    }
		    case 78:
		    {
		        SetPlayerPos(playerid, 1412.639892,-1.787510,1000.924377);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Warehouse 1");
			    return 1;
		    }
		    case 79:
		    {
		        SetPlayerPos(playerid, 1302.519897,-1.787510,1001.028259);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Warehouse 2");
			    return 1;
		    }
		    case 80:
		    {
		        SetPlayerPos(playerid, 2522.000000,-1673.383911,14.866223);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Sweet's Garage");
			    return 1;
		    }
		    case 81:
		    {
		        SetPlayerPos(playerid, -221.059051,1408.984008,27.773437);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Lil' Probe Inn Toilet");
			    return 1;
		    }
		    case 82:
		    {
		        SetPlayerPos(playerid, 2324.419921,-1145.568359,1050.710083);
		        SetPlayerInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Unused Safe House");
			    return 1;
		    }
		    case 83:
		    {
		        SetPlayerPos(playerid, -975.975708,1060.983032,1345.671875);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}RC Battlefield");
			    return 1;
		    }
		    case 84:
		    {
		        SetPlayerPos(playerid, 411.625976,-21.433298,1001.804687);
		        SetPlayerInterior(playerid, 2);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Barber 1");
			    return 1;
		    }
		    case 85:
		    {
		        SetPlayerPos(playerid, 418.652984,-82.639793,1001.804687);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Barber 2");
			    return 1;
		    }
		    case 86:
		    {
		        SetPlayerPos(playerid, 412.021972,-52.649898,1001.898437);
		        SetPlayerInterior(playerid, 12);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Barber 3");
			    return 1;
		    }
		    case 87:
		    {
		        SetPlayerPos(playerid, -204.439987,-26.453998,1002.273437);
		        SetPlayerInterior(playerid, 16);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Tatoo Parlour 1");
			    return 1;
		    }
		    case 88:
		    {
		        SetPlayerPos(playerid, -204.439987,-8.469599,1002.273437);
		        SetPlayerInterior(playerid, 17);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Tatoo Parlour 2");
			    return 1;
		    }
		    case 89:
		    {
		        SetPlayerPos(playerid, -204.439987,-43.652496,1002.273437);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Tatoo Parlour 3");
			    return 1;
		    }
		    case 90:
		    {
		        SetPlayerPos(playerid, 246.783996,63.900199,1003.640625);
		        SetPlayerInterior(playerid, 6);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LS Police HQ");
			    return 1;
		    }
		    case 91:
		    {
		        SetPlayerPos(playerid, 246.375991,109.245994,1003.218750);
		        SetPlayerInterior(playerid, 10);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}SF police HQ");
			    return 1;
		    }
		    case 92:
		    {
		        SetPlayerPos(playerid, 288.745971,169.350997,1007.171875);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LV police HQ");
			    return 1;
		    }
		    case 93:
		    {
		        SetPlayerPos(playerid, -2029.798339,-106.675910,1035.171875);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Car School");
			    return 1;
		    }
		    case 94:
		    {
		        SetPlayerPos(playerid, -1398.065307,-217.028900,1051.115844);
		        SetPlayerInterior(playerid, 7);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}8-Track");
			    return 1;
		    }
		    case 95:
		    {
		        SetPlayerPos(playerid, -1398.103515,937.631164,1036.479125);
		        SetPlayerInterior(playerid, 15);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Bloodbowl");
			    return 1;
		    }
		    case 96:
		    {
		        SetPlayerPos(playerid, -1444.645507,-664.526000,1053.572998);
		        SetPlayerInterior(playerid, 4);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Dirt Track");
			    return 1;
		    }
		    case 97:
		    {
		        SetPlayerPos(playerid, -1465.268676,1557.868286,1052.531250);
		        SetPlayerInterior(playerid, 14);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Kickstart");
			    return 1;
		    }
		    case 98:
		    {
		        SetPlayerPos(playerid, -1401.829956,107.051300,1032.273437);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Vice Stadium");
			    return 1;
		    }
		    case 99:
		    {
		        SetPlayerPos(playerid, -1790.378295,1436.949829,7.187500);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}SF Garage");
			    return 1;
		    }
		    case 100:
		    {
		        SetPlayerPos(playerid, 1643.839843,-1514.819580,13.566620);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LS Garage");
			    return 1;
		    }
		    case 101:
		    {
		        SetPlayerPos(playerid, -1685.636474,1035.476196,45.210937);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}SF Bomb Shop");
			    return 1;
		    }
		    case 102:
		    {
		        SetPlayerPos(playerid, 76.632553,-301.156829,1.578125);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Blueberry Warehouse");
			    return 1;
		    }
		    case 103:
		    {
		        SetPlayerPos(playerid, 1059.895996,2081.685791,10.820312);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LV Warehouse 1");
			    return 1;
		    }
		    case 104:
		    {
		        SetPlayerPos(playerid, 1059.180175,2148.938720,10.820312);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LV Warehouse 2");
			    return 1;
		    }
		    case 105:
		    {
		        SetPlayerPos(playerid, 2131.507812,1600.818481,1008.359375);
		        SetPlayerInterior(playerid, 1);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Catigula's Hidden Room");
			    return 1;
		    }
		    case 106:
		    {
		        SetPlayerPos(playerid, 2315.952880,-1.618174,26.742187);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Bank");
			    return 1;
		    }
		    case 107:
		    {
		        SetPlayerPos(playerid, 2319.714843,-14.838361,26.749565);
		        SetPlayerInterior(playerid, 0);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Bank - Behind Desk");
			    return 1;
		    }
		    case 108:
		    {
		        SetPlayerPos(playerid, 1710.433715,-1669.379272,20.225049);
		        SetPlayerInterior(playerid, 18);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}LS Atruim");
			    return 1;
		    }
		    case 109:
		    {
		        SetPlayerPos(playerid, 1494.325195,1304.942871,1093.289062);
		        SetPlayerInterior(playerid, 3);
		        SendClientMessage(playerid, 0xFF0000FF, "Or{FFFFFF}Teles: {B4B5B7}Você foi teletransportado com sucesso para o(a) {0099FF}Bike School");
			    return 1;
		    }
		}
    return 1;
}

Dialog:HandleEditFurniture(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new furnitureslot = strval(inputtext);
		SetPVarInt(playerid, "ChosenFurnitureSlot", furnitureslot);
		new houseid = HouseEntered[playerid];

		if(houseid != -1) {
			if(!HouseFurniture[houseid][furnitureslot][fOn]) return SendClientMessage(playerid, COLOR_GRAD1, "Este móvel não está disponível no sistema.");
			SetPVarInt(playerid, "EditingFurniture", 1);
			EditDynamicObject(playerid, HouseFurniture[houseid][furnitureslot][fObject]);
			format(szString, sizeof(szString), "????????? %s", HouseFurniture[houseid][furnitureslot][fName]);
			SendClientMessage(playerid, COLOR_GRAD2, szString);
		}

		houseid = BizEntered[playerid];
		if(houseid != -1) {
			if(!BizFurniture[houseid][furnitureslot][fOn]) return SendClientMessage(playerid, COLOR_GRAD1, "Este móvel não está disponível no sistema.");
			SetPVarInt(playerid, "EditingFurniture", 1);
			EditDynamicObject(playerid, BizFurniture[houseid][furnitureslot][fObject]);
			format(szString, sizeof(szString), "????????? %s", BizFurniture[houseid][furnitureslot][fName]);
			SendClientMessage(playerid, COLOR_GRAD2, szString);
		}
	}
	return 1;
}

// TOOLS
stock HexToInt(string[])
{
    if (string[0] == 0)
    {
        return 0;
    }
    new i;
    new cur = 1;
    new res = 0;
    for (i = strlen(string); i > 0; i--)
    {
        if (string[i-1] < 58)
        {
            res = res + cur * (string[i - 1] - 48);
        }
        else
        {
            res = res + cur * (string[i-1] - 65 + 10);
            cur = cur * 16;
        }
    }
    return res;
}

CMD:comprarcasa(playerid, params[])
{
	new confirm[8], h = -1;

	if ((h = nearHouse_var[playerid]) != -1 && !HouseInfo[h][hOwned]) {

		new numhouse = CountPlayerOwnHouse(playerid);
		new extra_price = numhouse * 10;
		new houseprice = HouseInfo[h][hPrice];
		if(extra_price) houseprice *= extra_price;

   		if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "sim", true)) {
			new
				pname[MAX_PLAYER_NAME + 1];

			GetPlayerName(playerid, pname, sizeof(pname));

			if(numhouse >= MAX_BUYHOUSES) return SendClientMessage(playerid, COLOR_GRAD1, "Você atingiu o número máximo de casas, digite: /vendercasa para vender uma delas.");
			if(PlayerData[playerid][pLevel] < HouseInfo[h][hLevelbuy]) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode comprar esta propriedade!");
			if(PlayerData[playerid][pCash] < houseprice) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode comprar esta propriedade!");


			PlayerData[playerid][pHouseKey] = h;
			PlayerData[playerid][pSpawnPoint] = 2;
			HouseInfo[h][hOwned] = 1;
			HouseInfo[h][hLocked] = 1;
			HouseInfo[h][hRentable] = 0;
			HouseInfo[h][hRentprice] = 0;
			HouseInfo[h][hCash] = 0;
			strmid(HouseInfo[h][hOwner], pname, 0, strlen(pname), 255);
			PlayerData[playerid][pCash]-=houseprice;

			SendClientMessage(playerid, COLOR_WHITE, "Parabéns pelo seu novo pedido!");
			SendClientMessage(playerid, COLOR_WHITE, "Use /ajuda para verificar seus novos comandos!");

			UpdateHouseText(h);
			UpdateHouseInfo(h);

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d, `playerHouseKey` = %d, `SpawnPoint` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], h, 2, PlayerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			SQL_SaveCharacter(playerid);
			return 1;
		}
	 	else
	 	{
	 	    SendSyntaxMessage(playerid, "/comprarcasa sim");
			format(szString, sizeof(szString), "O preço da casa que Você está comprando está R$%d", houseprice);
			SendClientMessage(playerid, COLOR_GREY, szString);
	 	}
 	}
	return 1;
}

CMD:vendercasa(playerid, params[])
{
	new confirm[8], house = PlayerData[playerid][pHouseKey];

	if(house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		new houseprice = HouseInfo[house][hPrice];
		new housetax = ((houseprice*1)/100);

	    if(!sscanf(params, "s[8]", confirm) && !strcmp(confirm, "sim", true)) {

			if(HouseInfo[house][hCash] > 0)
			{
			    PlayerData[playerid][pCash] += HouseInfo[house][hCash];
				SendClientMessageEx(playerid, COLOR_GRAD2, "Você recebeu R$%d por sua propriedade.", HouseInfo[house][hCash]);
			}
			HouseInfo[house][hLocked] = 1;
			HouseInfo[house][hOwned] = 0;
			HouseInfo[house][hRentable] = 0;
			HouseInfo[house][hRentprice] = 0;
			HouseInfo[house][hCash] = 0;
			StopHouseBoomBox(house);
			HouseInfo[house][hRadio] = 0;
			HouseInfo[house][hradioOn] = false;
			PlayerData[playerid][pSpawnType] = 0;
			for(new i = 0; i != MAX_HOUSE_WEAPONS; ++i)
			{
				HouseInfo[house][hWeapon][i] = 0;
				HouseInfo[house][hAmmo][i] = 0;
				HouseInfo[house][hWeaponLicense][i] = 0;
			}
			strmid(HouseInfo[house][hOwner], "Estado", 0, strlen("Estado"), 255);
			UpdateHouseText(house);
			PlayerData[playerid][pCash] += houseprice-housetax;
			PlayerPlaySoundEx(playerid, 1052);
			format(szString, sizeof(szString), "~w~Parabéns~n~ Você vendeu sua propriedade por ~n~~g~R$%d", houseprice-housetax);
			GameTextForPlayer(playerid, szString, 10000, 3);
			SendClientMessageEx(playerid, COLOR_GRAD3, "???????: R$%d", housetax);
			UpdateHouseText(house);
			UpdateHouseInfo(house);

			if(HouseEntered[playerid] == house)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerPos(playerid,HouseInfo[house][hEntranceX],HouseInfo[house][hEntranceY],HouseInfo[house][hEntranceZ]);
				SetPlayerVirtualWorld(playerid,0);
				SetPlayerInterior(playerid,0);
				PlayerData[playerid][pInterior] = 0;
				PlayerData[playerid][pWorld] = 0;
				HouseEntered[playerid] = -1;
				PlayerData[playerid][pLocal] = 255;
				if(HouseInfo[house][hradioOn]) StopAudioStreamForPlayer(playerid);
				return 1;
			}

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `playerHouseKey` = %d", -1, house);
			mysql_tquery(dbCon, szQuery, "OnPlayerSellHouse", "i", house);

			PlayerData[playerid][pHouseKey] = -1;

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			SQL_SaveCharacter(playerid);
			return 1;
		}
	 	else
	 	{
	 	    SendSyntaxMessage(playerid, "/vendercasa sim");
			format(szString, sizeof(szString), "A propriedade que Você está vendendo por R$%d irá ter R$%d de taxa", houseprice, housetax);
			SendClientMessage(playerid, COLOR_GREY, szString);
	 	}
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua propriedade.");
	return 1;
}

CMD:casaalugar(playerid, params[])
{
	new status;
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(sscanf(params,"d",status)) return SendSyntaxMessage(playerid, "/casaalugar ([0/1])");
		if(status > 1 || status < 0) return SendSyntaxMessage(playerid, "/casaalugar ([0/1])");
		HouseInfo[house][hRentable] = status;
		SendClientMessageEx(playerid, COLOR_GRAD1, "Você definiu o status de localização para %d", status);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua propriedade.");
	return 1;
}

CMD:definiraluguel(playerid, params[])
{
	new status;
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(sscanf(params,"d",status)) return SendSyntaxMessage(playerid, "/definiraluguel (R$1-R$750)");
		if(status < 1 || status > 750) return SendSyntaxMessage(playerid, "/definiraluguel (R$1-R$750)");
		HouseInfo[house][hRentprice] = status;
		SendClientMessageEx(playerid, COLOR_GRAD1, "O preço do aluguel está definido para R$%d", HouseInfo[house][hRentprice]);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua propriedade.");
	return 1;
}

CMD:upgradecasa(playerid, params[])
{
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		new option[24], itemnumb;

		if(sscanf(params, "s[24]D(-1)", option, itemnumb)) {
			SendClientMessage(playerid, COLOR_WHITE, "USE: /upgradecasa [nível]");
			SendClientMessage(playerid, COLOR_GRAD1, "|Comprar: Itens comprados! </upgradecasa compre para ver mais detalhes.>");
			SendClientMessage(playerid, COLOR_GRAD1, "|Remover: Exclua seu item atual </upgradecasa remova para ver mais detalhes.>");
			return 1;
		}

		if(!strcmp(option, "comprar", true))
		{
		    if(itemnumb < 1 || itemnumb > 2) {
				SendClientMessage(playerid, COLOR_WHITE, "USE: /upgradecasa comprar [itemid]");
				SendClientMessage(playerid, COLOR_GRAD1, "|_______ Items to Buy _______|");
				SendClientMessage(playerid, COLOR_GRAD1, "<item ID>- <preço> : <Nome>");
				SendClientMessage(playerid, COLOR_GRAD3, "1- R$2000: Geladeira");
				SendClientMessage(playerid, COLOR_GRAD3, "2- R$4000: XM rádio");
				return 1;
			}

			new price = 0;
			if(itemnumb == 1) price = 2000;
			else if(itemnumb == 2) price = 4000;


	        if(PlayerData[playerid][pCash] < price) return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem o suficiente!");


			new bool:count;
			for(new z = 0; z != MAX_HOUSE_ITEMS; ++z)
			{
				if(!HouseInfo[house][hItems][z]) {

				    switch(itemnumb) {
				        case 1: SendClientMessage(playerid, COLOR_GRAD1, "Você comprou uma geladeira e já foi entregue em sua casa. (/minhacasa items)");
				        case 2: SendClientMessage(playerid, COLOR_GRAD1, "Você comprou um XM rádio. (/minhacasa items)");
				    }

                    PlayerData[playerid][pCash] -= price;
				    HouseInfo[house][hItems][z] = itemnumb;

					format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `items` = '%s' WHERE `id` = %d",
					FormatHouseItems(house),
					HouseInfo[house][hID]);

					mysql_tquery(dbCon, szQuery);

	                count = true;
				    break;
				}
			}
			if(!count) return SendClientMessage(playerid, COLOR_LIGHTRED, "não é possível comprar mais itens agora.");
		}
		else if(!strcmp(option, "remover", true))
		{
		    if(itemnumb < 0 || itemnumb > 3) {
		        SendClientMessage(playerid, COLOR_WHITE, "USE: /upgradecasa remover [item]");
				ShowHouseItemDetail(playerid, house);
				return 1;
			}

			if(HouseInfo[house][hItems][itemnumb]) {

				switch(HouseInfo[house][hItems][itemnumb]) {
				  	case 1: SendClientMessage(playerid, COLOR_GRAD1, "Você removeu a Geladeira da sua casa.");
				   	case 2: {
						SendClientMessage(playerid, COLOR_GRAD1, "Você removeu o XM rádio da sua casa.");
						StopHouseBoomBox(house);
					}
				}

				HouseInfo[house][hItems][itemnumb] = 0;

				format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `items` = '%s' WHERE `id` = %d",
				FormatHouseItems(house),
				HouseInfo[house][hID]);

				mysql_tquery(dbCon, szQuery);

			} else return SendClientMessage(playerid, COLOR_LIGHTRED, "não há itens nesta caixa.");
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua propriedade.");
	}
	return 1;
}


CMD:cofrepos(playerid, params[])
{
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
	    GetPlayerPos(playerid, HouseInfo[house][hCheckPosX], HouseInfo[house][hCheckPosY], HouseInfo[house][hCheckPosZ]);
	    SendClientMessage(playerid, COLOR_YELLOW, "Você definiu a posição do seu cofre.");

	    UpdateHouseInfo(house);
	}
	else {
	    SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua propriedade.");
	}
	return 1;
}

stock ShowHouseItemDetail(targetid, house) {

	SendClientMessage(targetid, COLOR_GRAD1, "|_______ Itens atuais _______|");

	new bool:count;
 	for(new z = 0; z != MAX_HOUSE_ITEMS; ++z)
	{
		switch(HouseInfo[house][hItems][z]) {
		 	case 1: {
		 		SendClientMessageEx(targetid, COLOR_GRAD2, "Slot %d - Geladeira", z);
		 		SendClientMessage(targetid, COLOR_YELLOW, "(DICA):{FFFFFF} /heal: para se tratar.");
		 		count=true;
		 	}
		 	case 2: {
		 		SendClientMessageEx(targetid, COLOR_GRAD2, "Slot %d - XM rádio", z);
		 		SendClientMessage(targetid, COLOR_YELLOW, "(DICA):{FFFFFF} /setstation");
		 		count=true;
			}
		}
	}
	if(!count) SendClientMessage(targetid, COLOR_GRAD1, "Item não encontrado.");
}

CMD:minhacasa(playerid, params[])
{
    new option[7], secoption[128], msg[128], thirdoption;
	new house = HouseEntered[playerid];

	if (house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(sscanf(params, "s[6]S(NULL)[128]D(-1)", option, secoption, thirdoption)) {
			SendSyntaxMessage(playerid, "/minhacasa [escolha]");
			SendClientMessage(playerid, COLOR_GRAD1, "| Itens | Dinheiro | Inform");
			return 1;
		}
    	if(!strcmp(option, "inform", true))
		{
			format(msg, sizeof(msg), "informações da casa: preço de mercado - R$%d preço de aluguel - R$%d", HouseInfo[house][hPrice], HouseInfo[house][hRentprice]);
			SendClientMessage(playerid, COLOR_GRAD1, msg);
		}
    	else if(!strcmp(option, "Itens", true))
		{
		    ShowHouseItemDetail(playerid, house);
		}
		else if(!strcmp(option, "Dinheiro", true))
		{
			new choise[11], amount;
			if(sscanf(params, "{s[6]}s[10]d", choise, amount))
			{
				SendSyntaxMessage(playerid, "/minhacasa dinheiro [retirar/depositar] [valor]");
				format(msg, sizeof(msg), "You have R$%d in Cashbox", HouseInfo[house][hCash]);
				SendClientMessage(playerid, COLOR_GRAD1, msg);
				return 1;
			}
			if(!strcmp(choise, "retirar", true))
			{
				if (!House_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em casa");
				if (amount > HouseInfo[house][hCash] || amount < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não tem isso tudo!");
					return 1;
				}
				PlayerData[playerid][pCash] += amount;
				HouseInfo[house][hCash] -= amount;
				format(msg, sizeof(msg), "Você retirou R$%d e agora tem: R$%d ", amount,HouseInfo[house][hCash]);
				SendClientMessage(playerid, COLOR_GRAD1, msg);

				UpdateHouseInfo(house);

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
				mysql_query(dbCon, szQuery);
			}
			else if(!strcmp(choise, "depositar", true))
			{
				if (!House_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em casa");
				if (amount >  PlayerData[playerid][pCash] || amount < 1)
				{
					SendClientMessage(playerid, COLOR_GRAD1, "Você não tem isso tudo!");
					return 1;
				}
				PlayerData[playerid][pCash] -= amount;
				HouseInfo[house][hCash] += amount;
				format(msg, sizeof(msg), "Você depositou R$%d e agora tem: R$%d ", amount,HouseInfo[house][hCash]);
				SendClientMessage(playerid, COLOR_GRAD1, msg);

				UpdateHouseInfo(house);

				format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
				mysql_query(dbCon, szQuery);
			}
		}

	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua propriedade.");
	return 1;
}

CMD:inquilinos(playerid, params[])
{
	new house = HouseEntered[playerid];
	if (House_IsOwner(playerid, house))
	{
		format(szQuery, sizeof(szQuery), "SELECT `charName` FROM `characters` WHERE `playerHouseKey` = %d and `ID` != %d", house, PlayerData[playerid][pID]);
		mysql_tquery(dbCon, szQuery, "ShowTenantsAmount", "i", playerid);
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua propriedade.");
	return 1;
}

CMD:despejar(playerid, params[])
{
	new house = HouseEntered[playerid];
	new id;

	if(sscanf(params,"u",id)) return SendSyntaxMessage(playerid, "/despejar [ID/Nome] (/tenants)");
	if (house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if(id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode se banir de casa.");
		if (!SQL_IsLogged(id)) SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O jogador não está logado!");
		if(PlayerData[id][pHouseKey] != house) return SendClientMessage(playerid, COLOR_YELLOW, "ERRO: O jogador não aluga sua casa.");
		PlayerData[id][pHouseKey] = -1;
		SendClientMessage(id, COLOR_GRAD1, "Você foi despedido da casa em que alugava, procure uma nova.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua casa.");

	return 1;
}

CMD:despejartodos(playerid, params[])
{
	new house = HouseEntered[playerid];
	if (House_IsOwner(playerid, house))
	{
		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `playerHouseKey` = %d AND `ID`!= %d", -1, house, PlayerData[playerid][pID]);
		mysql_tquery(dbCon, szQuery, "OnPlayerEvictTenant", "ii", playerid, house);

		SendClientMessage(playerid, COLOR_YELLOW, "Todos os inquilinos são expulsos de sua casa.");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em sua casa.");

	return 1;
}

CMD:alugarcasa(playerid, params[])
{
	new h = -1;
	if ((h = nearHouse_var[playerid]) != -1) {

		if(HouseInfo[h][hOwned])
		{
			if(HouseInfo[h][hRentable] == 0) return SendClientMessage(playerid, COLOR_GRAD1, "está casa não está disponível para aluguel.");
			if(PlayerData[playerid][pHouseKey] != -1 && strcmp(ReturnName(playerid), HouseInfo[h][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode alugar uma casa enquanto possui qualquer casa.");
			if(PlayerData[playerid][pHouseKey] != -1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode alugar uma casa enquanto for inquilino (/unrent)");
			if(PlayerData[playerid][pCash] < HouseInfo[h][hRentprice]) {
			    SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui dinheiro suficiente!");
			    return 1;
			}

			PlayerData[playerid][pHouseKey] = h;
			PlayerData[playerid][pSpawnPoint] = 2;
			PlayerData[playerid][pCash] -= HouseInfo[h][hRentprice];
			HouseInfo[h][hCash] += HouseInfo[h][hRentprice];

			SendClientMessage(playerid, COLOR_WHITE, "Você agora vai nascer aqui!");
			SendClientMessageEx(playerid, COLOR_WHITE, "A taxa de aluguel dessa casa é R$%d", HouseInfo[h][hRentprice]);

			UpdateHouseInfo(h);

			format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d, `SpawnPoint` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], 2, PlayerData[playerid][pID]);
			mysql_query(dbCon, szQuery);
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Este ultimo não é o dono!");
		}
	}
	return 1;
}

CMD:inexistente(playerid, params[])
{
	new housekey = PlayerData[playerid][pHouseKey];
	if(housekey != -1 && strcmp(ReturnName(playerid), HouseInfo[housekey][hOwner], true) == 0) return SendClientMessage(playerid, COLOR_GRAD1, "não posso sair da minha propria casa...");
	PlayerData[playerid][pHouseKey] = -1;
	SendClientMessage(playerid, COLOR_GRAD1, "Você não aluga nenhuma casa.");
	SQL_SaveCharacter(playerid);
	return 1;
}
CMD:ints(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new string[2048];
	for(new i = 0; i != sizeof(HouseInteriors); ++i)
	{
		if(HouseInteriors[i][aTeleOn])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, HouseInteriors[i][aMapName]);
		}
	}
	Dialog_Show(playerid, AdminTeles,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin Teleportes:"EMBED_RED"",string,"Teleportar","Cancelar");
	return 1;
}

CMD:salvarinterior(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new mapname[128], interior, teleid, Float:X, Float:Y, Float:Z;
	if(sscanf(params,"ds[128]",teleid,mapname)) return SendSyntaxMessage(playerid, "/salvarinterior [id] [name]");
	if(HouseInteriors[teleid][aTeleOn]) return SendClientMessage(playerid, COLOR_GRAD1, "Este movimento está ativo.");
	GetPlayerPos(playerid, X, Y, Z);
	interior = GetPlayerInterior(playerid);
	AddTeleToFile(teleid, mapname,interior, X, Y, Z);
	HouseInteriors[teleid][aPosX] = X;
	HouseInteriors[teleid][aPosY] = Y;
	HouseInteriors[teleid][aPosZ] = Z;
	HouseInteriors[teleid][aInterior] = interior;
	format(HouseInteriors[teleid][aMapName],128,"%s",mapname);
	HouseInteriors[teleid][aTeleOn] = 1;
	return SendClientMessageEx(playerid, COLOR_GREEN, "Novos movimentos foram adicionados. [Nome: %s posição: %f, %f, %f]",mapname,X, Y, Z);
}

CMD:removerteleporte(playerid,params[])
{
	new teleid;
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",teleid)) return SendSyntaxMessage(playerid, "/removerinterior [id]");
	if(HouseInteriors[teleid][aTeleOn])
	{
		format(szQuery, sizeof(szQuery), "DELETE FROM `ateles` WHERE `id` = %d",HouseInteriors[teleid][aID]);
		mysql_tquery(dbCon, szQuery, "OnTeleportRemove", "i", teleid);
		SendClientMessageEx(playerid, COLOR_YELLOW, "Você destruiu o movimento: %d!",teleid);
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO: Movimento não existe!");
	}
	return 1;
}

CMD:teleportes(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	format(szQuery, sizeof(szQuery), "SELECT * FROM `ateles`");
	mysql_tquery(dbCon, szQuery, "ShowAmount", "is[128]", playerid, "Admin teles");
	return 1;
}

CMD:repararveiculo(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(IsPlayerInAnyVehicle(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		SetVehicleHealth(vehicleid, GetVehicleDataHealth(GetVehicleModel(vehicleid)));
		SetVehicleDamageStatus(vehicleid, 0, 0, 0, 0);
		SendClientMessage(playerid, COLOR_GREY, "veículo fixado!");
	}
	return 1;
}

CMD:darvida(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;
	new health;

	if (sscanf(params, "ud", userid, health))
		return SendSyntaxMessage(playerid, "/sethp [PlayerID/PartOfName] [vida]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ID invalido!");
		}
	}

	SetPlayerHealthEx(userid, health);

	return 1;
}

CMD:setarcolete(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;
	new health;

	if (sscanf(params, "ud", userid, health))
		return SendSyntaxMessage(playerid, "/setarmor [PlayerID/PartOfName] [colete]]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ID invalido!");
		}
	}

	SetPlayerArmour(userid, health);

	return 1;
}

CMD:setarskin(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;
	new skin;

	if (sscanf(params, "ud", userid, skin))
		return SendSyntaxMessage(playerid, "/setarskin [PlayerID/PartOfName] [skinid]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ID invalido!");
		}
	}

	SetPlayerSkin(userid, skin);

	return 1;
}

CMD:setarplayer(playerid, params[])
{
	new pid, statcode, amount, msg[128], bool:success = false;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params, "udd", pid, statcode, amount))
	{
		SendClientMessage(playerid, COLOR_WHITE, "USE: /setarplayer [playerid] [número] [valor]");
		SendClientMessage(playerid, COLOR_GRAD4, "|1 Level |2 Skin |3 exp |4 Sexo |5 Banco");
		SendClientMessage(playerid, COLOR_GRAD4, "|6 Horas jogadas |7 dinheiro |8 Premium |9 Upgrade |10 número de celular ");
		SendClientMessage(playerid, COLOR_GRAD4, "|11 poupança |12 Chave de casa |13 Radio |14 Chanal radio");
		SendClientMessage(playerid, COLOR_GRAD4, "|15 Chave empresa |16 facção |17 Rank na facção |18 Trabalho |19 Trabalho paralelo");
		SendClientMessage(playerid, COLOR_GRAD4, "|20 Cargo empresa | 21 Carreira | 22 Skin(save) | 23 CNH | 24 Licença de arma | 25 CCW Licença");
		return 1;
	}
	if (!SQL_IsLogged(pid)) SendClientMessage(playerid, COLOR_GRAD1, "O jogador não está logado.");
	switch (statcode)
	{
		case 1:
		{
			format(msg, sizeof(msg), "%s level %d (%d)", ReturnName(pid), amount, PlayerData[pid][pLevel]);
			PlayerData[pid][pLevel] = amount;
			SetPlayerScore(pid, amount);


			success = true;
		}
		case 2:
		{
			format(msg, sizeof(msg), "%s estava vestido com a skin %d (%d)", ReturnName(pid), amount, GetPlayerSkin(pid));
			SetPlayerSkin(pid, amount);

			success = true;
		}
		case 3:
		{
			format(msg, sizeof(msg), "%s ajustou o experiencia para %d (%d)", ReturnName(pid), amount, PlayerData[pid][pExp]);
			PlayerData[pid][pExp] = amount;
			success = true;
		}
		case 4:
		{
			PlayerData[pid][pGender] = amount;
			format(msg, sizeof(msg), "%s alterou o sexo para %d", ReturnName(pid), amount);

			success = true;
		}
		case 5:
		{
			format(msg, sizeof(msg), "%s alterou o dinheiro do banco para %d (%d)", ReturnName(pid), amount, PlayerData[pid][pAccount]);
			PlayerData[pid][pAccount] = amount;

			success = true;
		}
		case 6:
		{
			format(msg, sizeof(msg), "%s ajustou as horas jogadas para %d (%d)", ReturnName(pid), amount, PlayerData[pid][pPlayingHours]);
			PlayerData[pid][pPlayingHours] = amount;
			success = true;
		}
		case 7:
		{
			format(msg, sizeof(msg), "%s foi multado %d (%d)", ReturnName(pid), amount, PlayerData[pid][pCash]);
			PlayerData[pid][pCash] = amount;
			success = true;
		}
		case 8:
		{
			format(msg, sizeof(msg), "%s ajustou o level de premium para %d (%d)", ReturnName(pid), amount, PlayerData[pid][pDonateRank]);
			PlayerData[pid][pDonateRank] = amount;
			success = true;
		}
		case 9:
		{
			format(msg, sizeof(msg), "%s alterou os pontos de upgrade %d (%d)", ReturnName(pid), amount, PlayerData[pid][pPUpgrade]);
			PlayerData[pid][pPUpgrade] = amount;
			success = true;
		}
		case 10:
		{
			format(msg, sizeof(msg), "%s número de celular alterado %d (%d)", ReturnName(pid), amount, PlayerData[pid][pPnumber]);
			PlayerData[pid][pPnumber] = amount;
			success = true;
		}
		case 11:
		{
			format(msg, sizeof(msg), "%s alterou a poupança %d (%d)", ReturnName(pid), amount, PlayerData[pid][pSavingsCollect]);
			PlayerData[pid][pSavingsCollect] = amount;
			success = true;
		}
		case 12:
		{
			format(msg, sizeof(msg), "%s alterou a chave da casa %d (%d)", ReturnName(pid), amount, PlayerData[pid][pHouseKey]);
			PlayerData[pid][pHouseKey] = amount;
			success = true;
		}
		case 13:
		{
			format(msg, sizeof(msg), "%s Radio alterado %d (%d)", ReturnName(pid), amount, PlayerData[pid][pRadio]);
			PlayerData[pid][pRadio] = amount;
			success = true;
		}
		case 14:
		{
			format(msg, sizeof(msg), "%s canal de rádio alterado para %d (%d)", ReturnName(pid), amount, PlayerData[pid][pRChannel]);
			PlayerData[pid][pRChannel] = amount;
			success = true;
		}
		case 15:
		{
			format(msg, sizeof(msg), "%s Chave da empresa alterada %d (%d)", ReturnName(pid), amount, PlayerData[pid][pPbiskey]);
			PlayerData[pid][pPbiskey] = amount;
			success = true;
		}
		case 16:
		{
			format(msg, sizeof(msg), "%s setou a facção %d (%d)", ReturnName(pid), amount, PlayerData[pid][pFactionID]);
			PlayerData[pid][pFactionID] = amount;
			success = true;
		}
		case 17:
		{
			format(msg, sizeof(msg), "%s alterou o cargo na facção para %d (%d)", ReturnName(pid), amount, PlayerData[pid][pFactionRank]);
			PlayerData[pid][pFactionRank] = amount;
			success = true;
		}
		case 18:
		{
			format(msg, sizeof(msg), "%s setou o trabalho %d (%d)", ReturnName(pid), amount, PlayerData[pid][pJob]);
			PlayerData[pid][pJob] = amount;
			success = true;
		}
		case 19:
		{
			format(msg, sizeof(msg), "%s setou o trabalho paralelo %d (%d)", ReturnName(pid), amount, PlayerData[pid][pSideJob]);
			PlayerData[pid][pSideJob] = amount;
			success = true;
		}
		case 20:
		{
			format(msg, sizeof(msg), "%s cargo do trabalho alterado %d (%d)", ReturnName(pid), amount, PlayerData[pid][pJobRank]);
			PlayerData[pid][pJobRank] = amount;
			success = true;
		}
		case 21:
		{
			format(msg, sizeof(msg), "%s horas jogadas alteradas para %d (%d)", ReturnName(pid), amount, PlayerData[pid][pCareer]);
			PlayerData[pid][pCareer] = amount;
			success = true;
		}
		case 22:
		{
			format(msg, sizeof(msg), "%s modelo de skin alterado para  %d (%d)", ReturnName(pid), amount, PlayerData[pid][pModel]);
            SetPlayerSkin(pid, amount);
            PlayerData[pid][pModel] = amount;
            success = true;
		}
		case 23:
		{
			format(msg, sizeof(msg), "%s CNH alterada %d (%d)", ReturnName(pid), amount, PlayerData[pid][pCarLic]);
			PlayerData[pid][pCarLic] = amount;
			success = true;
		}
		case 24:
		{
			format(msg, sizeof(msg), "%s Licença de armas %d (%d)", ReturnName(pid), amount, PlayerData[pid][pWepLic]);
            PlayerData[pid][pWepLic] = amount;
            success = true;
		}
		case 25:
		{
			format(msg, sizeof(msg), "%s porte de armas alterado %d (%d)", ReturnName(pid), amount, PlayerData[pid][pWepLic]);
            PlayerData[pid][pCCWLic] = amount;
            success = true;
		}
		default:
		{
			format(msg, sizeof(msg), "código invalido.", amount);
		}
	}
	if(success) {
		SQL_SaveCharacter(pid);
		SQL_LogAdmin_Action(playerid, "/setstat", trim(msg));
	}
	SendClientMessage(playerid, COLOR_GRAD1, msg);
	return 1;
}

CMD:arrombarporta(playerid, params[])
{
    new id, house = HouseEntered[playerid];
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é policial!");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está de serviço!");

	if ((id = nearHouse_var[playerid]) != -1) {

		SetPlayerPosEx(playerid,HouseInfo[id][hExitX],HouseInfo[id][hExitY],HouseInfo[id][hExitZ]);
		SetPlayerInterior(playerid,HouseInfo[id][hInterior]);
		SetPlayerVirtualWorld(playerid,HouseInfo[id][hWorld]);
		HouseEntered[playerid] = id;
		PlayerData[playerid][pInterior] = HouseInfo[id][hInterior];
		PlayerData[playerid][pWorld] = HouseInfo[id][hWorld];
		PlayerData[playerid][pLocal] = id + LOCAL_HOUSE;
		GameTextForPlayer(playerid, "~r~Quebrou a porta", 5000, 1);
		if(HouseInfo[id][hradioOn]) PlayAudioStreamForPlayer(playerid, HouseInfo[id][hradioURL]);

		return 1;
	}
	else if ((id = Bizz_Nearest(playerid)) != -1)
	{

		SetPlayerVirtualWorld(playerid, BizInfo[id][bWorld]);
		SetPlayerInterior(playerid,BizInfo[id][bInterior]);
		SetPlayerPosEx(playerid,BizInfo[id][bExitX],BizInfo[id][bExitY],BizInfo[id][bExitZ]);
		PlayerData[playerid][pInterior] = BizInfo[id][bInterior];
		PlayerData[playerid][pWorld] = BizInfo[id][bWorld];
		PlayerData[playerid][pLocal] = id + LOCAL_BIZZ;

		GameTextForPlayer(playerid, "~r~Quebrou a porta", 5000, 1);
	}

	if(house != -1)
	{
		for(new i = 0; i != MAX_FURNITURE ; ++i)
		{
			if(IsPlayerInRangeOfPoint(playerid, 3.0, HouseFurniture[house][i][fPosX], HouseFurniture[house][i][fPosY], HouseFurniture[house][i][fPosZ]) && HouseFurniture[house][i][fOn] && isHouseDoor(HouseFurniture[house][i][fModel]))
			{
				if(HouseFurniture[house][i][fOpened] == 0)
				{
					MoveDynamicObject(HouseFurniture[house][i][fObject], HouseFurniture[house][i][fPosX], HouseFurniture[house][i][fPosY], HouseFurniture[house][i][fPosZ], 1.5, HouseFurniture[house][i][fPosRX], HouseFurniture[house][i][fPosRY], HouseFurniture[house][i][fPosRZ]-90.0);
					HouseFurniture[house][i][fOpened] = 1;
				}
				else
				{
					HouseFurniture[house][i][fOpened] = 0;
					MoveDynamicObject(HouseFurniture[house][i][fObject], HouseFurniture[house][i][fPosX], HouseFurniture[house][i][fPosY], HouseFurniture[house][i][fPosZ], 1.5, HouseFurniture[house][i][fPosRX], HouseFurniture[house][i][fPosRY], HouseFurniture[house][i][fPosRZ]);
				}
				return 1;
			}
		}
	}
	return 1;
}
/* Business Creation */
CMD:emptipos(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	SendClientMessage(playerid, COLOR_GRAD2, "1: Posto de gasolina 2: munição 3: 24/7 4: concessionaria de veículos 5: Oficina de modificação de carros 6: Pay & Spray 7: Loja de roupas");
	SendClientMessage(playerid, COLOR_GRAD2, "8: Bares 9: Restaurante 10: Loja de moveis 11: Centro de propaganda 12: Banco 13:Detran");
	return 1;
}

CMD:irempresas(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new string[1024];
	for(new i = 0; i != sizeof(BizInfo); i++)
	{
		if(BizInfo[i][bID])
		{
			format(string, sizeof(string), "%s\n<%d>{66FF66}%s" ,string, i, BizInfo[i][bInfo]);
		}
	}
	Dialog_Show(playerid, AdminBusinesses,DIALOG_STYLE_LIST,""EMBED_YELLOW"Admin empresas(s):"EMBED_RED"",string,"Teleportar","Cancelar");
	return 1;
}

CMD:infoemp(playerid, params[])
{
	new str[128];

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	foreach(new i : sv_business)
	{
		if (IsPlayerInRangeOfPoint(playerid, 3.0, BizInfo[i][bEntranceX], BizInfo[i][bEntranceY], BizInfo[i][bEntranceZ]))
		{
			format(str, sizeof(str), "informação: [Normal ID: %d] [MySQL ID: %d]", i,BizInfo[i][bID]);
			SendClientMessage(playerid, COLOR_WHITE, str);
			break;
		}
	}
	return 1;
}


CMD:criarempresa(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new bizid = Iter_Free(sv_business), level, price, type, Float:x, Float:y, Float:z;
	if(sscanf(params,"ddd", level, price, type)) return SendSyntaxMessage(playerid, "/criarempresa [level para comprar] [preço] [tipo(/emptipos)]");
	if(type > 13 || type < 1) return SendClientMessage(playerid, COLOR_GRAD2, "Tipos, 1-13.");

	if(bizid != -1) {

		GetPlayerPos(playerid, x, y, z);
		BizInfo[bizid][bEntranceX] = x;
		BizInfo[bizid][bEntranceY] = y;
		BizInfo[bizid][bEntranceZ] = z;
		BizInfo[bizid][bExitX] = 0.0;
		BizInfo[bizid][bExitY] = 0.0;
		BizInfo[bizid][bExitZ] = 0.0;
		BizInfo[bizid][bLevelNeeded] = level;
		BizInfo[bizid][bBuyPrice] = price;
		BizInfo[bizid][bOwned] = 0;
		BizInfo[bizid][bLocked] = 0;
		BizInfo[bizid][bInterior] = 0;
		BizInfo[bizid][bWorld] = bizid;
		BizInfo[bizid][bTill] = 0;
		BizInfo[bizid][bEntranceCost] = 0;
		BizInfo[bizid][bProducts] = 0;
		format(BizInfo[bizid][bOwner], 24, "Estado");
		format(BizInfo[bizid][bInfo], 256, "Empresa");
		BizInfo[bizid][bType] = type;

		if(type == 12 || type == 11 || type == 10)
		{
            BizInfo[bizid][bOwned] = 1;
		}
		switch(type)
		{
		    case 1: { // Gas Station
		        format(BizInfo[bizid][bInfo], 256, "Posto de gasolina");
		        BizInfo[bizid][bItems][0] = 50;
                BizInfo[bizid][bMaxProducts] = 2400;
		    }
		    case 2: { // Ammunations
		        format(BizInfo[bizid][bInfo], 256, "Loja de armas");
                BizInfo[bizid][bMaxProducts] = 1000;
		    }
		    case 3: { // 24-7
		        format(BizInfo[bizid][bInfo], 256, "24-7");

		        BizInfo[bizid][bItems][0] = 25;
		        BizInfo[bizid][bItems][1] = 500;
		        BizInfo[bizid][bItems][2] = 60;
		        BizInfo[bizid][bItems][3] = 80;
		        BizInfo[bizid][bItems][4] = 100;
		        BizInfo[bizid][bItems][5] = 50;
		        BizInfo[bizid][bItems][6] = 400;
		        BizInfo[bizid][bItems][7] = 5;
		        BizInfo[bizid][bItems][8] = 3;
		        BizInfo[bizid][bItems][9] = 100;
		        BizInfo[bizid][bItems][10] = 200;
		        BizInfo[bizid][bItems][11] = 300;

                BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 4: {
		        format(BizInfo[bizid][bInfo], 256, "Concessionaria");
		        BizInfo[bizid][bMaxProducts] = 200;
		    }
		    case 5: {
		        format(BizInfo[bizid][bInfo], 256, "Loja de Modificações");
		        BizInfo[bizid][bMaxProducts] = 1000;
		    }
		    case 6: {
		        format(BizInfo[bizid][bInfo], 256, "Pay & Spray");
		        BizInfo[bizid][bMaxProducts] = 600;
		    }
		    case 7: {
		        format(BizInfo[bizid][bInfo], 256, "Loja de roupas");
		        BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 8: {
		        format(BizInfo[bizid][bInfo], 256, "Bar");
		        BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 9: { // Restaurant
		        format(BizInfo[bizid][bInfo], 256, "Restaurante");
		        BizInfo[bizid][bItems][0] = 20;
		        BizInfo[bizid][bItems][1] = 50;
		        BizInfo[bizid][bItems][2] = 80;
		        BizInfo[bizid][bItems][3] = 100;
		        BizInfo[bizid][bMaxProducts] = 500;
		    }
		    case 10: {
		        format(BizInfo[bizid][bInfo], 256, "Loja de mobilia");
		        BizInfo[bizid][bMaxProducts] = 10000;
		    }
		    case 11: { // Advertisement
		        format(BizInfo[bizid][bInfo], 256, "Propagandas");
                BizInfo[bizid][bMaxProducts] = 5000;
		    }
		    case 12: { // Bank
		        format(BizInfo[bizid][bInfo], 256, "Banco");
                BizInfo[bizid][bMaxProducts] = 10000;
		    }
			case 13: {
				format(BizInfo[bizid][bInfo], 256, "Detran");
				BizInfo[bizid][bMaxProducts] = 10000;
			}
		}
		BizInfo[bizid][bsubType] = 0;
		//BizInfo[bizid][bizOn] = 1;
		BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 23, x, y, z, -1, -1, -1, 100.0);
		BizInfo[bizid][EmpText] = CreateDynamic3DTextLabel(BizInfo[bizid][bInfo], 0xFFFFFFFF, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 1, BizInfo[bizid][bWorld], BizInfo[bizid][bInterior]);
		AddBizToFile(bizid, price, type, BizInfo[bizid][bOwner], BizInfo[bizid][bInfo], x, y, z);
		format(szString, sizeof(szString), "Nova Empresa Adicionada [Level: %d preço: %d Tipo: %s]", level, price, BizInfo[bizid][bInfo]);
		SendClientMessage(playerid, COLOR_GREEN, szString);
	}
	return 1;
}

CMD:deletarempresa(playerid,params[])
{
	new bizid, msg[128];

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

    if((bizid = Bizz_Nearest(playerid)) != -1) {
		DestroyDynamicPickup(BizInfo[bizid][bPickup]);

		new ply = INVALID_PLAYER_ID;

		if((ply = GetIDByName(BizInfo[bizid][bOwner])) != INVALID_PLAYER_ID)
		{
			PlayerData[ply][pPbiskey] = -1;

			format(msg, sizeof(msg), "O administrador %s vende sua empresa para o mercado", ReturnName(playerid));
			SendClientMessage(ply, COLOR_GRAD2, msg);

			if(BizInfo[bizid][bTill] > 0)
			{
				format(msg, sizeof(msg), "Seu dinheiro está na caixa de dinheiro R$%d", BizInfo[bizid][bTill]);
				SendClientMessage(ply, COLOR_GRAD2, msg);
				PlayerData[ply][pCash] += BizInfo[bizid][bTill];
			}
		}
		else
		{
			format(msg, sizeof(msg), "UPDATE `characters` SET `PlayerBusinessKey` = %d WHERE `charName` = '%s'", -1, BizInfo[bizid][bOwner]);
			mysql_query(dbCon, msg);

			if(BizInfo[bizid][bTill] > 0)
			{
				format(msg, sizeof(msg), "UPDATE `characters` SET `Cash` = (Cash + %d) WHERE `charName` = '%s'", BizInfo[bizid][bTill], BizInfo[bizid][bOwner]);
				mysql_query(dbCon, msg);
			}
		}
		format(msg, sizeof(msg), "DELETE FROM `business` WHERE `biz_id` = %d",BizInfo[bizid][bID]);
		mysql_tquery(dbCon, msg, "OnBizRemove", "i", bizid);

		format(msg,sizeof(msg),"Você deletou a empresa %d com sucesso!",bizid);
		SendClientMessage(playerid, COLOR_YELLOW, msg);

		Iter_Remove(sv_business, bizid);
	}
	return 1;
}

CMD:avenderemp(playerid, params[])
{
	new bizid, msg[128];

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/avenderemp [bizid]");
	if(!BizInfo[bizid][bID]) return SendClientMessage(playerid, COLOR_GRAD2, "ID invalido.");
	if(!BizInfo[bizid][bOwned]) return SendClientMessage(playerid, COLOR_GRAD2, "Ninguém comprou este negócio.");

	new ply = INVALID_PLAYER_ID;
	if((ply = GetIDByName(BizInfo[bizid][bOwner])) != INVALID_PLAYER_ID)
	{
		PlayerData[ply][pPbiskey] = -1;
		format(msg, sizeof(msg), "O administrador %s vendeu sua empresa para o mercado.", ReturnName(playerid));
		SendClientMessage(ply, COLOR_GRAD2, msg);
		if(BizInfo[bizid][bTill] > 0)
		{
			format(msg, sizeof(msg), "O seu dinheiro está no caixa de dinheiro R$%d", BizInfo[bizid][bTill]);
			SendClientMessage(ply, COLOR_GRAD2, msg);
			PlayerData[ply][pCash] += BizInfo[bizid][bTill];
		}
	}
	else
	{
		format(msg, sizeof(msg), "UPDATE `characters` SET `PlayerBusinessKey` = %d WHERE `charName` = '%s'", -1, BizInfo[bizid][bOwner]);
		mysql_query(dbCon, msg);

		if(BizInfo[bizid][bTill] > 0)
		{
			format(msg, sizeof(msg), "UPDATE `characters` SET `Cash` = (Cash + %d) WHERE `charName` = '%s'", BizInfo[bizid][bTill], BizInfo[bizid][bOwner]);
			mysql_query(dbCon, msg);
		}
	}
	format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_owner` = '%s', `biz_owned` = %d, `biz_locked` = %d, `biz_till` = %d, `biz_encost` = %d WHERE `biz_id` = %d", "The State", 0, 1, 0, 0, BizInfo[bizid][bID]);
	mysql_tquery(dbCon, szQuery, "OnAdminSellBusiness", "i", bizid);
	return 1;
}

CMD:serveremps(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	format(szQuery, sizeof(szQuery), "SELECT * FROM `business`");
	mysql_tquery(dbCon, szQuery, "ShowAmount", "is[128]", playerid, "Empresas dinamicas");
	return 1;
}

CMD:centrodenegocios(playerid,params[])
{
	new bizid;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
    if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/centrodenegocios [bizid]");
	if(!BizInfo[bizid][bID]) return SendClientMessage(playerid, COLOR_GRAD2, "O ID do negócio é invalido.");

	new Float:x, Float:y, Float:z;
	GetPlayerPos(playerid, x, y, z);

	DestroyDynamicPickup(BizInfo[bizid][bPickup]);
	BizInfo[bizid][bPickup] = CreateDynamicPickup(1272, 23, x, y, z, -1, -1, -1, 100.0);
	format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_enX` = '%.4f', `biz_enY` = '%.4f', `biz_enZ` = '%.4f' WHERE `biz_id` = %d", x, y, z, BizInfo[bizid][bID]);
	mysql_query(dbCon, szQuery);
	BizInfo[bizid][bEntranceX] = x;
	BizInfo[bizid][bEntranceY] = y;
	BizInfo[bizid][bEntranceZ] = z;
	SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	return 1;
}

CMD:sexemp1(playerid,params[])
{
	new bizid, status;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
    if(sscanf(params,"dD()",bizid, status)) return SendSyntaxMessage(playerid, "/sexemp1 [bizid] [1-desativado]");
	if(!BizInfo[bizid][bID]) return SendClientMessage(playerid, COLOR_GRAD2, "O ID do negócio é invalido.");

	if(status)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_carX` = '%.4f', `biz_carY` = '%.4f', `biz_carZ` = '%.4f', `biz_carA` = '%.4f' WHERE `biz_id` = %d", 0.0, 0.0, 0.0, 0.0, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingCarX] = 0.0;
		BizInfo[bizid][bBuyingCarY] = 0.0;
		BizInfo[bizid][bBuyingCarZ] = 0.0;
		BizInfo[bizid][bBuyingCarA] = 0.0;


	    SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	}
	else
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_carX` = '%.4f', `biz_carY` = '%.4f', `biz_carZ` = '%.4f', `biz_carA` = '%.4f' WHERE `biz_id` = %d", x, y, z, a, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingCarX] = x;
		BizInfo[bizid][bBuyingCarY] = y;
		BizInfo[bizid][bBuyingCarZ] = z;
		BizInfo[bizid][bBuyingCarA] = a;

		SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	}
	return 1;
}

CMD:sexemp2(playerid,params[])
{
	new bizid, status;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
    if(sscanf(params,"dD()",bizid, status)) return SendSyntaxMessage(playerid, "/sexemp2 [bizid] [1-desativado]");
	if(!BizInfo[bizid][bID]) return SendClientMessage(playerid, COLOR_GRAD2, "O ID do negócio é invalido.");

	if(status)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_boatX` = '%.4f', `biz_boatY` = '%.4f', `biz_boatZ` = '%.4f', `biz_boatA` = '%.4f' WHERE `biz_id` = %d", 0.0, 0.0, 0.0, 0.0, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingBoatX] = 0.0;
		BizInfo[bizid][bBuyingBoatY] = 0.0;
		BizInfo[bizid][bBuyingBoatZ] = 0.0;
		BizInfo[bizid][bBuyingBoatA] = 0.0;

	    SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	}
	else
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_boatX` = '%.4f', `biz_boatY` = '%.4f', `biz_boatZ` = '%.4f', `biz_boatA` = '%.4f' WHERE `biz_id` = %d", x, y, z, a, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingBoatX] = x;
		BizInfo[bizid][bBuyingBoatY] = y;
		BizInfo[bizid][bBuyingBoatZ] = z;
		BizInfo[bizid][bBuyingBoatA] = a;

		SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	}
	return 1;
}

CMD:sexemp3(playerid,params[])
{
	new bizid, status;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
    if(sscanf(params,"dD()",bizid, status)) return SendSyntaxMessage(playerid, "/sexemp3 [bizid] [1-desativado]");
	if(!BizInfo[bizid][bID]) return SendClientMessage(playerid, COLOR_GRAD2, "O ID do negócio é invalido.");

	if(status)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_airX` = '%.4f', `biz_airY` = '%.4f', `biz_airZ` = '%.4f', `biz_airA` = '%.4f' WHERE `biz_id` = %d", 0.0, 0.0, 0.0, 0.0, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);

		BizInfo[bizid][bBuyingAirX] = 0.0;
		BizInfo[bizid][bBuyingAirY] = 0.0;
		BizInfo[bizid][bBuyingAirZ] = 0.0;
		BizInfo[bizid][bBuyingAirA] = 0.0;

	    SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	}
	else
	{
		new Float:x, Float:y, Float:z, Float:a;
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, a);

		format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_airX` = '%.4f', `biz_airY` = '%.4f', `biz_airZ` = '%.4f', `biz_airA` = '%.4f' WHERE `biz_id` = %d", x, y, z, a, BizInfo[bizid][bID]);
		mysql_query(dbCon, szQuery);
		BizInfo[bizid][bBuyingAirX] = x;
		BizInfo[bizid][bBuyingAirY] = y;
		BizInfo[bizid][bBuyingAirZ] = z;
		BizInfo[bizid][bBuyingAirA] = a;

		SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	}
	return 1;
}

CMD:empsair(playerid,params[])
{
	new bizid;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
    if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/empsair [bizid]");
	if(!BizInfo[bizid][bID]) return SendClientMessage(playerid, COLOR_GRAD2, "O ID do negócio é invalido.");

	new Float:x, Float:y, Float:z, bint;
	bint = GetPlayerInterior(playerid);
	GetPlayerPos(playerid, x, y, z);

	format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_etX` = '%.4f', `biz_etY` = '%.4f', `biz_etZ` = '%.4f', `biz_interior` = %d WHERE `biz_id` = %d", x, y, z, bint, BizInfo[bizid][bID]);
	mysql_query(dbCon, szQuery);

	BizInfo[bizid][bExitX] = x;
	BizInfo[bizid][bExitY] = y;
	BizInfo[bizid][bExitZ] = z;
	BizInfo[bizid][bInterior] = bint;
	SendClientMessage(playerid, COLOR_GRAD2, "Saida setada com sucesso.");
	return 1;
}

CMD:iremp(playerid, params[])
{
	new bizid;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
    if(sscanf(params,"d",bizid)) return SendSyntaxMessage(playerid, "/iremp [bizid]");
	if(!BizInfo[bizid][bID]) return SendClientMessage(playerid, COLOR_GRAD2, "O ID do negócio é invalido.");

	SetPlayerPosEx(playerid, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
	return 1;
}

CMD:editaremp(playerid, params[])
{
	new text[256], type, bizid;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params,"ds[256]",type,text)) {
		SendSyntaxMessage(playerid, "/editaremp [opção] [input]");
		SendClientMessage(playerid, COLOR_GRAD2, "Opções: 1-preço,2-nível,3-Sub-titulo,4-Nome,5-Entrada,6-Dinheiro,7-Aberto/Fechado");
		SendClientMessage(playerid, COLOR_GRAD2, "Opções: 8-Produtos,9-máximo produtos,10-preço por carga");
	}
	if((bizid = Bizz_Nearest(playerid)) != -1) {

		new input = strval(text);

		if(type == 1)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_till` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bBuyPrice] = input;
		}
		else if(type == 2)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_level` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bLevelNeeded] = input;
		}
		else if(type == 3)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_subtype` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bsubType] = input;
		}
		/*else if(type == 3)
		{
			BizInfo[bizid][bType] = input;
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_type` = %d, `biz_message` = '%s' WHERE `biz_id` = %d", input, BizInfo[bizid][bMessage],  BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
		}*/
		else if(type == 4)
		{
		    new clean_name[256];
		    mysql_escape_string(text,clean_name);
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_info` = '%s' WHERE `biz_id` = %d", clean_name, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			format(BizInfo[bizid][bInfo], 256, "%s", text);

			//UpdateDynamic3DTextLabelText(HouseInfo[houseid][hLabel], -1, szString);
		}
		else if(type == 5)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_encost` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bEntranceCost] = input;
		}
		else if(type == 6)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_till` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bTill] = input;
		}
		else if(type ==7)
		{
			if(BizInfo[bizid][bLocked] == 1)
			{
				BizInfo[bizid][bLocked] = 0;
				GameTextForPlayer(playerid, "~b~Empresa ~w~Tranca", 5000, 6);
				//SendClientMessage(playerid, -1, "O negócio está aberto!");
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
			if(BizInfo[bizid][bLocked] == 0)
			{
				BizInfo[bizid][bLocked] = 1;
				GameTextForPlayer(playerid, "~b~Empresa ~w~Fechada", 5000, 6);
				//SendClientMessage(playerid, -1, "O negócio está fechado!");
				PlayerPlaySoundEx(playerid, 1145);
				return 1;
			}
		}
		else if(type == 8)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_prod` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bProducts] = input;
		}
		else if(type == 9)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_maxprod` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bMaxProducts] = input;
		}
		else if(type == 10)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `business` SET `biz_priceprod` = %d WHERE `biz_id` = %d", input, BizInfo[bizid][bID]);
			mysql_query(dbCon, szQuery);
			BizInfo[bizid][bPriceProd] = input;
		}
		else return SendClientMessage(playerid, COLOR_GRAD2, "O valor deve ser entre 1-10");
	}
	else return SendClientMessage(playerid, COLOR_GRAD2, "Você não está perto de nenhum negócio.");
	SendClientMessage(playerid, COLOR_GRAD2, "Bem-sucedido(a)");
	return 1;
}

CMD:intemp(playerid, params[])
{
	new bizid, emp;
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params,"d",emp))
	{
		SendSyntaxMessage(playerid, "/intemp [id (0-48)]");
		SendClientMessage(playerid, COLOR_GRAD2, "0: Nenhum - 1: Marcos Bistro (Comida) - 2: Big Spread Ranch (Bar) - 3: Burger Shot (Comida) - 4: Cluckin Bell (Comida)");
		SendClientMessage(playerid, COLOR_GRAD2, "5: Well Stacked Pizza (Comida) - 6: Rusty Browns Dohnuts (Comida) - 7: Jays Diner (Comida) - 8: Pump Truck Stop Diner (Comida)");
		SendClientMessage(playerid, COLOR_GRAD2, "9: Alhambra (Bar) - 10: Mistys (Bar) - 11: Lil' Probe Inn (Bar) - 12: Exclusive (Roupas) - 13: Binco (Roupas)");
		SendClientMessage(playerid, COLOR_GRAD2, "14: ProLaps (Roupas) - 15: SubUrban (Roupas) - 16: Victim (Roupas) - 17: Zip (Roupas) - 18: Redsands Casino");
		SendClientMessage(playerid, COLOR_GRAD2, "19: Off Track Betting - 20: Sex Shop - 21: Zeros RC Shop - 22-25: Ammunations (Armas) - 26: Jizzy's (Bar)");
		SendClientMessage(playerid, COLOR_GRAD2, "27-32: 24-7's (Compras) - 33: Advertising/Phone Network - 34: Bothel - 35: Four Dragons Casino 36: Bikers Garage 37: Ganton gym");
		SendClientMessage(playerid, COLOR_GRAD2, "38: Tattoo 1 39: Tatto 2 40: Tatto 3 41: Crack Den 42: Zero RC shop 43: Record Studio 44: LS Court Room 45: Meat Factory 46: Betting Place");
		SendClientMessage(playerid, COLOR_GRAD2, "47: Barber Shop 48: Pleasure Domes 49: banco");
		return 1;
	}
	if((bizid = Bizz_Nearest(playerid)) != -1) {
		if(emp < 0 || emp > 49) return SendClientMessage(playerid, COLOR_GREY, "ERRO: O ID do interior é invalido, tente um número entre 0-48");
		SetBusinessInterior(playerid, bizid, emp);
	}
	return 1;
}

CMD:deletarwh(playerid,params[])
{
	new warehouseid = -1;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if((warehouseid = Warehouse_Nearest(playerid)) != -1) {

		format(szQuery, sizeof(szQuery), "DELETE FROM `houses` WHERE `id` = %d",WareHouseInfo[warehouseid][whID]);
		mysql_tquery(dbCon, szQuery, "OnWarehouseRemove", "i", warehouseid);

		if (IsValidDynamicPickup(WareHouseInfo[warehouseid][whPickup]))
		    DestroyDynamicPickup(WareHouseInfo[warehouseid][whPickup]);

		if(IsValidDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]))
			DestroyDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]);

		format(szString,sizeof(szString),"Você removeu o armazenamento de ID: %d!",warehouseid);
		SendClientMessage(playerid, COLOR_YELLOW, szString);
	}
	return 1;
}

CMD:criarwh(playerid, params[]) {
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new id, type, Float:x, Float:y, Float:z;
	if(sscanf(params,"d", type)) {
		SendSyntaxMessage(playerid, "/criararmazem [tipo]");
		SendClientMessage(playerid, COLOR_GREY, "Opções: 1: Armas | 2: Drogas");
		return 1;
	}

	if(type < 1 || type > 2) return SendClientMessage(playerid, COLOR_GRAD1, "Tipo 1 ou 2.");

	if((id = Iter_Free(sv_warehouse)) != -1) {

		GetPlayerPos(playerid, x, y, z);

		WareHouseInfo[id][whX] = x;
		WareHouseInfo[id][whY] = y;
		WareHouseInfo[id][whZ] = z;

		WareHouseInfo[id][whWorld] = GetPlayerVirtualWorld(playerid);
		WareHouseInfo[id][whInt] = GetPlayerInterior(playerid);

		WareHouseInfo[id][whType] = type;

		format(WareHouseInfo[id][whPlayer1], 24, "");
		format(WareHouseInfo[id][whPlayer2], 24, "");

		Warehouse_Refresh(id);

		AddWarehouseToFile(id);

		SendClientMessage(playerid, COLOR_GREEN, "armazenamento criado!");

		Iter_Add(sv_warehouse, id);
	}
	return 1;
}
///////////////
CMD:criarcasa(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new houseid, buylevel, price, houseinfo[256], Float:x, Float:y, Float:z;
	if(sscanf(params,"dds[256]", buylevel, price, houseinfo)) return SendSyntaxMessage(playerid, "/criarcasa [nível] [preço] [info]");

	if((houseid = Iter_Free(sv_houses)) != -1) {

		GetPlayerPos(playerid, x, y, z);
		HouseInfo[houseid][hEntranceX] = x;
		HouseInfo[houseid][hEntranceY] = y;
		HouseInfo[houseid][hEntranceZ] = z;
		HouseInfo[houseid][hExitX] = 0.0;
		HouseInfo[houseid][hExitY] = 0.0;
		HouseInfo[houseid][hExitZ] = 0.0;
		HouseInfo[houseid][hCheckPosX] = 0.0000;
		HouseInfo[houseid][hCheckPosY] = 0.0000;
		HouseInfo[houseid][hCheckPosZ] = 0.0000;
		HouseInfo[houseid][hPrice] = price;
		HouseInfo[houseid][hOwned] = 0;
		HouseInfo[houseid][hLocked] = 1;
		HouseInfo[houseid][hRentprice] = 0;
		HouseInfo[houseid][hRentable] = 0;
		HouseInfo[houseid][hInterior] = 0;
		HouseInfo[houseid][hWorld] = 0;
		HouseInfo[houseid][hCash] = 0;
		HouseInfo[houseid][hRadio] = 0;
		HouseInfo[houseid][hLevelbuy] = buylevel;
		format(HouseInfo[houseid][hInfo], 256, "%s", houseinfo);
		format(HouseInfo[houseid][hOwner], 256, "Estado");

		format(szString, sizeof(szString), ""EMBED_YELLOW"Casa[%d] A venda:\npreço: R$%d\nnível: %d", houseid, price, buylevel);
		HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(szString, -1, x, y, z, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
		//HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(x, y, z, 3, 0, 0, -1, 3.5);

		new clean_info[256];
    	mysql_escape_string(houseinfo,clean_info);
		AddHouseToFile(houseid, price, clean_info, x, y, z);
		format(szString, sizeof(szString), "Uma nova casa foi criada! [preço: %d informações da casa: %s]", price, houseinfo);
		SendClientMessage(playerid, COLOR_GREEN, szString);

		Iter_Add(sv_houses, houseid);
	}
	return 1;
}

CMD:destruircasa(playerid,params[])
{
	new houseid = -1;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if((houseid = GetClosestHouseID(playerid)) != -1) {

	    if(HouseInfo[houseid][hOwned]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode destruir a casa de um proprietário, por favor use /avendercasa");

		DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel]);
		//DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);Ac
		format(szQuery, sizeof(szQuery), "DELETE FROM `houses` WHERE `id` = %d",HouseInfo[houseid][hID]);
		mysql_tquery(dbCon, szQuery, "OnHouseRemove", "i", houseid);
		format(szString,sizeof(szString),"Você destruiu a casa: %d!",houseid);
		SendClientMessage(playerid, COLOR_YELLOW, szString);
	}
	return 1;
}

CMD:avendercasa(playerid, params[])
{
	new houseid;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/avendercasa [id]");
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, COLOR_GRAD1, "ID invalido.");
	if(!HouseInfo[houseid][hOwned]) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: está casa não tem dono.");

	foreach(new i : Player)
	{
	    if(PlayerData[i][pHouseKey] == houseid)
	    {
	        PlayerData[i][pHouseKey] = -1;
			format(szString, sizeof(szString), "O administrador %s vendeu sua casa para o mercado, Você agora é o residente.", ReturnName(playerid));
			SendClientMessage(i, -1, szString);
	        break;
	    }
	}

/*	format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `charName` = '%s'", -1, HouseInfo[houseid][hOwner]);
	mysql_query(dbCon, szQuery);*/

	format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `playerHouseKey` = %d WHERE `playerHouseKey` = %d", -1, houseid);
	mysql_query(dbCon, szQuery);

	format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `owner` = '%s', `owned` = %d, `locked` = %d, `rentprice` = %d, `rentable` = %d, `cash` = %d, `checkx` = %f, `checky` = %f, `checkz` = %f WHERE `id` = %d", "The State", 0, 1, 0, 0, 0, 0.0, 0.0, 0.0, HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, szQuery, "OnAdminSellHouse", "i", houseid);
	return 1;
}
CMD:entradacasa(playerid,params[])
{
	new houseid, Float:px, Float:py, Float:pz;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/entradacasa [casa id]");
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, -1, "ERRO: ID invalido.");

	GetPlayerPos(playerid, px, py, pz);

	if(IsValidDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel])) DestroyDynamic3DTextLabel(Text3D:HouseInfo[houseid][hLabel]);
	//DestroyDynamicCP(HouseInfo[houseid][hCheckPoint]);

	if(!HouseInfo[houseid][hOwned]) {
		format(szString, sizeof(szString), ""EMBED_YELLOW"Casa[%d] A venda:\npreço: R$%d\nLevel: %d", houseid, HouseInfo[houseid][hPrice], HouseInfo[houseid][hLevelbuy]);
		HouseInfo[houseid][hLabel] = CreateDynamic3DTextLabel(szString, -1, px, py, pz, 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
	}
	//else format(szString, sizeof(szString), ""EMBED_YELLOW"House[%d]\n%s", houseid, HouseInfo[houseid][hInfo]);

	//HouseInfo[houseid][hCheckPoint] = CreateDynamicCP(px, py, pz, 3, 0, 0, -1, 3.5);


	format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `posx` = %f, `posy` = %f, `posz` = %f WHERE `id` = %d", px, py, pz, HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, szQuery, "OnHouseMoved", "ifff", houseid, px, py, pz);
	SendClientMessage(playerid, COLOR_GRAD1, "Entrada modificada com sucesso.");
	return 1;
}
CMD:saidacasa(playerid,params[])
{
	new houseid, interior, world, Float:px, Float:py, Float:pz;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/saidacasa [casa id]");
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ID invalido..");
	interior = GetPlayerInterior(playerid);
	world = houseid;
	GetPlayerPos(playerid, px, py, pz);
	format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `exitx` = %f, `exity` = %f, `exitz` = %f, `interior` = %d, `world` = %d WHERE `id` = %d", px, py, pz, interior, world, HouseInfo[houseid][hID]);
	mysql_tquery(dbCon, szQuery, "OnHouseExitMoved", "iiifff", houseid, interior, world, px, py, pz);
	SendClientMessage(playerid, COLOR_GRAD1, "Saida setada com sucesso.");
	return 1;
}

CMD:editarcasa(playerid, params[])
{
	new text[128], type, houseid = -1;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"ds[256]",type,text)) {
		SendSyntaxMessage(playerid, "/editarcasa [tipo] [valor]");
		SendClientMessage(playerid, COLOR_GRAD2, "Tipos: 1: preço, 2: Level, 3: Info, 4: World, 5: Dono");
	}
	if((houseid = GetClosestHouseID(playerid)) != -1) {

		new input = strval(text);
		if(type == 1)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `price` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			HouseInfo[houseid][hPrice] = input;
			if(HouseInfo[houseid][hOwned] == 0)
			{
				UpdateHouseText(houseid);
			}
		}
		if(type == 2)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `levelbuy` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			HouseInfo[houseid][hLevelbuy] = input;
			if(HouseInfo[houseid][hOwned] == 0)
			{
				UpdateHouseText(houseid);
			}
		}
		if(type == 3)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `info` = '%s' WHERE `id` = %d", text, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			format(HouseInfo[houseid][hInfo], 128, "%s", text);
			if(HouseInfo[houseid][hOwned] == 0)
			{
				UpdateHouseText(houseid);
			}
		}
		if(type == 4)
		{
			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `world` = %d WHERE `id` = %d", input, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);
			HouseInfo[houseid][hWorld] = input;
		}
		if(type == 5)
		{
			new clean_name[MAX_PLAYER_NAME];
			mysql_escape_string(text,clean_name);

			format(szQuery, sizeof(szQuery), "UPDATE `houses` SET `owner` = '%s' WHERE `id` = %d", clean_name, HouseInfo[houseid][hID]);
			mysql_query(dbCon, szQuery);

			format(HouseInfo[houseid][hOwner], MAX_PLAYER_NAME, "%s", text);
		}
	}
	return 1;
}

CMD:irgraffiti(playerid, params[])
{
	new graffid;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",graffid)) return SendSyntaxMessage(playerid, "/irgraffiti [id]");

	if(graffid < 1 || graffid > 100) return SendSyntaxMessage(playerid, "/irgraffiti [id]");

	graffid--;

	SetPlayerPos(playerid, graff_Info[graffid][Xpos], graff_Info[graffid][Ypos], graff_Info[graffid][Zpos]);

	return 1;
}

CMD:ircasa(playerid, params[])
{
	new houseid;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",houseid)) return SendSyntaxMessage(playerid, "/ircasa [casa ID]");
	if(!Iter_Contains(sv_houses, houseid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ID da casa invalido.");
	SetPlayerPos(playerid, HouseInfo[houseid][hEntranceX], HouseInfo[houseid][hEntranceY], HouseInfo[houseid][hEntranceZ]);

	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	PlayerData[playerid][pInterior] = 0;
	PlayerData[playerid][pWorld] = 0;
	PlayerData[playerid][pLocal] = 255;
	HouseEntered[playerid] = -1;
	BizEntered[playerid] = -1;
	return 1;
}

CMD:irwh(playerid, params[])
{
	new warehouseid;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pFactionTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",warehouseid)) return SendSyntaxMessage(playerid, "/irwh [warehouse id]");
	if(!Iter_Contains(sv_warehouse, warehouseid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ID invalido da WH.");

	SetPlayerPos(playerid, WareHouseInfo[warehouseid][whX], WareHouseInfo[warehouseid][whY], WareHouseInfo[warehouseid][whZ]);

	SetPlayerInterior(playerid, WareHouseInfo[warehouseid][whInt]);
	SetPlayerVirtualWorld(playerid, WareHouseInfo[warehouseid][whWorld]);
	PlayerData[playerid][pInterior] = WareHouseInfo[warehouseid][whInt];
	PlayerData[playerid][pWorld] = WareHouseInfo[warehouseid][whWorld];
	PlayerData[playerid][pLocal] = 255;
	HouseEntered[playerid] = -1;
	BizEntered[playerid] = -1;
	return 1;
}

CMD:editarwh(playerid, params[])
{
	new text[128], type, warehouseid = -1;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pFactionTeam] < 1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"dds[256]",warehouseid,type,text) && type != 6) {
		SendSyntaxMessage(playerid, "/editarwh [warehouse id] [nome] [valor]");
		SendClientMessage(playerid, COLOR_GRAD2, "Tipos: 1: Lider 1, 2: Lider 2, 3: Estoque, 4: Maximo de estoque, 5: Tipo, 6: localização.");

		if(Iter_Contains(sv_warehouse, warehouseid)) {
			SendClientMessageEx(playerid, COLOR_GRAD2, "Lider 1: %s", WareHouseInfo[warehouseid][whPlayer1]);
			SendClientMessageEx(playerid, COLOR_GRAD2, "Lider 2: %s", WareHouseInfo[warehouseid][whPlayer2]);
		}
	}

	if(!Iter_Contains(sv_warehouse, warehouseid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: ID invalido.");

	new input = strval(text);

	if(type == 1)
	{
		new clean_name[24];
		mysql_escape_string(text,clean_name);

		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_player1` = '%s' WHERE `fw_id` = %d", clean_name, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);

		format(WareHouseInfo[warehouseid][whPlayer1], 24, text);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Você definiu a vaga de lider 1 para a WH %s", WareHouseInfo[warehouseid][whPlayer1]);
	}
	else if(type == 2)
	{
		new clean_name[24];
		mysql_escape_string(text,clean_name);

		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_player2` = '%s' WHERE `fw_id` = %d", clean_name, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);

		format(WareHouseInfo[warehouseid][whPlayer2], 24, text);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Você definiu a vaga de lider 2 para a WH %s", WareHouseInfo[warehouseid][whPlayer2]);
	}
	else if(type == 3)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_stock` = %d WHERE `fw_id` = %d", input, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);
		WareHouseInfo[warehouseid][whStock] = input;
		SendClientMessageEx(playerid, COLOR_GRAD2, "Você definiu o número de produtos no armazém para %d", WareHouseInfo[warehouseid][whStock]);
        Warehouse_Refresh(warehouseid);
	}
	else if(type == 4)
	{
		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_maxstock` = %d WHERE `fw_id` = %d", input, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);
		WareHouseInfo[warehouseid][whMaxstock] = input;
		SendClientMessageEx(playerid, COLOR_GRAD2, "Você definiu o número máximo de produtos no armazém para %d", WareHouseInfo[warehouseid][whMaxstock]);
        Warehouse_Refresh(warehouseid);
	}
	else if(type == 5)
	{
		if(input < 1 || input > 2) return SendClientMessage(playerid, COLOR_GRAD2, "1-2");
		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_type` = %d WHERE `fw_id` = %d", input, WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);
		WareHouseInfo[warehouseid][whType] = input;
        Warehouse_Refresh(warehouseid);
		SendClientMessageEx(playerid, COLOR_GRAD2, "Você definiu o tipo de armazém para %s", WareHouseInfo[warehouseid][whType] == 1 ? ("Armas") : ("Drogas"));
	}
	else if(type == 6)
	{
		new Float:x, Float:y, Float:z;
		GetPlayerPos(playerid, x, y, z);

		if(IsValidDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]))
			DestroyDynamic3DTextLabel(WareHouseInfo[warehouseid][whLabel]);

		WareHouseInfo[warehouseid][whX] = x;
		WareHouseInfo[warehouseid][whY] = y;
		WareHouseInfo[warehouseid][whZ] = z;

		WareHouseInfo[warehouseid][whWorld] = GetPlayerVirtualWorld(playerid);
		WareHouseInfo[warehouseid][whInt] = GetPlayerInterior(playerid);

		Warehouse_Refresh(warehouseid);

		format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET fw_x = %f, fw_y = %f, fw_z = %f, fw_world = %d, fw_int = %d WHERE `fw_id` = %d", x, y, z, WareHouseInfo[warehouseid][whWorld], WareHouseInfo[warehouseid][whInt], WareHouseInfo[warehouseid][whID]);
		mysql_query(dbCon, szQuery);

		SendClientMessage(playerid, COLOR_GRAD2, "Você reposicionou o armazém com sucesso .");
	}

	return 1;
}

CMD:serverhouses(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	format(szQuery, sizeof(szQuery), "SELECT * FROM `houses`");
	mysql_tquery(dbCon, szQuery, "ShowAmount", "is[128]", playerid, "Casas dinamicas");
	return 1;
}

stock ShowPlayerCurrentFurniture(playerid, page = 0)
{
	new houseid = HouseEntered[playerid], count;
	new string[2048];

	if(houseid != -1) {
		for(new i = page * MAX_FURNITURE_PERPAGE; i != MAX_FURNITURE; ++i)
		{
			if(HouseFurniture[houseid][i][fOn])
			{
				if(count >= MAX_FURNITURE_PERPAGE)
				{
					format(string, sizeof(string), "%s>>\n", string);
					break;
				}
				format(string, sizeof(string), "%sSlot %d: %s\n", string, i, HouseFurniture[houseid][i][fName]);
				count++;
			}
		}
		if(page > 0) format(string, sizeof(string), "%s<<\n", string);
		format(string, sizeof(string), "%s{FFFF00}*Selecione o mobiliario*", string);

		format(szString, sizeof(szString), "moveis atuais({33AA33}%d{FFFFFF})", GetHouseFurnitures(houseid));
		Dialog_Show(playerid, DisplayFurniture, DIALOG_STYLE_LIST, szString, string, "Selecionar", "<<");
	}

	houseid = BizEntered[playerid];
	if(houseid != -1) {
		for(new i = page * MAX_FURNITURE_PERPAGE; i != MAX_FURNITURE; ++i)
		{
			if(BizFurniture[houseid][i][fOn])
			{
				if(count >= MAX_FURNITURE_PERPAGE)
				{
					format(string, sizeof(string), "%s>>\n", string);
					break;
				}
				format(string, sizeof(string), "%sSlot %d: %s\n", string, i, BizFurniture[houseid][i][fName]);
				count++;
			}
		}
		if(page > 0) format(string, sizeof(string), "%s<<\n", string);
		format(string, sizeof(string), "%s{FFFF00}*Selecione o mobiliario*", string);

		format(szString, sizeof(szString), "moveis atuais({33AA33}%d{FFFFFF})", GetBizFurnitures(houseid));
		Dialog_Show(playerid, DisplayFurniture, DIALOG_STYLE_LIST, szString, string, "Selecionar", "<<");
	}
}

CMD:permissaomobilia(playerid, params[])
{
	new house = HouseEntered[playerid];
	if (house != -1 && strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0)
	{
		if (!House_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar em casa");

		new giveplayerid = INVALID_PLAYER_ID;
		if(sscanf(params,"u",giveplayerid)) return SendSyntaxMessage(playerid, "/permissaomobilia [ID/ Nome_Sobrenome]");

		if(giveplayerid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]", maskid);
			if((giveplayerid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_LIGHTRED, "não perto o suficiente!");
			}
		}

		if (!IsPlayerNearPlayer(playerid, giveplayerid, 5.0))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "não perto o suficiente!");

		if (giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar isso em Você mesmo.");

		if(grantbuild[giveplayerid]==house) {
		    grantbuild[giveplayerid]=-1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Você não permitiu o %s compra/decorar a mobília da sua casa.", ReturnName(giveplayerid, 0));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s não permitem que Você compre/decorar os moveis da casa dele.", ReturnName(playerid, 0));
		}
		else
		{
			grantbuild[giveplayerid]=house;
			SendClientMessageEx(playerid, COLOR_WHITE, "Você não permitiu o %s compra/decorar a mobília da sua casa.", ReturnName(giveplayerid, 0));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s não permitem que Você compre/decorar os moveis da casa dele.", ReturnName(playerid, 0));
			SendClientMessage(giveplayerid, COLOR_GREEN, "Sugestão: Use /mobilia");
		}
		return 1;
	}
	house = BizEntered[playerid];
	if (house != -1 && strcmp(ReturnName(playerid), BizInfo[house][bOwner], true) == 0)
	{
		if (!Bizz_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar no emprego.");

		new giveplayerid = INVALID_PLAYER_ID;
		if(sscanf(params,"u",giveplayerid)) return SendSyntaxMessage(playerid, "/permissaomobilia [PlayerID/PartOfName]");

		if(giveplayerid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]", maskid);
			if((giveplayerid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_LIGHTRED, "não perto o suficiente!");
			}
		}

		if (!IsPlayerNearPlayer(playerid, giveplayerid, 5.0))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "não perto o suficiente!");

		if (giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não pode usar isso em Você mesmo.");

		if(grantbuild[giveplayerid]==house) {
		    grantbuild[giveplayerid]=-1;
			SendClientMessageEx(playerid, COLOR_WHITE, "Você não permitiu o %s compra/decorar a mobília da sua empresa", ReturnName(giveplayerid, 0));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s não permitem que Você compre/decorar os moveis da empresa dele", ReturnName(playerid, 0));
		}
		else
		{
			grantbuild[giveplayerid]=house;
			SendClientMessageEx(playerid, COLOR_WHITE, "Você não permitiu o %s compra/decorar a mobília da sua empresa", ReturnName(giveplayerid, 0));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s não permitem que Você compre/decorar os moveis da empresa dele", ReturnName(playerid, 0));
			SendClientMessage(giveplayerid, COLOR_GREEN, "Sugestão: Use /mobilia");
		}
		return 1;
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é bem-vindo na casa/negócios");
	return 1;
}

/*CMD:gb(playerid, params[])
{
	grantbuild[playerid]=HouseEntered[playerid];
	return 1;
}*/

CMD:mobilia(playerid, params[])
{
	new house = HouseEntered[playerid];
	if (house != -1 && (strcmp(ReturnName(playerid), HouseInfo[house][hOwner], true) == 0 || grantbuild[playerid] == house))
	{
		if (!House_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar em casa");

		Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Menu Principal moveis:", "Comprar moveis\nMoveis atuais\ninformações", "Selecionar", "<<");
		return 1;
	}

	house = BizEntered[playerid];
	if (house != -1 && (strcmp(ReturnName(playerid), BizInfo[house][bOwner], true) == 0 || grantbuild[playerid] == house))
	{
		if (!Bizz_IsInside(playerid, house)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar na empresa.");

		Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Menu Principal moveis:", "Comprar moveis\nMoveis atuais\ninformações", "Selecionar", "<<");
        return 1;
	}

	SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem acesso a mobilia da casa/empresa");
	return 1;
}

Dialog:FurnitureDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
			    new string[256];

				for(new i = 0; i != sizeof(fCategory); ++i)
				{
				    format(string, sizeof(string), "%s%s\n", string, fCategory[i]);
				}
				Dialog_Show(playerid, FCategoryDialog, DIALOG_STYLE_LIST, "Categorias:", string, "Selecionar", "<<");
			}
			case 1: ShowPlayerCurrentFurniture(playerid);
			case 2:
			{
			    new houseid = HouseEntered[playerid];
                if(houseid != -1) Dialog_Show(playerid, ReturnFurnitureMain, DIALOG_STYLE_MSGBOX, "informação:", "{FFFFFF}Mobilia(s): {FFFF00}%d/%d", "Fechar", "", GetHouseFurnitures(houseid), GetMaximumHouseFurniture(houseid));

                houseid = BizEntered[playerid];
              	if(houseid != -1) Dialog_Show(playerid, ReturnFurnitureMain, DIALOG_STYLE_MSGBOX, "informação:", "{FFFFFF}Mobilia(s): {FFFF00}%d/%d", "Fechar", "", GetBizFurnitures(houseid), GetMaximumBizFurniture(houseid));
			}
		}
	}
	return 1;
}
Dialog:ReturnFurnitureMain(playerid, response, listitem, inputtext[]) return Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Menu Principal moveis:", "Comprar moveis\nmoveis atuais\ninformações", "Selecionar", "<<");
Dialog:ReturnFurnitureMenu(playerid, response, listitem, inputtext[]) { ShowPlayerCurrentFurniture(playerid); return 1; }
Dialog:FurnitureHouseMaterial(playerid, response, listitem, inputtext[]) {

	format(szString, sizeof(szString), "Editar textura({FFFF00}%d{FFFFFF}):", GetPVarInt(playerid, "FurnitureEditingSlot") + 1);
	Dialog_Show(playerid, FurnitureEditingTexture, DIALOG_STYLE_LIST, szString, "Editar textura\nRemover Material\ninformações do material", "Selecionar", "<<");

	return 1;

}

forward OnHouseMaterialInsert(houseid, furnitureslot, materialslot, materialid);
public OnHouseMaterialInsert(houseid, furnitureslot, materialslot, materialid)
{
	HouseMaterial[furnitureslot][materialslot][mOn] = 1;
	HouseMaterial[furnitureslot][materialslot][mSid]= cache_insert_id();
	HouseMaterial[furnitureslot][materialslot][mfID]= HouseFurniture[houseid][furnitureslot][fID];
	HouseMaterial[furnitureslot][materialslot][mIndex] = materialslot;
	HouseMaterial[furnitureslot][materialslot][mModel] = MaterialData[materialid][mModel];
	format(HouseMaterial[furnitureslot][materialslot][mTxd], 32, MaterialData[materialid][mtxd]);
	format(HouseMaterial[furnitureslot][materialslot][mTexture], 32, MaterialData[materialid][mtexture]);
	format(HouseMaterial[furnitureslot][materialslot][mColor], 12, "0xFFFFFFFF");

	SetDynamicObjectMaterial(HouseFurniture[houseid][furnitureslot][fObject],
	HouseMaterial[furnitureslot][materialslot][mIndex],
	HouseMaterial[furnitureslot][materialslot][mModel],
	HouseMaterial[furnitureslot][materialslot][mTxd],
	HouseMaterial[furnitureslot][materialslot][mTexture],
	HexToInt(HouseMaterial[furnitureslot][materialslot][mColor]));
}

forward OnBizMaterialInsert(bizid, furnitureslot, materialslot, materialid);
public OnBizMaterialInsert(bizid, furnitureslot, materialslot, materialid)
{
	BizMaterial[furnitureslot][materialslot][mOn] = 1;
	BizMaterial[furnitureslot][materialslot][mSid]= cache_insert_id();
	BizMaterial[furnitureslot][materialslot][mfID]= BizFurniture[bizid][furnitureslot][fID];
	BizMaterial[furnitureslot][materialslot][mIndex] = materialslot;
	BizMaterial[furnitureslot][materialslot][mModel] = MaterialData[materialid][mModel];
	format(BizMaterial[furnitureslot][materialslot][mTxd], 32, MaterialData[materialid][mtxd]);
	format(BizMaterial[furnitureslot][materialslot][mTexture], 32, MaterialData[materialid][mtexture]);
	format(BizMaterial[furnitureslot][materialslot][mColor], 12, "0xFFFFFFFF");

	SetDynamicObjectMaterial(BizFurniture[bizid][furnitureslot][fObject],
	BizMaterial[furnitureslot][materialslot][mIndex],
	BizMaterial[furnitureslot][materialslot][mModel],
	BizMaterial[furnitureslot][materialslot][mTxd],
	BizMaterial[furnitureslot][materialslot][mTexture],
	HexToInt(BizMaterial[furnitureslot][materialslot][mColor]));
}

stock OnPlayerEditHouseMaterial(houseid, furnitureslot, materialslot, materialid)
{
	if(HouseMaterial[furnitureslot][materialslot][mOn]) {


		HouseMaterial[furnitureslot][materialslot][mModel] = MaterialData[materialid][mModel];
		format(HouseMaterial[furnitureslot][materialslot][mTxd], 32, MaterialData[materialid][mtxd]);
		format(HouseMaterial[furnitureslot][materialslot][mTexture], 32, MaterialData[materialid][mtexture]);
		//format(HouseMaterial[furnitureslot][materialslot][mColor], 32, "0xFFFFFFFF");

		SetDynamicObjectMaterial(HouseFurniture[houseid][furnitureslot][fObject],
		HouseMaterial[furnitureslot][materialslot][mIndex],
		HouseMaterial[furnitureslot][materialslot][mModel],
		HouseMaterial[furnitureslot][materialslot][mTxd],
		HouseMaterial[furnitureslot][materialslot][mTexture],
		HexToInt(HouseMaterial[furnitureslot][materialslot][mColor]));

		format(szQuery, sizeof(szQuery), "UPDATE `house_materials` SET `matModel` = '%d', `matTxd` = '%s', `MatTexture` = '%s', `MatColor` = '%s' WHERE `id` = %d", HouseMaterial[furnitureslot][materialslot][mModel], HouseMaterial[furnitureslot][materialslot][mTxd], HouseMaterial[furnitureslot][materialslot][mTexture], HouseMaterial[furnitureslot][materialslot][mColor], HouseMaterial[furnitureslot][materialslot][mSid]);
		mysql_tquery(dbCon, szQuery);

		//printf(szQuery);
	}
}

stock OnPlayerEditBizMaterial(bizid, furnitureslot, materialslot, materialid)
{
	if(BizMaterial[furnitureslot][materialslot][mOn]) {

		BizMaterial[furnitureslot][materialslot][mModel] = MaterialData[materialid][mModel];
		format(BizMaterial[furnitureslot][materialslot][mTxd], 32, MaterialData[materialid][mtxd]);
		format(BizMaterial[furnitureslot][materialslot][mTexture], 32, MaterialData[materialid][mtexture]);
		//format(HouseMaterial[furnitureslot][materialslot][mColor], 32, "0xFFFFFFFF");

		SetDynamicObjectMaterial(BizFurniture[bizid][furnitureslot][fObject],
		BizMaterial[furnitureslot][materialslot][mIndex],
		BizMaterial[furnitureslot][materialslot][mModel],
		BizMaterial[furnitureslot][materialslot][mTxd],
		BizMaterial[furnitureslot][materialslot][mTexture],
		HexToInt(BizMaterial[furnitureslot][materialslot][mColor]));

		format(szQuery, sizeof(szQuery), "UPDATE `business_materials` SET `matModel` = '%d', `matTxd` = '%s', `MatTexture` = '%s', `MatColor` = '%s' WHERE `id` = %d", BizMaterial[furnitureslot][materialslot][mModel], BizMaterial[furnitureslot][materialslot][mTxd], BizMaterial[furnitureslot][materialslot][mTexture], BizMaterial[furnitureslot][materialslot][mColor], BizMaterial[furnitureslot][materialslot][mSid]);
		mysql_tquery(dbCon, szQuery);

		//printf(szQuery);
	}
}

Dialog:FurnitureSelectMaterial(playerid, response, listitem, inputtext[]) {

	if(response)
	{
	    new page = GetPVarInt(playerid, "MaterialPages");

		new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");
		new materialslot = GetPVarInt(playerid, "FurnitureEditingSlot");

		if(!strcmp(inputtext, ">>", true)) {
			page++;
			DeletePVar(playerid, "MaterialPages");
		    SetPVarInt(playerid, "MaterialPages", page);
		}
		else if(!strcmp(inputtext, "<<", true)) {
		    page--;
		    DeletePVar(playerid, "MaterialPages");
		    SetPVarInt(playerid, "MaterialPages", page);
		}
		else
		{
		    new count;

		    new houseid = HouseEntered[playerid];
		    if(houseid != -1) {
				for(new i = page * 25; i != sizeof(MaterialData); ++i)
				{
					if(listitem == count)
					{
						if(!HouseMaterial[furnitureslot][materialslot][mOn]) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `house_materials` (`furnitureid`, `matIndex`, `matModel`, `matTxd`, `MatTexture`, `MatColor`) VALUES ('%d', '%d', '%d', '%s', '%s', '0xFFFFFFFF')", HouseFurniture[houseid][furnitureslot][fID], materialslot, MaterialData[i][mModel], MaterialData[i][mtxd], MaterialData[i][mtexture]);
							mysql_tquery(dbCon, szQuery, "OnHouseMaterialInsert", "iiii", houseid, furnitureslot, materialslot, i);
						}
						else
						{
						    OnPlayerEditHouseMaterial(houseid, furnitureslot, materialslot, i);
						}
					 	break;
					}
	              	count++;
				}

				Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, "Slot de edição disponível:", "Texture Slot 1\nTexture Slot 2\nTexture Slot 3\nTexture Slot 4\nTexture Slot 5\nRemover materiais", "Selecionar", "<<");
			}

            houseid = BizEntered[playerid];
		    if(houseid != -1) {
				for(new i = page * 25; i != sizeof(MaterialData); ++i)
				{
					if(listitem == count)
					{
						if(!BizMaterial[furnitureslot][materialslot][mOn]) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `business_materials` (`furnitureid`, `matIndex`, `matModel`, `matTxd`, `MatTexture`, `MatColor`) VALUES ('%d', '%d', '%d', '%s', '%s', '0xFFFFFFFF')", BizFurniture[houseid][furnitureslot][fID], materialslot, MaterialData[i][mModel], MaterialData[i][mtxd], MaterialData[i][mtexture]);
							mysql_tquery(dbCon, szQuery, "OnBizMaterialInsert", "iiii", houseid, furnitureslot, materialslot, i);
						}
						else
						{
						    OnPlayerEditBizMaterial(houseid, furnitureslot, materialslot, i);
						}
					 	break;
					}
	              	count++;
				}

				Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, "Editar textura:", "Texture Slot 1\nTexture Slot 2\nTexture Slot 3\nTexture Slot 4\nTexture Slot 5\nRemover texturas", "Selecionar", "<<");
			}
			return 1;
		}

		new string[800], count;

		for(new i = page * 25; i != sizeof(MaterialData); ++i)
		{
			if(count >= 25)
			{
				format(string, sizeof(string), "%s>>\n", string);
				break;
			}
			format(string, sizeof(string), "%s%s\n", string, MaterialData[i][mName]);
			count++;
		}
		if(page > 0) format(string, sizeof(string), "%s<<\n", string);

		format(szString, sizeof(szString), "Editar textura({FFFF00}%d{FFFFFF}):", materialslot + 1);
		Dialog_Show(playerid, FurnitureSelectMaterial, DIALOG_STYLE_LIST, szString, string, "Selecionar", "<<");
	}
	else {
		format(szString, sizeof(szString), "Editar textura({FFFF00}%d{FFFFFF}):", GetPVarInt(playerid, "FurnitureEditingSlot") + 1);
		Dialog_Show(playerid, FurnitureEditingTexture, DIALOG_STYLE_LIST, szString, "Editar textura\nRemover material\ninformações de material", "Selecionar", "<<");
	}
	return 1;
}


Dialog:FurnitureEditingTexture(playerid, response, listitem, inputtext[]) {

	if(response)
	{
	    new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");
	    new materialslot = GetPVarInt(playerid, "FurnitureEditingSlot");

		switch(listitem)
		{
		    case 0: { // Edit Texture current slot > Show Material list

				new string[800];

				for(new i = 0; i != sizeof(MaterialData); ++i)
				{
					format(string, sizeof(string), "%s%s\n", string, MaterialData[i][mName]);
				}
				format(szString, sizeof(szString), "Editar textura({FFFF00}%d{FFFFFF}):", materialslot + 1);
				Dialog_Show(playerid, FurnitureSelectMaterial, DIALOG_STYLE_LIST, szString, string, "Selecionar", "<<");
                DeletePVar(playerid, "MaterialPages");
		    }
		    case 1: { // Remove Texture current slot
		        new houseid = HouseEntered[playerid];
				if(houseid != -1) {

			        RemoveHouseFurnitureMaterial(houseid, furnitureslot, materialslot);

					format(szString, sizeof(szString), "Você excluiu o slot de material #%d e %s", materialslot + 1, HouseFurniture[houseid][furnitureslot][fName]);
					SendClientMessage(playerid, COLOR_GRAD2, szString);

					Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, "Slot de edição disponível:", "Texture Slot 1\nTexture Slot 2\nTexture Slot 3\nTexture Slot 4\nTexture Slot 5\nRemover materiais", "Selecionar", "<<");
				}
				houseid = BizEntered[playerid];
				if(houseid != -1) {

			        RemoveBizFurnitureMaterial(houseid, furnitureslot, materialslot);

					format(szString, sizeof(szString), "Material Slot#%d e %s", materialslot + 1, BizFurniture[houseid][furnitureslot][fName]);
					SendClientMessage(playerid, COLOR_GRAD2, szString);

					Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, "Slot de edição disponível:", "Texture Slot 1\nTexture Slot 2\nTexture Slot 3\nTexture Slot 4\nTexture Slot 5\nRemove All Materials", "Selecionar", "<<");
				}
		    }
		    case 2: { //Material Infomation current slot
		        new string[128];

				new texturename[32] = "não possui";

				if(HouseMaterial[furnitureslot][materialslot][mOn]) {
					for (new x = 0, num = sizeof(MaterialData); x < num; x ++)
					{
						if(!strcmp(HouseMaterial[furnitureslot][materialslot][mTexture], MaterialData[x][mtexture], true)) {
							format(texturename, 32, "%s", MaterialData[x][mName]);
							break;
						}
					}
				}

				format(string, sizeof(string), "%s{FF6347}Slot %d | Textura: %s{FFFFFF}\n", string, materialslot + 1, texturename);

				Dialog_Show(playerid, FurnitureHouseMaterial, DIALOG_STYLE_MSGBOX, "informações:", string, "Fechar", "");
		    }
		}
	}
	else Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, "Slot de edição disponível:", "Texture Slot 1\nTexture Slot 2\nTexture Slot 3\nTexture Slot 4\nTexture Slot 5\nRemover texturas", "Selecionar", "<<");

	return 1;
}

stock RemoveHouseFurnitureMaterial(houseid, furnitureslot, materialslot)
{
	if(HouseMaterial[furnitureslot][materialslot][mOn]) {

		SetDynamicObjectMaterial(HouseFurniture[houseid][furnitureslot][fObject], HouseMaterial[furnitureslot][materialslot][mIndex], -1, "não possui", "não possui", 0xFFFFFFFF);

		format(szQuery, sizeof(szQuery), "DELETE FROM `house_materials` WHERE `id` = %d", HouseMaterial[furnitureslot][materialslot][mSid]);
		mysql_tquery(dbCon, szQuery);

		HouseMaterial[furnitureslot][materialslot][mOn] = 0;
		HouseMaterial[furnitureslot][materialslot][mSid] = 0;
		HouseMaterial[furnitureslot][materialslot][mfID] = 0;
		HouseMaterial[furnitureslot][materialslot][mIndex] = -1;
		HouseMaterial[furnitureslot][materialslot][mModel] = 0;
		format(HouseMaterial[furnitureslot][materialslot][mTxd], 32, "não possui");
		format(HouseMaterial[furnitureslot][materialslot][mTexture], 32, "não possui");
		format(HouseMaterial[furnitureslot][materialslot][mColor], 12, "0xFFFFFFFF");
		HouseMaterial[furnitureslot][materialslot][mOn] = 0;
	}
	return 1;
}

stock RemoveBizFurnitureMaterial(bizid, furnitureslot, materialslot)
{
	if(BizMaterial[furnitureslot][materialslot][mOn]) {

		SetDynamicObjectMaterial(BizFurniture[bizid][furnitureslot][fObject], BizMaterial[furnitureslot][materialslot][mIndex], -1, "não possui", "não possui", 0xFFFFFFFF);

		format(szQuery, sizeof(szQuery), "DELETE FROM `business_materials` WHERE `id` = %d", BizMaterial[furnitureslot][materialslot][mSid]);
		mysql_tquery(dbCon, szQuery);

		BizMaterial[furnitureslot][materialslot][mOn] = 0;
		BizMaterial[furnitureslot][materialslot][mSid] = 0;
		BizMaterial[furnitureslot][materialslot][mfID] = 0;
		BizMaterial[furnitureslot][materialslot][mIndex] = -1;
		BizMaterial[furnitureslot][materialslot][mModel] = 0;
		format(BizMaterial[furnitureslot][materialslot][mTxd], 32, "não possui");
		format(BizMaterial[furnitureslot][materialslot][mTexture], 32, "não possui");
		format(BizMaterial[furnitureslot][materialslot][mColor], 12, "0xFFFFFFFF");
		BizMaterial[furnitureslot][materialslot][mOn] = 0;
	}
	return 1;
}

Dialog:FurnitureMaterial(playerid, response, listitem, inputtext[]) {

	if(response)
	{
	    if(listitem == 5)
	    {
	        new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot"), houseid = HouseEntered[playerid];
			if(houseid != -1) {

		        for(new i = 0; i != MAX_MATERIAL; ++i) RemoveHouseFurnitureMaterial(houseid, furnitureslot, i);
				format(szString, sizeof(szString), "Você removeu todo o material %s", HouseFurniture[houseid][furnitureslot][fName]);
				SendClientMessage(playerid, COLOR_GRAD2, szString);

			}

			houseid = BizEntered[playerid];

			if(houseid != -1) {

		        for(new i = 0; i != MAX_MATERIAL; ++i) RemoveBizFurnitureMaterial(houseid, furnitureslot, i);
				format(szString, sizeof(szString), "Você removeu todo o material %s", BizFurniture[houseid][furnitureslot][fName]);
				SendClientMessage(playerid, COLOR_GRAD2, szString);

			}
	        Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de Objetos:", "{FFFFFF}informação\nposição\n{FF6347}Editar materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");
	        return 1;
	    }
	    SetPVarInt(playerid, "FurnitureEditingSlot", listitem);

	    format(szString, sizeof(szString), "Editando Textura({FFFF00}%d{FFFFFF}):", listitem + 1);
	    Dialog_Show(playerid, FurnitureEditingTexture, DIALOG_STYLE_LIST, szString, "Editar textura\nRemover material\ninformações", "Selecionar", "<<", listitem + 1);
	}
	else Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de Objetos:", "{FFFFFF}informação\nposição\n{FF6347}Editar materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");

	return 1;
}

Dialog:FurnitureEditMenu(playerid, response, listitem, inputtext[]) {
    new string[512];
	if(response)
	{
		switch(listitem)
		{
		    case 0: { // Information


		        new houseid = HouseEntered[playerid];
		        new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");

				if(houseid != -1) {
				    new
				        count,
				        furnitureid = GetFurnitureID(HouseFurniture[houseid][furnitureslot][fModel]),
						category = FurnitureItems[furnitureid][furnitureCatalog],
						subid = FurnitureItems[furnitureid][furnitureSubCatalog],
						subcategory;


					for(new i = 0; i != sizeof(fSubCategory); ++i)
					{
					    if(fSubCategory[i][catid] == category) {
					        if(count == subid)
					        {
					            subcategory = i;
					            break;
					        }
	                        count++;
						}
					}

					format(string, sizeof(string), "{A9C4E4}Categoria:{FFFF00} %s\n{FFFFFF}Sub categoria:{FFFF00} %s\n{FFFFFF}Item:{FFFF00} %s\n{FFFFFF}Nome:{FFFF00} %s\n{FFFFFF}Modelo ID:{FFFF00} %d\n{FFFFFF}preço: %s\n\n", fCategory[category], fSubCategory[subcategory][subname], FurnitureItems[furnitureid][furnitureName], HouseFurniture[houseid][furnitureslot][fName], HouseFurniture[houseid][furnitureslot][fModel], FormatNumberEx(FurnitureItems[furnitureid][furniturePrice]));

					for (new i = 0; i < MAX_MATERIAL - 1; i ++)
					{
					    if(HouseMaterial[furnitureslot][i][mOn]) {
					        new texturename[32] = "não possui";

							for (new x = 0, num = sizeof(MaterialData); x < num; x ++)
							{
							    if(!strcmp(HouseMaterial[furnitureslot][i][mTexture], MaterialData[x][mtexture], true)) {
									format(texturename, 32, "%s", MaterialData[x][mName]);
									break;
							    }
							}

							format(string, sizeof(string), "%s{FF6347}Slot %d | Textura: %s{FFFFFF}\n", string, i + 1, texturename);
						}
					}
				}

				houseid = BizEntered[playerid];

				if(houseid != -1) {
				    new
				        count,
				        furnitureid = GetFurnitureID(BizFurniture[houseid][furnitureslot][fModel]),
						category = FurnitureItems[furnitureid][furnitureCatalog],
						subid = FurnitureItems[furnitureid][furnitureSubCatalog],
						subcategory;


					for(new i = 0; i != sizeof(fSubCategory); ++i)
					{
					    if(fSubCategory[i][catid] == category) {
					        if(count == subid)
					        {
					            subcategory = i;
					            break;
					        }
	                        count++;
						}
					}

					format(string, sizeof(string), "{A9C4E4}Categoria:{FFFF00} %s\n{FFFFFF}Sub categoria:{FFFF00} %s\n{FFFFFF}Item:{FFFF00} %s\n{FFFFFF}Nome:{FFFF00} %s\n{FFFFFF}Modelo ID:{FFFF00} %d\n{FFFFFF}preço: %s\n\n", fCategory[category], fSubCategory[subcategory][subname], FurnitureItems[furnitureid][furnitureName], BizFurniture[houseid][furnitureslot][fName], BizFurniture[houseid][furnitureslot][fModel], FormatNumberEx(FurnitureItems[furnitureid][furniturePrice]));

					for (new i = 0; i < MAX_MATERIAL - 1; i ++)
					{
					    if(HouseMaterial[furnitureslot][i][mOn]) {
					        new texturename[32] = "não possui";
							for (new x = 0, num = sizeof(MaterialData); x < num; x ++)
							{
							    if(!strcmp(HouseMaterial[furnitureslot][i][mTexture], MaterialData[x][mtexture], true)) {
									format(texturename, 32, "%s", MaterialData[x][mName]);
									break;
							    }
							}

							format(string, sizeof(string), "%s{FF6347}Slot %d | Textura: %s{FFFFFF}\n", string, i + 1, texturename);
						}
					}
				}

				Dialog_Show(playerid, ReturnFurnitureMenu, DIALOG_STYLE_MSGBOX, "informações:", string, "Fechar", "");
		    }
		    case 1: { // Position

		        new houseid = HouseEntered[playerid];

		        new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");
				SetPVarInt(playerid, "EditingFurniture", 1);

				if(houseid != -1) {

					EditDynamicObject(playerid, HouseFurniture[houseid][furnitureslot][fObject]);
					UpdateHouseInfo(houseid);
					ShowPlayerFooter(playerid, "~n~AGUARDE \"~y~SPACE~w~\" E PRESSIONE SEU \"~y~MMB~w~\" CHAVE PARA MOVER SEU ARTIGO DE MOVEIS DE VOLTA PARA Você.", 7000);
					format(string, sizeof(string), "Você está editando os moveis. %s", HouseFurniture[houseid][furnitureslot][fName]);
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}

				houseid = BizEntered[playerid];
				if(houseid != -1) {

					EditDynamicObject(playerid, BizFurniture[houseid][furnitureslot][fObject]);
					UpdateBizInfo(houseid);
					ShowPlayerFooter(playerid, "~n~AGUARDE \"~y~SPACE~w~\" E PRESSIONE SEU \"~y~MMB~w~\" CHAVE PARA MOVER SEU ARTIGO DE MOVEIS DE VOLTA PARA Você.", 7000);
					format(string, sizeof(string), "Você está editando os moveis. %s", BizFurniture[houseid][furnitureslot][fName]);
					SendClientMessage(playerid, COLOR_GRAD1, string);
				}
		    }
		    case 2: { // Material
                Dialog_Show(playerid, FurnitureMaterial, DIALOG_STYLE_LIST, "Slot de edição disponível:", "Texture Slot 1\nTexture Slot 2\nTexture Slot 3\nTexture Slot 4\nTexture Slot 5\nRemover texturas", "Selecionar", "<<");
                ShowPlayerFooter(playerid, "~n~~n~CADA ITEM DE MOVEIS TEM CERCA DE 5 SLOTS DE TEXTURA. ~EM~ CADA SLOT AFETA UMA PEÇA DO ITEM.", 5000);
			}
		    case 3: { // Sell


		        new houseid = HouseEntered[playerid];
		        new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");

				if(houseid != -1) {

				    new
				        count,
				        furnitureid = GetFurnitureID(HouseFurniture[houseid][furnitureslot][fModel]),
						category = FurnitureItems[furnitureid][furnitureCatalog],
						subid = FurnitureItems[furnitureid][furnitureSubCatalog],
						subcategory;


					for(new i = 0; i != sizeof(fSubCategory); ++i)
					{
					    if(fSubCategory[i][catid] == category) {
					        if(count == subid)
					        {
					            subcategory = i;
					            break;
					        }
	                        count++;
						}
					}

					format(string, sizeof(string), "{A9C4E4}Categoria:{FFFF00} %s\n{FFFFFF}Sub categoria:{FFFF00} %s\n{FFFFFF}Item:{FFFF00} %s\n{FFFFFF}preço: %s", fCategory[category], fSubCategory[subcategory][subname], FurnitureItems[furnitureid][furnitureName], FormatNumberEx(FurnitureItems[furnitureid][furniturePrice]));
					Dialog_Show(playerid, HandleFurnitureSelling, DIALOG_STYLE_MSGBOX, "Você tem certeza?", string, "Vender", "<<");

				}

				houseid = BizEntered[playerid];
				if(houseid != -1) {

				    new
				        count,
				        furnitureid = GetFurnitureID(BizFurniture[houseid][furnitureslot][fModel]),
						category = FurnitureItems[furnitureid][furnitureCatalog],
						subid = FurnitureItems[furnitureid][furnitureSubCatalog],
						subcategory;


					for(new i = 0; i != sizeof(fSubCategory); ++i)
					{
					    if(fSubCategory[i][catid] == category) {
					        if(count == subid)
					        {
					            subcategory = i;
					            break;
					        }
	                        count++;
						}
					}

					format(string, sizeof(string), "{A9C4E4}Categoria:{FFFF00} %s\n{FFFFFF}Sub categoria:{FFFF00} %s\n{FFFFFF}Item:{FFFF00} %s\n{FFFFFF}preço: %s", fCategory[category], fSubCategory[subcategory][subname], FurnitureItems[furnitureid][furnitureName], FormatNumberEx(FurnitureItems[furnitureid][furniturePrice]));
					Dialog_Show(playerid, HandleFurnitureSelling, DIALOG_STYLE_MSGBOX, "Você tem certeza?", string, "Vender", "<<");

				}
			}
		    case 4: { // Rename
				Dialog_Show(playerid, HandleFurnitureRename, DIALOG_STYLE_INPUT, "Custom Naming:", "You can give your furniture a name\n\t- The letter must not be less than 3 characters\n\t- Characters must be at least 3 characters\n\t- Special characters can not be used", "Selecionar", "<<");
		    }
		}
	}
	else Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Furniture Main Menu:", "Buy Furniture\nCurrent Furniture\nInformation", "Selecionar", "<<");
}

Dialog:HandleFurnitureRename(playerid, response, listitem, inputtext[]) {

	if (response) {

		if(strlen(inputtext) < 3 || strlen(inputtext) > 30)
		    return Dialog_Show(playerid, HandleFurnitureRename, DIALOG_STYLE_INPUT, "Nomenclatura Personalizada:", "Você pode dar um nome Ã  sua mobília\n\t- Deve ter pelo o menos de três caracteres\n\t- Deve ter menos de três caracteres\n\t- Caracteres especiais não podem ser usados", "Selecionar", "<<");

		if(!regex_match(inputtext, "[a-zA-Z0-9 _]+"))
		    return Dialog_Show(playerid, HandleFurnitureRename, DIALOG_STYLE_INPUT, "Nomenclatura Personalizada:", "Você pode dar um nome Ã  sua mobília\n\t- Deve ter pelo o menos de três caracteres\n\t- Deve ter menos de três caracteres\n\t- Caracteres especiais não podem ser usados", "Selecionar", "<<");

        OnPlayerRenameFurniture(playerid, GetPVarInt(playerid, "ChosenFurnitureSlot"), inputtext);
	}

	Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de objetos:", "{FFFFFF}informações\nposição\n{FF6347}Editar materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");

	return 1;
}

Dialog:HandleFurnitureSelling(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new houseid = HouseEntered[playerid];
		new furnitureslot = GetPVarInt(playerid, "ChosenFurnitureSlot");

		if(houseid != -1) {
			new sellprice = floatround(float(HouseFurniture[houseid][furnitureslot][fMarketPrice]) * 0.7);

			format(szString, sizeof(szString), "Você vendeu um(a) %s e recebeu 70 por cento do seu valor original: R$%d", HouseFurniture[houseid][furnitureslot][fName], sellprice);
			SendClientMessage(playerid, COLOR_GRAD2, szString);
			PlayerData[playerid][pCash] += sellprice;

			DestroyDynamicObject(HouseFurniture[houseid][furnitureslot][fObject]);
			OnPlayerSellHouseFurniture(playerid, houseid, furnitureslot);
		}

        houseid = BizEntered[playerid];
		if(houseid != -1) {
			new sellprice = floatround(float(BizFurniture[houseid][furnitureslot][fMarketPrice]) * 0.7);

			format(szString, sizeof(szString), "Você vendeu um(a) %s e recebeu 70 por cento do seu valor original: R$%d", BizFurniture[houseid][furnitureslot][fName], sellprice);
			SendClientMessage(playerid, COLOR_GRAD2, szString);
			PlayerData[playerid][pCash] += sellprice;

			DestroyDynamicObject(BizFurniture[houseid][furnitureslot][fObject]);
			OnPlayerSellBizFurniture(playerid, houseid, furnitureslot);
		}

		Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Menu Principal de moveis:", "Comprar móvel\nmoveis atuais\ninformações", "Selecionar", "<<");
	}
	else Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de objetos:", "{FFFFFF}informações\nposição\n{FF6347}Editar Materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");
	return 1;
}

stock GetFurnitureID(modelid)
{
	for(new i = 0; i != sizeof(FurnitureItems); ++i) if(FurnitureItems[i][furnitureModel] == modelid) return i;
	return 0;
}

Dialog:DisplayFurniture(playerid, response, listitem, inputtext[]) {
	if(response)
	{
	    new page = GetPVarInt(playerid, "FurniturePages");

		if(!strcmp(inputtext, ">>", true)) {
			page++;
			DeletePVar(playerid, "FurniturePages");
		    SetPVarInt(playerid, "FurniturePages", page);
		}
		else if(!strcmp(inputtext, "<<", true)) {
		    page--;
		    DeletePVar(playerid, "FurniturePages");
		    SetPVarInt(playerid, "FurniturePages", page);
		}
		else if(!strcmp(inputtext, "*Selecionar mobilia*", true)) {
            SelectObject(playerid);
            SetPVarInt(playerid, "SelectingFurniture", 1);
			return 1;
		}
		else
		{
		    if(GetPVarInt(playerid, "EditingFurniture") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você fixou um móvel.");

		    new houseid = HouseEntered[playerid], count;

		    if(houseid != -1) {
				for(new i = page * MAX_FURNITURE_PERPAGE; i != MAX_FURNITURE; ++i)
				{
					if(HouseFurniture[houseid][i][fOn])
					{
					    if(listitem == count)
					    {
					        SetPVarInt(playerid, "ChosenFurnitureSlot", i);
					        break;
					    }
	                    count++;
					}
				}
				Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de objetos:", "{FFFFFF}informações\nposição\n{FF6347}Editar Materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");
			}

            houseid = BizEntered[playerid];
		    if(houseid != -1) {
				for(new i = page * MAX_FURNITURE_PERPAGE; i != MAX_FURNITURE; ++i)
				{
					if(BizFurniture[houseid][i][fOn])
					{
					    if(listitem == count)
					    {
					        SetPVarInt(playerid, "ChosenFurnitureSlot", i);
					        break;
					    }
	                    count++;
					}
				}
    			Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de objetos:", "{FFFFFF}informações\nposição\n{FF6347}Editar Materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");
			}
			return 1;
		}
		ShowPlayerCurrentFurniture(playerid, page);

	}
	else Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Menu Principal de moveis:", "Comprar móvel\nmoveis atuais\ninformações", "Selecionar", "<<");


	return 1;
}

Dialog:FCategoryDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new category = listitem;

		SetPVarInt(playerid, "CategorySelected", category);

		new string[256];

		for(new i = 0; i != sizeof(fSubCategory); ++i)
		{
		    if(fSubCategory[i][catid] == category) {
				format(string, sizeof(string), "%s%s\n", string, fSubCategory[i][subname]);
			}
		}
		Dialog_Show(playerid, FSubCategoryDialog, DIALOG_STYLE_LIST, "Categorias:", string, "Selecionar", "<<");
	}
	else Dialog_Show(playerid, FurnitureDialog, DIALOG_STYLE_LIST, "Menu Principal de moveis:", "Comprar móvel\nmoveis atuais\ninformações", "Selecionar", "<<");
}

Dialog:FSubCategoryDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new string[1280], category = GetPVarInt(playerid, "CategorySelected"), count;

		for(new i = 0; i != sizeof(fSubCategory); ++i)
		{
		    if(fSubCategory[i][catid] == category) {
				if(listitem == count)
				{
					SetPVarInt(playerid, "SubCategorySelected", i);
					break;
				}
				count++;
			}
		}

		SetPVarInt(playerid, "SubCategoryRow", listitem);


        format(string, sizeof(string), "Nome do móvel\tpreço\n");

		for(new i = 0; i != sizeof(FurnitureItems); ++i)
		{
		    if(FurnitureItems[i][furnitureCatalog] == category && FurnitureItems[i][furnitureSubCatalog] == listitem) {
				format(string, sizeof(string), "%s%s\t%s\n", string, FurnitureItems[i][furnitureName], FormatNumber(FurnitureItems[i][furniturePrice]));
			}
		}
		Dialog_Show(playerid, FurnitureBuyDialog, DIALOG_STYLE_TABLIST_HEADERS, "Lista de moveis disponíveis:", string, "Selecionar", "<<");
	}
	else
	{
		new string[256];
		for(new i = 0; i != sizeof(fCategory); ++i) format(string, sizeof(string), "%s%s\n", string, fCategory[i]);
		Dialog_Show(playerid, FCategoryDialog, DIALOG_STYLE_LIST, "Categorias:", string, "Selecionar", "<<");
		DeletePVar(playerid, "CategorySelected");
	}
}

Dialog:FurnitureBuyDialog(playerid, response, listitem, inputtext[])
{
	new string[256];

	if(response)
	{
	    new
			furnitureid,
			count,
			subcategory = GetPVarInt(playerid, "SubCategorySelected"),
			category = GetPVarInt(playerid, "CategorySelected"),
			subrow = GetPVarInt(playerid, "SubCategoryRow");

		for(new i = 0; i != sizeof(FurnitureItems); ++i)
		{
		    if(FurnitureItems[i][furnitureCatalog] == category && FurnitureItems[i][furnitureSubCatalog] == subrow) {
				if(listitem == count)
				{
					furnitureid = i;
					SetPVarInt(playerid, "FurnitureSelected", i);
					break;
				}
				count++;
			}
		}
		SetPVarInt(playerid, "FurnitureModelBuying", FurnitureItems[furnitureid][furnitureModel]);
		SetPVarInt(playerid, "FurniturePriceBuying", FurnitureItems[furnitureid][furniturePrice]);
		SetPVarString(playerid, "FurnitureNameBuying", FurnitureItems[furnitureid][furnitureName]);

		format(string, sizeof(string), "{A9C4E4}Categoria:{FFFF00} %s\n{FFFFFF}Sub.Categoria:{FFFF00} %s\n{FFFFFF}Item:{FFFF00} %s\n{FFFFFF}preço: %s", fCategory[category], fSubCategory[subcategory][subname], FurnitureItems[furnitureid][furnitureName], FormatNumberEx(FurnitureItems[furnitureid][furniturePrice]));
		Dialog_Show(playerid, HandleFurnitureBuying, DIALOG_STYLE_MSGBOX, "Você tem certeza?", string, "Comprar", "<<");
	}
	else
	{
	    new category = GetPVarInt(playerid, "CategorySelected");

		for(new i = 0; i != sizeof(fSubCategory); ++i)
		{
		    if(fSubCategory[i][catid] == category) {
				format(string, sizeof(string), "%s%s\n", string, fSubCategory[i][subname]);
			}
		}
		Dialog_Show(playerid, FSubCategoryDialog, DIALOG_STYLE_LIST, "Categorias:", string, "Selecionar", "<<");
	}
}

Dialog:HandleFurnitureBuying(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new houseid = HouseEntered[playerid];

		if(houseid != -1) {
			if(IsAddHouseFurniture(houseid, GetHouseFurnitures(houseid))) {
			    new i = -1;
			    if((i = GetNextHouseFurnitureSlot(houseid)) != -1) {
					new virworld, interior, Float:px, Float:py, Float:pz;
					GetPlayerPos(playerid, px, py, pz);
					virworld = GetPlayerVirtualWorld(playerid);
					interior = GetPlayerInterior(playerid);

					new
					    name[48],
						price = GetPVarInt(playerid, "FurniturePriceBuying"),
						model = GetPVarInt(playerid, "FurnitureModelBuying"),
						clean_name[48];

			        GetPVarString(playerid, "FurnitureNameBuying", name, 48);
					mysql_escape_string(name,clean_name);

					if(PlayerData[playerid][pCash] >= price) {
						PlayerData[playerid][pCash] -= price;

		                GetXYInFrontOfPlayer(playerid, px, py, 1.5);
						HouseFurniture[houseid][i][fObject] = CA_CreateDynamicObject_SC(model, px, py, pz, 0.0, 0.0, 0.0, virworld, interior, -1, 200.0);
						SetPVarInt(playerid, "JustBoughtFurniture", 1);
						SetPVarInt(playerid, "ChosenFurnitureSlot", i);
						EditDynamicObject(playerid, HouseFurniture[houseid][i][fObject]);
						UpdateHouseInfo(houseid);

						format(HouseFurniture[houseid][i][fName], 48, "%s", name);

						OnPlayerBuyHouseFurniture(houseid, interior, virworld, i, model, price, clean_name, px, py, pz);
				        ShowPlayerFooter(playerid, "~n~SEGURE \"~y~espaço~w~\" E PRESSIONE \"~y~MMB~w~\" PARA MOVER SUA CAMERA.~n~PRESSIONE \"~r~ESC~w~\" SE Você não ESTIVER SASTIFEITO", 7000);

						format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
						mysql_query(dbCon, szQuery);
					}
					else SendClientMessage(playerid, COLOR_GRAD1, "Você não tem dinheiro suficiente!");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você usou todos os seus slot's de mobília!");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Você usou todos os seus slot's de mobília!");
		}

		houseid = BizEntered[playerid];
		if(houseid != -1) {
			if(IsAddBizFurniture(houseid, GetBizFurnitures(houseid))) {
				new i = -1;
			    if((i = GetNextBizFurnitureSlot(houseid)) != -1) {
					new virworld, interior, Float:px, Float:py, Float:pz;
					GetPlayerPos(playerid, px, py, pz);
					virworld = GetPlayerVirtualWorld(playerid);
					interior = GetPlayerInterior(playerid);

					new
					    name[48],
						price = GetPVarInt(playerid, "FurniturePriceBuying"),
						model = GetPVarInt(playerid, "FurnitureModelBuying"),
						clean_name[48];

			        GetPVarString(playerid, "FurnitureNameBuying", name, 48);
					mysql_escape_string(name,clean_name);

					if(PlayerData[playerid][pCash] >= price) {
						PlayerData[playerid][pCash] -= price;

		                GetXYInFrontOfPlayer(playerid, px, py, 1.5);
						BizFurniture[houseid][i][fObject] = CA_CreateDynamicObject_SC(model, px, py, pz, 0.0, 0.0, 0.0, virworld, interior, -1, 200.0);
						SetPVarInt(playerid, "JustBoughtFurniture", 1);
						SetPVarInt(playerid, "ChosenFurnitureSlot", i);
						EditDynamicObject(playerid, BizFurniture[houseid][i][fObject]);
						UpdateBizInfo(houseid);

						format(BizFurniture[houseid][i][fName], 48, "%s", name);

						OnPlayerBuyBizFurniture(houseid, interior, virworld, i, model, price, clean_name, px, py, pz);
				        ShowPlayerFooter(playerid, "~n~SEGURE \"~y~espaço~w~\" E PRESSIONE \"~y~MMB~w~\" PARA MOVER SUA CAMERA.~n~PRESSIONE \"~r~ESC~w~\" SE Você não ESTIVER SASTIFEITO", 7000);

						format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `Cash` = %d WHERE `ID` = %d", PlayerData[playerid][pCash], PlayerData[playerid][pID]);
						mysql_query(dbCon, szQuery);
					}
					else SendClientMessage(playerid, COLOR_GRAD1, "Você não tem dinheiro suficiente!");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "Você usou todos os seus slot's de mobília!");
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "Você usou todos os seus slot's de mobília!");
		}
	}
	else
	{
		DeletePVar(playerid, "FurnitureModelBuying");
		DeletePVar(playerid, "FurniturePriceBuying");
		DeletePVar(playerid, "FurnitureNameBuying");

		new string[1280], subrow = GetPVarInt(playerid, "SubCategoryRow"), category = GetPVarInt(playerid, "CategorySelected");

        format(string, sizeof(string), "Nome do móvel\tpreço\n");

		for(new i = 0; i != sizeof(FurnitureItems); ++i)
		{
		    if(FurnitureItems[i][furnitureCatalog] == category && FurnitureItems[i][furnitureSubCatalog] == subrow) {
				format(string, sizeof(string), "%s%s\t%s\n", string, FurnitureItems[i][furnitureName], FormatNumber(FurnitureItems[i][furniturePrice]));
			}
		}
		Dialog_Show(playerid, FurnitureBuyDialog, DIALOG_STYLE_TABLIST_HEADERS, "Lista de moveis disponíveis:", string, "Selecionar", "<<");
	}
}

public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float:x, Float:y, Float:z)
{
	//printf("OnPlayerSelectDynamicObject(%d, %d, %d, %f, %f, %f)", playerid, objectid, modelid, x, y, z);

	if(IsValidDynamicObject(objectid) && GetPVarInt(playerid, "SelectingFurniture") == 1) {

		if(GetPVarInt(playerid, "EditingFurniture") == 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você fixou um móvel!");

		new houseid = HouseEntered[playerid];

		if(houseid != -1) {
			for(new i = 0; i != MAX_FURNITURE; ++i) if(HouseFurniture[houseid][i][fOn])
			{
				if(HouseFurniture[houseid][i][fObject] == objectid)
				{
					SetPVarInt(playerid, "ChosenFurnitureSlot", i);
					Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de objetos:", "{FFFFFF}informações\nposição\n{FF6347}Editar Materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");
					break;
				}
			}
		}
		houseid = BizEntered[playerid];

		if(houseid != -1) {
			for(new i = 0; i != MAX_FURNITURE; ++i) if(BizFurniture[houseid][i][fOn])
			{
				if(BizFurniture[houseid][i][fObject] == objectid)
				{
					SetPVarInt(playerid, "ChosenFurnitureSlot", i);
					Dialog_Show(playerid, FurnitureEditMenu, DIALOG_STYLE_LIST, "edição de objetos:", "{FFFFFF}informações\nposição\n{FF6347}Editar Materiais{FFFFFF}\nVender\nRenomear", "Selecionar", "<<");
					break;
				}
			}
		}

		DeletePVar(playerid, "SelectingFurniture");
		CancelEdit(playerid);
	}
	//printf("CA_CreateDynamicObject_SC(%d, %f, %f, %f);", modelid, x, y, z);


	/*new Float:rx, Float:ry, Float:rz;
	GetDynamicObjectRot(objectid, rx, ry, rz);

	printf("INSERT INTO `movedoors` (`model`, `faction`, `posx`, `posy`, `posz`, `posrx`, `posry`, `posrz`, `interior`, `virworld`, `name`, `openspeed`) VALUES (%d, -1, '%f', '%f', '%f', '%f', '%f', '%f', '%d', '%d', 'LSPD Santa', '1');", modelid, x, y, z, rx, ry, rz, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	DestroyDynamicObject(objectid);*/

	return 1;
}


public OnPlayerSelectObject(playerid, type, objectid, modelid, Float:fX, Float:fY, Float:fZ)
{
    //printf("Player %d selected object %d", playerid, objectid);

    //SetPlayerPosEx(playerid, fX, fY, fZ-295);
    //CreateDynamicObject(modelid, fX, fY, fZ-300, 0.000, 0.000, 0.000, 0, GetPlayerInterior(playerid), -1, 200.0);
/*	printf("CreateDynamicObject(%d, %f, %f, %f);", modelid, fX, fY, fZ-300);
	DestroyDynamicObject(objectid);*/

    return 1;
}

stock IsAddHouseFurniture(houseid, current)
{
	new furniture = 75;

	if(Iter_Contains(sv_houses, houseid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `charName` = '%s'", HouseInfo[houseid][hOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(row) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}

	if(current < furniture) return true;

	return false;
}

stock IsAddBizFurniture(bizid, current)
{
	new furniture = 75;

	if(Iter_Contains(sv_business, bizid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `charName` = '%s'", BizInfo[bizid][bOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(row) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}

	if(current < furniture) return true;

	return false;
}

stock GetMaximumBizFurniture(bizid)
{
	new furniture = 75;
	if(Iter_Contains(sv_business, bizid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `charName` = '%s'", BizInfo[bizid][bOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(row) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}
	return furniture;
}

stock GetMaximumHouseFurniture(houseid)
{
	new furniture = 75;
	if(Iter_Contains(sv_houses, houseid))
	{
	    new
			query[128],
			row,
			donaterank;

		format(query, sizeof(query), "SELECT `DonateRank` FROM `characters` WHERE `charName` = '%s'", HouseInfo[houseid][hOwner]);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(row);

		if(row) cache_get_value_index_int(0, 0, donaterank);

		switch(row) {
			case 1: furniture = 150;
			case 2: furniture = 250;
			case 3: furniture = 400;
			default: furniture = 75;
		}
	}
	return furniture;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	// Created by Y_Less

	new Float:a;

	GetPlayerPos(playerid, x, y, a);

	if (GetPlayerVehicleID(playerid)) {
	    GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	}
	else GetPlayerFacingAngle(playerid, a);

	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}

forward ShowAmount(playerid, text[]);
public ShowAmount(playerid, text[])
{
	new rows, count = 0;
	cache_get_row_count(rows);
	if(rows)
	{
		while(count < rows) count++;
	}
	format(szString, sizeof(szString), "%s o número total: %d", text, count);
	SendClientMessage(playerid, COLOR_GRAD2, szString);
	return 1;
}

forward TollUpdate();
public TollUpdate() // Needs to be called in the OnPlayerUpdate function
{
	for(new i = 0; i != MAX_TOLLS; ++i)
	{
		if(aTolls[i][E_tOpenTime] > 0)
		{
			aTolls[i][E_tOpenTime]--;
			if(aTolls[i][E_tOpenTime] == 1)
			{
				Toll_CloseToll(i);
			}
		}
	}
}

forward Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance);
public Float:GetPosInFrontOfVehicle(vehicleid, &Float:x, &Float:y, Float:distance)
{
	new Float:a;
	GetVehiclePos(vehicleid, x, y, a);
 	GetVehicleZAngle(vehicleid, a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
	return a;
}

forward GetUnixTime();
public GetUnixTime()
{
	new Year, Month, Day,Hour,Minute,Second;
	getdate(Year, Month, Day);
	gettime(Hour,Minute,Second);
	return mktime(Hour,Minute,Second,Day,Month,Year);
}


stock mktime(hour,minute,second,day,month,year)
{
	new timestamp2;

	timestamp2 = second + (minute * 60) + (hour * 3600);

	new days_of_month[12];

	if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) {
		days_of_month = {                         // Schaltjahr
			31,29,31,30,31,30,31,31,30,31,30,31
		};
	}
	else {
		days_of_month = {                         // keins
			31,28,31,30,31,30,31,31,30,31,30,31
		};
	}
	new days_this_year = 0;
	days_this_year = day;
	if(month > 1) {                               // No January Calculation, because its always the 0 past months
		for(new i=0; i!=month-1;++i) {
			days_this_year += days_of_month[i];
		}
	}
	timestamp2 += days_this_year * 86400;

	for(new j=1970;j!=year;++j) {
		timestamp2 += 31536000;
// Schaltjahr + 1 Tag
		if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )  timestamp2 += 86400;
	}

	return timestamp2;
}

Toll_CloseToll(TollID)
{
	if(TollID == RichmanToll)
	{
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, -90.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, -90.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, -90.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, -90.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, -90.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, -90.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		SetDynamicObjectRot(L_a_TollObject[6], 0.00000, -90.00000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.00000, -90.00000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		SetDynamicObjectRot(L_a_TollObject[8], 0.00000, -90.00000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.00000, -90.00000, -195.00000);
	}
	return 1;
}

Toll_OpenToll(TollID)
{
	if(TollID == RichmanToll)
	{
		aTolls[RichmanToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[0], 0.000000, 0.000000, 23.81982421875);
		SetDynamicObjectRot(L_a_TollObject[1], 0.000000, 0.000000, 214.37744140625);
	}
	else if(TollID == FlintToll)
	{
		aTolls[FlintToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[2], 0.000000, 0.000000, 270.67565917969);
		SetDynamicObjectRot(L_a_TollObject[3], 0.000000, 0.000000, 87.337799072266);
	}
	else if(TollID == LVToll)
	{
		aTolls[LVToll][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[4], 0.000000, 0.000000, 348.10229492188);
		SetDynamicObjectRot(L_a_TollObject[5], 0.000000, 0.000000, 169.43664550781);
	}
	else if(TollID == BlueberryTollR)
	{
		aTolls[BlueberryTollR][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[6], 0.000000, 0.000000, 35.00000);
		SetDynamicObjectRot(L_a_TollObject[7], 0.000000, 0.000000, 215.92000);
	}
	else if(TollID == BlueberryTollL)
	{
		aTolls[BlueberryTollL][E_tOpenTime] = 7;
		SetDynamicObjectRot(L_a_TollObject[8], 0.000000, 0.000000, -14.94000);
		SetDynamicObjectRot(L_a_TollObject[9], 0.000000, 0.000000, -195.00000);
	}
}

Toll_TimePassedCivil(TollID, playerid) // People have to wait <TollDelayCivilian> seconds between every /abrirpedagio on the same toll
{
	if(aTolls[TollID][E_tOpenTime] > 0)
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "A barreira está aberta, passe antes dela fechar!");
		return 0;
	}
	return 1;
}

Toll_TimePassedCops(playerid) // Cops have to wait for <TollDelayCop> seconds between every /toll (Global)
{
	new L_i_tick = GetUnixTime();
	if(L_a_RequestAllowedCop > L_i_tick && L_a_RequestAllowedCop != 0)
	{
		new TollString[63];
		format(TollString, 63, "Você teria que esperar pelo menos %d segundos entre cada pagamento de pedágio", TollDelayCop);
		SendClientMessage(playerid, COLOR_LIGHTRED, TollString);
		return 0;
	}
	L_a_RequestAllowedCop = (L_i_tick + TollDelayCop);
	return 1;
}

CMD:pedagios(playerid, params[])
{
	//new faction = PlayerData[playerid][pFactionID];
	new option[11];

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem permissão para utilizar este comando.");

    if(PlayerData[playerid][pFactionRank] > 13)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"s[11]",option))
	{
		SendClientMessage(playerid, COLOR_YELLOW, "Controle dos pedágios do Estado de São Paulo");
		SendClientMessage(playerid, COLOR_GREY, "Fechar/Liberar - Fechado / Aberto Check all");
		SendClientMessage(playerid, COLOR_GREY, "flint - Fechado / Aberto checkpoint Flint County");
		SendClientMessage(playerid, COLOR_GREY, "richman - Fechado / Aberto checkpoint Richman");
		SendClientMessage(playerid, COLOR_GREY, "lv - Fechado / Aberto checkpoint LS-LV");
		SendClientMessage(playerid, COLOR_GREY, "blueberryr - Fechado / Aberto checkpoint Blueberry(Direita)");
		SendClientMessage(playerid, COLOR_GREY, "blueberryl - Fechado / Aberto checkpoint Blueberry(Esquerda)");
		return 1;
	}
	if(!Toll_TimePassedCops(playerid))
		return 1;

	if(!strcmp(option, "Fechar", true))
	{
		aTolls[FlintToll][E_tLocked] = 1;
		aTolls[RichmanToll][E_tLocked] = 1;
		aTolls[LVToll][E_tLocked] = 1;
		aTolls[BlueberryTollR][E_tLocked] = 1;
		aTolls[BlueberryTollL][E_tLocked] = 1;

		Toll_CloseToll(FlintToll);
		Toll_CloseToll(RichmanToll);
		Toll_CloseToll(LVToll);
		Toll_CloseToll(BlueberryTollR);
		Toll_CloseToll(BlueberryTollL);

		SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: %s %s fechou todas as barreiras! **", Faction_GetRank(playerid), ReturnName(playerid));
		SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: %s %s fechou todas as barreiras! **", Faction_GetRank(playerid), ReturnName(playerid));
	}
	else if(!strcmp(option, "Liberar", true))
	{
		aTolls[FlintToll][E_tLocked] = 0;
		aTolls[RichmanToll][E_tLocked] = 0;
		aTolls[LVToll][E_tLocked] = 0;
		aTolls[BlueberryTollR][E_tLocked] = 0;
		aTolls[BlueberryTollL][E_tLocked] = 0;

		SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: %s %s liberou todas as barreiras! **", Faction_GetRank(playerid), ReturnName(playerid));
		SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: %s %s liberou todas as barreiras! **", Faction_GetRank(playerid), ReturnName(playerid));
	}
	else if(!strcmp(option, "flint", true))
	{
		if(aTolls[FlintToll][E_tLocked] == 0)
		{
			aTolls[FlintToll][E_tLocked] = 1;
			Toll_CloseToll(FlintToll);
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Flint County foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Flint County foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
		else
		{
			aTolls[FlintToll][E_tLocked] = 0;
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "**  Aviso da Central: O pedagio de Flint County foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "**  Aviso da Central: O pedagio de Flint County foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
	}
	else if(!strcmp(option, "richman", true))
	{
		if(aTolls[RichmanToll][E_tLocked] == 0)
		{
			aTolls[RichmanToll][E_tLocked] = 1;
			Toll_CloseToll(RichmanToll);
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Richman foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Richman foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
		else
		{
			aTolls[RichmanToll][E_tLocked] = 0;
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Richman foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Richman foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
	}
	else if(!strcmp(option, "lv", true))
	{
		if(aTolls[LVToll][E_tLocked] == 0)
		{
			aTolls[LVToll][E_tLocked] = 1;
			Toll_CloseToll(LVToll);

			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio da LS-LV foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio da LS-LV foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
		else
		{
			aTolls[LVToll][E_tLocked] = 0;
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio da LS-LV foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio da LS-LV foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
	}
	else if(!strcmp(option, "blueberryr", true))
	{
		if(aTolls[BlueberryTollR][E_tLocked] == 0)
		{
			aTolls[BlueberryTollR][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollR);
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Direita) foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Direita) foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
		else
		{
			aTolls[BlueberryTollR][E_tLocked] = 0;
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Direita) foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Direita) foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
	}
	else if(!strcmp(option, "blueberryl", true))
	{
		if(aTolls[BlueberryTollL][E_tLocked] == 0)//23914
		{
			aTolls[BlueberryTollL][E_tLocked] = 1;
			Toll_CloseToll(BlueberryTollL);
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Esquerda) foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Esquerda) foi bloqueado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
		else
		{
			aTolls[BlueberryTollL][E_tLocked] = 0;
			SendFactionMessageEx(FACTION_POLICE, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Esquerda) foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
			SendFactionMessageEx(FACTION_SASD, COLOR_LSPDNEW, "** Aviso da Central: O pedagio de Blueberry(Esquerda) foi liberado. Quem solicitou: %s %s **", Faction_GetRank(playerid), ReturnName(playerid));
		}
	}
	return 1;
}


CMD:abrirpedagio(playerid, params[])
{
 	new L_i_TollID;
	if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 623.9500, -1183.9774, 19.2260) || IsPlayerInRangeOfPoint(playerid, 10.0, 607.9684, -1194.2866, 19.0043)) // Richman tolls
	{
		L_i_TollID = RichmanToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 39.7039, -1522.9891, 5.1995) || IsPlayerInRangeOfPoint(playerid, 10.0, 62.7378, -1539.9891, 5.0639)) // Flint tolls
	{
		L_i_TollID = FlintToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 1795.9447, 704.2550, 15.0006) || IsPlayerInRangeOfPoint(playerid, 10.0, 1778.9886, 702.6728, 15.2574)) // LV tolls
	{
		L_i_TollID = LVToll;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, 612.53070, 346.59592, 17.92614) || IsPlayerInRangeOfPoint(playerid, 10.0, 604.37152, 346.88141, 17.92614)) // BlueberryR tolls
	{
		L_i_TollID = BlueberryTollR;
	}
	else if(IsPlayerInRangeOfPoint(playerid, TollOpenDistance, -195.2768,252.2416,12.0781) || IsPlayerInRangeOfPoint(playerid, 10.0, -199.5153,260.3405,12.0781)) // BlueberryL tolls
	{
		L_i_TollID = BlueberryTollL;
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está perto o suficiente de uma cabine de pedágio!");
		return 1;
	}
	if(!Toll_TimePassedCivil(L_i_TollID, playerid))
		return 1;

    if(!PlayerData[playerid][pOnDuty])
	{
		if(aTolls[L_i_TollID][E_tLocked]) // If it's locked
		{
			SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s", L_sz_TollStringLocked);
			return 1;
		}
		if(PlayerData[playerid][pCash] < TollCost)
		{
			SendClientMessage(playerid, COLOR_RED, L_sz_TollStringNoMoney);
			return 1;
		}
		PlayerData[playerid][pCash] -= TollCost;
		SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s pagou R$%d para o guarda da cabine.", ReturnName(playerid), TollCost);
	}
	SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "%s", L_sz_TollStringBye);
	SendClientMessage(playerid, COLOR_LIGHTRED, L_sz_TollStringHurryUp);
	Toll_OpenToll(L_i_TollID);
	return 1;
}

CMD:revivermorte(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/revivermorte [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	ResetPlayer(userid);
	ResetDamages(userid);
	deathmode[userid]=0;
	deathtime[userid]=0;
	PlayerData[userid][pInjured]=0;
	ClearAnimations(userid);

	return 1;
}
CMD:reviver(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/reviver [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	/*if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10000.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador está desconectado ou não está próximo a Você.");*/

	if (!PlayerData[userid][pInjured] || deathmode[userid])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não está ferido ou já está morto!");

	ResetPlayer(userid);
	ResetDamages(userid);
	deathmode[userid]=0;
	deathtime[userid]=0;
	PlayerData[userid][pInjured]=0;
	ClearAnimations(userid);

	return 1;
}

CMD:curar(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_MEDIC) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para médicos.");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/curar [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador está desconectado ou não está próximo a Você.");

	if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode fazer isso sozinho");

	if (!PlayerData[userid][pInjured] || deathmode[userid])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não está ferido ou já está morto!");

	ResetPlayer(userid);
	ResetDamages(userid);
	deathmode[userid]=0;
	deathtime[userid]=0;
	PlayerData[userid][pInjured]=0;
	ClearAnimations(userid);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s operação concluida %s", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:desf(playerid, params[])
{
	new
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para médicos.");

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/desf [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador está desconectado ou não está próximo a Você.");

	if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode colocar Você mesmo em uma ambulância.");

	if (!PlayerData[userid][pInjured] || deathmode[userid])
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não está ferido ou já está morto!");

	foreach(new i : sv_vehicles) if ((GetPlayerVehicleID(playerid) == i || IsPlayerNearBoot(playerid, i)) && GetVehicleModel(i) == 416)
	{
	    seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "não há espaço para pacientes.");

		PlayerData[userid][pInjured] = 2;

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s moveu %s para dentro da ambulância.", ReturnName(playerid, 0), ReturnName(userid, 0));

		TogglePlayerControllable(userid, 1);
		return 1;
	}
	SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar perto de uma ambulância.");
	return 1;
}

stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}

stock GetVehicleMaxSeats(vehicleid)
{
    new const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}

stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

CMD:checarhacker(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");


	new Player_Weapons[13], Player_Ammos[13], bool:success;

	SendClientMessage(playerid, COLOR_GREEN, "___________________________[Verificando o sistema de Arma & munição]___________________________");

	foreach(new i : Player)
	{
		for(new wep = 1;wep <= 12;wep++)
		{
			GetPlayerWeaponData(i,wep,Player_Weapons[wep], Player_Ammos[wep]);

			if((Player_Weapons[wep] != 0 && PlayerData[playerid][pGuns][g_aWeaponSlots[Player_Weapons[wep]]] != Player_Weapons[wep]) || PlayerData[playerid][pAmmo][g_aWeaponSlots[Player_Weapons[wep]]] != Player_Ammos[wep])
			{
				format(szString, sizeof(szString), "[ID:%d]%s há informações que não correspondem ao servidor: %s(%d) | Cliente: %s(%d)", i, ReturnName(i), ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[Player_Weapons[wep]]]), PlayerData[playerid][pAmmo][g_aWeaponSlots[Player_Weapons[wep]]], ReturnWeaponName(Player_Weapons[wep]), Player_Ammos[wep]);
				SendClientMessage(playerid, COLOR_LIGHTRED, szString);
				success = true;
			}
		}

	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "não foi encontrado nenhuma arma ou munição com este jogador.");
	SendClientMessage(playerid, COLOR_WHITE, "Use /resetararmas para fazer todas as armas atenderem ao sistema.");
	return 1;
}

CMD:checarafk(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");


	new bool:success;

	SendClientMessage(playerid, COLOR_GREEN, "___________________________[AFK SYSTEM]___________________________");

	foreach(new i : Player)
	{
		if(IsAFK{i}) {
			format(szString, sizeof(szString), "[ID:%d]%s %d segundos", i, ReturnName(i), AFKCount[i]);
			SendClientMessage(playerid, COLOR_LIGHTRED, szString);
			success = true;
		}
	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não está AFK!");
	return 1;
}

CMD:checarmascarado(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");


	new bool:success;

	SendClientMessage(playerid, COLOR_GREEN, "___________________________[Sistema de Mascaras]___________________________");

	foreach(new i : Player)
	{
		if(BitFlag_Get(g_PlayerFlags[i], IS_PLAYER_MASK)) {
			format(szString, sizeof(szString), "[ID:%d]%s: %s", i, ReturnName(i), PlayerData[i][pMask_Name]);
			SendClientMessage(playerid, COLOR_LIGHTRED, szString);
			success = true;
		}
	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não está utilizando uma mascara.");
	return 1;
}

CMD:tempoafk(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");


	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/tempoafk [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if(IsAFK{userid}) {
		format(szString, sizeof(szString), "[ID:%d] %s %d segundos", userid, ReturnName(userid, 0), AFKCount[userid]);
		SendClientMessage(playerid, COLOR_GRAD2, szString);
	}
	else {
        SendClientMessage(playerid, COLOR_GRAD2, "O jogador não está AFK!");
	}
	return 1;
}

CMD:resetararmas(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/resetararmas [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	ResetPlayerWeapons(userid);
	for (new i = 0; i < 13; i ++) GivePlayerWeapon(userid, PlayerData[userid][pGuns][i], PlayerData[userid][pAmmo][i]);

	return 1;
}

CMD:retirararmas(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/retirararmas [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	ResetWeapons(userid);

	Log_Write("logs/admin_action.txt", "[%s] [/retirararmas] %s clear weapon %s", ReturnDate(), ReturnName(playerid), ReturnName(userid));


	return 1;
}

CMD:limparsalvosarma(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new userid;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/clearsaveweapons [PlayerID/PartOfName]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	FullResetPlayerWeapons(userid);

	Log_Write("logs/admin_action.txt", "[%s] [/clearsaveweapons] %s clear saving weapon %s", ReturnDate(), ReturnName(playerid), ReturnName(userid));


	return 1;
}

CMD:limparchat(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	for(new i = 0; i < 100; ++i)
	{
		SendClientMessageToAll(COLOR_WHITE, " ");
	}
	return 1;
}

CMD:limparmeuchat(playerid, params[])
{
	for(new i = 0; i < 100; ++i)
	{
		SendClientMessage(playerid, COLOR_WHITE, " ");
	}
	return 1;
}

CMD:salvartudo(playerid)
{
	if(PlayerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

    GlobalSaving();
    SendClientMessage(playerid, COLOR_WHITE, "Você salvou todas as informações.");

	return 1;
}

CMD:carga(playerid, params[]) {

	if(PlayerData[playerid][pJob] != JOB_TRUCKER && PlayerData[playerid][pSideJob] != JOB_TRUCKER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um caminhoneiro!");


	new option[16], amount, id = -1;

	if (sscanf(params, "s[16]D(0)", option, amount)) {

	    SendClientMessage(playerid, COLOR_GRAD3, "Comandos disponíveis:");
	    SendClientMessage(playerid, -1, "{FFFF00}/carga lista {FFFFFF}- Lista das cargas que estáo em seu veículo.");
	    SendClientMessage(playerid, -1, "{FFFF00}/carga pegar [ID] {FFFFFF}- Sempre que Você digitar {FFFF00}/carga lista{FFFFFF} para pular está etapa.");
        SendClientMessage(playerid, -1, "{FFFF00}/carga colocar {FFFFFF}- Para colocar as caixas no veículo mais próximo.");
        //SendClientMessage(playerid, -1, "{FFFF00}/cargo fork {FFFFFF}- Ship in the nearest vehicle to lift to your forklift.");
        SendClientMessage(playerid, -1, "{FFFF00}/carga deixar {FFFFFF}- Para colocar uma caixa no chão.");
        SendClientMessage(playerid, -1, "{FFFF00}/carga pegarchao {FFFFFF}- Para pegar sua caixa do chão.");
        SendClientMessage(playerid, -1, "{FFFF00}/carga comprar {FFFFFF}- Permite que Você compre produtos em uma industria.");
        SendClientMessage(playerid, -1, "{FFFF00}/carga vender {FFFFFF}- Permite que Você venda produtos para uma industria ou negócio.");
		return 1;
	}
	if(!strcmp(option, "lista", true))
	{
	    new vehicleid = -1;

	    if(!IsPlayerInAnyVehicle(playerid)) vehicleid = Vehicle_Nearest(playerid);
		else vehicleid = GetPlayerVehicleID(playerid);

		if(vehicleid && (GetTrunkStatus(vehicleid) || IsVehicleTrunkBroken(vehicleid)))
		{
		    new count, str[512];

			for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i])
			{
				format(str, 512, "%s{000000}%02d\t{E5FF00}%s\t{FFFFFF}%d %s\n", str, i + 1, g_arrIndItemNames[i], CoreVehicles[vehicleid][vehicleCrate][i], ReturnCargoUnit(i));
				count++;
			}
			if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Carga no veículo", "{E5FF00}Este veículo não tem nenhuma carga!", "Fechar", "");
			else Dialog_Show(playerid, VehicleCargoStorage, DIALOG_STYLE_TABLIST, "Carga no veículo", str, "Pegar", "Fechar");
		}
		else SendClientMessage(playerid, COLOR_WHITE, "O veículo deve estar destrancado!");
	}
	else if(!strcmp(option, "pegar", true))
	{
		if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 38) return SendClientMessage(playerid, COLOR_GREY,"Você não pode executar este comando com uma arma em mãos.");
		if(amount > 0)
		{
		    amount--;

			if(carryCrate[playerid] == -1 && !IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {

				new vehicleid = Vehicle_Nearest(playerid);

				if(vehicleid && (GetTrunkStatus(vehicleid) || IsVehicleTrunkBroken(vehicleid)) && IsPlayerNearBoot(playerid, vehicleid))
				{
	                if(IsVehicleCargo(amount) == -1) {
						if(CoreVehicles[vehicleid][vehicleCrate][amount])
						{
						    CoreVehicles[vehicleid][vehicleCrate][amount]--;
						    UpdateVehicleObject(vehicleid);

						    carryCrate[playerid] = amount;
							ApplyAnimation(playerid, "CARRY","liftup105", 4.1, 0, 0, 0, 0, 0, 1);
							SetTimerEx("PickupCrate", 200, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(amount), "strongboxes", true) ? 1 : 0));
							return 1;
						}
					}
				}
			}
		}
		SendClientMessage(playerid, COLOR_WHITE, "Valor invalido.");
	}
	else if(!strcmp(option, "colocar", true))
	{
    	if(carryCrate[playerid] != -1 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {


		    new vid = -1;
		    if(!IsPlayerInAnyVehicle(playerid)) for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i)) { vid = i; break; }
			else vid = GetPlayerVehicleID(playerid);

			if(vid && (GetTrunkStatus(vid) || IsVehicleTrunkBroken(vid)))
			{
				if(IsVehicleTransport(vid, carryCrate[playerid]))
				{
					if(CountVehicleSlot(vid) + GetCargoSlot(carryCrate[playerid]) <= GetVehicleCargoSlot(GetVehicleModel(vid)))
					{
						CoreVehicles[vid][vehicleCrate][carryCrate[playerid]]++;
						UpdateVehicleObject(vid);

						ApplyAnimation(playerid, "CARRY","putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
						SetTimerEx("PlaceCrate", 200, 0, "i", playerid);
						carryCrate[playerid] = -1;

						new targetid = INVALID_PLAYER_ID;
					    if ((targetid = GetVehicleDriver(vid)) != INVALID_PLAYER_ID)
					    {
					        new vehicleid = GetPlayerVehicleID(targetid);
					        if(IsTrucker(vehicleid))
					        {
						        new model = GetVehicleModel(vehicleid);
						        new trailerid = GetVehicleTrailer(vehicleid);
								if(GetVehicleCargoLoad((!trailerid) ? vid : trailerid) != -1 && !IsVehicleCargoSkill(model, PlayerData[targetid][pJobRank])) RemovePlayerFromVehicle(targetid), SendClientMessage(targetid, COLOR_WHITE, "??????????????Â§?????????Ã¢???????????????????");
							}
						}

					}
					else SendClientMessage(playerid, COLOR_WHITE, "Você chegou no limite de cargas.");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Seu veículo não pode transportar este tipo de carga.");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "O veículo não foi encontrado ou está trancado próximo a Você.");
		}
    	else SendClientMessage(playerid, COLOR_WHITE, "Você não está segurando uma caixa!");
	}
	/*else if(!strcmp(option, "fork", true))
	{

	}*/
	else if(!strcmp(option, "deixar", true))
	{
    	if(carryCrate[playerid] != -1 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {

			new cid=-1, count;

			for(new i = 0; i < MAX_CRATE; i++) {
				if(CrateInfo[i][cOn] && CrateInfo[i][cOwned] == PlayerData[playerid][pID]) count++;
				if(!CrateInfo[i][cOn] && cid == -1) cid = i;
			}

			if(cid != -1 && count <= 4)
			{
		     	ApplyAnimation(playerid, "CARRY","putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		      	SetTimerEx("PutdownCrate", 900, 0, "iii", playerid, cid, carryCrate[playerid]);
	    	    carryCrate[playerid] = -1;
    	    }
    	    else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode deixar uma caixa agora, pois já deixou duas no chão.");
    	}
    	else SendClientMessage(playerid, COLOR_WHITE, "Você não está segurando uma caixa!");
	}
	else if(!strcmp(option, "pegarchao", true))
	{
		if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 38) return SendClientMessage(playerid,COLOR_GREY,"Você não pode usar este comando com uma arma em mãos.");
    	if(carryCrate[playerid] == -1 && !IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {

			new bool:success;
			for(new i = 0; i < MAX_CRATE; i++) {
				if(CrateInfo[i][cOn]) {
					if(IsPlayerInRangeOfPoint(playerid,3.0,CrateInfo[i][cX],CrateInfo[i][cY],CrateInfo[i][cZ]))
					{
					   	ApplyAnimation(playerid, "CARRY","liftup", 4.1, 0, 0, 0, 0, 0, 1);
					  	SetTimerEx("PickupCrate", 900, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(CrateInfo[i][cID]), "strongboxes", true) ? 1 : 0));
						carryCrate[playerid] = CrateInfo[i][cID];
						DestroyDynamicObject(CrateInfo[i][cObject]);
						DestroyDynamic3DTextLabel(CrateInfo[i][clabel]);
                        CrateInfo[i][cOn] = 0;
	                    success = true;
					    break;
				    }
				}
			}

			if(!success) SendClientMessage(playerid, COLOR_WHITE, "não tem nenhuma caixa próximo a Você.");
    	}
    	else SendClientMessage(playerid, COLOR_WHITE, "Você já está segurando uma caixa!");
	}
	else if(!strcmp(option, "comprar", true))
	{
		if(GetPlayerWeapon(playerid) >= 22 && GetPlayerWeapon(playerid) <= 38) return SendClientMessage(playerid,COLOR_GREY,"Você não pode usar este comando com uma arma em mãos.");
		if ((id = Industry_Nearest(playerid, 5.0)) != -1 && !IndustryData[StorageData[id][in_industryid]][in_close])
		{
		    new type = -1;
			if((type = IsVehicleCargo(StorageData[id][in_item])) != -1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						return SendClientMessage(playerid, COLOR_GRAD1, "Você não é o motorista.");

				    if(type != 2) {
					    if (amount <= 0) {

							SendClientMessage(playerid, -1, "/carga comprar [quantidade]");

							switch(type)
							{
							    case 0: //Loose
							    {
									SendClientMessage(playerid, -1, "Dump trailer, tem uma capacidade de: {E5FF00}30 toneladas");
									SendClientMessage(playerid, -1, "Flatbed, tem uma capacidade de: {E5FF00} 16 toneladas");
							    }
							    case 1: //Liquids
							    {
									SendClientMessage(playerid, -1, "Tanker, tem uma capacidade de: {E5FF00}40 metros cúbicos");
							    }
							}
					        return 1;
					    }
				    }
				    else amount = 1;

				    new vehicleid = GetPlayerVehicleID(playerid);

					if(IsVehicleTransport(vehicleid, StorageData[id][in_item]))
					{
					    if(IsVehicleCargoSkill(GetVehicleModel(vehicleid), PlayerData[playerid][pJobRank])) {
							if(!StorageData[id][in_trading_type]/* && IndustryData[StorageData[id][in_industryid]][in_type] != 1*/){ // for sale and not secondary

	                            if(PlayerData[playerid][pCash] >= StorageData[id][in_price] * amount) {

	                                new trailerid = GetVehicleTrailer(vehicleid);

									if(CountVehicleSlot(vehicleid) + (GetCargoSlot(StorageData[id][in_item]) * amount) <= GetVehicleCargoSlot(GetVehicleModel((!trailerid) ?  vehicleid : trailerid)))
									{
									    if(type == 2) {
											CoreVehicles[vehicleid][vehicleCrate][StorageData[id][in_item]]++;
											UpdateVehicleObject(vehicleid);

										    StorageData[id][in_stock]--;
				                            UpdateStorage(id);

				                            PlayerData[playerid][pCash]-=StorageData[id][in_price];
									    }
									    else
									    {
									        if(trailerid)
									        {
												if (GetLockStatus(trailerid))
												{
									          		SendClientMessage(playerid, COLOR_WHITE, "Trailer fechado");
									          		return 1;
												}
												vehicleid = trailerid;
									        }

									        new cargo_invehicle = -1;
									        if((cargo_invehicle = GetVehicleCargoLoad(vehicleid)) == -1 || StorageData[id][in_item] == cargo_invehicle)
									        {

										        if(!CoreVehicles[vehicleid][vehicleIsCargoLoad])
										        {
												    StorageData[id][in_stock] -= amount;
						                            UpdateStorage(id);

						                            PlayerData[playerid][pCash]-=StorageData[id][in_price] * amount;

													CoreVehicles[vehicleid][vehicleIsCargoLoad] = amount;
													CoreVehicles[vehicleid][vehicleCargoTime] = amount * 2;
													CoreVehicles[vehicleid][vehicleCargoStorage] = id;
													CoreVehicles[vehicleid][vehicleCargoPlayer] = playerid;
													CoreVehicles[vehicleid][vehicleCargoAction] = 0;

													GameTextForPlayer(playerid, "~r~A carga está sendo descarregada,~n~~b~Aguarde...", 1000, 3);
												}
												else SendClientMessage(playerid, COLOR_WHITE, "O caminhão está sendo carregado.");
											}
											else SendClientMessage(playerid, COLOR_WHITE, "Você não pode pegar diferentes tipos de mercadorias.");
										}
									}
									else SendClientMessage(playerid, COLOR_WHITE, "Você não pode pegar mais que isso.");
	                            }
	                          	else SendClientMessage(playerid, COLOR_WHITE, "Você não tem dinheiro suficiente.");
	                        }
	                        else SendClientMessage(playerid, COLOR_WHITE, "Você não pode comprar nada nesta industria.");
                        }
                        else SendClientMessage(playerid, COLOR_WHITE, "Você ainda é muito nutella para transportar mercadorias neste veículo.");
					}
					else SendClientMessage(playerid, -1, "Seu veículo não pode transportar este tipo de carga.");
				}
				else SendClientMessage(playerid, -1, "Você deve estar em um veículo para comprar este produto.");
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					if(carryCrate[playerid] == -1 && !IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {
                        if(!StorageData[id][in_trading_type] /*&& IndustryData[StorageData[id][in_industryid]][in_type] != 1*/){ // for sale and not secondary
							if(StorageData[id][in_stock])
							{
	                            if(PlayerData[playerid][pCash] >= StorageData[id][in_price]) {
		                            StorageData[id][in_stock]--;
		                            UpdateStorage(id);

	                                carryCrate[playerid] = StorageData[id][in_item];

		                            PlayerData[playerid][pCash]-=StorageData[id][in_price];

		                            ApplyAnimation(playerid, "CARRY","liftup", 4.1, 0, 0, 0, 0, 0, 1);

		                            SetTimerEx("PickupCrate", 900, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(StorageData[id][in_item]), "strongboxes", true) ? 1 : 0));
	                            }
	                          	else SendClientMessage(playerid, COLOR_WHITE, "Você não tem dinheiro suficiente.");
                          	}
                          	else SendClientMessage(playerid, COLOR_WHITE, "Esta industria está vazia.");
                        }
                        else SendClientMessage(playerid, COLOR_WHITE, "Você não pode comprar nada nesta industria.");
					}
					else SendClientMessage(playerid, COLOR_WHITE, "Você está segurando uma caixa.");
				}
				else SendClientMessage(playerid, -1, "Você deve comprar este produto fora do veículo.");
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "não há industria aqui.");
	}
	else if(!strcmp(option, "vender", true))
	{
		if ((id = Bizz_Nearest(playerid)) != -1 && BizInfo[id][bExitX] != 0.0 && BizInfo[id][bExitY] != 0.0) {
			if(carryCrate[playerid] != -1 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {
			    if(BizInfo[id][bPriceProd] && BizInfo[id][bTill] >= BizInfo[id][bPriceProd]) {
				    if(GetProductCargo(BizInfo[id][bType]) == carryCrate[playerid]) {
						if(GetBusinessCargoCanBuy(id)) {
							BizInfo[id][bProducts] += GetProductPerCargo(BizInfo[id][bType]);
							carryCrate[playerid] = -1;
							PlayerData[playerid][pCash]+=BizInfo[id][bPriceProd];
							BizInfo[id][bTill]-=BizInfo[id][bPriceProd];
							ApplyAnimation(playerid, "CARRY","putdwn", 4.1, 0, 0, 0, 0, 0, 1);
							SetTimerEx("PlaceCrate", 900, 0, "i", playerid);
						} else SendClientMessage(playerid, COLOR_WHITE, "Este negócio está cheio.");
					} else SendClientMessage(playerid, COLOR_WHITE, "Você não pode vender um produto deste tipo.");
				} else SendClientMessage(playerid, COLOR_WHITE, "Este negócio não está aceitando mercadorias.");
			} else SendClientMessage(playerid, COLOR_WHITE, "Você não está segurando uma caixa.");
		}
		else if ((id = Industry_Nearest(playerid, 5.0)) != -1 && !IndustryData[StorageData[id][in_industryid]][in_close])
		{
		    new type = -1;
			if((type = IsVehicleCargo(StorageData[id][in_item])) != -1)
			{
				if(IsPlayerInAnyVehicle(playerid))
				{
					if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
						return SendClientMessage(playerid, COLOR_GRAD1, "Você não é o motorista.");

				    if(type != 2) {
					    if (amount <= 0) {

							SendClientMessage(playerid, -1, "/carga vender [quantidade]");
					        return 1;
					    }
				    }
				    else amount = 1;

				    new vehicleid = GetPlayerVehicleID(playerid);
                    new trailerid = GetVehicleTrailer(vehicleid);
					if(trailerid)
					{
						if (GetLockStatus(trailerid))
						{
							SendClientMessage(playerid, COLOR_WHITE, "Trailer trancado");
							return 1;
						}
						vehicleid = trailerid;
					}

					//if(StorageData[id][in_trading_type] || StorageData[id][in_item] == GetVehicleCargoLoad((!trailerid) ? vehicleid : trailerid)){ // want and same product
					if(StorageData[id][in_trading_type] && StorageData[id][in_item] == GetVehicleCargoLoad((!trailerid) ? vehicleid : trailerid)){ // want and same product

						if(CoreVehicles[vehicleid][vehicleCrate][StorageData[id][in_item]] >= amount)
						{
							if(StorageData[id][in_stock] + amount <= StorageData[id][in_maximum])
							{
								if(type == 2) {
									CoreVehicles[vehicleid][vehicleCrate][StorageData[id][in_item]]--;
									UpdateVehicleObject(vehicleid);

									StorageData[id][in_stock]++;
									UpdateStorage(id);

									PlayerData[playerid][pCash]+=StorageData[id][in_price];
								}
								else
								{
									if(!CoreVehicles[vehicleid][vehicleIsCargoLoad])
									{
										StorageData[id][in_stock] += amount;
										UpdateStorage(id);

										CoreVehicles[vehicleid][vehicleIsCargoLoad] = amount;
										CoreVehicles[vehicleid][vehicleCargoTime] = amount * 2;
										CoreVehicles[vehicleid][vehicleCargoStorage] = id;
										CoreVehicles[vehicleid][vehicleCargoPlayer] = playerid;
										CoreVehicles[vehicleid][vehicleCargoAction] = 1;

										GameTextForPlayer(playerid, "~r~A carga está sendo descarregada,~n~~b~Aguarde...", 1000, 3);
									}
									else SendClientMessage(playerid, COLOR_WHITE, "O caminhão está sendo carregado.");
								}
							}
							else SendClientMessage(playerid, COLOR_WHITE, "A industria está cheia.");

						}
						else SendClientMessage(playerid, COLOR_WHITE, "Contagem de item invalida.");
                   	}
                   	else SendClientMessage(playerid, COLOR_WHITE, "Você não pode vender um produto deste tipo.");

				}
				else SendClientMessage(playerid, -1, "Você deve estar em um veículo para vender este produto.");
			}
			else
			{
				if(!IsPlayerInAnyVehicle(playerid))
				{
					if(carryCrate[playerid] != -1 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {
						//printf("StorageData[id][in_trading_type] %d && StorageData[id][in_item] %d == carryCrate[playerid] %d", StorageData[id][in_trading_type],StorageData[id][in_item],carryCrate[playerid]);
						if(StorageData[id][in_item] == carryCrate[playerid]){ // want and same product
							if(StorageData[id][in_stock] < StorageData[id][in_maximum])
							{
		                      	StorageData[id][in_stock]++;
		                       	UpdateStorage(id);

	                          	carryCrate[playerid] = -1;
		                      	PlayerData[playerid][pCash]+=StorageData[id][in_price];

						     	ApplyAnimation(playerid, "CARRY","putdwn", 4.1, 0, 0, 0, 0, 0, 1);
						      	SetTimerEx("PlaceCrate", 900, 0, "i", playerid);

                          	}
                          	else SendClientMessage(playerid, COLOR_WHITE, "A industria está cheia.");
                        }
                        else SendClientMessage(playerid, COLOR_WHITE, "Você não pode vender um produto deste tipo.");
					}
					else SendClientMessage(playerid, COLOR_WHITE, "Você não está segurando uma caixa.");
				}
				else SendClientMessage(playerid, -1, "Você deve vender este produto fora do veículo.");
			}
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Sem industria aqui");
	}
	return 1;
}

CMD:trailer(playerid, params[])
{
	new option[8], vehicleid, trailerid;

	if (sscanf(params, "s[8]", option))
	{
	    SendClientMessage(playerid, COLOR_GRAD3, "Comandos disponíveis:");
	    SendClientMessage(playerid, -1, "{FFFF00}/trailer trancar {FFFFFF}- Trancar / Destrancar o trailer acoplado no seu veículo.");
	    SendClientMessage(playerid, -1, "{FFFF00}/trailer remover {FFFFFF}- Para remover o Trailer do seu veículo.");
        SendClientMessage(playerid, -1, "{FFFF00}/trailer luzes {FFFFFF}- Ligar/Desligar as luzes do seu Trailer");
        SendClientMessage(playerid, -1, "{FFFF00}/trailer carga {FFFFFF}- Para ver tudo o que está em seu Trailer.");
        return 1;
	}

	if ((vehicleid = GetPlayerVehicleID(playerid)) && (trailerid = GetVehicleTrailer(vehicleid)))
	{
		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não é o motorista!");

		if(!strcmp(option, "trancar", true))
		{
			new
				engine,
				lights,
				alarm,
				doors,
				bonnet,
				boot,
				objective,
				str[64];

			GetVehicleParamsEx(trailerid, engine, lights, alarm, doors, bonnet, boot, objective);

			if(doors != 1)
			{
				format(str, sizeof(str), "~r~%s Trancado", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
				GameTextForPlayer(playerid, str, 2000, 4);
				SetVehicleParamsEx(trailerid, engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
				format(str, sizeof(str), "~g~%s Destrancado", ReturnVehicleModelName(GetVehicleModel(vehicleid)));
				GameTextForPlayer(playerid, str, 2000, 4);
				SetVehicleParamsEx(trailerid, engine, lights, alarm, 0, bonnet, boot, objective);
			}
		}
		else if(!strcmp(option, "remover", true))
		{
		    DetachTrailerFromVehicle(vehicleid);
		}
		else if(!strcmp(option, "luzes", true))
		{
			switch (GetLightStatus(vehicleid))
			{
			    case false:
			    {
			        SetLightStatus(vehicleid, true);
			        GameTextForPlayer(playerid, "~g~Luzes ligadas", 2000, 4);
				}
				case true:
				{
				    SetLightStatus(vehicleid, false);
				    GameTextForPlayer(playerid, "~r~Luzes desligadas", 2000, 4);
				}
			}
		}
		else if(!strcmp(option, "carga", true))
		{
			if (!GetLockStatus(trailerid))
			{
			    new count, str[512];

				for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[trailerid][vehicleCrate][i])
				{
					format(str, 512, "%s{000000}%02d\t{E5FF00}%s\t{FFFFFF}%d %s\n", str, i + 1, g_arrIndItemNames[i], CoreVehicles[trailerid][vehicleCrate][i], ReturnCargoUnit(i));
					count++;
				}
				if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Trailer Carga", "{E5FF00}não há nenhum tipo de carga neste Trailer.", "Fechar", "");
				else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_TABLIST, "Trailer Carga", str, "Fechar", "");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Trailer trancado.");
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Você deve estar próximo a um trailer.");

	return 1;
}

stock GetVehicleCargoLoad(vehicleid)
{
	for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i]) return i;
	return -1;
}

stock IsVehicleCargoSkill(modelid, skill)
{
	switch(modelid)
	{
	    case 600, 605, 543, 422, 478, 554: return true;
	    case 413, 459, 482: if(skill > 0) return true;
	    case 440, 498: if(skill > 1) return true;
	    case 499, 414, 578, 443, 428: if(skill > 2) return true;
	    case 456, 455: if(skill > 3) return true;
	    case 403: if(skill > 4) return true;
	}

	return false;
}

stock IsTrucker(vehicleid)
{
	switch(GetVehicleModel(vehicleid)) {
		case 600, 605, 543, 422, 478, 554, 413, 459, 482, 440, 498, 499, 414, 578, 443, 428, 456, 455, 403: return true;
	}
	return false;
}

stock IsABoatModel(model)
{
	switch (model) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock IsACopCar(vehicleid)
{
    if(vehicleid != INVALID_VEHICLE_ID) {
		foreach(new i : sv_servercar)
		{
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_POLICE && FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_SASD) return i;
		}
	}
	return -1;
}

stock IsAFactionCar(vehicleid, factionid)
{
    if(vehicleid != INVALID_VEHICLE_ID) {
		foreach(new i : sv_servercar)
		{
			if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && vehicleVariables[i][vVehicleFaction] == factionid) return i;
		}
	}
	return -1;
}


stock IsNearBoat(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		for(new c=0;c<MAX_VEHICLES;c++)
		{
			switch (GetVehicleModel(c)) {
				case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595:
				{
				    if(IsPlayerInRangeOfVehicle(playerid, c, 7.0)) return 1;
				}
			}
		}
	}
	return 0;
}

stock IsNearBoatID(playerid)
{
    if(IsPlayerConnected(playerid))
    {
		for(new c=0;c<MAX_VEHICLES;c++)
		{
			switch (GetVehicleModel(c)) {
				case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595:
				{
				    if(IsPlayerInRangeOfVehicle(playerid, c, 7.0)) return c;
				}
			}
		}
	}
	return -1;
}

stock IsVehicleRental(vehicleid)
{
	for(new c=0;c<sizeof(CarRent);c++) if(vehicleid == CarRent[c]) return 1;
	return 0;
}

stock IsVehicleDMV(vehicleid)
{
	for(new c=0;c<sizeof(CarDMV);c++) if(vehicleid == CarDMV[c]) return 1;
	return 0;
}

stock GetVehicleRentalPrice(model)
{
	switch(model)
	{
	    case 492: return 100;
	    case 422: return 300;
	}
	return 0;
}

stock IsVehicleRented(vehicleid)
{
	foreach (new i : Player)
	{
		if(RentCarKey[i] == vehicleid) return 1;
	}
	return 0;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius) {

	new
		Float:Floats[3];

	GetVehiclePos(vehicleid, Floats[0], Floats[1], Floats[2]);
	return IsPlayerInRangeOfPoint(playerid, radius, Floats[0], Floats[1], Floats[2]);
}

stock IsAtBlackMarket(playerid)
{
	if(IsPlayerInRangeOfPoint(playerid, 6, 2520.3499,-1486.5232,23.9993)) return 1;
	else if(IsPlayerInRangeOfPoint(playerid, 6, 2457.5876,-1953.9668,13.4013)) return 1;
	return 0;
}

stock IsVehicleRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)
{
    if(vehicleid == INVALID_VEHICLE_ID) return 0;

    new Float:DistantaCar = GetVehicleDistanceFromPoint(vehicleid, x, y, z);

    if(DistantaCar <= range) return 1;
    return 0;
}

stock IsABicycle(vehicleid)
{
	switch(GetVehicleModel(vehicleid)) {
		case 481, 509, 510: return true;
	}
	return 0;
}

stock IsABike(vehicleid)
{
	switch(GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 471, 521, 522, 581, 586: return true;
	}
	return 0;
}

stock IsATaxi(vehicle)
{
	new model = GetVehicleModel(vehicle);
	return (model == 420 || model == 438);
}


stock IsDonateCar(model)
{
	switch(model)
	{
	    case 481, 509:
	    {
	        return 1;
	    }
 	    case 477, 471:
	    {
	        return 2;
	    }
 	    case 429, 541, 521, 468:
	    {
	        return 3;
	    }
	}
	return false;
}

stock IsCopCar(model)
{
	switch(model)
	{
	    case 490, 497, 523, 528, 596, 597, 598, 599, 601: return 1;
	}
	return false;
}

stock IsMedicCar(model)
{
	switch(model)
	{
	    case 416: return 1;
	}
	return false;
}

stock ReturnCargoUnit(cargoid)
{
	new name[16], id = -1;
	id = IsVehicleCargo(cargoid);

	switch(id)
	{
	    case 0: format(name, 16, "tonne");
	    case 1: format(name, 16, "cubic metre");
	    case 2: {
	        switch(cargoid)
	        {
	            case 4: format(name, 16, "wood log");
	            case 16: format(name, 16, "transformer");
	            case 17: format(name, 16, "vehicle");
	            case 22: format(name, 16, "brick pallets");
	        }
	    }
	    default: format(name, 16, "container");
	}
	return name;
}

stock ReturnCargoUnits(cargoid)
{
	new name[16];

	switch(cargoid)
	{
	    //scrap metal, cotton, cereal, malt, aggregate
		case 3, 5, 9, 25, 18: format(name, 16, "Toneladas");
		//fuel, dyes
		case 13, 0: format(name, 16, "Inflamóvel");
		//transformer, vehicles, wood logs, bricks
		case 16: format(name, 16, "Transformador");
		case 17: format(name, 16, "veículo");
		case 4: format(name, 16, "Papel");
		case 22: format(name, 16, "Paletes");
		//Milk
		case 6: format(name, 16, "Litros");
		//weapons, coins
	    case 19, 2: format(name, 16, "Cofres");
		//other
	    default: format(name, 16, "Caixotes");
	}
	return name;
}

Dialog:VehicleCargoStorage(playerid, response, listitem, inputtext[]) {
	if(response)
	{
	    if (IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_WHITE, "Você está em um veículo!");

        if(carryCrate[playerid] == -1 && !IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) {

			new count, cargoid, vehicleid = Vehicle_Nearest(playerid);

			if(vehicleid && (GetTrunkStatus(vehicleid) || IsVehicleTrunkBroken(vehicleid)) && IsPlayerNearBoot(playerid, vehicleid))
			{
				for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i])
				{
					if(listitem == count)
					{
						cargoid = i;
						break;
					}
					count++;
				}

                if(IsVehicleCargo(cargoid) == -1) {
					if(CoreVehicles[vehicleid][vehicleCrate][cargoid])
					{
					    CoreVehicles[vehicleid][vehicleCrate][cargoid]--;
					    UpdateVehicleObject(vehicleid);

					    carryCrate[playerid] = cargoid;
						ApplyAnimation(playerid, "CARRY","liftup105", 4.1, 0, 0, 0, 0, 0, 1);
						SetTimerEx("PickupCrate", 200, 0, "ii", playerid, (!strcmp(ReturnCargoUnits(cargoid), "strongboxes", true) ? 1 : 0));
					}
					else SendClientMessage(playerid, COLOR_WHITE, "não há nada aqui.");
				}
				else SendClientMessage(playerid, COLOR_WHITE, "Você não pode escolher este tipo de caixa.");
			}
			else SendClientMessage(playerid, COLOR_WHITE, "Você não está próximo a um veículo ou ele está trancado.");
		}
		else SendClientMessage(playerid, COLOR_WHITE, "Você está segurando uma caixa.");
	}
	return 1;
}

forward PlaceCrate(playerid);
public PlaceCrate(playerid)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	RemovePlayerAttachedObject(playerid, FREESLOT9);
}


forward PickupCrate(playerid, type);
public PickupCrate(playerid, type)
{
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	if(type) SetPlayerAttachedObject(playerid, FREESLOT9, 964, 5, 0.626, 0.164999, 0.115999, -77.2, -16, -83.4 , 1.0000, 1.0000, 1.0000);
	else SetPlayerAttachedObject(playerid, FREESLOT9, 2912, 1, -0.019, 0.713999, -0.076, 0, 87.1, -9.4, 1.0000, 1.0000, 1.0000);
	return 1;
}

CMD:uncarry(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:carry(playerid)
{
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
	return 1;
}

forward PutdownCrate(playerid, id, cargoid);
public PutdownCrate(playerid, id, cargoid)
{
	new cargo_name[32];

	if(!CrateInfo[id][cOn])
	{
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		RemovePlayerAttachedObject(playerid, FREESLOT9);

		GetPlayerPos(playerid, CrateInfo[id][cX], CrateInfo[id][cY], CrateInfo[id][cZ]);

		new Float:z, objectid;
		MapAndreas_FindZ_For2DCoord(CrateInfo[id][cX], CrateInfo[id][cY], z);

		GetXYInFrontOfPlayer(playerid, CrateInfo[id][cX], CrateInfo[id][cY], 1.5);

		CrateInfo[id][cOn] = 1;
		CrateInfo[id][cID] = cargoid;
		CrateInfo[id][cOwned] = PlayerData[playerid][pID];

		if(!strcmp(ReturnCargoUnits(cargoid), "strongboxes", true)) {
			objectid = 964;
		}
		else
		{
			objectid = 2912;
		}

		format(cargo_name, 32, "%s", g_arrIndItemNames[cargoid]);
		CrateInfo[id][clabel] = CreateDynamic3DTextLabel(cargo_name, 0xFFFFFFFF,CrateInfo[id][cX], CrateInfo[id][cY], z + 1.0, 100, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 50.0);
		CrateInfo[id][cObject] = CreateDynamicObject(objectid,CrateInfo[id][cX], CrateInfo[id][cY], z - 0.05,0.0000000,0.0000000,0.0000000);

		Streamer_Update(playerid, STREAMER_TYPE_OBJECT);
		//success = true;
		return 1;
	}
	//if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "Can not put a wooden crate right now.");
	return 0;
}

stock UpdateVehicleObject(vehicleid)
{
/*	for(new i=0;i<6;i++) if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]))
	{
	    DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
	}
*/
	new model = GetVehicleModel(vehicleid), count;
	switch(model) {
	    case 422: {
	        count = CountVehicleSlot(vehicleid);
			for(new i=0;i!=3;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.769999, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.769999, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.159999, -1.839998, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
					}
				}

			}
	    }
	    case 543, 605: {
	        count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=2;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.769999, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.769999, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
					}

				}
			}

	       /*

			for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.769999, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.769999, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
			}*/
	    }
		case 600: {
		    count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=2;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.92, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.92, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
					}
				}

			}

			/*for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, -0.92, -0.294999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.364999, -0.92, -0.299999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
			}*/
		}
		case 530: {
		    count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=3;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
						case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.009999, 0.484999, 0.634999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
					}
				}

			}

			/*for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.344999, 0.489999, -0.059999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
				else if(i == 2) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.009999, 0.484999, 0.634999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 | CRATE
			}*/
		}
		case 478: {
			count = CountVehicleSlot(vehicleid);

			for(new i=0;i!=4;i++)
			{
			    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
			    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
				}

				if(i < count) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

					switch(i) {
						case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
						case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
						case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
						case 3: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					}
				}

			}
	/*
			for(new i=0;i<count;i++)
			{
				CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -0.949999, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				else if(i == 2) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				else if(i == 3) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.354999, -1.664998, 0.000000, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
			}*/
		}
		case 554: {
            if(CoreVehicles[vehicleid][vehicleCrate][22])
            {
                //bricks
				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

                CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(1685, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
                AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.000000, -1.754998, 0.859999, 0.000000, 0.000000, 0.000000); //Object Model: 1685 |
            }
            else {
	      		count = CountVehicleSlot(vehicleid);

				for(new i=0;i!=4;i++)
				{
				    if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][i])) {
				    	DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][i]);
					}

					if(i < count) {
						CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);

						switch(i) {
							case 0: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.294999, -0.989999, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
							case 1: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.409999, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
							case 2: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
							case 3: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.414999, -2.405007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
							case 4: AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -2.410007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
						}
					}

				}
	        	/*for(new i=0;i<count;i++) {
					CoreVehicles[vehicleid][vehicleObj][i] = CreateDynamicObject(2912, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
					if(!i) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.409999, -0.989999, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 1) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.294999, -0.989999, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 2) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.409999, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 3) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -1.694998, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 4) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, -0.414999, -2.405007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
					else if(i == 5) AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][i], vehicleid, 0.295000, -2.410007, -0.239999, 0.000000, 0.000000, 0.000000); //Object Model: 2912 |
				}*/
			}
		}
		case 578: { // DFT-30
            if(CoreVehicles[vehicleid][vehicleCrate][4]) { // wood logs

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(18609, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.205000, -5.895015, 0.839999, 0.000000, 0.000000, 3.900000);
            }
			else if(CoreVehicles[vehicleid][vehicleCrate][22]) { // bricks

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][1]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][1]);

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][2]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][2]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(1685, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				CoreVehicles[vehicleid][vehicleObj][1] = CreateDynamicObject(1685, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				CoreVehicles[vehicleid][vehicleObj][2] = CreateDynamicObject(1685, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.000000, -0.269999, 0.459999, 0.000000, 0.000000, 0.000000); //Object Model: 1685 |
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][1], vehicleid, 0.000000, -2.044999, 0.459999, 0.000000, 0.000000, 0.000000); //Object Model: 1685 |
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][2], vehicleid, 0.000000, -3.820039, 0.459999, 0.000000, 0.000000, 0.000000); //Object Model: 1685 |
            }
			else if(CoreVehicles[vehicleid][vehicleCrate][16]) { // transformer

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(3273, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, -0.000000, -0.404999, 0.799999, 0.000000, 90.449951, -90.449951); //Object Model: 3273 |
			}
		}
		case 443: { // Packer
            if(CoreVehicles[vehicleid][vehicleCrate][17] == 1) {
				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(3593, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.205000, -5.895015, 0.839999, 0.000000, 0.000000, 3.900000);
			}
			else
			{
				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][0]);

				if(IsValidDynamicObject(CoreVehicles[vehicleid][vehicleObj][1]))
					DestroyDynamicObject(CoreVehicles[vehicleid][vehicleObj][1]);

				CoreVehicles[vehicleid][vehicleObj][0] = CreateDynamicObject(3593, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][0], vehicleid, 0.000000, 0.344999, 1.819998, 15.074999, 0.000000, 0.000000); //Object Model: 3593 |  CAR DESTROY
				CoreVehicles[vehicleid][vehicleObj][1] = CreateDynamicObject(3593, 0.0, 0.0, -20.0, 0.0, 0.0, 0.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehicleObj][1], vehicleid, -0.005000, -6.455012, 0.024998, 15.074999, 0.000000, 0.000000); //Object Model: 3593 |  CAR DESTROY
			}
		}
	}
}

stock IsVehicleTransport(vehicleid, cargoid)
{
    new trailerid = GetVehicleTrailer(vehicleid);
	new model = GetVehicleModel(vehicleid);

	switch(model)
	{
	    case 403: {
			if(trailerid)
			{
				switch(GetVehicleModel(trailerid))
				{
				    case 435, 482, 591: { // Article Trailer 1 & Article Trailer 2
						switch(cargoid)
						{
						    //crates, bricks
			 				case 1, 20, 12, 7, 24, 23, 11, 15, 8, 10, 22: return true;
			            }
				    }
				    case 584: { // Petrol Trailer
						switch(cargoid)
						{
							//fuel, milk, dyes
							case 13, 6, 0: return true;
						}
				    }
				    case 450: { // Dump Trailer
						switch(cargoid)
						{
						    //scrap metal, cotton, cereal, malt, aggregate
							case 3, 5, 9, 25, 18: return true;
						}
				    }
				}
			}
	    }
	    case 443: if(cargoid == 17) return true; // vehicle
	    case 578: {
			switch(cargoid)
			{
				//transformer, vehicles, wood logs, bricks
				case 16, 17, 4, 22: return true;
			}
	    }
	    case 428: {
			switch(cargoid)
			{
				//moedas, weapons
				case 2, 19: return true;
			}
	    }
	    case 455: { // Flatbed
			switch(cargoid)
			{
				//scrap metal, cotton, cereal, malt, aggregate
				case 3, 5, 9, 25, 18: return true;
			}
	    }
	    case 456, 499, 414, 554: { // Yankee, Benson, Mule, Yosemite
			switch(cargoid)
			{
			    //crates, bricks
 				case 1, 20, 12, 7, 24, 23, 11, 15, 8, 10, 22: return true;
            }
	    }
		case 498, 440, 482, 459, 413, 478, 422, 543, 605, 600: { //
			switch(cargoid)
			{
			    //crates
 				case 1, 20, 12, 7, 24, 23, 11, 15, 8, 10: return true;
            }
		}
	}
	return false;
}


stock IsVehicleCargo(cargoid) // Loose Material 0 | Liquids 1 | Other 2
{
	switch(cargoid)
	{
	    //scrap metal, cotton, cereal, malt, aggregate
		case 3, 5, 9, 25, 18: return 0;
		//fuel, milk, dyes
		case 13, 6, 0: return 1;
		//transformer, vehicles, wood logs
		case 16, 17, 4: return 2;
	}
	return -1;
}


stock GetVehicleCargoSlot(model)
{
	switch(model)
	{
		case 600, 543, 605, 443: return 2;
		case 422: return 3;
		case 478: return 4;
		case 554: return 6;
		case 413, 459, 482: return 10;
		case 440, 498: return 12;
		case 499, 428, 455: return 16;
		case 414, 578: return 18;
		case 456: return 24;
		case 435, 591: return 36;
		case 450: return 30;
		case 584: return 40;
	}
	return -1;
}

stock CountVehicleSlot(vehicleid)
{
	new count;
	for(new i=0;i<MAX_TRUCKER_ITEMS;i++) if(CoreVehicles[vehicleid][vehicleCrate][i])
	{
	    if(i == 22) count += CoreVehicles[vehicleid][vehicleCrate][i] * 6;
	    else if(i == 4 || i == 16) count += CoreVehicles[vehicleid][vehicleCrate][i] * 18;
		else count += CoreVehicles[vehicleid][vehicleCrate][i];
	}
	return count;
}

stock GetCargoSlot(cargoid)
{
	if(cargoid == 22) return 6;
	else if(cargoid == 4 || cargoid == 16) return 18;
	return 1;
}

stock UpdateStorage(cargoid)
{
	if(!IndustryData[StorageData[cargoid][in_industryid]][in_close])
	{
		if(!IsValidDynamicPickup(StorageData[cargoid][in_pickup])) StorageData[cargoid][in_pickup] = CreateDynamicPickup(1318, 23, StorageData[cargoid][in_posx], StorageData[cargoid][in_posy], StorageData[cargoid][in_posz], 0, 0);
		if(!IsValidDynamic3DTextLabel(StorageData[cargoid][in_label])) {

			format(szString, 128, "[{E5FF00}%s{FFFFFF}]\nArmazenamento: %d/%d\npreço: %s/unidade", g_arrIndItemNames[StorageData[cargoid][in_item]], StorageData[cargoid][in_stock], StorageData[cargoid][in_maximum], FormatNumber(StorageData[cargoid][in_price]));
			StorageData[cargoid][in_label] = CreateDynamic3DTextLabel(szString, -1, StorageData[cargoid][in_posx], StorageData[cargoid][in_posy], StorageData[cargoid][in_posz], 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, -1, -1, 100.0);
            return 1;
		}
		format(szString, 128, "[{E5FF00}%s{FFFFFF}]\nArmazenamento: %d/%d\npreço: %s/unidade", g_arrIndItemNames[StorageData[cargoid][in_item]], StorageData[cargoid][in_stock], StorageData[cargoid][in_maximum], FormatNumber(StorageData[cargoid][in_price]));
        UpdateDynamic3DTextLabelText(StorageData[cargoid][in_label], -1, szString);

	}
	else
	{
		if(IsValidDynamic3DTextLabel(StorageData[cargoid][in_label])) DestroyDynamic3DTextLabel(StorageData[cargoid][in_label]);
		if(IsValidDynamicPickup(StorageData[cargoid][in_pickup])) DestroyDynamicPickup(StorageData[cargoid][in_pickup]);
	}

	return 1;
}

stock saveStorage(cargoid)
{
	format(szQuery, sizeof(szQuery), "UPDATE `industry` SET `stock` = '%d' WHERE `id` = %d", StorageData[cargoid][in_stock], StorageData[cargoid][in_id]);
	mysql_query(dbCon, szQuery);
}

stock saveWarehouse(warehouseid) {
	format(szQuery, sizeof(szQuery), "UPDATE `faction_warehouse` SET `fw_stock` = '%d' WHERE `fw_id` = %d", WareHouseInfo[warehouseid][whStock], WareHouseInfo[warehouseid][whID]);
	mysql_query(dbCon, szQuery);
}

forward Float:GetVehicleDataHealth(modelid);
public Float:GetVehicleDataHealth(modelid)
{
	if(VehicleData[modelid - 400][c_maxhp]) return VehicleData[modelid - 400][c_maxhp];
	return 1000.0;
}

forward Float:GetVehicleDataFuel(modelid);
public Float:GetVehicleDataFuel(modelid)
{
	if(VehicleData[modelid - 400][c_maxfuel]) return VehicleData[modelid - 400][c_maxfuel];
	return 100.0;
}

forward Float:GetVehicleDataFuelRate(modelid);
public Float:GetVehicleDataFuelRate(modelid)
{
	if(VehicleData[modelid - 400][c_fuelrate]) return VehicleData[modelid - 400][c_fuelrate];
	return 18.0;
}

forward GetVehicleDataArmourCost(modelid);
public GetVehicleDataArmourCost(modelid)
{
	if(VehicleData[modelid - 400][c_price]) return floatround(float(VehicleData[modelid - 400][c_price]) / 10000.00, floatround_round);
	return 1;
}

CMD:dararma(playerid, params[])
{
	new playerb, gunid, ammo;

	if(PlayerData[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não tem autorização para usar este comando.");
	if(sscanf(params, "uii", playerb, gunid, ammo))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USE]: /dararma [PLAYER] [gunid] [ammo]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "ERRO: ID invalido da arma.");
	format(szString, sizeof(szString), "Você deu %s(%d) para %s", ReturnWeaponName(gunid), ammo,ReturnName(playerb));
	SendClientMessage(playerid, COLOR_WHITE, szString);
	format(szString, sizeof(szString), "O administrador %s forneceu a %s(%d) para Você", ReturnName(playerid), ReturnWeaponName(gunid), ammo);
	SendClientMessage(playerb, COLOR_WHITE, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/dararma] %s deu a arma %s(%d) para %s", ReturnDate(), ReturnName(playerid), ReturnWeaponName(gunid), ammo, ReturnName(playerb));

	format(szQuery, sizeof(szQuery), "Deu %s(%d) para %s", ReturnWeaponName(gunid), ammo,ReturnName(playerb));
	SQL_LogAdmin_Action(playerid, "/dararma", szQuery);

	GivePlayerWeaponEx(playerb, gunid, ammo);
	return 1;
}

CMD:criararma(playerid, params[])
{
	new playerb, gunid, ammo, license;

	if(PlayerData[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não tem autorização para usar este comando.");
	if(sscanf(params, "uiiD(0)", playerb, gunid, ammo, license))
	{
		SendClientMessage(playerid, COLOR_WHITE, "[USE]: /criararma [PLAYER] [gunid] [ammo] [license(0/1)]");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
		SendClientMessage(playerid, COLOR_GREY, "1: Brass Knuckles 2: Golf Club 3: Nite Stick 4: Knife 5: Baseball Bat 6: Shovel 7: Pool Cue 8: Katana 9: Chainsaw");
		SendClientMessage(playerid, COLOR_GREY, "10: Purple Dildo 11: Small White Vibrator 12: Large White Vibrator 13: Silver Vibrator 14: Flowers 15: Cane 16: Frag Grenade");
		SendClientMessage(playerid, COLOR_GREY, "17: Tear Gas 18: Molotov Cocktail 19: Vehicle Missile 20: Hydra Flare 21: Jetpack 22: 9mm 23: Silenced 9mm 24: Desert Eagle 25: Shotgun");
		SendClientMessage(playerid, COLOR_GREY, "26: Sawnoff Shotgun 27: SPAS-12 28: Micro SMG (Mac 10) 29: SMG (MP5) 30: AK-47 31: M4 32: Tec9 33: Rifle");
		SendClientMessage(playerid, COLOR_GREY, "25: Shotgun 34: Sniper Rifle 35: Rocket Launcher 36: HS Rocket Launcher 37: Flamethrower 38: Minigun 39: Satchel Charge");
		SendClientMessage(playerid, COLOR_GREY, "40: Detonator 41: Spraycan 42: Fire Extinguisher 43: Camera 44: Nightvision Goggles 45: Infared Goggles 46: Parachute");
		SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");

		return 1;
	}
	if(gunid < 0 || gunid > 46 || gunid == 19 || gunid == 20 || gunid == 21) return SendClientMessage(playerid, COLOR_GREY, "ERRO: ID invalido da arma.");

	format(szString, sizeof(szString), " Você deu %s (%d) para %s", ReturnWeaponName(gunid), ammo,ReturnName(playerb));
	SendClientMessage(playerid, COLOR_WHITE, szString);
	format(szString, sizeof(szString), " O administrador %s forneceu a %s(%d) para Você", ReturnName(playerid), ReturnWeaponName(gunid), ammo);
	SendClientMessage(playerb, COLOR_WHITE, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/criararma] %s deu a arma%s(%d) para %s", ReturnDate(), ReturnName(playerid), ReturnWeaponName(gunid), ammo, ReturnName(playerb));

	format(szQuery, sizeof(szQuery), "Deu %s(%d) para %s", ReturnWeaponName(gunid), ammo,ReturnName(playerb));
	SQL_LogAdmin_Action(playerid, "/criararma", szQuery);

	new pfid = GivePlayerValidWeapon(playerb, gunid, ammo, license ? randomEx(100000,999999) : 0);

	if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) give %s(%d) to %s [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(gunid), ammo, ReturnName(playerb), pfid);

	return 1;
}

CMD:tpda(playerid, params[])
{
	if(PlayerData[playerid][pJob] != JOB_TRUCKER && PlayerData[playerid][pSideJob] != JOB_TRUCKER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é caminhoneiro.");


	Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}Exibir{FFFFFF}Todas as industrias\n{B4B5B7}Exibir{FFFFFF}Recebendo negócios\n{B4B5B7}Exibir{FFFFFF}informações sobre o navio", "Selecionar", "Fechar");
	return 1;
}

CMD:industria(playerid, params[])
{
	new i;

	if((i = Industry_Nearest(playerid)) != -1) {
		ShowIndustry(playerid, StorageData[i][in_industryid]);
	}
	/*if(PlayerData[playerid][pJob] != JOB_TRUCKER && PlayerData[playerid][pSideJob] != JOB_TRUCKER)
	    return SendClientMessage(playerid, COLOR_GRAD1, "you are not a Trucker");


	Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}Show{FFFFFF}All Industries\n{B4B5B7}Show{FFFFFF}Receiving business\n{B4B5B7}Show{FFFFFF}Ship Information", "Selecionar", "Sair");
	*/
	return 1;
}

Dialog:FactionEdit_Color(playerid, response, listitem, inputtext[])
{
	if(response) {

		new string[64], color;
		if (sscanf(inputtext, "x", color)) {
			format(string, sizeof(string), "O formato de cor está incorreto\n\nCor da facção: {%06x}CODE\nRGBA 0xFFFFFFAA", FactionData[PlayerData[playerid][pFactionEdit]][factionColor] >>> 8);
			Dialog_Show(playerid, FactionEdit_Color, DIALOG_STYLE_INPUT, "Editar cor", string, "ALterar", "Voltar");
			return true;
		}

	    FactionData[PlayerData[playerid][pFactionEdit]][factionColor] = color;
	    Faction_Update(PlayerData[playerid][pFactionEdit]);

	    Faction_Save(PlayerData[playerid][pFactionEdit]);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s Pode{%06x} A cor das Facções ou grupos: %d", ReturnName(playerid), color >>> 8, PlayerData[playerid][pFactionEdit]);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Name(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[64];

		if(isnull(inputtext) || strlen(inputtext) >= 32) {
			format(string, sizeof(string), "O comprimento do nome deve ser maior que 0 e não deve ser excedido./nNome da facção: %s", FactionData[PlayerData[playerid][pFactionEdit]][factionName]);
			Dialog_Show(playerid, FactionEdit_Name, DIALOG_STYLE_INPUT, "Editar nome", string, "Alterar", "Voltar");
			return true;
		}
		//mysql_escape_string(inputtext,clean_name);
		format(FactionData[PlayerData[playerid][pFactionEdit]][factionName], 32, inputtext);
		Faction_Save(PlayerData[playerid][pFactionEdit]);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Type(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[64], typeint = strval(inputtext);

		if(typeint < 1 && typeint > 6) {
			format(string, sizeof(string), "A categoria especificada não é valida entre 1 e 6/n/nTipo da facção: %s\n\nEscolha um número 1: polícia | 2: Noticias | 3: Bombeiros | 4: Governo | 5: Gangue | 6: PCESP", GetFactionTypeName(FactionData[PlayerData[playerid][pFactionEdit]][factionType]));
			Dialog_Show(playerid, FactionEdit_Type, DIALOG_STYLE_INPUT, "Editar tipo", string, "Alterar", "Voltar");
			return true;
		}
	    FactionData[PlayerData[playerid][pFactionEdit]][factionType] = typeint;

	    Faction_Save(PlayerData[playerid][pFactionEdit]);
		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s ajustar o tipo de departamento ou grupo ID: %d ou %s", ReturnName(playerid), PlayerData[playerid][pFactionEdit], GetFactionTypeName(typeint));
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit_Maxrank(playerid, response, listitem, inputtext[])
{
	if(response) {
		new string[64], typeint = strval(inputtext);

		if(typeint < 1 && typeint > 16) {
			format(string, sizeof(string), "A classificação especificada é invalida 1 para chegar a 16/n/nposição máxima da facção: %d\n\nEscolha entre 1-16", FactionData[PlayerData[playerid][pFactionEdit]][factionRanks]);
			Dialog_Show(playerid, FactionEdit_Maxrank, DIALOG_STYLE_INPUT, "Editar posição máxima", string, "Alterar", "Voltar");
			return true;
		}
	    FactionData[PlayerData[playerid][pFactionEdit]][factionRanks] = typeint;
	    Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendAdminAlert(COLOR_YELLOW, "[ADMIN]: %s a classificação mais alta do departamento ou o ID: %d ou %d", ReturnName(playerid), PlayerData[playerid][pFactionEdit], typeint);
	}
	return ShowPlayerEditFaction(playerid);
}

Dialog:FactionEdit(playerid, response, listitem, inputtext[])
{
	if(response) {

		new string[128];

		switch(listitem)
		{
			case 0: // Name
			{
				format(string, sizeof(string), "Nome da facção: %s", FactionData[PlayerData[playerid][pFactionEdit]][factionName]);
				Dialog_Show(playerid, FactionEdit_Name, DIALOG_STYLE_INPUT, "Editar nome", string, "Alterar", "Voltar");
			}
			case 1: // Color
			{
				format(string, sizeof(string), "Cor da facção: {%06x}CODE\nRGBA 0xFFFFFFAA", FactionData[PlayerData[playerid][pFactionEdit]][factionColor] >>> 8);
				Dialog_Show(playerid, FactionEdit_Color, DIALOG_STYLE_INPUT, "Editar cor", string, "Alterar", "Voltar");
			}
			case 2: // Type
			{
				format(string, sizeof(string), "Tipo da facção: %s\n\nEscolha um número 1: polícia | 2: Noticias | 3: Bombeiros | 4: Governo | 5: Gangue | 6. PCESP", GetFactionTypeName(FactionData[PlayerData[playerid][pFactionEdit]][factionType]));
				Dialog_Show(playerid, FactionEdit_Type, DIALOG_STYLE_INPUT, "Editar tipo", string, "Alterar", "Voltar");
			}
			case 3: // Ranks
			{
				Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
				SetPVarInt(playerid, "EditFromView", 1);
			}
			case 4: // Max rank
			{
				format(string, sizeof(string), "posição máxima da facção: %d\n\nEscolha entre 1-16", FactionData[PlayerData[playerid][pFactionEdit]][factionRanks]);
				Dialog_Show(playerid, FactionEdit_Maxrank, DIALOG_STYLE_INPUT, "Editar posição máxima", string, "Alterar", "Voltar");
			}
		}
	}
	else
	{
	    PlayerData[playerid][pFactionEdit] = -1;
	}
}

stock GetFactionTypeName(type)
{
	new string[32] = "Unknown";

	switch(type)
	{
		case 1: format(string, 32, "polícia");
		case 2: format(string, 32, "Noticias");
		case 3: format(string, 32, "Bombeiros");
		case 4: format(string, 32, "Governo");
		case 5: format(string, 32, "Gangue");
		case 6: format(string, 32, "PCESP");
	}
	return string;
}

/*stock GetFactionTypeName(type)
{
	new string[32] = "Unknown";

	switch(type)
	{
		case 1: format(string, 32, "polícia");
		case 2: format(string, 32, "News");
		case 3: format(string, 32, "Medical");
		case 4: format(string, 32, "Government");
		case 5: format(string, 32, "Gang");
	}
	return string;
}*/

stock ShowPlayerEditFaction(playerid)
{
	if(PlayerData[playerid][pFactionEdit] != -1 && FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
	{
		new caption[64];
		format(caption, sizeof(caption), "edição de facção: %s(%d)", FactionData[PlayerData[playerid][pFactionEdit]][factionName], PlayerData[playerid][pFactionEdit]);
		Dialog_Show(playerid, FactionEdit, DIALOG_STYLE_LIST, caption, "Nome\nCor\nTipo\nPosições\nposição máxima", "Editar", "Fechar");
	}
	return 1;
}

Dialog:AdvertiseDialog(playerid, response, listitem, inputtext[])
{
	if(response) {

		new menu[10], str[512];

		format(menu, 10, "menu %d", listitem);
		new id = GetPVarInt(playerid, menu);

		for(new i=0;i!=MAX_AD_QUEUE;i++) {
		    if(AdvertData[i][ad_id] == id) {
				format(str, sizeof(str), "ID: %d\nAdvert: %s", id, AdvertData[i][ad_text]);
				SetPVarInt(playerid, "contactAD", i);
				SetPVarInt(playerid, "contactID", AdvertData[i][ad_owner]);

				if(AdvertData[i][ad_type]) Dialog_Show(playerid, AdvertiseContact, DIALOG_STYLE_MSGBOX, "Visualização de anúncio", str, "Voltar", "");
				else Dialog_Show(playerid, AdvertiseContact, DIALOG_STYLE_MSGBOX, "Visualização de anúncio", str, "Voltar", "Okay");
				break;
		    }
		}
	}
	return 1;
}


Dialog:AdvertiseContact(playerid, response, listitem, inputtext[])
{
    if(response) {
        cmd_ads(playerid);
    }
    else
    {
        new i = GetPVarInt(playerid, "contactAD");
        if(AdvertData[i][ad_id]) {
            if(IsPlayerConnected(AdvertData[i][ad_owner]) && AdvertData[i][ad_owner] != INVALID_PLAYER_ID && AdvertData[i][ad_owner] == GetPVarInt(playerid, "contactAD"))
            {
            	SendClientMessageEx(AdvertData[i][ad_owner], COLOR_GREEN, "%s Interessado no seu anúncio [PH: %d]", ReturnName(playerid, 0), PlayerData[playerid][pPnumber]);
            }
        }
    }
    DeletePVar(playerid, "contactAD");
    DeletePVar(playerid, "contactID");
    return 1;
}


Dialog:AdvertPost(playerid, response, listitem, inputtext[])
{
    if(response) {

        new id = -1;
		if ((id = Bizz_Nearest(playerid)) != -1)
		{
			if (BizInfo[id][bType] != 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Deve estar numa área para que o seu anúncio possa ser publicado.");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de estoque", 5000, 1);
				return 1;
			}
			if(PlayerData[playerid][pPnumber]) {
				if(!adTick[playerid]) {
					new price, players, params[128];

					GetPVarString(playerid, "AdvertPost", params, 128);

					foreach (new i : Player) if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED)) players++;

					if(PlayerData[playerid][pADPoint] > 2) price = 1500;
					else if(PlayerData[playerid][pADPoint] > 4) price = 2000;
					else if(PlayerData[playerid][pADPoint] > 6) price = 2500;
					else price = 1000;

					price += players * 250;

					if(PlayerData[playerid][pCash] >= price) {

						new exists = -1;

						for(new i=0;i!=MAX_AD_QUEUE;i++) {
							if(!AdvertData[i][ad_id]) {
								exists = i;
								break;
							}
						}

						if(exists != -1 && (!CountPlayerAdvert(playerid) || PlayerData[playerid][pDonateRank])) {

							new
								adText[128], time = gettime();

							AdvertData[exists][ad_time] = 60 * (CountAdvert() + 1);

							mysql_escape_string(params, adText);

							format(szQuery,sizeof(szQuery),"INSERT INTO advertisement (charid, text, time) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], adText, time + AdvertData[exists][ad_time]);
							mysql_query(dbCon, szQuery);

							new insertid = cache_insert_id();

							AdvertData[exists][ad_id] = insertid;
							AdvertData[exists][ad_owner] = playerid;
							format(AdvertData[exists][ad_text], 128, "%s", params);
							AdvertData[exists][ad_type] = 0;

							SendClientMessage(playerid, COLOR_WHITE, "O seu anúncio está na fila de espera (/ads)");

							SendAdminAlert(COLOR_YELLOW, "[ID:%d] %s conseguir anúncio atrasados de /ad (%d)", playerid, ReturnName(playerid), price);

							PlayerData[playerid][pCash] -= price;
							PlayerData[playerid][pADPoint]++;

							if(PlayerData[playerid][pDonateRank]>1) adTick[playerid] = 30;
							else adTick[playerid] = 60;

							BizInfo[id][bProducts]--;
							BizInfo[id][bTill] += floatround(price*0.7);
							UpdateBizInfo(id);

							Log_Write("logs/biz.txt", "[%s] %s: pagar R$%d para anunciar %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, id, BizInfo[id][bID]);
						} else SendClientMessage(playerid, COLOR_GRAD1, "Fila completa ou o seu anúncio está na fila, por favor tente novamente mais tarde.");
					} else SendClientMessage(playerid, COLOR_GRAD1, "Você não possui dinheiro suficiente para anunciar.");
				} else SendClientMessageEx(playerid, COLOR_GRAD1, "Você tem que esperar %d segundos para publicação de anúncios.", adTick[playerid]);
			} else SendClientMessage(playerid, COLOR_GREY, "Você não possui um número de telefone, logo não poderia enviar o anúncio.");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar na área de anúncios para anunciar.");
    }
    DeletePVar(playerid, "AdvertPost");
    return 1;
}

Dialog:CompanyAdvertPost(playerid, response, listitem, inputtext[])
{
    if(response) {

        new id = -1;
		if ((id = Bizz_Nearest(playerid)) != -1)
		{
			if (BizInfo[id][bType] != 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar na área de anúncios para anunciar.");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de estoque", 5000, 1);
				return 1;
			}
			if(PlayerData[playerid][pPnumber]) {
				if(!adTick[playerid]) {
					new price, players, params[128];

					GetPVarString(playerid, "AdvertPost", params, 128);

					foreach (new i : Player) if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED)) players++;
					price = 5000 + players * 500;

					if(PlayerData[playerid][pCash] >= price) {

						new exists = -1;

						for(new i=0;i!=MAX_AD_QUEUE;i++) {
							if(!AdvertData[i][ad_id]) {
								exists = i;
								break;
							}
						}

						if(exists != -1 && (!CountPlayerAdvert(playerid) || PlayerData[playerid][pDonateRank])) {

							new
								adText[128], time = gettime();

							AdvertData[exists][ad_time] = 60 * (CountAdvert() + 1);

							mysql_escape_string(params, adText);

							format(szQuery,sizeof(szQuery),"INSERT INTO advertisement (charid, text, time) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], adText, time + AdvertData[exists][ad_time]);
							mysql_query(dbCon, szQuery);

							new insertid = cache_insert_id();

							AdvertData[exists][ad_id] = insertid;
							AdvertData[exists][ad_owner] = playerid;
							format(AdvertData[exists][ad_text], 128, "%s", params);
							AdvertData[exists][ad_type] = 1;

							SendClientMessage(playerid, COLOR_WHITE, "Seu anúncio está na fila (/ads)");

							SendAdminAlert(COLOR_YELLOW, "[ID:%d] %s anúncios atrasados do /cad (%d)", playerid, ReturnName(playerid), price);

							PlayerData[playerid][pCash] -= price;
							PlayerData[playerid][pADPoint]++;

							if(PlayerData[playerid][pDonateRank]>1) adTick[playerid] = 30;
							else adTick[playerid] = 60;

							BizInfo[id][bProducts]--;
							BizInfo[id][bTill] += floatround(price*0.7);
							UpdateBizInfo(id);

							Log_Write("logs/biz.txt", "[%s] %s: pagou R$%d para anúncio de empresa %d (SID:%d)", ReturnDate(), ReturnName(playerid, 0), price, id, BizInfo[id][bID]);
						} else SendClientMessage(playerid, COLOR_GRAD1, "Fila completa ou seu anúncio está na fila, por favor tente novamente mais tarde.");
					} else SendClientMessage(playerid, COLOR_GRAD1, "Você não possui dinheiro suficiente para anunciar");
				} else SendClientMessageEx(playerid, COLOR_GRAD1, "Você tem que esperar %d segundos para publicação de anúncios.", adTick[playerid]);
			} else SendClientMessage(playerid, COLOR_GREY, "Você não possui um número de telefone, logo não poderia enviar o anúncio.");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar na área de anúncios para anunciar.");
    }
    DeletePVar(playerid, "AdvertPost");
    return 1;
}

Dialog:FactionsList(playerid, response, listitem, inputtext[])
{
	if(response) {

		new menu[10];
		//Navigate
		if(listitem != 0 && listitem != 11) {
			new str_biz[8];
			format(str_biz, 10, "menu%d", listitem);

			PlayerData[playerid][pFactionEdit] = GetPVarInt(playerid, str_biz);
			ShowPlayerEditFaction(playerid);
			return true;
		}

		new currentPage = GetPVarInt(playerid, "page");
		if(!listitem) if(currentPage>1) currentPage--;
		else if(listitem == 11) currentPage++;

		new string[1024], count;
		format(string, sizeof(string), "%s{B4B5B7}página %d{FFFFFF}\n", string, (currentPage==1) ? 1 : currentPage-1);

		SetPVarInt(playerid, "page", currentPage);

		new skipitem = (currentPage-1) * 10;

		for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {

			if(skipitem)
			{
				skipitem--;
				continue;
			}
			if(count == 10)
			{
				format(string, sizeof(string), "%s{B4B5B7}página 2{FFFFFF}\n", string);
				break;
			}
			format(menu, 10, "menu %d", ++count);
			SetPVarInt(playerid, menu, i);
			format(string, sizeof(string), "%s{FFFFFF}facção ({FFBF00}%i{FFFFFF}) | %s\n", string, i, FactionData[i][factionName]);

		}

		Dialog_Show(playerid, FactionsList, DIALOG_STYLE_LIST, "Lista de Facções", string, "Editar", "Voltar");
	}
	return 1;
}

Dialog:TruckerPDA(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
		    case 0: {
				ShowAllIndustry(playerid);
		    }
		    case 1: {
				new string[1024], menu[10], count;

				format(string, sizeof(string), " \t \t \t \n");
				format(string, sizeof(string), "%s{A4D247}página 1{FFFFFF}\t\t\t\n", string);

				SetPVarInt(playerid, "page", 1);

				foreach(new i : sv_business)
				{
					if(BizInfo[i][bPriceProd] && GetBusinessCargoCanBuy(i) && GetProductCargo(BizInfo[i][bType]) != -1)
					{
						if(count == 10)
						{
							format(string, sizeof(string), "%s{A4D247}página 2{FFFFFF}\t\t\t\n", string);
							break;
						}
						format(menu, 10, "menu%d", ++count);
						SetPVarInt(playerid, menu, i);
						format(string, sizeof(string), "%s%s\t%s / Unidade\tPreso: %d %s\t%s\n", string, g_arrIndItemNames[GetProductCargo(BizInfo[i][bType])], FormatNumber(BizInfo[i][bPriceProd]), GetBusinessCargoCanBuy(i), ReturnCargoUnits(GetProductCargo(BizInfo[i][bType])), ClearGameTextColor(BizInfo[i][bInfo]));
					}

				}
				if(!count) Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Trucker PDA - Empresas", "Nenhuma empresa precisa de produtos.", "Ok", "");
				else Dialog_Show(playerid, TruckerPDABusiness, DIALOG_STYLE_TABLIST_HEADERS, "Trucker PDA - Empresas", string, "Navegar", "Voltar");
		    }
		    case 2: {
				ShowCargoShip(playerid);
		    }
		}
	}
	return 1;
}

Dialog:TruckerPDADetail(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    ShowIndustry(playerid, listitem + 1);
	}
	else Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Trucker PDA", "{B4B5B7}Exibir{FFFFFF}Todas as industrias\n{B4B5B7}Exibir{FFFFFF}Empresas recebendo\n{B4B5B7}Exibir{FFFFFF}informações sobre o navio", "Selecionar", "Fechar");

	return 1;
}

Dialog:TruckerPDAProcess(playerid, response, listitem, inputtext[])
{
    new industryid = GetPVarInt(playerid, "IndustrySelected");
	if(response)
	{
        new string[1500], menu[10], count;
		foreach(new i : sv_industry)
		{
		    if(StorageData[i][in_id] && StorageData[i][in_industryid] == industryid) {

		        format(menu, 10, "menu%d", count);
		        SetPVarInt(playerid, menu, i);

				format(string, sizeof(string), "%s{B4B5B7}Tipo {A4D247}%s{B4B5B7} ("EMBED_WHITE"%s{B4B5B7},"EMBED_WHITE"$%d{B4B5B7}/Uni, "EMBED_WHITE"%d{B4B5B7} / %d)\n", string, g_arrIndItemNames[StorageData[i][in_item]], (StorageData[i][in_trading_type]) ? ("Comprando"):("Vendendo"), StorageData[i][in_price], StorageData[i][in_stock], StorageData[i][in_maximum]);
                count++;
			}
		}
		//printf("navigate %d", strlen(string));
		Dialog_Show(playerid, TruckerPDANavigate, DIALOG_STYLE_LIST, "Navegação de industrias", string, "Navegar", "Voltar");
	}
	else {
	    if(!industryid) Dialog_Show(playerid, TruckerPDA, DIALOG_STYLE_LIST, "Caminhoneiro PDA", "{B4B5B7}Exibir"EMBED_WHITE"Todas industrias\n{B4B5B7}Exibir"EMBED_WHITE"Empresas Recebendo\n{B4B5B7}Exibir"EMBED_WHITE"informações do navio", "Selecionar", "Sair");
	    else ShowAllIndustry(playerid);
	}
	return 1;
}


Dialog:TruckerPDABusiness(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new menu[10];
		//Navigate
		if(listitem != 0 && listitem != 11) {
			new str_biz[8];
			format(str_biz, 10, "menu %d", listitem);
			new bizid = GetPVarInt(playerid, str_biz);
			SetPlayerRaceCheckpointEx(playerid, 1, RCHECKPOINT_TRUCKER, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ]);
			//SetPlayerCheckpointEx(playerid, 1, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ], 5.0, RCHECKPOINT_TRUCKER);
			//SetPlayerCheckpoint(playerid, BizInfo[bizid][bEntranceX], BizInfo[bizid][bEntranceY], BizInfo[bizid][bEntranceZ], 3.0);
			return true;
		}
		new currentPage = GetPVarInt(playerid, "page");
		// Previous Page
		if(!listitem) if(currentPage>1) currentPage--;
		// Next Page
		else if(listitem == 11) currentPage++;

		new string[1024], count;

		format(string, sizeof(string), " \t \t \t \n");
		format(string, sizeof(string), "%s{A4D247}página %d{FFFFFF}\t\t\t\n", string, (currentPage==1) ? 1 : currentPage-1);

		SetPVarInt(playerid, "page", currentPage);

		new skipitem = (currentPage-1) * 10;
		foreach(new i : sv_business)
		{
			if(BizInfo[i][bPriceProd] && GetBusinessCargoCanBuy(i))
			{
				if(skipitem)
				{
					skipitem--;
					continue;
				}

				if(count == 10)
				{
					format(string, sizeof(string), "%s{A4D247}página %d{FFFFFF}\t\t\t\n", string, currentPage+1);
					break;
				}
				format(menu, 10, "menu %d", ++count);
				SetPVarInt(playerid, menu, i);
				format(string, sizeof(string), "%s%s\t%s / unidade\tProcura-se: %d %s\t%s\n", string, g_arrIndItemNames[GetProductCargo(BizInfo[i][bType])], FormatNumber(BizInfo[i][bPriceProd]), GetBusinessCargoCanBuy(i), ReturnCargoUnits(GetProductCargo(BizInfo[i][bType])), ClearGameTextColor(BizInfo[i][bInfo]));
			}
		}
		Dialog_Show(playerid, TruckerPDABusiness, DIALOG_STYLE_TABLIST_HEADERS, "Trucker PDA - Empresas", string, "Navegar", "Voltar");
	}
	return 1;
}

Dialog:TruckerPDANavigate(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new menu[10], storageid;
	    format(menu, 10, "menu%d", listitem);
	    storageid = GetPVarInt(playerid, menu);

		SetPlayerRaceCheckpointEx(playerid, 1, RCHECKPOINT_TRUCKER, StorageData[storageid][in_posx], StorageData[storageid][in_posy], StorageData[storageid][in_posz]);
		//SetPlayerCheckpointEx(playerid, 1, StorageData[storageid][in_posx], StorageData[storageid][in_posy], StorageData[storageid][in_posz], 5.0, RCHECKPOINT_TRUCKER);
		//etPlayerCheckpoint(playerid, StorageData[storageid][in_posx], StorageData[storageid][in_posy], StorageData[storageid][in_posz], 3.0);

		//SendClientMessage(playerid, -1, "%d", storageid);
	}
	else {

		new industryid = GetPVarInt(playerid, "IndustrySelected");

		if(industryid) ShowIndustry(playerid, GetPVarInt(playerid, "IndustrySelected"));
		else ShowCargoShip(playerid);
	}
	return 1;
}

stock SetPlayerHealthEx(playerid, Float:hp)
{
	if(hp <= 30) SetPlayerWeaponSkill(playerid, NORMAL_SKILL);
 	else if(hp <= 40) SetPlayerWeaponSkill(playerid, MEDIUM_SKILL);
	else SetPlayerWeaponSkill(playerid, FULL_SKILL);

	PlayerData[playerid][pHealth] = hp;
	return SetPlayerHealth(playerid, hp);
}

stock SetPlayerRaceCheckpointEx(playerid, cptype, missiontype, Float:X, Float:Y, Float:Z)
{
	switch(missiontype)
	{
	    case RCHECKPOINT_TRUCKER: SendClientMessage(playerid, COLOR_WHITE, "Navegação! (Se nenhum checkpoint for usado /atualizarmissao)");
	    case RCHECKPOINT_TRUCKERJOB: SendClientMessage(playerid, COLOR_WHITE, "Siga o checkpoint até a industria de caminhões (Se nenhum checkpoint for usado /atualizarmissao)");
	}

	// Checkpoint Mission
    PlayerData[playerid][pCP_Type] = missiontype;
    PlayerData[playerid][pCP_X] = X;
    PlayerData[playerid][pCP_Y] = Y;
    PlayerData[playerid][pCP_Z] = Z;

	SetPlayerRaceCheckpoint(playerid, cptype, X, Y, Z, 0.0, 0.0, 0.0, 3.5);
	return 1;
}


stock SetPlayerCheckpointEx(playerid, Float:x, Float:y, Float:z, Float:distance, status, value = -1)
{
	gPlayerCheckpointX[playerid]=x;
	gPlayerCheckpointY[playerid]=y;
	gPlayerCheckpointZ[playerid]=z;

 	gPlayerCheckpointValue[playerid]=value;
    gPlayerCheckpointStatus[playerid]=status;

    SetPlayerCheckpoint(playerid, x, y, z, distance);
	return 1;
}

CMD:atualizarmissao(playerid)
{
	new bool:debugger;
	if(gPlayerCheckpointStatus[playerid] != CHECKPOINT_NONE)
	{
	    switch(gPlayerCheckpointStatus[playerid])
	    {
	        case CHECKPOINT_FARMER: {
	            SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 5.0);
                debugger = true;
			}
	        case CHECKPOINT_GOFISHING: {
	            SetPlayerCheckpoint(playerid, gPlayerCheckpointX[playerid], gPlayerCheckpointY[playerid], gPlayerCheckpointZ[playerid], 30.0);
                debugger = true;
			}
	    }
	}

	if(PlayerData[playerid][pCP_Type] != -1)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "O checkpoint foi atualizado! (Caso Você não veja nada, tente usar /removecp e /atualizarmissao)");
	    SetPlayerRaceCheckpoint(playerid, 1, PlayerData[playerid][pCP_X], PlayerData[playerid][pCP_Y], PlayerData[playerid][pCP_Z], 0.0, 0.0, 0.0, 3.5);
        debugger = true;
	}

	if(!debugger) SendClientMessage(playerid, COLOR_WHITE, "Sem checkpoint de caminhão para atualização");

	return 1;
}

CMD:removercp(playerid)
{
    DisablePlayerCheckpoint(playerid);
    DisablePlayerRaceCheckpoint(playerid);
	return 1;
}


ShowIndustry(playerid, industryid)
{
	static string[900];
	format(string, sizeof(string),
	""EMBED_WHITE"Seja bem vindo a %s"EMBED_WHITE"!\n\nA insdustria é atualmente %s\n\n{A4D247}Para venda:\n{B4B5B7}Produto\t\tPreço\tProdução/Hora\tEm estoque(Tamanho de armazenamento)\n",
	g_arrIndustryNames[industryid],
	(IndustryData[industryid][in_close]) ? ("{CD324D}Fechado") : ("{A4D247}Aberto"));

	foreach(new i : sv_industry) if(StorageData[i][in_id] && !StorageData[i][in_trading_type] && StorageData[i][in_industryid] == industryid) //For Sale
	{
	    new type = IndustryData[industryid][in_type];

		if(type == 2) continue;

		if(type == 0)
	    {
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s $%d\t+%d\t\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) <= 9) ? ("\t\t"):("\t"),
			StorageData[i][in_price],
			StorageData[i][in_consumption],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
		}
		else
		{
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s R$%d\t+%d {B4B5B7}por recurso"EMBED_WHITE"\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) <= 9 ? ("\t\t"):("\t")),
			StorageData[i][in_price],
			StorageData[i][in_consumption],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
	    }
	}

	format(string, sizeof(string),
	"%s\n{A4D247}Procura-se:\n{B4B5B7}Produto\t\tPreço\tProdução/Hora\tEm estoque(tamanho de armazenamento.)\n",
	string);

	foreach(new i : sv_industry) if(StorageData[i][in_id] && StorageData[i][in_trading_type] && StorageData[i][in_industryid] == industryid) //Wanted
	{
	    new type = IndustryData[industryid][in_type];

	    if(type == 0)
	    {
			format(string, sizeof(string), "%s{B4B5B7}está a uma industria primaria e não precisa de recursos.", string);
			break;
		}
		else
		{
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s $%d\t-%d {B4B5B7}Unidades"EMBED_WHITE"\t\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) <= 9) ? ("\t\t"):("\t"),
			StorageData[i][in_price],
			StorageData[i][in_consumption],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
	    }
	}
	SetPVarInt(playerid, "IndustrySelected", industryid);
	// printf("%d", strlen(string));
    Dialog_Show(playerid, TruckerPDAProcess, DIALOG_STYLE_MSGBOX, g_arrIndustryNames[industryid], string, "Prosseguir", "Sair" );
}

ShowCargoShip(playerid)
{
	new string[1500];
	format(string, sizeof(string),
	""EMBED_WHITE"Bem vindo ao{A4D247}Návio"EMBED_WHITE"!\n\está Industria está atualmente %s"EMBED_WHITE"\n\nOs tempos a seguir São aproximados, não exatos!\n\n",
	(IndustryData[0][in_close]) ? ("{CD324D}fechada") : ("{A4D247}aberta."));

	new gShipHour, gShipMinute, gShipSecond;

	if(IndustryData[0][in_close])
	{
	    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);

	    format(string, sizeof(string), "%s O Návio chegara por voltas das:\t%02d:%02d:%02d\n\n", string, gShipHour, gShipMinute, gShipSecond);
	}
	else
	{
	    TimestampToTime(gShipTime, gShipHour, gShipMinute, gShipSecond);

	    format(string, sizeof(string), "%s O Návio chega por volta das:\t%02d:%02d:%02d\n", string, gShipHour, gShipMinute, gShipSecond);

        TimestampToTime(gShipTime + 2440, gShipHour, gShipMinute, gShipSecond);
		format(string, sizeof(string), "%s O Návio deve partir por volta das:\t%02d:%02d:%02d\n", string, gShipHour, gShipMinute, gShipSecond);

	    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);
	    format(string, sizeof(string), "%s Próxima chegada as:\t%02d:%02d:%02d\n\n", string, gShipHour, gShipMinute, gShipSecond);
	}


	format(string, sizeof(string), "%s {A4D247}Para venda:\n{B4B5B7}O Navio não vende nada, apenas compra cargas de São Paulo\n", string);


	format(string, sizeof(string),
	"%s\n{A4D247}Procura-se:\n{B4B5B7}Produto\t\tpreço\t\tEm estoque (tamanho de armazenamento)\n",
	string);

	foreach(new i : sv_industry) if(StorageData[i][in_id] && StorageData[i][in_trading_type] && StorageData[i][in_industryid] == 0) //Wanted
	{
			format(string, sizeof(string),
			"%s"EMBED_WHITE"%s%s R$ %d\t\t%d %s {B4B5B7}(%d)\n",
			string,
			g_arrIndItemNames[StorageData[i][in_item]],
			(strlen(g_arrIndItemNames[StorageData[i][in_item]]) < 13) ? ("\t\t"):("\t"),
			StorageData[i][in_price],
			StorageData[i][in_stock],
			ReturnCargoUnits(StorageData[i][in_item]),
			StorageData[i][in_maximum]);
	}
	SetPVarInt(playerid, "IndustrySelected", 0);
	////printf("Ship %d", strlen(string));
    Dialog_Show(playerid, TruckerPDAProcess, DIALOG_STYLE_MSGBOX, "Návio", string, "Prosseguir", "Sair" );
	return 1;
}


stock ShowAllIndustry(playerid)
{
    new string[1900];
	for(new i=1;i!=sizeof(g_arrIndustryNames);i++) format(string, sizeof(string), "%s%s {B4B5B7}(%s,%s)\n", string, g_arrIndustryNames[i], GetIndustryType(i), (IndustryData[i][in_close]) ? ("{CD324D}fechado{B4B5B7}") : ("{A4D247}aberto{B4B5B7}"));
	Dialog_Show(playerid, TruckerPDADetail, DIALOG_STYLE_LIST, "Trucker PDA - Empresas", string, "Selecionar", "Voltar");
}

stock GetIndustryType(id)
{
	new type[16];

	switch(IndustryData[id][in_type])
	{
	    case 0: format(type, 16, "Primaria");
	    case 1: format(type, 16, "Secundária");
	    case 2: format(type, 16, "Especial");
	}
	return type;
}

/*stock GetIndustryType(id)
{
	new type[16];

	switch(IndustryData[id][in_type])
	{
	    case 0: format(type, 16, "primary");
	    case 1: format(type, 16, "secondary");
	    case 2: format(type, 16, "special");
	}
	return type;
}*/

/*stock GetIndustryStatus(industryid)
{
	return "open";
}*/


/*stock IsVehicleRangeOfPoint(vehicleid,Float:range,Float:x,Float:y,Float:z)
{
    if(vehicleid == INVALID_VEHICLE_ID) return 0;

    new Float:DistanceaCar = GetVehicleDistanceFromPoint(vehicleid, x, y, z);

    if(DistanceaCar <= range) return 1;
    return 0;
}*/

stock IsJobSide(jobid)
{
	if(jobid == JOB_NONE || jobid == JOB_MECHANIC) return 1;
	return 0;
}

stock ReturnJobName(playerid, jobid)
{
	new name[32];

	switch(jobid)
	{
	    case JOB_NONE: format(name, 32, "Desempregado");
	    case JOB_FARMER: format(name, 32, "Agricultor");
	    case JOB_TRUCKER: {
			switch(PlayerData[playerid][pJobRank])
			{
			    case 0: format(name, 32, "Entregador aprendiz");
			    case 1: format(name, 32, "Entregador");
			    case 2: format(name, 32, "Entregador Profissional");
			    case 3: format(name, 32, "Caminhoneiro aprendiz");
			    case 4: format(name, 32, "Caminhoneiro");
			    case 5: format(name, 32, "Caminhoneiro Profissional");
			}
	    }
	    case JOB_MECHANIC: format(name, 32, "mecanico");
	    case JOB_TAXI: format(name, 32, "Taxista");
	    case JOB_WPDEALER: format(name, 32, "Vendedor de armas");
	    case JOB_SUPPLIER: format(name, 32, "Fornecedor de armas");

	    default: format(name, 32, "Desempregado");
	}
	return name;
}

/*CMD:editship(playerid)
{
	return EditObject(playerid, gMainShipObjectId);
}*/

/*CMD:shipcoord(playerid)
{
	new
		Float:x,
		Float:y,
		Float:z,
		Float:rx,
		Float:ry,
		Float:rz
	;

	GetObjectPos(gMainShipObjectId, x, y, z);
	GetObjectRot(gMainShipObjectId, rx, ry, rz);
    printf("%f, %f, %f, %f, %f, %f", x, y, z, rx, ry, rz);
    return 1;
}*/


// CARGO SHIP

forward StartMovingTimer();
public StartMovingTimer()
{
	MoveObject(gMainShipObjectId,gShipRoutePoints[gShipCurrentPoint][0],
	                           gShipRoutePoints[gShipCurrentPoint][1],
							   gShipRoutePoints[gShipCurrentPoint][2],
							   SPEED_CARGOSHIP / 2, // slower for the first route
							   gShipRoutePoints[gShipCurrentPoint][3],
							   gShipRoutePoints[gShipCurrentPoint][4],
							   gShipRoutePoints[gShipCurrentPoint][5]);
}

//-------------------------------------------------

public OnDynamicObjectMoved(objectid)
{
	if(objectid == gShipRamp1)
	{
	    if(gShipDeparture) {

			StartMovingTimer();

            /*new gShipHour, gShipMinute, gShipSecond;
	        TimestampToTime(gShipTime, gShipHour, gShipMinute, gShipSecond);
			format(szString, sizeof(szString), "Arrival: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);*/
			SetDynamicObjectMaterialText(gShipTextLine1, 0, "Navio das Docas", OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);
   			SetDynamicObjectMaterialText(gShipTextLine2, 0, "", OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

			IndustryData[0][in_close] = 1;
			foreach(new i : sv_industry) if(StorageData[i][in_industryid] == 0) UpdateStorage(i);
		}
		else
		{
			IndustryData[0][in_close] = 0;
			foreach(new i : sv_industry) if(StorageData[i][in_industryid] == 0)
			{
			    StorageData[i][in_stock]=0;
				UpdateStorage(i);
			}
		}
	}
	return 1;
}


public OnObjectMoved(objectid)
{
	if(objectid == gMainShipObjectId) {
	/*if(gShipCurrentPoint > 0 && !(gShipCurrentPoint % 2)) {
	    // play some seagulls audio every 5 points
		PlaySoundForPlayersInRange(6200, 200.0, gShipRoutePoints[gShipCurrentPoint][0],
						gShipRoutePoints[gShipCurrentPoint][1],
						gShipRoutePoints[gShipCurrentPoint][2]);
	}*/
    gShipCurrentPoint++;

    if(gShipCurrentPoint == NUM_SHIP_ROUTE_POINTS) {
		gShipCurrentPoint = 0;

   		MoveObject(gMainShipObjectId,gShipRoutePoints[gShipCurrentPoint][0],
	                           gShipRoutePoints[gShipCurrentPoint][1],
							   gShipRoutePoints[gShipCurrentPoint][2],
							   SPEED_CARGOSHIP / 5, // slower for the last route
							   gShipRoutePoints[gShipCurrentPoint][3],
							   gShipRoutePoints[gShipCurrentPoint][4],
							   gShipRoutePoints[gShipCurrentPoint][5]);
        return 1;
	}

	if(gShipCurrentPoint == 1) {

        gShipDeparture = false;
		MoveDynamicObject(gShipRamp1,2810.9445, -2387.2998, 12.6255, 0.01, -20.4000, 0.0000, -90.3000);
		MoveDynamicObject(gShipRamp2,2810.6875, -2436.9775, 12.6250, 0.01, -20.4000, 0.0000, -90.3000);

        SetTimer("RampsClosed",2400000, 0); // 2400000

	    gShipTime = gettime();

	 	new gShipHour, gShipMinute, gShipSecond;
	    TimestampToTime(gShipTime + 2440, gShipHour, gShipMinute, gShipSecond);
		format(szString, sizeof(szString), "Partida: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
		SetDynamicObjectMaterialText(gShipTextLine2, 0, szString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);

	    TimestampToTime(gShipTime + 2740, gShipHour, gShipMinute, gShipSecond);
		format(szString, sizeof(szString), "Próxima chegada: %02d:%02d:%02d", gShipHour, gShipMinute, gShipSecond);
		SetDynamicObjectMaterialText(gShipTextLine3, 0, szString, OBJECT_MATERIAL_SIZE_256x256, "Arial", 16, 1, 0xFFFFFFFF, 0, 1);
		return 1;
	}

	/*
    new tempdebug[256+1];
    format(tempdebug,256,"The ship is at route: %d", gShipCurrentPoint);
    SendClientMessageToAll(0xFFFFFFFF,tempdebug);*/

    MoveObject(gMainShipObjectId,gShipRoutePoints[gShipCurrentPoint][0],
	                           gShipRoutePoints[gShipCurrentPoint][1],
							   gShipRoutePoints[gShipCurrentPoint][2],
							   SPEED_CARGOSHIP / 2,
							   gShipRoutePoints[gShipCurrentPoint][3],
							   gShipRoutePoints[gShipCurrentPoint][4],
							   gShipRoutePoints[gShipCurrentPoint][5]);
	}
 	return 1;
}


forward RampsClosed();
public RampsClosed()
{
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 100.0, 2809.9849,-2391.3201,13.6282) || IsPlayerInRangeOfPoint(i, 30.0, 2810.5256,-2440.7012,13.6328))
	    {
	        SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");
			SendClientMessage(i, COLOR_LIGHTRED, "ATENÇÃO! O navio está prestes a partir novamente em 40 segundos! A ponte fechará em 20 segundos!");
            SendClientMessage(i, COLOR_WHITE, "Se Você decidir ficar no navio, não pule enquanto ele estiver em movimento. Ele poderia mata-lo");
            SendClientMessage(i, COLOR_WHITE, "\"não se sente em nenhum veículo enquanto o barco está em movimento!\"");
            SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");

            GameTextForPlayer(i, "~r~attention!~n~~w~partida de navios~n~in 40 seconds!", 5000, 1);
		}
	}
	SetTimer("RampsClosing",20000, 0);
}

forward RampsClosing();
public RampsClosing()
{
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, 100.0, 2809.9849,-2391.3201,13.6282) || IsPlayerInRangeOfPoint(i, 30.0, 2810.5256,-2440.7012,13.6328))
	    {
	        SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");
			SendClientMessage(i, COLOR_LIGHTRED, "ATENÇÃO! O navio está prestes a partir novamente em 20 segundos! A ponte está fechada!");
            SendClientMessage(i, COLOR_WHITE, "Se Você decidir ficar no navio, não pule enquanto ele estiver em movimento. Ele poderia mata-lo.");
            SendClientMessage(i, COLOR_WHITE, "\"Do not sit on any vehicle while the boat is moving!\"");
            SendClientMessage(i, COLOR_GRAD1, "___________________________________________________________________________________");
            GameTextForPlayer(i, "~r~attention!~n~~w~partida de navios~n~in 20 seconds!", 5000, 1);
		}
	}
	gShipDeparture = true;
	MoveDynamicObject(gShipRamp1,2810.9445, -2387.2998, 12.6255-0.1, 0.01, 49.6999, 0.0000, -90.3000);
	MoveDynamicObject(gShipRamp2,2810.6875, -2436.9775, 12.6250-0.1, 0.01, 49.6999, 0.0000, -90.3000);

	//StartMovingTimer();
}

stock PutPlayerSettingVehicle(playerid, model, price)
{
	if(PlayerData[playerid][pPCarkey] != 9999) return SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Você não pode mais spawnar veículos agora.");
	if(PlayerData[playerid][pCash] < price) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui dinheiro suficiente para comprar");
	//if(PlayerData[playerid][pDonateRank] < IsDonateCar(model)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Somenta para jogadores VIP.");

	if(PlayerData[playerid][pAdmin] < 1338 && IsCopCar(model)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve ser um administrador para comprar este tipo de veiculo.");
	//if(GetFactionType(playerid) != FACTION_SASD && PlayerData[playerid][pFactionRank] == 1 && IsCopCar(model)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não faz parte desta facção de veículo.");
    if(PlayerData[playerid][pAdmin] < 1338 && IsMedicCar(model)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve ser um administrador para comprar este tipo de veiculo.");

	new id = -1;

	if ((id = Bizz_Nearest(playerid)) != -1 && BizInfo[id][bType] == 4)
	{
        new Float:Vx, Float:Vy, Float:Vz, Float:Va, Float:xdist, Float:ydist, Float:zdist, Float:dist;

	    if(VDealerSelectCatalog[playerid] == 13)
	    {
			if(BizInfo[id][bBuyingBoatX] == 0 && BizInfo[id][bBuyingBoatY] == 0 && BizInfo[id][bBuyingBoatZ] == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "A concessionaria não definiu a posição deste veículo.");

            Vx = BizInfo[id][bBuyingBoatX];
            Vy = BizInfo[id][bBuyingBoatY];
            Vz = BizInfo[id][bBuyingBoatZ];
            Va = BizInfo[id][bBuyingBoatA];


	        dist = 6.5;
			xdist = 0.014912;
			ydist = 3.6;
			zdist = 0.004;
	    }
	    else if(VDealerSelectCatalog[playerid] == 0 || VDealerSelectCatalog[playerid] == 1)
	    {
			if(BizInfo[id][bBuyingAirX] == 0 && BizInfo[id][bBuyingAirY] == 0 && BizInfo[id][bBuyingAirZ] == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "A concessionaria não definiu a posição deste veículo.");

            Vx = BizInfo[id][bBuyingAirX];
            Vy = BizInfo[id][bBuyingAirY];
            Vz = BizInfo[id][bBuyingAirZ];
            Va = BizInfo[id][bBuyingAirA];

	        dist = 0;
			xdist = 0.003728;
			ydist = 1.8;
			zdist = 0.002;
	    }
	    else
		{
			if(BizInfo[id][bBuyingCarX] == 0 && BizInfo[id][bBuyingCarY] == 0 && BizInfo[id][bBuyingCarZ] == 0)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "A concessionaria não definiu a posição deste veículo.");

            Vx = BizInfo[id][bBuyingCarX];
            Vy = BizInfo[id][bBuyingCarY];
            Vz = BizInfo[id][bBuyingCarZ];
            Va = BizInfo[id][bBuyingCarA];

			dist = 0;
			xdist = 0.003728;
			ydist = 1.8;
			zdist = 0.002;
		}

     	VDealerColor[playerid][0] = random(255);
       	VDealerColor[playerid][1] = random(255);

		VDealerVehicle[playerid] = CreateVehicle(model, Vx,Vy,Vz,Va, VDealerColor[playerid][0], VDealerColor[playerid][1], -1);

		if (VDealerVehicle[playerid] != INVALID_VEHICLE_ID)
		{
		    VDealerBiz[playerid] = id;
		    VDealerSetting{playerid} = true;
		    PutPlayerInVehicle(playerid, VDealerVehicle[playerid], 0);

		    new Float:X, Float:Y, Float:Z, Float:vX, Float:vY, Float:vZ;

		    TogglePlayerControllable(playerid, 0);

            GetVehicleHood(VDealerVehicle[playerid], X, Y, Z);
			//GetPosInFrontOfVehicle(VDealerVehicle[playerid], X, Y, dist);
			GetVehiclePos(VDealerVehicle[playerid],vX,vY,vZ);

			//printf("%f %f %f", X, Y, Z);
			InterpolateCameraPos(playerid, BizInfo[id][bEntranceX], BizInfo[id][bEntranceY], BizInfo[id][bEntranceZ], X + (X * xdist),Y + ydist, Z + (Z * zdist) + dist, 1500, 1);
			InterpolateCameraLookAt(playerid, BizInfo[id][bEntranceX], BizInfo[id][bEntranceY], BizInfo[id][bEntranceZ], vX,vY,vZ, 1300, 1);

			ResetVehicle(VDealerVehicle[playerid]);
			VDealerLock[playerid]=0;
			VDealerImmob[playerid]=0;
			VDealerAlarm[playerid]=0;
			VDealerXM[playerid]=0;
			VDealerPrice[playerid]=price;


			ShowPlayerDealercarDialog(playerid);
		}

    }
	return 1;
}

ShowPlayerDealercarDialog(playerid)
{
	new model = GetVehicleModel(VDealerVehicle[playerid]);
	new price = VDealerPrice[playerid];

	new string[64];
	format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));

	new string2[1024];
	format(string2, sizeof(string2), "{FFFF00}Valor:\t\t\t{FFFFFF}%s\n{FFFF00}Velocidade máxima:\t\t{FFFFFF}%.2f\n{FFFF00}Estado:\t\t{FFFFFF}%.2f\n{FFFF00}Massa:\t\t\t{FFFFFF}%.2f\n\n{FFFF00}Motor:\t\t{FFFFFF}%s\n{FFFF00}Consumo:\t\t{FFFFFF}%s\n{FFFF00}Capacidade de combustivel:\t\t{FFFFFF}%.2f\n",
	FormatNumber(price), GetVehicleModelInfoAsFloat(model, "TransmissionData_fMaxVelocity"), VehicleData[model - 400][c_maxhp], GetVehicleModelInfoAsFloat(model, "fMass"), GetEngineDrive(model), GetVehicleConsumption(model), GetVehicleDataFuel(model));

	if(VDealerLock[playerid])
	{
	    new id = VDealerLock[playerid]-1;
		format(string2, sizeof(string2), "%s\n{FFFF00}Fechadura:\t\t{B4B5B7} nível %d\t{FFFFFF}%s", string2,
		VDealerLock[playerid] + 1, FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[id][u_rate]) + VehicleUpgradeLock[id][u_price]));

		switch(VDealerLock[playerid])
		{
		    case 1: {
		        format(string2, sizeof(string2), "%s\n\t{33AA33}+{FFFFFF}500 segundos de proteção\n\tcontra qualquer metodo de invaSão.\n\t{33AA33}+{FFFFFF}Carcaça mais forte- melhora sua defesa contra\n\tviolação de ataque físico. -mão & Corpo a Corpo", string2);
		    }
		    case 2: {
		        format(string2, sizeof(string2), "%s\n\t{33AA33}+{FFFFFF}750 segundos de proteção\n\tcontra qualquer metodo de invaSão.\n\t{33AA33}+{FFFFFF}Carcaça especial- 2x em sua defesa contra\n\tviolação de ataque corpo a corpo.", string2);
		    }
		    case 3: {
		        format(string2, sizeof(string2), "%s\n\t{33AA33}+{FFFFFF}750 segundos de proteção\n\tcontra qualquer metodo de invaSão.\n\t{33AA33}+{FFFFFF}Carcaça especial- 2x em sua defesa contra\n\tviolação de ataque corpo a corpo.\n\t{33AA33}+{FFFFFF}Carcaça especial com proteção contra físico de\n\tviolação de ataque. -mão", string2);
		    }
		    case 4: {
		        format(string2, sizeof(string2), "%s\n\t{33AA33}+{FFFFFF}1,250 segundos de proteção\n\tcontra qualquer metodo de invaSão.\n\t{33AA33}+{FFFFFF}Carcaça muito mais forte\n\tbloqueia qualquer tipo de ataque físico.", string2);
		    }
		}
	}
	if(VDealerAlarm[playerid])
	{
	    new id = VDealerAlarm[playerid]-1;
		format(string2, sizeof(string2), "%s\n{FFFF00}Alarme:\t\t{B4B5B7} nível %d\t{FFFFFF}%s", string2,
		VDealerAlarm[playerid], FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[id][u_rate]) + VehicleUpgradeAlarm[id][u_price]));

		switch(VDealerAlarm[playerid])
		{
		    case 1: {
		        format(string2, sizeof(string2), "%s\n\t{FF6347}+{FFFFFF}Alarme mais alto do veículo.", string2);
		    }
		    case 2: {
		        format(string2, sizeof(string2), "%s\n\t{FF6347}+{FFFFFF}Alarme mais alto do veículo.\n\t{FF6347}+{FFFFFF}O veículo alerta o proprietário de uma possível violação.", string2);
		    }
		    case 3: {
		        format(string2, sizeof(string2), "%s\n\t{FF6347}+{FFFFFF}Alarme mais alto do veículo.\n\t{FF6347}+{FFFFFF}O veículo alerta o proprietário de uma possível violação.\n\t{FF6347}+{FFFFFF}O veículo manda um sinal para uma delegacia mais Próxima sobre\n\tuma possível violação.", string2);
		    }
		    case 4: {
		        format(string2, sizeof(string2), "%s\n\t{FF6347}+{FFFFFF}Alarme mais alto do veículo.\n\t{FF6347}+{FFFFFF}O veículo alerta o proprietário de uma possível violação.\n\t{FF6347}+{FFFFFF}O veículo manda um sinal para uma delegacia mais Próxima sobre\n\tuma possível violação.\n\t{FF6347}+{FFFFFF}O sinal do veículo aparecerá no painel de controle do\n\tradar", string2);
		    }
		}
	}

	if(VDealerImmob[playerid])
	{
	    new id = VDealerImmob[playerid]-1;
		format(string2, sizeof(string2), "%s\n{FFFF00}Imobilizador:\t{B4B5B7} nível %d\t{FFFFFF}%s", string2,
		VDealerImmob[playerid], FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[id][u_rate]) + VehicleUpgradeImmob[id][u_price]));

		format(string2, sizeof(string2), "%s\n\t{FFFF00}+{FFFFFF}O imobilizador do motor ajudará a prevenir\n\tque seu veículo funcione sem\n\tuma chave autorizada.", string2);
	}

	if(VDealerXM[playerid]) format(string2, sizeof(string2), "%s\n{FFFF00}XM Radio:\t\t{FFFFFF}R$7,500", string2);

	//printf("dealer %d", strlen(string2));
	Dialog_Show(playerid, Dealercar, DIALOG_STYLE_MSGBOX, string, string2, "Editar", "Checkout");
	return 1;
}

Dialog:Dealercar(playerid, response, listitem, inputtext[])
{
    new string[64];
	new model = GetVehicleModel(VDealerVehicle[playerid]);

	if (!response)
	{
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealercarConfirm, DIALOG_STYLE_MSGBOX, string, "Tem certeza que deseja comprar este veículo?", "Comprar", "Cancelar");
	}
	else
	{
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "Alarme\nFechadura\nImobilizador\nCores\n%s", "Acrescentar", "<<", (VDealerXM[playerid]) ? ("{F7FE2E}XM-rádio Instalado") : ("Sem XM-rádio Instalado"));
	}
	return 1;
}

Dialog:DealerMenu(playerid, response, listitem, inputtext[])
{
    //new string2[128];
	if (response)
	{
	    //
	    switch(listitem)
	    {
	        case 0:
	        {
				//format(string2,sizeof(string2),"%sNone\n%sAlarme nível 1 - R$5,000\n%sAlarme nível 2 - R$7,000\n%sAlarme nível 3 - R$10,000\n%sAlarme nível 4 - R$12,000");
				Dialog_Show(playerid, CarDealerAlarm, DIALOG_STYLE_LIST, "Alarme", "%sNenhum\n%sAlarme nível 1 - %s\n%sAlarme nível 2 - %s\n%sAlarme nível 3 - %s\n%sAlarme nível 4 - %s", "Modificar", "<<",
				(VDealerAlarm[playerid] == 0) ? ("{F7FE2E}>>{FFFFFF}") : (""),
				(VDealerAlarm[playerid] == 1) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[0][u_rate]) + VehicleUpgradeAlarm[0][u_price]),
				(VDealerAlarm[playerid] == 2) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[1][u_rate]) + VehicleUpgradeAlarm[1][u_price]),
				(VDealerAlarm[playerid] == 3) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[2][u_rate]) + VehicleUpgradeAlarm[2][u_price]),
				(VDealerAlarm[playerid] == 4) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[3][u_rate]) + VehicleUpgradeAlarm[3][u_price]));
	        }
	        case 1:
	        {
				//format(string2,sizeof(string2),"%sLock Level - 1 R$0\n%sLock Level 2 - R$5,000\n%sLock Level 3 - R$7,000\n%sLevel - 4 R$10,000\n%sLevel - 5 R$12,000");
				Dialog_Show(playerid, CarDealerLock, DIALOG_STYLE_LIST, "Fechadura", "%sFechadura nível 1 - R$0\n%sFechadura nível 2 - %s\n%sFechadura nível 3 - %s\n%sFechadura nível 4 - %s\n%sFechadura nível 5 - %s", "Modificar", "<<",
				(VDealerLock[playerid] == 0) ? ("{F7FE2E}>>{FFFFFF}") : (""),
				(VDealerLock[playerid] == 1) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[0][u_rate]) + VehicleUpgradeLock[0][u_price]),
				(VDealerLock[playerid] == 2) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[1][u_rate]) + VehicleUpgradeLock[1][u_price]),
				(VDealerLock[playerid] == 3) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[2][u_rate]) + VehicleUpgradeLock[2][u_price]),
				(VDealerLock[playerid] == 4) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[3][u_rate]) + VehicleUpgradeLock[3][u_price]));
	        }
 	        case 2:
	        {
 				//format(string2,sizeof(string2),"%sNone\n%sImobilizador nível 1 - R$5,000\n%sImobilizador nível 2 - R$10,000\n%sImobilizador nível 3 - R$15,000\n%sImobilizador nível 4 - R$20,000");
				Dialog_Show(playerid, CarDealerImmob, DIALOG_STYLE_LIST, "Imobilizador", "%sNenhum\n%sImobilizador nível 1 - %s\n%sImobilizador nível 2 - %s\n%sImobilizador nível 3 - %s\n%sImobilizador nível 4 - %s", "Modificar", "<<",
				(VDealerImmob[playerid] == 0) ? ("{F7FE2E}>>{FFFFFF}") : (""),
				(VDealerImmob[playerid] == 1) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[0][u_rate]) + VehicleUpgradeImmob[0][u_price]),
				(VDealerImmob[playerid] == 2) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[1][u_rate]) + VehicleUpgradeImmob[1][u_price]),
				(VDealerImmob[playerid] == 3) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[2][u_rate]) + VehicleUpgradeImmob[2][u_price]),
				(VDealerImmob[playerid] == 4) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[3][u_rate]) + VehicleUpgradeImmob[3][u_price]));
	        }
	        case 3:
	        {
	            ColorSelect[playerid] = -1;
	            ColorSelect2[playerid] = -1;
	            ShowPlayerColorSelection(playerid, 1);
	            ShowPlayerColorSelection2(playerid, 1);
	        }
	        case 4:
	        {
			    new string[64];
				new model = GetVehicleModel(VDealerVehicle[playerid]);
				format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));

				if(VDealerXM[playerid]) VDealerXM[playerid]=0;
				else VDealerXM[playerid]=1;

			    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "Alarme\nFechadura\nImobilizador\nCores\n%s", "Acrescentar", "<<", (VDealerXM[playerid]) ? ("{F7FE2E}XM-rádio Instalado") : ("Sem XM-rádio Instalado"));
	        }
	    }
	}
	else ShowPlayerDealercarDialog(playerid);
	return 1;
}

Dialog:CarDealerLock(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    VDealerLock[playerid] = listitem;
		Dialog_Show(playerid, CarDealerLock, DIALOG_STYLE_LIST, "Fechadura", "%sFechadura nível 1 - R$0\n%sFechadura nível 2 - %s\n%sFechadura nível 3 - %s\n%sFechadura nível 4 - %s\n%sFechadura nível 5 - %s", "Modificar", "<<",
		(VDealerLock[playerid] == 0) ? ("{F7FE2E}>>{FFFFFF}") : (""),
		(VDealerLock[playerid] == 1) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[0][u_rate]) + VehicleUpgradeLock[0][u_price]),
		(VDealerLock[playerid] == 2) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[1][u_rate]) + VehicleUpgradeLock[1][u_price]),
		(VDealerLock[playerid] == 3) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[2][u_rate]) + VehicleUpgradeLock[2][u_price]),
		(VDealerLock[playerid] == 4) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeLock[3][u_rate]) + VehicleUpgradeLock[3][u_price]));
	}
	else
	{
	    new string[64];
		new model = GetVehicleModel(VDealerVehicle[playerid]);
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "Alarme\nFechadura\nImobilizador\nCores\n%s", "Acrescentar", "<<", (VDealerXM[playerid]) ? ("{F7FE2E}XM-rádio Instalado") : ("Sem XM-rádio Instalado"));
	}
	return 1;
}

Dialog:CarDealerImmob(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    VDealerImmob[playerid] = listitem;
		Dialog_Show(playerid, CarDealerImmob, DIALOG_STYLE_LIST, "Imobilizador", "%sNenhum\n%sImobilizador nível 1 - %s\n%sImobilizador nível 2 - %s\n%sImobilizador nível 3 - %s\n%sImobilizador nível 4 - %s", "Modificar", "<<",
		(VDealerImmob[playerid] == 0) ? ("{F7FE2E}>>{FFFFFF}") : (""),
		(VDealerImmob[playerid] == 1) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[0][u_rate]) + VehicleUpgradeImmob[0][u_price]),
		(VDealerImmob[playerid] == 2) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[1][u_rate]) + VehicleUpgradeImmob[1][u_price]),
		(VDealerImmob[playerid] == 3) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[2][u_rate]) + VehicleUpgradeImmob[2][u_price]),
		(VDealerImmob[playerid] == 4) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[3][u_rate]) + VehicleUpgradeImmob[3][u_price]));
	}
	else
	{
	    new string[64];
		new model = GetVehicleModel(VDealerVehicle[playerid]);
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "Alarme\nFechadura\nImobilizador\nCores\n%s", "Acrescentar", "<<", (VDealerXM[playerid]) ? ("{F7FE2E}XM-rádio Instalado") : ("Sem XM-rádio Instalado"));
	}
}

Dialog:CarDealerAlarm(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    VDealerAlarm[playerid] = listitem;
		Dialog_Show(playerid, CarDealerAlarm, DIALOG_STYLE_LIST, "Alarme", "%sNenhum\n%sAlarme nível 1 - %s\n%sAlarme nível 2 - %s\n%sAlarme nível 3 - %s\n%sAlarme nível 4 - %s", "Modificar", "<<",
		(VDealerAlarm[playerid] == 0) ? ("{F7FE2E}>>{FFFFFF}") : (""),
		(VDealerAlarm[playerid] == 1) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[0][u_rate]) + VehicleUpgradeAlarm[0][u_price]),
		(VDealerAlarm[playerid] == 2) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[1][u_rate]) + VehicleUpgradeAlarm[1][u_price]),
		(VDealerAlarm[playerid] == 3) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[2][u_rate]) + VehicleUpgradeAlarm[2][u_price]),
		(VDealerAlarm[playerid] == 4) ? ("{F7FE2E}>>{FFFFFF}") : (""), FormatNumber(floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[3][u_rate]) + VehicleUpgradeAlarm[3][u_price]));
	}
	else
	{
	    new string[64];
		new model = GetVehicleModel(VDealerVehicle[playerid]);
		format(string, sizeof(string), "%s - %s", g_arrVehicleNames[model - 400], GetDealershipVehiclePrice(playerid));
	    Dialog_Show(playerid, DealerMenu, DIALOG_STYLE_LIST, string, "Alarme\nFechadura\nImobilizador\nCores\n%s", "Acrescentar", "<<", (VDealerXM[playerid]) ? ("{F7FE2E}XM-rádio Instalado") : ("Sem XM-rádio Instalado"));
	}
	return 1;
}

Dialog:DealercarConfirm(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        vehicleid = VDealerVehicle[playerid],
			bizid = VDealerBiz[playerid],
			model = GetVehicleModel(vehicleid),
			price = GetDealershipCountPrice(playerid),
			string[256]
		;

		if(price <= 0)
		{
		    ExitSettingVehicle(playerid);
		    SendClientMessage(playerid, COLOR_RED, "Ocorreu um erro ao comprar um veículo, entre em contato com um administrador.");
		    return 1;
		}

		if (bizid != -1 && BizInfo[bizid][bType] == 4)
		{
			if (PlayerData[playerid][pCash] < price)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro suficiente para comprar.");
				ShowPlayerDealercarDialog(playerid);
				return 1;
			}

			if (GetNumberOwnerCar(playerid) >= 10)
		 	{
		 		SendClientMessage(playerid, COLOR_LIGHTRED, "Você atingiu o número máximo de veículo.");
		 		ExitSettingVehicle(playerid);
		 		return 1;
			}

            if(PlayerData[playerid][pPCarkey] != 9999) {
				SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Você não pode spawnar mais veículos agora.");
                ExitSettingVehicle(playerid);
                return 1;
			}


			new i = Iter_Free(sv_playercar);

			if(i != -1) {

			//for (new i = 0; i != MAX_PLAYER_VEHICLES; i ++) if (!CarData[i][carExists]) {

				new
				    Float:pos[4]
				;
				GetVehiclePos(vehicleid, pos[0], pos[1], pos[2]);
				GetVehicleZAngle(vehicleid, pos[3]);

		        CarData[i][carPos][0] = pos[0];
		        CarData[i][carPos][1] = pos[1];
		        CarData[i][carPos][2] = pos[2];
		        CarData[i][carPos][3] = pos[3];


	            CarData[i][carLock] = VDealerLock[playerid];
				CarData[i][carAlarm] = VDealerAlarm[playerid];
				CarData[i][carImmob] = VDealerImmob[playerid];
				CarData[i][carXM] = VDealerXM[playerid];
				CarData[i][carOwner] = PlayerData[playerid][pID];
				CarData[i][carModel] = model;
				CarData[i][carBatteryL] = VehicleData[model - 400][c_battery];
				CarData[i][carEngineL] = VehicleData[model - 400][c_engine];

				CoreVehicles[vehicleid][vehFuel] = GetVehicleDataFuel(model);
                CarData[i][carFuel] = CoreVehicles[vehicleid][vehFuel];
                CarData[i][carHealth] = VehicleData[model - 400][c_maxhp];

                CarData[i][carDupKey] = randomEx(1234567, 9999999);
                CarData[i][carColor1] = VDealerColor[playerid][0];
                CarData[i][carColor2] = VDealerColor[playerid][1];
                CarData[i][carLocked] = 1;
				//CarData[i][carTempoPlaca] = gettime() + (2 * 86400);

				

				format(string,sizeof(string),"INSERT INTO `cars` (`carModel`, `carOwner`, `carChassi`, `carColor1`, `carColor2`, `carLock`, `carImmob`, `carAlarm`, `carXM`, `tempoSemPlaca` ,`carDate`) VALUES (%d, %d, '********%d', %d, %d, %d, %d, %d, %d, DATE_ADD(NOW(), INTERVAL 3 DAY), NOW())",
		            model,
				    PlayerData[playerid][pID],
					randomEx(1000, 9999),
				    VDealerColor[playerid][0],
				    VDealerColor[playerid][1],
					VDealerLock[playerid],
					VDealerImmob[playerid],
					VDealerAlarm[playerid],
					VDealerXM[playerid]);
				mysql_tquery(dbCon, string, "OnQueryBuyVehicle", "iddd", playerid, i, model, price);
				

			}
		}
	}
	else
	{
		ExitSettingVehicle(playerid);
	}
	return 1;
}

stock GetEngineDrive(modelid)
{
	new string[24];
	if(GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'F') format(string, 32, "Front Wheel Drive");
	else if(GetVehicleModelInfoAsInt(modelid, "TransmissionData_nDriveType") == 'R') format(string, 32, "Rear Wheel Drive");
	else format(string, 24, "Four Wheel Drive");
	return string;
}

stock GetVehicleConsumption(modelid)
{
	new string[24], Float:consumption = GetVehicleDataFuelRate(modelid);
	format(string, 24, "%d MPG / %d KPL", floatround(consumption * 0.41213142), floatround(consumption));
	return string;
}

stock GetDealershipVehiclePrice(playerid)
{
	new str[64];

	new price = VDealerPrice[playerid], id;

	if(VDealerLock[playerid])
	{
	    id = VDealerLock[playerid]-1;
	    price += floatround(VDealerPrice[playerid] / VehicleUpgradeLock[id][u_rate]) + VehicleUpgradeLock[id][u_price];
	}

	if(VDealerImmob[playerid])
	{
	    id = VDealerImmob[playerid]-1;
	    price += floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[id][u_rate]) + VehicleUpgradeImmob[id][u_price];
	}

	if(VDealerAlarm[playerid])
	{
	    id = VDealerAlarm[playerid]-1;
	    price += floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[id][u_rate]) + VehicleUpgradeAlarm[id][u_price];
	}

	if(VDealerXM[playerid]) price += 956;

    if(PlayerData[playerid][pCash] < price) {
        format(str, sizeof(str), "{FF0000}%s", FormatNumber(price));
    }
    else
    {
         format(str, sizeof(str), "{33AA33}%s", FormatNumber(price));
    }

	return str;
}

stock GetDealershipCountPrice(playerid)
{
	new price = VDealerPrice[playerid], id;

	if(VDealerLock[playerid])
	{
	    id = VDealerLock[playerid]-1;
	    price += floatround(VDealerPrice[playerid] / VehicleUpgradeLock[id][u_rate]) + VehicleUpgradeLock[id][u_price];
	}

	if(VDealerImmob[playerid])
	{
	    id = VDealerImmob[playerid]-1;
	    price += floatround(VDealerPrice[playerid] / VehicleUpgradeImmob[id][u_rate]) + VehicleUpgradeImmob[id][u_price];
	}

	if(VDealerAlarm[playerid])
	{
	    id = VDealerAlarm[playerid]-1;
	    price += floatround(VDealerPrice[playerid] / VehicleUpgradeAlarm[id][u_rate]) + VehicleUpgradeAlarm[id][u_price];
	}

	if(VDealerXM[playerid]) price += 956;


	return price;
}
								/////////////////////////////////////////////////////////////////////////////////////////////////////////////
								     //////////////////////////////////    SISTEMA DE veículo IMAC     ////////////////////////////
								//////////////////////////////////////////////////////////////////////////////////////////////////////////



stock chassiImac()
{
	const len = 4;
	new chassi[len+1];

	for(new i = 0; i < len; i++){
		if(i < 5){
			chassi[i] = '0' + random(2000);
		}
	}
	return chassi;
}

stock placaiMacLTR()
{
	const len = 3;
	new placa[len+1];
	for(new i = 0; i < len; i++)
	{
		if(i < 4)
		{
			placa[i] = 'A' + random(20);
		}
	}
	return placa;
}

stock placaiMacNUM()
{
	const len = 6;
	new placa[len+1];
	for (new i = 0; i < len; i++)
	{
	    if (i < 6) 
	    {
	     	placa[i] = '0' + random(9);
	    }
	}
	return placa;
}

								/////////////////////////////////////////////////////////////////////////////////////////////////////////////
								     //////////////////////////////////    SISTEMA DE veículo IMAC     ////////////////////////////
								//////////////////////////////////////////////////////////////////////////////////////////////////////////

stock ExitSettingVehicle(playerid)
{
	if(VDealerSetting{playerid})
	{
	    VDealerSetting{playerid} = false;

		if (VDealerVehicle[playerid])
		    DestroyVehicle(VDealerVehicle[playerid]);

        TogglePlayerControllable(playerid, 1);
        VDealerColor[playerid][0] = -1;
        VDealerColor[playerid][1] = -1;
        VDealerBiz[playerid] = -1;

		SetCameraBehindPlayer(playerid);
	}
}

stock ShowPlayerColorSelection(playerid, page)
{
	new string[64], selecttype, selectstart;

    ColorSelectPage[playerid] = page;

	if(ColorSelect[playerid] >= 0)
	{
        for (new i = 0; i != sizeof(ColorMenuSelect); i ++)
        {
			if(ColorMenuSelect[i][1] == ColorSelect[playerid])
			{
			    if(!selectstart)
			    {
			        selectstart = i + (8 * (page-1));
			    }
				selecttype++;
			}
		}

		ColorSelectItem[playerid] = selecttype;
		ColorSelectPages[playerid] = floatround(floatdiv(ColorSelectItem[playerid], 8), floatround_ceil);

	}
	else
	{
        selectstart = 8 * (page-1);
		ColorSelectItem[playerid] = sizeof(ColorMenuInfo);
		ColorSelectPages[playerid] = floatround(floatdiv(ColorSelectItem[playerid], 8), floatround_ceil);
    }

	for(new i = 0 ; i < 8 ; i++ )
	{
		PlayerTextDrawHide(playerid, ColorSelection[playerid][i]);
	}
	PlayerTextDrawHide(playerid, ColorSelectText[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectLeft[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectRight[playerid]);

	new start = (8 * (page-1));

	for (new i = start; i != start + 8 && i < ColorSelectItem[playerid]; i ++)
	{
	    if(ColorSelect[playerid] >= 0)
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection[playerid][i-start], g_arrSelectColors[ColorMenuSelect[selectstart+i-start][0]]);
	    	ColorSelectListener[playerid][i-start] = ColorMenuSelect[selectstart+i-start][0];

	    }
	    else
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection[playerid][i-start], g_arrSelectColors[ColorMenuInfo[selectstart+i-start][0]]);
		    ColorSelectListener[playerid][i-start] = i;

	    }
	    PlayerTextDrawShow(playerid, ColorSelection[playerid][i-start]);
	}

	if(ColorSelect[playerid] >= 0)
	{
		format(string, sizeof(string),"%s (%d/%d)", ColorMenuInfo[ColorSelect[playerid]][1], page, ColorSelectPages[playerid]);
		PlayerTextDrawColor(playerid,ColorSelectText[playerid], g_arrSelectColors[ColorMenuInfo[ColorSelect[playerid]][0]]);
		PlayerTextDrawSetString(playerid, ColorSelectText[playerid], string);
	}
	else
	{
	    PlayerTextDrawColor(playerid,ColorSelectText[playerid], -1);
		PlayerTextDrawSetString(playerid, ColorSelectText[playerid], "Cores primárias");
	}
	PlayerTextDrawShow(playerid, ColorSelectText[playerid]);


	if(page-1 != 0)
	{
		PlayerTextDrawShow(playerid, ColorSelectLeft[playerid]);
	}
	if(page+1 <= ColorSelectPages[playerid])
	{
		PlayerTextDrawShow(playerid, ColorSelectRight[playerid]);
	}

	ColorSelectShow{playerid} = true;

	SelectTextDraw(playerid, 0x585858FF);
	return 1;
}


stock ShowPlayerColorSelection2(playerid, page)
{
	new string[64], selecttype, selectstart;

    ColorSelectPage2[playerid] = page;

	if(ColorSelect2[playerid] >= 0)
	{
        for (new i = 0; i != sizeof(ColorMenuSelect); i ++)
        {
			if(ColorMenuSelect[i][1] == ColorSelect2[playerid])
			{
			    if(!selectstart)
			    {
			        selectstart = i + (8 * (page-1));
			    }
				selecttype++;
			}
		}

		ColorSelectItem2[playerid] = selecttype;
		ColorSelectPages2[playerid] = floatround(floatdiv(ColorSelectItem2[playerid], 8), floatround_ceil);

	}
	else
	{
        selectstart = 8 * (page-1);
		ColorSelectItem2[playerid] = sizeof(ColorMenuInfo);
		ColorSelectPages2[playerid] = floatround(floatdiv(ColorSelectItem2[playerid], 8), floatround_ceil);
    }

	for(new i = 0 ; i < 8 ; i++ )
	{
		PlayerTextDrawHide(playerid, ColorSelection2[playerid][i]);
	}
	PlayerTextDrawHide(playerid, ColorSelectText2[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectLeft2[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectRight2[playerid]);

	new start = (8 * (page-1));

	for (new i = start; i != start + 8 && i < ColorSelectItem2[playerid]; i ++)
	{
	    if(ColorSelect2[playerid] >= 0)
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection2[playerid][i-start], g_arrSelectColors[ColorMenuSelect[selectstart+i-start][0]]);
	    	ColorSelectListener2[playerid][i-start] = ColorMenuSelect[selectstart+i-start][0];

	    }
	    else
	    {
			PlayerTextDrawBackgroundColor(playerid, ColorSelection2[playerid][i-start], g_arrSelectColors[ColorMenuInfo[selectstart+i-start][0]]);
		    ColorSelectListener2[playerid][i-start] = i;

	    }
	    PlayerTextDrawShow(playerid, ColorSelection2[playerid][i-start]);
	}

	if(ColorSelect2[playerid] >= 0)
	{
		format(string, sizeof(string),"%s (%d/%d)", ColorMenuInfo[ColorSelect2[playerid]][1], page, ColorSelectPages2[playerid]);
		PlayerTextDrawColor(playerid,ColorSelectText2[playerid], g_arrSelectColors[ColorMenuInfo[ColorSelect2[playerid]][0]]);
		PlayerTextDrawSetString(playerid, ColorSelectText2[playerid], string);
	}
	else
	{
	    PlayerTextDrawColor(playerid,ColorSelectText2[playerid], -1);
		PlayerTextDrawSetString(playerid, ColorSelectText2[playerid], "Cores secundárias");
	}
	PlayerTextDrawShow(playerid, ColorSelectText2[playerid]);


	if(page-1 != 0)
	{
		PlayerTextDrawShow(playerid, ColorSelectLeft2[playerid]);
	}
	if(page+1 <= ColorSelectPages2[playerid])
	{
		PlayerTextDrawShow(playerid, ColorSelectRight2[playerid]);
	}

	ColorSelectShow2{playerid} = true;

	SelectTextDraw(playerid, 0x585858FF);
	return 1;
}

stock ClearColorSelect(playerid)
{
	if(ColorSelectShow{playerid} || ColorSelectShow2{playerid})
	{
		for(new i = 0 ; i < 8 ; i++ )
		{
			PlayerTextDrawHide(playerid, ColorSelection[playerid][i]);
			PlayerTextDrawHide(playerid, ColorSelection2[playerid][i]);
		}
		PlayerTextDrawHide(playerid, ColorSelectText[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectLeft[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectRight[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectText2[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectLeft2[playerid]);
		PlayerTextDrawHide(playerid, ColorSelectRight2[playerid]);
		ColorSelectPage[playerid] = 1;
		ColorSelectPage2[playerid] = 1;

		ColorSelect[playerid] = -1;
		ColorSelect2[playerid] = -1;

		ColorSelectShow{playerid} = false;
		ColorSelectShow2{playerid} = false;

		if(VDealerSetting{playerid})
		{
		    ShowPlayerDealercarDialog(playerid);
		}
	}
	return 1;
}

stock SetVehicleColor(vehicleid, color1, color2)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carColor1] = color1;
	    CarData[id][carColor2] = color2;
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}

/*
CMD:findcolor(playerid, params[])
{
	new type[24], slot, colourf[24];

	if (sscanf(params, "ds[24]", slot, type))
 	{
	 	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /findcolor [slot] [color]");
		return 1;
	}

	for(new i=0; i<256;i++)
	{
	    format(colourf, sizeof(colourf), "%06x", g_arrSelectColors[i] >>> 8);

	    if(!strcmp(colourf, type, true))
	    {
	        SendClientMessageEx(playerid, -1, "Slot %d", i);
	        printf("{%d, %d},", i, slot);
	        break;
	    }
	}
	return 1;
}*/


//248.200164, 354.422149
/*CMD:settextdraw(playerid, params[])
{
	new Float:csx;
	new Float:csy;

	if (sscanf(params, "ff", csx, csy))
 	{
	 	SendClientMessage(playerid, COLOR_YELLOW3, "USE: /setpos [x] [y]");
		return 1;
	}

	PlayerTextDrawHide(playerid, ColorSelectText[playerid]);
	PlayerTextDrawHide(playerid, ColorSelectText2[playerid]);

	PlayerTextDrawSetPos(playerid, ColorSelectText[playerid], csx, csy);
	PlayerTextDrawSetPos(playerid, ColorSelectText2[playerid], 260+csx, csy);

	PlayerTextDrawShow(playerid, ColorSelectText[playerid]);
	PlayerTextDrawShow(playerid, ColorSelectText2[playerid]);
	return 1;
}*/

CMD:vehname(playerid, params[]) {

		if(PlayerData[playerid][pAdmin] < 2)
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

		new
			rcount;

		if(isnull(params))
			return SendClientMessage(playerid, COLOR_GREY, "Nenhuma palavra-chave foi encontrada.");

		if(strlen(params) < 3)
			return SendClientMessage(playerid, COLOR_GREY, "Palavra-chave muito curta.");

		for(new v; v < sizeof(g_arrVehicleNames); v++) {
			if(strfind(g_arrVehicleNames[v], params, true) != -1) {

				if(rcount == 0)
					format(szString, sizeof(szString), "%s (ID %d)", g_arrVehicleNames[v], v+400);
				else
					format(szString, sizeof(szString), "%s | %s (ID %d)", szString, g_arrVehicleNames[v], v+400);

				rcount++;
			}
		}

		if(rcount == 0)
			SendClientMessage(playerid, COLOR_GREY, "Nenhum resultado encontrado.");

		else
			if(strlen(szString) >= 128)
				SendClientMessage(playerid, COLOR_GREY, "Muitos resultados encontrados.");
			else
				SendClientMessage(playerid, COLOR_WHITE, szString);


		return 1;
}

stock initiateTutorial(playerid)
{
    ClearChatBox(playerid);
	PlayerData[playerid][pTutorialStep] = 1;
    SendClientMessage(playerid, COLOR_WHITE, "Bem vindo ao São Paulo Roleplay!");
    SendClientMessage(playerid, COLOR_GRAD3, "está vídeo aula irá guia-lo para a sua primeira etapa no SP-RP");
    SendClientMessage(playerid, COLOR_GRAD3, "Use 'espaço' e 'LSHIFT' No teclado para navegar nas páginas.");
    SendClientMessage(playerid, COLOR_GRAD3, "Recomendamos que Você reserve um tempo para ve-lo.");

	SetPlayerCameraPos(playerid, 1541.1512,-2287.1345,91.9661);
	SetPlayerCameraLookAt(playerid, 1623.3582,-2288.0413,77.9914);

	return 1;
}



stock GetIDByName(playername[])
{
    foreach (new i : Player)
	{
		if(SQL_IsLogged(i))
		{
			new pName[MAX_PLAYER_NAME];
			GetPlayerName(i, pName, sizeof(pName));
			if(strcmp(pName, playername, true, strlen(playername)) == 0)
			{
				return i;
			}
		}
	}
	return INVALID_PLAYER_ID;
}

stock SetBusinessInterior(playerid, bizid, emp)
{
	if(emp == 0)
	{
		BizInfo[bizid][bExitX] = 0.0;
		BizInfo[bizid][bExitY] = 0.0;
		BizInfo[bizid][bExitZ] = 0.0;
		BizInfo[bizid][bInterior] = 0;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Nenhuma", bizid);
	}
	else if(emp == 1)
	{
		BizInfo[bizid][bExitX] = -794.806030;
		BizInfo[bizid][bExitY] = 491.686004;
		BizInfo[bizid][bExitZ] = 1376.194946;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Marcos Bistro", bizid);
	}
	else if(emp == 2)
	{
		BizInfo[bizid][bExitX] = 1212.019897;
		BizInfo[bizid][bExitY] = -28.663099;
		BizInfo[bizid][bExitZ] = 1001.089966;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Big Spread Ranch Strip Club", bizid);
	}
	else if(emp == 3)
	{
		BizInfo[bizid][bExitX] = 366.923980;
		BizInfo[bizid][bExitY] = -72.929359;
		BizInfo[bizid][bExitZ] = 1001.507812;
		BizInfo[bizid][bInterior] = 10;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Burger Shot", bizid);
	}
	else if(emp == 4)
	{
		BizInfo[bizid][bExitX] = 365.672974;
		BizInfo[bizid][bExitY] = -10.713200;
		BizInfo[bizid][bExitZ] = 1001.869995;
		BizInfo[bizid][bInterior] = 9;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Cluckin Bell", bizid);
	}
	else if(emp == 5)
	{
		BizInfo[bizid][bExitX] = 372.351990;
		BizInfo[bizid][bExitY] = -131.650986;
		BizInfo[bizid][bExitZ] = 1001.449951;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Well Stacked Pizza", bizid);
	}
	else if(emp == 6)
	{
		BizInfo[bizid][bExitX] = 377.098999;
		BizInfo[bizid][bExitY] = -192.439987;
		BizInfo[bizid][bExitZ] = 1000.643982;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Rusty Brown Dohnuts", bizid);
	}
	else if(emp == 7)
	{
		BizInfo[bizid][bExitX] = 460.099976;
		BizInfo[bizid][bExitY] = -88.428497;
		BizInfo[bizid][bExitZ] = 999.621948;
		BizInfo[bizid][bInterior] = 4;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Jays Diner", bizid);
	}
	else if(emp == 8)
	{
		BizInfo[bizid][bExitX] = 681.474976;
		BizInfo[bizid][bExitY] = -451.150970;
		BizInfo[bizid][bExitZ] = -25.616798;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Pump Truck Stop Diner", bizid);
	}
	else if(emp == 9)
	{
		BizInfo[bizid][bExitX] = 476.068328;
		BizInfo[bizid][bExitY] = -14.893922;
		BizInfo[bizid][bExitZ] = 1003.695312;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Alhambra", bizid);
	}
	else if(emp == 10)
	{
		BizInfo[bizid][bExitX] = 501.980988;
		BizInfo[bizid][bExitY] = -69.150200;
		BizInfo[bizid][bExitZ] = 998.834961;
		BizInfo[bizid][bInterior] = 11;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Mistys", bizid);

	}
	else if(emp == 11)
	{
		BizInfo[bizid][bExitX] = -227.028000;
		BizInfo[bizid][bExitY] = 1401.229980;
		BizInfo[bizid][bExitZ] = 27.769798;
		BizInfo[bizid][bInterior] = 18;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Lil' Probe Inn", bizid);
	}
	else if(emp == 12)
	{
		BizInfo[bizid][bExitX] = 204.332993;
		BizInfo[bizid][bExitY] = -166.694992;
		BizInfo[bizid][bExitZ] = 1000.578979;
		BizInfo[bizid][bInterior] = 14;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: EXcLusive", bizid);
	}
	else if(emp == 13)
	{
		BizInfo[bizid][bExitX] = 207.737991;
		BizInfo[bizid][bExitY] = -109.019997;
		BizInfo[bizid][bExitZ] = 1005.269958;
		BizInfo[bizid][bInterior] = 15;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Binco", bizid);
	}
	else if(emp == 14)
	{
		BizInfo[bizid][bExitX] = 207.054993;
		BizInfo[bizid][bExitY] = -138.804993;
		BizInfo[bizid][bExitZ] = 1003.519958;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: ProLaps", bizid);
	}
	else if(emp == 15)
	{
		BizInfo[bizid][bExitX] = 203.778000;
		BizInfo[bizid][bExitY] = -48.492397;
		BizInfo[bizid][bExitZ] = 1001.799988;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: SubUrban", bizid);
	}
	else if(emp == 16)
	{
		BizInfo[bizid][bExitX] = 226.293991;
		BizInfo[bizid][bExitY] = -7.431530;
		BizInfo[bizid][bExitZ] = 1002.259949;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Victim", bizid);
	}
	else if(emp == 17)
	{
		BizInfo[bizid][bExitX] = 161.391006;
		BizInfo[bizid][bExitY] = -93.159156;
		BizInfo[bizid][bExitZ] = 1001.804687;
		BizInfo[bizid][bInterior] = 18;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Zip", bizid);
	}
	else if(emp == 18)
	{
		BizInfo[bizid][bExitX] = 1133.069946;
		BizInfo[bizid][bExitY] = -9.573059;
		BizInfo[bizid][bExitZ] = 1000.750000;
		BizInfo[bizid][bInterior] = 12;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Small Casino in Redsands West", bizid);
	}
	else if(emp == 19)
	{
		BizInfo[bizid][bExitX] = 833.818970;
		BizInfo[bizid][bExitY] = 7.418000;
		BizInfo[bizid][bExitZ] = 1004.179993;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Off Track Betting", bizid);
	}
	else if(emp == 20)
	{
		BizInfo[bizid][bExitX] = -100.325996;
		BizInfo[bizid][bExitY] = -22.816500;
		BizInfo[bizid][bExitZ] = 1000.741943;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Sex Shop", bizid);
	}
	else if(emp == 21)
	{
		BizInfo[bizid][bExitX] = -2239.569824;
		BizInfo[bizid][bExitY] = 130.020996;
		BizInfo[bizid][bExitZ] = 1035.419922;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Zero's RC Shop", bizid);
	}
	else if(emp == 22)
	{
		BizInfo[bizid][bExitX] = 286.148987;
		BizInfo[bizid][bExitY] = -40.644398;
		BizInfo[bizid][bExitZ] = 1001.569946;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Ammunation 1", bizid);
	}
	else if(emp == 23)
	{
		BizInfo[bizid][bExitX] = 286.800995;
		BizInfo[bizid][bExitY] = -82.547600;
		BizInfo[bizid][bExitZ] = 1001.539978;
		BizInfo[bizid][bInterior] = 4;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Ammunation 2", bizid);
	}
	else if(emp == 24)
	{
		BizInfo[bizid][bExitX] = 296.919983;
		BizInfo[bizid][bExitY] = -108.071999;
		BizInfo[bizid][bExitZ] = 1001.569946;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Ammunation 3", bizid);
	}
	else if(emp == 25)
	{
		BizInfo[bizid][bExitX] = 316.524994;
		BizInfo[bizid][bExitY] = -167.706985;
		BizInfo[bizid][bExitZ] = 999.661987;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Ammunation 4", bizid);
	}
	else if(emp == 26)
	{
		BizInfo[bizid][bExitX] = -2637.449951;
		BizInfo[bizid][bExitY] = 1404.629883;
		BizInfo[bizid][bExitZ] = 906.457947;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Jizzys", bizid);
	}
	else if(emp == 27)
	{
		BizInfo[bizid][bExitX] = -25.884499;
		BizInfo[bizid][bExitY] = -185.868988;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: 24-7 1", bizid);
	}
	else if(emp == 28)
	{
		BizInfo[bizid][bExitX] = 6.091180;
		BizInfo[bizid][bExitY] = -29.271898;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 10;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: 24-7 2", bizid);
	}
	else if(emp == 29)
	{
		BizInfo[bizid][bExitX] = -30.946699;
		BizInfo[bizid][bExitY] = -89.609596;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 18;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: 24-7 3", bizid);
	}
	else if(emp == 30)
	{
		BizInfo[bizid][bExitX] = -25.132599;
		BizInfo[bizid][bExitY] = -139.066986;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 16;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: 24-7 4", bizid);
	}
	else if(emp == 31)
	{
		BizInfo[bizid][bExitX] = -27.312300;
		BizInfo[bizid][bExitY] = -29.277599;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 4;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: 24-7 5", bizid);
	}
	else if(emp == 32)
	{
		BizInfo[bizid][bExitX] = -26.691599;
		BizInfo[bizid][bExitY] = -55.714897;
		BizInfo[bizid][bExitZ] = 1003.549988;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: 24-7 6", bizid);
  	}
	else if(emp == 33)
	{
		BizInfo[bizid][bExitX] = 1494.430053;
		BizInfo[bizid][bExitY] = 1305.63004;
		BizInfo[bizid][bExitZ] = 1093.290039;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Advertising/Phone Network", bizid);
  	}
	else if(emp == 34)
	{
		BizInfo[bizid][bExitX] = 965.1851;
		BizInfo[bizid][bExitY] = -53.2832;
		BizInfo[bizid][bExitZ] = 1001.1246;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Bothel", bizid);
	}
	else if(emp == 35)
	{
		BizInfo[bizid][bExitX] = 2018.0131;
		BizInfo[bizid][bExitY] = 1017.8541;
		BizInfo[bizid][bExitZ] = 996.8750;
		BizInfo[bizid][bInterior] = 10;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Four Dragons Casino", bizid);
	}
	else if(emp == 36)
	{
		BizInfo[bizid][bExitX] = 617.5380;
		BizInfo[bizid][bExitY] = -1.9900;
		BizInfo[bizid][bExitZ] = 1000.6829;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Bikers Garage", bizid);
	}
	else if(emp == 37)
	{
		BizInfo[bizid][bExitX] = 772.112000;
		BizInfo[bizid][bExitY] = -3.898650;
		BizInfo[bizid][bExitZ] = 1000.687988;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Ganton Gym", bizid);
	}
	else if(emp == 38) // Tattoo 1
	{
		BizInfo[bizid][bExitX] = -204.439987;
		BizInfo[bizid][bExitY] = -8.469599;
		BizInfo[bizid][bExitZ] = 1002.273437;
		BizInfo[bizid][bInterior] = 17;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Tattoo 1", bizid);
	}
	else if(emp == 39) // Tattoo 2
	{
		BizInfo[bizid][bExitX] = -204.439987;
		BizInfo[bizid][bExitY] = -43.652496;
		BizInfo[bizid][bExitZ] = 1002.273437;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Tattoo 2", bizid);
	}
	else if(emp == 40) // Tattoo 3
	{
		BizInfo[bizid][bExitX] = -204.439987;
		BizInfo[bizid][bExitY] = -26.453998;
		BizInfo[bizid][bExitZ] = 1002.273437;
		BizInfo[bizid][bInterior] = 12;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Tattoo 3", bizid);
	}
	else if(emp == 41)
	{
		BizInfo[bizid][bExitX] = 318.564972;
		BizInfo[bizid][bExitY] = 1118.209961;
		BizInfo[bizid][bExitZ] = 1083.979980;
		BizInfo[bizid][bInterior] = 5;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Crack Den", bizid);
	}
	else if(emp == 42)
	{
		BizInfo[bizid][bExitX] = -2240.468505;
		BizInfo[bizid][bExitY] = 137.060440;
		BizInfo[bizid][bExitZ] = 1035.414062;
		BizInfo[bizid][bInterior] = 6;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Zero RC shop", bizid);
	}
	else if(emp == 43)
	{
		BizInfo[bizid][bExitX] = 245.2307;
		BizInfo[bizid][bExitY] = 304.7632;
		BizInfo[bizid][bExitZ] = 999.1484;
		BizInfo[bizid][bInterior] = 0;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Record Studio", bizid);
	}
	else if(emp == 44)
	{
		BizInfo[bizid][bExitX] = 1506.24609375;
		BizInfo[bizid][bExitY] = -1815.40039062;
		BizInfo[bizid][bExitZ] = -43.72590637;
		BizInfo[bizid][bInterior] = 0;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: LS Court Room", bizid);
	}
	else if(emp == 45)
	{
		BizInfo[bizid][bExitX] = 963.418762;
		BizInfo[bizid][bExitY] = 2108.292480;
		BizInfo[bizid][bExitZ] = 1011.030273;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Meat Factory", bizid);
	}
	else if(emp == 46)
	{
		BizInfo[bizid][bExitX] = -2154.34155;
		BizInfo[bizid][bExitY] = 618.79169;
		BizInfo[bizid][bExitZ] = 1055.45166;
		BizInfo[bizid][bInterior] = 1;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Betting Place", bizid);
	}
	else if(emp == 47)
	{
		BizInfo[bizid][bExitX] = 418.6547;
		BizInfo[bizid][bExitY] = -83.6987;
		BizInfo[bizid][bExitZ] = 1001.8047;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Barber Shop", bizid);
	}
	else if(emp == 48)
	{
		BizInfo[bizid][bExitX] = -2640.762939;
		BizInfo[bizid][bExitY] = 1406.682006;
		BizInfo[bizid][bExitZ] = 906.460937;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Pleasure Domes", bizid);
	}
	else if(emp == 49)
	{
		BizInfo[bizid][bExitX] = 1251.4419;
		BizInfo[bizid][bExitY] = -1278.9301;
		BizInfo[bizid][bExitZ] = 60008.1328;
		BizInfo[bizid][bInterior] = 3;
		format(szString, sizeof(szString), "negócio ID: %d - Descrição: Banco", bizid);
	}
	UpdateBizInfo(bizid);
	SendClientMessage(playerid, COLOR_GRAD2, szString);
	return 1;
}

forward CreateGuideMenus();
public CreateGuideMenus()
{
	Guide = CreateMenu("A Gazeta SP", 1, 50.0, 180.0, 300.0, 300.0);
	SetMenuColumnHeader(Guide, 0, "informação para o cidadão");
	AddMenuItem(Guide, 0, "Próxima página");
	AddMenuItem(Guide, 0, "Como chamar um táxi");
	AddMenuItem(Guide, 0, "Rotas de Onibus");
	AddMenuItem(Guide, 0, "Onde morar");
	AddMenuItem(Guide, 0, "Ajuda médica");
	AddMenuItem(Guide, 0, "Ajuda policial");
	AddMenuItem(Guide, 0, "OOC: Link do fórum");

	GuideJob1 = CreateMenu("A Gazeta SP", 1, 50.0, 180.0, 300.0, 300.0);
	SetMenuColumnHeader(GuideJob1, 0, "Empregos");
	AddMenuItem(GuideJob1, 0, "Próxima página");
	AddMenuItem(GuideJob1, 0, "Detetive");
	AddMenuItem(GuideJob1, 0, "Agricultor");
	AddMenuItem(GuideJob1, 0, "Advogado");
	AddMenuItem(GuideJob1, 0, "Entregador de Pizza");
	AddMenuItem(GuideJob1, 0, "Vendedor de lanche");
	AddMenuItem(GuideJob1, 0, "Sorveteiro");
	AddMenuItem(GuideJob1, 0, "Gari");

	GuideJob2 = CreateMenu("A Gazeta SP", 1, 50.0, 180.0, 300.0, 300.0);
	SetMenuColumnHeader(GuideJob2, 0, "Empregos");
	AddMenuItem(GuideJob2, 0, "Próxima página");
	AddMenuItem(GuideJob2, 0, "Correios");
	AddMenuItem(GuideJob2, 0, "mecanico");
	AddMenuItem(GuideJob2, 0, "Caminhoneiro");
	AddMenuItem(GuideJob2, 0, "Bartender");
	AddMenuItem(GuideJob2, 0, "Lutador");
}

CMD:jornal(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 1663.4677,-2332.1433,-2.6797))
	{
	  	TogglePlayerControllable(playerid, 0);
  		ShowMenuForPlayer(Guide, playerid);
		return 1;
	}
	else SendClientMessage(playerid, COLOR_GREY,"** Você não tem um jornal.");

	return 1;
}

CMD:comprarpecas(playerid, params[])
{
	new compid = 60;

	if(PlayerData[playerid][pJob] != JOB_MECHANIC && PlayerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "Você não é um mecanico");

	if(!IsPlayerInRangeOfPoint(playerid, 5.0, StorageData[compid][in_posx], StorageData[compid][in_posy], StorageData[compid][in_posz]))
	{
		SetPlayerCheckpoint(playerid, StorageData[compid][in_posx], StorageData[compid][in_posy], StorageData[compid][in_posz], 4.0);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_COMP;

		SendClientMessage(playerid, COLOR_LIGHTRED, "Você não se encontra em um armazenamento. então marcamos no mapa.");
		return 1;
	}
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid), amount, tmp2[16];

		if (GetVehicleModel(vehicleid) != 525)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está dentro de um reboque");

	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no banco do motorista");

		if (sscanf(params, "dS()[16]", amount, tmp2)) {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você está limitado a 1-2,000");
		    SendClientMessage(playerid, COLOR_WHITE, "!! Cada peça tem seu proprio produto 25 peças!!");
		    return 1;
		}

		new string[16], price = amount*StorageData[compid][in_price], slot = -1;
		if (!sscanf(tmp2, "s[16]", string)) {

	        if(strcmp(string,"sim",true) == 0)
			{

				if(PlayerData[playerid][pCash] <  price)
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui dinheiro suficiente para comprar");

				if(StorageData[compid][in_stock] <  amount)
				    return SendClientMessage(playerid, COLOR_WHITE, "Esta industria não é suficiente.");

                if((slot = Car_GetID(vehicleid)) != -1) {
                    if(CarData[slot][carComps]+(amount*25) < 50000)
                    {
						PlayerData[playerid][pCash] -= price;
						//CoreVehicles[vehicleid][vehComponent] += amount*25;
	                    CarData[slot][carComps]+=amount*25;

						StorageData[compid][in_stock]-=amount;
						if(StorageData[compid][in_stock] < 0) StorageData[compid][in_stock] = 0;
			   			UpdateStorage(compid);

						SendClientMessageEx(playerid, COLOR_WHITE, "Você comprou %d(%d Produtos) Coloque as caixas em seu caminhão.", amount, amount*25);
					}
					else SendClientMessage(playerid, COLOR_WHITE, "não pode comprar mais do que isso 1-2,000");
				}
				else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVIDOR: Este pedido está disponível apenas para veículos particulares. Mas Você está em um veículo público (estático)");

				return 1;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "Cost: {E85050}%s", FormatNumber(price));
		SendClientMessageEx(playerid, COLOR_WHITE, "USE: /comprarpecas %d sim", amount);
	}
	return 1;
}

CMD:pintarcarro(playerid, params[])//revisar
{
	if(PlayerData[playerid][pJob] != JOB_MECHANIC && PlayerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "Você não é um mecanico");

	new carid = -1, pcarid = -1;

    if((carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

        if(CarData[carid][carModel] != 525)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não está dentro de um reboque");

        new color1, color2, userid, confirm[16];

		if (sscanf(params, "uddS()[16]", userid, color1, color2, confirm)) return SendSyntaxMessage(playerid, "/pintarcarro [playerid/PartOfName] [color 1] [color 2]");

		if(userid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]{ddS()[16]}", maskid);
			if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
			}
		}

		if(color1 > 255 || color2 > 255 || color1 < 0 || color2 < 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "A cor do veículo: 0-255");

		/*if(userid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "You can not offer services to yourself!");*/

		if(tToAccept[userid] != OFFER_TYPE_NONE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador já possui uma oferta!");

		if (!IsPlayerNearPlayer(playerid, userid, 10.0))
		   return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.or não está próximo a Você.");

		if((pcarid = Car_GetID(GetPlayerVehicleID(userid))) == -1)
		    return SendClientMessage(playerid, COLOR_GRAD1, "O jogador não está dentro do carro.");

      	if (!strcmp(confirm, "sim", true) && strlen(confirm))
		{
			if(CarData[carid][carComps] < 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui peças suficientes para este serviço.");

			SendClientMessage(playerid, COLOR_YELLOW, "SERVER: ????'????");

			pToAccept[userid] = playerid;
			tToAccept[userid] = OFFER_TYPE_SERVICE;

			SetPVarInt(playerid, "color1", color1);
			SetPVarInt(playerid, "color2", color2);

			serviceComp[playerid] = 10;
			serviceTowtruck[playerid] = carid;
			serviceCustomer[playerid] = pcarid;
			serviceFocus[playerid] = 0;
			serviced[playerid] = 5;

			format(szString, sizeof(szString), "%s ofereceu o serviço ~y~para pintar a lataria do carro ~w~%s~n~~p~pressione ~g~Y~p~ para aceitar ou ~r~N ~p~para negar.", ReturnName(pToAccept[userid], 0), g_arrVehicleNames[CarData[pcarid][carModel] - 400]);
			ShowPlayerFooter(userid, szString, -1);
		}
		else {
			SendClientMessage(playerid, COLOR_YELLOW, "O serviço deve aplicar todas as 10 peças.");
			SendSyntaxMessage(playerid, "/pintarcarro %d %d sim", color1, color2);
		}
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVIDOR: Este comando sí está disponível para veículos particulares, mas Você está em um veículo público (estático)");

	return 1;
}


CMD:servico(playerid, params[])
{

	if(PlayerData[playerid][pJob] != JOB_MECHANIC && PlayerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "Você não é um mecanico");

	new
		userid, type, confirm[16], carid, pcarid;


    if(!IsPlayerInAnyVehicle(playerid))
        return SendClientMessage(playerid, COLOR_GRAD1, "Você não está dentro de um reboque");

    if((carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

        if(CarData[carid][carModel] != 525)
			return SendClientMessage(playerid, COLOR_GRAD1, "Você não está dentro de um reboque");

		if (sscanf(params, "udS()[16]", userid, type, confirm))
		{
			SendSyntaxMessage(playerid, "/servico [PlayerID/PartOfName] [service]");
			SendClientMessage(playerid, COLOR_GRAD1, "Service 1:{FFFFFF} Melhorar estado do carro");
			SendClientMessage(playerid, COLOR_GRAD1, "Type 2:{FFFFFF} Reparo da lataria (( Danos visuais ))");
			SendClientMessage(playerid, COLOR_GRAD1, "Type 3:{FFFFFF} Substituição da bateria");
			SendClientMessage(playerid, COLOR_GRAD1, "Type 4:{FFFFFF} Substituição do motor");
			return 1;
		}
		if(userid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "s[24]{dS()[16]}", maskid);
			if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
			}
		}

		/*if(userid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "You can not offer services to yourself!");*/

		if(tToAccept[userid] != OFFER_TYPE_NONE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador já possui uma oferta!");

		if (!IsPlayerNearPlayer(playerid, userid, 10.0))
		   return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.or não está próximo a Você.");

		if((pcarid = Car_GetID(GetPlayerVehicleID(userid))) == -1)
		    return SendClientMessage(playerid, COLOR_GRAD1, "O jogador não está dentro do carro.");


		if(type >= 1 && type <= 4)
		{

			new comp = 0, service_name[64], model=CarData[pcarid][carModel];

			switch(type) {
			 	case 1: {
			 	    new Float:maxhealth = GetVehicleDataHealth(model);
			 		comp = floatround(((maxhealth - CoreVehicles[CarData[pcarid][carVehicle]][vehCrash]) / 50.0 ) * 2, floatround_round);
					format(service_name, sizeof(service_name), "reparar veículo");
				}
				case 2: {
				    comp = 0;
                    GetVehicleDamageStatus(CarData[pcarid][carVehicle],CarData[pcarid][carDamage][0],CarData[pcarid][carDamage][1],CarData[pcarid][carDamage][2],CarData[pcarid][carDamage][3]);
					for(new i=0;i!=4;i++) if(CarData[pcarid][carDamage][i] != 0) comp += 10;
					format(service_name, sizeof(service_name), "reparar lataria");
				}
				case 3: {
					new Float:max_battery = VehicleData[model - 400][c_battery]; // 341200 use Component 24371

					comp = floatround(VehicleData[model - 400][c_price] / 0.50) + floatround(max_battery * 12.0);

					format(service_name, sizeof(service_name), "substituir a bateria");
				}
				case 4: {
				    new Float:max_engine = VehicleData[model - 400][c_engine]; //486914

					comp = floatround(VehicleData[model - 400][c_price] / 0.75) + floatround(max_engine * 12.0);

					format(service_name, sizeof(service_name), "substituir o motor");
				}
			}

			if(!comp) return SendClientMessage(playerid, COLOR_LIGHTRED, "Esse serviço não está disponível para o veículo atual.");

      		if (!strcmp(confirm, "sim", true) && strlen(confirm))
		    {
		        if(CarData[carid][carComps] < comp) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não possui peças suficientes para este serviço.");

				SendClientMessage(playerid, COLOR_YELLOW, "SERVIDOR: Proposta apresentada");


				pToAccept[userid] = playerid;
				tToAccept[userid] = OFFER_TYPE_SERVICE;

				serviceComp[playerid] = comp;
				serviceTowtruck[playerid] = carid;
				serviceCustomer[playerid] = pcarid;
				serviceFocus[playerid] = 0;
				serviced[playerid] = type;

				format(szString, sizeof(szString), "%s ofereceu um serviço ~y~%s ~w~%s~n~~p~pressione ~g~Y~p~ para aceitar ou ~r~N ~p~para negar.", ReturnName(pToAccept[userid], 0), service_name, g_arrVehicleNames[CarData[pcarid][carModel] - 400]);
			 	ShowPlayerFooter(userid, szString, -1);
		    }
			else {

				SendClientMessageEx(playerid, COLOR_YELLOW, "Este serviço requer todos os componentes, Você precisa de %d peças", comp);
				SendSyntaxMessage(playerid, "/servico [PlayerID/PartOfName] %d sim", type);
			}

			/*SendNearbyMessage(playerid, 20.0, COLOR_PURPLE, "* %s Proposed to %s %s of %s", ReturnName(playerid, 0), fixname, ReturnVehicleName(CarData[pcarid][carVehicle]), ReturnName(userid, 0));
			format(string, sizeof(string), "* %s want %s %s your Price %s (?? \"/approve mechanic\" to accept)" , ReturnName(playerid, 0), fixname, ReturnVehicleName(CarData[pcarid][carVehicle]), FormatNumber(price));
			SendClientMessage(userid, COLOR_WHITE, string);*/

		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "serviços disponíveis apenas 1-4");
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVIDOR: Este pedido está disponível apenas para veículos particulares, Você está em um veículo público. (estático)");


	return 1;
}

CMD:checarpecas(playerid, params[])
{
	if(PlayerData[playerid][pJob] != JOB_MECHANIC && PlayerData[playerid][pSideJob] != JOB_MECHANIC)
	    return SendClientMessage(playerid, COLOR_GRAD2, "Você não é um mecanico");

	new slot = -1, vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) != 525)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em um reboque");

    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no banco do motorista");

    if((slot = Car_GetID(vehicleid)) != -1) {
		SendClientMessageEx(playerid, COLOR_WHITE, "peças: %d", CarData[slot][carComps]);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "SERVIDOR: Este pedido está disponível apenas para veículos particulares, Você está em um veículo público. (estático)");
	return 1;
}

CMD:listadecores(playerid, params[])
{
	new id = -1;

	if ((PlayerData[playerid][pJob] == JOB_MECHANIC || PlayerData[playerid][pSideJob] == JOB_MECHANIC) || ((id = Bizz_Nearest(playerid)) != -1 && BizInfo[id][bType] == 4))
	{
	    new
			string[3344];

	    string = "";

		for(new i = 0; i < 256; i++)
		{
		    if(i > 0 && (i % 16) == 0)
		    {
		        format(string, sizeof(string), "%s\n{%06x}#%03d ", string, g_arrSelectColors[i] >>> 8, i);
			}
		    else
			{
				format(string, sizeof(string), "%s{%06x}#%03d ", string, g_arrSelectColors[i] >>> 8, i);
			}
		}
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Lista de ID's das cores:", string, "Fechar", "");
	}
	else SendClientMessage(playerid, COLOR_GRAD1, "Você não está na concessionaria de veículos.");


	return 1;
}

/*CMD:attach(playerid, params[])
{
	new vid = GetPlayerVehicleID(playerid), targetid = INVALID_PLAYER_ID;

	if (GetVehicleModel(vid) != 525)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You are not sitting on Tow Truck");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not sit at the driver's seat of the vehicle.");

	if (sscanf(params, "u", targetid))
	{
		SendSyntaxMessage(playerid, "/attach [playerID]");
		return 1;
	}

	if (targetid != INVALID_PLAYER_ID)
	    return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");

	if (targetid == playerid)
	    return SendClientMessage(playerid, COLOR_GRAD1, "You can not use it yourself.");

	if (GetPlayerState(targetid) != PLAYER_STATE_PASSENGER)
        return SendClientMessage(playerid, COLOR_LIGHTRED, "The player is not a passenger.");

	new vehicleid = GetPlayerVehicleID(targetid);

	if (!IsDoorVehicle(vehicleid))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Can not drag these vehicles.");

	AttachTrailerToVehicle(vehicleid, vid);
	return 1;
}*/

CMD:rebocar(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) {
		new m = GetVehicleModel(GetPlayerVehicleID(playerid));
		if (m == 525 || m == 443) {
			if(GetPlayerState(playerid)==2) {
				if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
				else {
					new currentveh;
					if (sscanf(params, "i", currentveh)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Use: /rebocar [ID do veículo]");
					else {
						new Float:vehx, Float:vehy, Float:vehz;
						GetVehiclePos(currentveh, vehx, vehy, vehz);
						if(IsPlayerInRangeOfPoint(playerid, 10, vehx, vehy, vehz)) {
							AttachTrailerToVehicle(currentveh,GetPlayerVehicleID(playerid));
						}
						else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está próximo a este veículo.");
					}
				}
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você precisa ser o condutor do guincho.");
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em um guincho.");
	}
	return 1;	
}

CMD:sairemprego2(playerid)
{
	if(PlayerData[playerid][pSideJob] != 0)
	{
	    PlayerData[playerid][pSideJob]=0;
	    return SendClientMessage(playerid, COLOR_GRAD1, " INFO: Deixou a sua carreira actual.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRo: Você não tem uma carreira actual.");

}

CMD:sairemprego(playerid) {
	if(PlayerData[playerid][pJob])
	{
		if(PlayerData[playerid][pJob] != JOB_MECHANIC && PlayerData[playerid][pJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_GUIDE) {
			if(PlayerData[playerid][pDonateRank])
			{
				if(PlayerData[playerid][pContractTime])
				{
					PlayerData[playerid][pJob] = 0;
					PlayerData[playerid][pChar] = 0;
					PlayerData[playerid][pContractTime] = 0;
					return SendClientMessage(playerid, COLOR_LIGHTBLUE, "INFO: Cumpriu o contrato durante uma hora e deixou o trabalho.");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTBLUE, "INFO: Ainda lhe resta 1 hora para cumprir e rescindir o seu contrato.");
			}
			else
			{
				if(PlayerData[playerid][pContractTime] >= 5)
				{
					PlayerData[playerid][pJob] = 0;
					PlayerData[playerid][pChar] = 0;
					PlayerData[playerid][pContractTime] = 0;
					return SendClientMessage(playerid, COLOR_LIGHTBLUE, "INFO: Cumpriu o contrato durante 5 horas e deixou o trabalho.");
				}
				else
				{
					return SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "INFO: Ainda tem %d Horas para seguir e rescindir o seu contrato.", 5 - PlayerData[playerid][pContractTime]);
				}
			}
		} else {
			PlayerData[playerid][pJob]=0;
			return SendClientMessage(playerid, COLOR_LIGHTBLUE, "INFO: Deixou o trabalho hoje.");
		}
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não tem trabalho hoje.");
}

CMD:bolsaemprego(playerid)
{
    if(IsJobSide(PlayerData[playerid][pJob])) {

        if(PlayerData[playerid][pJob] != JOB_NONE || PlayerData[playerid][pSideJob] != JOB_NONE)
        {
            new sidejob = PlayerData[playerid][pSideJob];

            PlayerData[playerid][pSideJob] = PlayerData[playerid][pJob];
            PlayerData[playerid][pJob] = sidejob;

            if(PlayerData[playerid][pSideJob] == JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "A sua principal ocupação é uma carreira.");
			else if(PlayerData[playerid][pJob] == JOB_NONE) SendClientMessage(playerid, COLOR_LIGHTRED, "A sua ocupação principal é substituida por uma ocupação extra.");
		}
        else
        {
            SendClientMessage(playerid, COLOR_LIGHTRED, "Você já possui um emprego. Utilize o comando /sairemprego ou /sairemprego2 para deixa-lo.");
        }
    }
    else SendClientMessage(playerid, COLOR_LIGHTRED, "Pode simplesmente mudar de emprego Motorista de táxi, Guia ou mecanico de Automoveis.");
	return 1;
}

CMD:empregomecanico(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 3.0, 88.4620,-165.0116,2.5938)) {

		if(PlayerData[playerid][pJob] == JOB_NONE)
		{
	        PlayerData[playerid][pJob] = JOB_MECHANIC;
	        ShowPlayerFooter(playerid, "~r~Parabéns,~n~~w~Agora Você é um ~y~mecanico.~n~~w~Utilize /ajudaemprego para mais informações.", 8000);

			if(PlayerData[playerid][pSideJob] == JOB_NONE) SendClientMessage(playerid, COLOR_GRAD6, "/bolsaemprego Para fazer dela uma carreira extra.");
		}
		else
		{
		    if(PlayerData[playerid][pSideJob] == JOB_NONE)
		    {
		        PlayerData[playerid][pSideJob] = JOB_MECHANIC;
		        ShowPlayerFooter(playerid, "~r~Parabéns,~n~~w~Agora Você é um ~y~mecanico.~n~~w~Utilize /ajudaemprego para mais informações.", 8000);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Você já possui um emprego. Utilize o comando /sairemprego ou /sairemprego2 para deixa-lo.");
		    }
		}
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "não se encontra no local de trabalho.");
}
CMD:empregotaxista(playerid)
{
	if (IsPlayerInRangeOfPoint(playerid, 3.0, 1752.9860,-1902.6703,13.5629)) {

		if(PlayerData[playerid][pJob] == JOB_NONE)
		{
	        PlayerData[playerid][pJob] = JOB_TAXI;
	        ShowPlayerFooter(playerid, "~r~Parabéns,~n~~w~Agora Você é um ~y~taxista.~n~~w~Utilize /ajudaemprego para mais informações.", 8000);

			if(PlayerData[playerid][pSideJob] == JOB_NONE) SendClientMessage(playerid, COLOR_GRAD6, "/bolsaemprego Para fazer dela uma carreira extra.");
		}
		else
		{
		    if(PlayerData[playerid][pSideJob] == JOB_NONE)
		    {
		        PlayerData[playerid][pSideJob] = JOB_TAXI;
		        ShowPlayerFooter(playerid, "~r~Parabéns,~n~~w~Agora Você é um ~y~mecanico.~n~~w~Utilize /ajudaemprego para mais informações.", 8000);
		    }
		    else
		    {
		        SendClientMessage(playerid, COLOR_LIGHTRED, "Você já possui um emprego. Utilize o comando /sairemprego ou /sairemprego2 para deixa-lo.");
		    }
		}
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "não se encontra no local de trabalho.");
}
CMD:empregoagricultor(playerid)
{
	if(PlayerData[playerid][pLevel] > 3)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Este trabalho é somente para o nível 1-3!");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) != FACTION_GANG)
	    return SendClientMessage(playerid, COLOR_WHITE, "Desculpe, este trabalho é para o público (Qualquer pessoa que não esteja no grupo oficial)");

	if (IsPlayerInRangeOfPoint(playerid, 3.0, -382.5893,-1426.3422,26.2217)) {

	    if(PlayerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já possui um emprego. Utilize o comando /sairemprego ou /sairemprego2 para deixa-lo.");

        PlayerData[playerid][pJob] = JOB_FARMER;
        //ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~Farmer.~n~~w~/jobhelp.", 8000);
        SendClientMessage(playerid, COLOR_GRAD1, "Parabéns, agora Você é um Agricultor. Utilize /ajudaemprego para mais informações.");
		return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "Você não está no seu local de trabalho.");
}

CMD:vendedorarmas(playerid)
{
	if(PlayerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já possui um emprego. Utilize o comando /sairemprego ou /sairemprego2 para deixa-lo.");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) != FACTION_GANG)
	    return SendClientMessage(playerid, COLOR_WHITE, "Desculpe, este trabalho é para o público (Qualquer pessoa que não esteja no grupo oficial)");

	if (IsAtBlackMarket(playerid)) {

        PlayerData[playerid][pJob] = JOB_WPDEALER;
        ShowPlayerFooter(playerid, "~r~Parabéns,~n~~w~Você agora é um ~y~vendedor de armas.~n~~w~Utilize /ajudaemprego para mais informações.", 8000);
        //SendClientMessageEx(playerid, -1, "Now you are %s already", ReturnJobName(playerid, JOB_TRUCKER));
		return 1;
	}
	else
	{
	    SendClientMessage(playerid, COLOR_GRAD1, "Você não está no seu local de trabalho.");
	}
	return 1;
}

CMD:fornecedorarmas(playerid)
{
	if(PlayerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já possui um emprego. Utilize o comando /sairemprego ou /sairemprego2 para deixa-lo.");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) == FACTION_GANG) {
		if (IsAtBlackMarket(playerid)) {

	        PlayerData[playerid][pJob] = JOB_SUPPLIER;
	        ShowPlayerFooter(playerid, "~r~Parabéns,~n~~w~Você agora é um ~y~fornecedor de armas.~n~~w~/ajudaemprego.", 8000);
	        //SendClientMessageEx(playerid, -1, "Now you are %s already", ReturnJobName(playerid, JOB_TRUCKER));
			return 1;
		}
		else
		{
		    SendClientMessage(playerid, COLOR_GRAD1, "Você não está no seu local de trabalho.");
		}
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Este trabalho é somente para membros de gangues ou organizações oficiais.");
	return 1;
}

CMD:empregocaminhoneiro(playerid)
{
	if(PlayerData[playerid][pJob] != 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já possui um emprego. Utilize o comando /sairemprego ou /sairemprego2 para deixa-lo.");

	if (GetFactionType(playerid) != 0 && GetFactionType(playerid) != FACTION_GANG)
	    return SendClientMessage(playerid, COLOR_WHITE, "Desculpe, este trabalho é para o público (Qualquer pessoa que não esteja no grupo oficial)");

	if (IsPlayerInRangeOfPoint(playerid, 3.0, -78.0338,-1136.1221,1.0781)) {

        PlayerData[playerid][pJob] = JOB_TRUCKER;
        //ShowPlayerFooter(playerid, "~r~Congratulations,~n~~w~You are now a ~y~Farmer.~n~~w~/jobhelp.", 8000);
        SendClientMessageEx(playerid, -1, "Parabéns, agora Você é um %s. Utilize /ajudaemprego para mais informações.  ", ReturnJobName(playerid, JOB_TRUCKER));
		return 1;
	}
	else
	{
	    SetPlayerCheckpoint(playerid, -78.0338, -1136.1221, 1.0781, 3.0);
	}
	return 1;
}

CMD:colhedor(playerid)
{
	if(PlayerData[playerid][pJob] != JOB_FARMER)
	    return SendClientMessage(playerid, COLOR_GRAD2, "Os meninos da cidade não podem fazer isso!");

	if(PlayerData[playerid][pLevel] > 3)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Este trabalho é somente para o nível 1-3!");


	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) != 532)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está em uma colheitadeira.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	 	return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no banco do motorista.");

	if (IsPlayerInRangeOfPoint(playerid, 100.0, -377.8374,-1433.8853,25.7266)) {

		if(far_start[playerid]) return SendClientMessage(playerid, COLOR_GRAD1, "Você já iniciou a colheita.");

		far_place[playerid]=0;
		far_start[playerid]=1;
		far_veh[playerid]=vehicleid;

		SendClientMessage(playerid, COLOR_WHITE, "Você começou a colher a plantação.");

		StartHarvesting(playerid);
        return 1;
	}
	else if (IsPlayerInRangeOfPoint(playerid, 100.0, -53.5525,70.3079,4.0933)) {

		if(far_start[playerid]) return SendClientMessage(playerid, COLOR_GRAD1, "Você já iniciou a colheita.");

		far_place[playerid]=1;
		far_start[playerid]=1;
		far_veh[playerid]=vehicleid;

		SendClientMessage(playerid, COLOR_WHITE, "Você começou a colher a plantação.");

		StartHarvesting(playerid);
        return 1;
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "Você não está em uma fazenda");
}

CMD:pararcolheita(playerid)
{
	if(far_start[playerid])
	{
		gPlayerCheckpointX[playerid]=0.0;
		gPlayerCheckpointY[playerid]=0.0;
		gPlayerCheckpointZ[playerid]=0.0;

		DisablePlayerCheckpoint(playerid);
		gPlayerCheckpointStatus[playerid] = CHECKPOINT_NONE;

		far_start[playerid]=0; far_veh[playerid]=INVALID_VEHICLE_ID;

		return SendClientMessage(playerid, COLOR_WHITE, "Você parou de colher os produtos agrícolas.");
	}
	else return SendClientMessage(playerid, COLOR_GRAD1, "Você ainda não começou a colheita.");
}
// Libery Harvest
stock StartHarvesting(playerid)
{
    new rand;
	if(far_place[playerid])
	{
		rand = random(sizeof(BlueFarm));
		SetPlayerCheckpointEx(playerid, BlueFarm[rand][0],BlueFarm[rand][1],BlueFarm[rand][2], 5.0, CHECKPOINT_FARMER, rand);
		
		
	}
	else
	{
		rand = random(sizeof(FlintFarm));
		SetPlayerCheckpointEx(playerid, FlintFarm[rand][0],FlintFarm[rand][1],FlintFarm[rand][2], 5.0, CHECKPOINT_FARMER, rand);
	}
	return 1;
}
/*CMD:sound(playerid)
{
	return PlayerPlaySoundEx(playerid, 17803);
}*/

forward RandomVehiclePark(carid);
public RandomVehiclePark(carid)
{
	new
		Float:vehDistance[4],
		Float:vehRandom[4],
		string[256],
		bool:checked = false
	;

	new rows, rand;
	cache_get_row_count(rows);

	if(CarData[carid][carModel] == 532) {

		rand = random(sizeof(gCombineSpawn));

		vehRandom[0]=gCombineSpawn[rand][0];
		vehRandom[1]=gCombineSpawn[rand][1];
		vehRandom[2]=gCombineSpawn[rand][2];
		vehRandom[3]=gCombineSpawn[rand][3];
	}
	else if(IsABoatModel(CarData[carid][carModel]))
	{
		rand = random(sizeof(gBoatSpawn));

		vehRandom[0]=gBoatSpawn[rand][0];
		vehRandom[1]=gBoatSpawn[rand][1];
		vehRandom[2]=gBoatSpawn[rand][2];
		vehRandom[3]=gBoatSpawn[rand][3];
	}
	else {
		rand = random(sizeof(gVehicleSpawn));

		vehRandom[0]=gVehicleSpawn[rand][0];
		vehRandom[1]=gVehicleSpawn[rand][1];
		vehRandom[2]=gVehicleSpawn[rand][2];
		vehRandom[3]=gVehicleSpawn[rand][3];
	}


  	if(CarData[carid][carRandomFailed] < 10)
  	{
		for (new i = 0; i < rows; i ++)
		{
			cache_get_value_index_float(i, 0,	vehDistance[0]);
			cache_get_value_index_float(i, 1,	vehDistance[1]);
			cache_get_value_index_float(i, 2,	vehDistance[2]);

			if (TwoPointCompare(4.5, vehRandom[0], vehRandom[1], vehRandom[2], vehDistance[0], vehDistance[1], vehDistance[2])) {
				checked = true;
				break;
			}
		}
	}
	else
	{
		if(CarData[carid][carModel] == 532) {

		 	for (new x = 0; x < sizeof(gCombineSpawn); x ++)
			{
				vehRandom[0]=gCombineSpawn[rand][0];
				vehRandom[1]=gCombineSpawn[rand][1];
				vehRandom[2]=gCombineSpawn[rand][2];
				vehRandom[3]=gCombineSpawn[rand][3];

				for (new i = 0; i < rows; i ++)
				{
					cache_get_value_index_float(i, 0,	vehDistance[0]);
					cache_get_value_index_float(i, 1,	vehDistance[1]);
					cache_get_value_index_float(i, 2,	vehDistance[2]);

					if (TwoPointCompare(4.5, vehRandom[0], vehRandom[1], vehRandom[2], vehDistance[0], vehDistance[1], vehDistance[2])) {
						checked = true;
						break;
					}
				}

				if(!checked) break;
			}

		}
		else if(IsABoatModel(CarData[carid][carModel]))
		{
		 	for (new x = 0; x < sizeof(gBoatSpawn); x ++)
			{
				vehRandom[0]=gBoatSpawn[rand][0];
				vehRandom[1]=gBoatSpawn[rand][1];
				vehRandom[2]=gBoatSpawn[rand][2];
				vehRandom[3]=gBoatSpawn[rand][3];

				for (new i = 0; i < rows; i ++)
				{
					cache_get_value_index_float(i, 0,	vehDistance[0]);
					cache_get_value_index_float(i, 1,	vehDistance[1]);
					cache_get_value_index_float(i, 2,	vehDistance[2]);

					if (TwoPointCompare(4.5, vehRandom[0], vehRandom[1], vehRandom[2], vehDistance[0], vehDistance[1], vehDistance[2])) {
						checked = true;
						break;
					}
				}

				if(!checked) break;
			}
		}
		else
		{
		 	for (new x = 0; x < sizeof(gVehicleSpawn); x ++)
			{
				vehRandom[0]=gVehicleSpawn[rand][0];
				vehRandom[1]=gVehicleSpawn[rand][1];
				vehRandom[2]=gVehicleSpawn[rand][2];
				vehRandom[3]=gVehicleSpawn[rand][3];

				for (new i = 0; i < rows; i ++)
				{
					cache_get_value_index_float(i, 0,	vehDistance[0]);
					cache_get_value_index_float(i, 1,	vehDistance[1]);
					cache_get_value_index_float(i, 2,	vehDistance[2]);

					if (TwoPointCompare(4.5, vehRandom[0], vehRandom[1], vehRandom[2], vehDistance[0], vehDistance[1], vehDistance[2])) {
						checked = true;
						break;
					}
				}

				if(!checked) break;
			}
		}

		if(checked)
	    {
	        CarData[carid][carRandomFailed]=0;
			CarData[carid][carPos][0]=vehRandom[0];
			CarData[carid][carPos][1]=vehRandom[1];
			CarData[carid][carPos][2]=vehRandom[2];
			CarData[carid][carPos][3]=vehRandom[3];

			format(string, sizeof(string), "UPDATE `cars` SET `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f' WHERE `carID` = '%d'",
		        CarData[carid][carPos][0],
		        CarData[carid][carPos][1],
		        CarData[carid][carPos][2],
		        CarData[carid][carPos][3],
		        CarData[carid][carID]
			);
			return mysql_tquery(dbCon, string);
	    }
	}

	if(!checked)
	{
	    CarData[carid][carRandomFailed]=0;
		CarData[carid][carPos][0]=vehRandom[0];
		CarData[carid][carPos][1]=vehRandom[1];
		CarData[carid][carPos][2]=vehRandom[2];
		CarData[carid][carPos][3]=vehRandom[3];

		format(string, sizeof(string), "UPDATE `cars` SET `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f' WHERE `carID` = '%d'",
	        CarData[carid][carPos][0],
	        CarData[carid][carPos][1],
	        CarData[carid][carPos][2],
	        CarData[carid][carPos][3],
	        CarData[carid][carID]
		);
		return mysql_tquery(dbCon, string);
	}
	else {
	    CarData[carid][carRandomFailed]++;

		format(string, sizeof(string), "SELECT carPosX, carPosY, carPosZ FROM `cars`");
		mysql_tquery(dbCon, string, "RandomVehiclePark", "d", carid);
	}

	return 1;
}

stock TwoPointCompare(Float:radi, Float:ox, Float:oy, Float:oz, Float:x, Float:y, Float:z)
{
	new Float:tempposx, Float:tempposy, Float:tempposz;

	tempposx = (ox -x);
	tempposy = (oy -y);
	tempposz = (oz -z);

	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

CMD:janela(playerid, params[])
{
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD2, "Você deve estar dentro de um veículo para utilizar este comando.");

	new vehicleid = GetPlayerVehicleID(playerid);
	if (!IsDoorVehicle(vehicleid)) return SendClientMessage(playerid, COLOR_GRAD2, "Este veículo não possui janelas.");

	new item[16];

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	  	if(sscanf(params, "s[32]", item)) {
	  	    SendClientMessage(playerid, COLOR_LIGHTRED, "[ ! ]{FFFFFF} DICA: Quando Você é o motorista, é possível escolher uma janela para abrir.");
			SendClientMessage(playerid, COLOR_LIGHTRED, "USE: {FFFFFF}/janela [todas/frenteesquerda(fe)/frentedireita(fd)/trasesquerda(te)/trasdireita(td)]");
		}
		else
		{
			new wdriver, wpassenger, wbackleft, wbackright;
			GetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, wbackright);

			if(strcmp(item, "todas", true) == 0)
			{
			    if(wdriver == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levanta todas as janelas.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
				}
				else if(wdriver == VEHICLE_PARAMS_ON || wdriver == VEHICLE_PARAMS_UNSET)
				{
		    		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixa todas as janelas.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
				}
			}
			if(strcmp(item, "frenteesquerda", true) == 0 || strcmp(item, "fe", true) == 0)
			{
			    if(wdriver == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levanta a janela dianteira esquerda.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, 1, wpassenger, wbackleft, wbackright);
				}
				else if(wdriver == VEHICLE_PARAMS_ON || wdriver == VEHICLE_PARAMS_UNSET)
				{
		    		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixa a janela dianteira esquerda.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, 0, wpassenger, wbackleft, wbackright);
				}
			}
			if(strcmp(item, "frentedireita", true) == 0 || strcmp(item, "fd", true) == 0)
			{
			    if(wpassenger == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levanta a janela dianteira direita.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, wdriver, 1, wbackleft, wbackright);
				}
				else if(wpassenger == VEHICLE_PARAMS_ON || wpassenger == VEHICLE_PARAMS_UNSET)
				{
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixa a janela dianteira direita.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, wdriver, 0, wbackleft, wbackright);
				}
			}
			if(strcmp(item, "trasesquerda", true) == 0 || strcmp(item, "te", true) == 0)
			{
	      		if(wbackleft == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levanta a janela traseira esquerda.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 1, wbackright);
				}
				else if(wbackleft == VEHICLE_PARAMS_ON || wbackleft == VEHICLE_PARAMS_UNSET)
				{
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixa a janela traseira esquerda.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 0, wbackright);
				}
			}
			if(strcmp(item, "trasdireita", true) == 0 || strcmp(item, "rr", true) == 0)
			{
			    if(wbackright == VEHICLE_PARAMS_OFF)
			    {
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levanta a janela traseira direita.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 1);
				}
				else if(wbackright == VEHICLE_PARAMS_ON || wbackright == VEHICLE_PARAMS_UNSET)
				{
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixa a janela traseira direita.", ReturnName(playerid, 0));
					SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 0);
				}
			}
		}
	}
	else if(GetPlayerState(playerid) == PLAYER_STATE_PASSENGER)
	{
		new iSeat = GetPlayerVehicleSeat(playerid);
		new wdriver, wpassenger, wbackleft, wbackright;
		GetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, wbackright);

		if(iSeat == 128) return SendClientMessage(playerid, COLOR_LIGHTRED, "Apenas o motorista pode utilizar parametros adicionais.");

		if(iSeat == 1)
		{
			if(wpassenger == VEHICLE_PARAMS_OFF)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levantou a sua janela.", ReturnName(playerid, 0));
				SetVehicleParamsCarWindows(vehicleid, wdriver, 1, wbackleft, wbackright);
			}
			else if(wpassenger == VEHICLE_PARAMS_ON || wpassenger == VEHICLE_PARAMS_UNSET)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixou a sua janela.", ReturnName(playerid, 0));
				SetVehicleParamsCarWindows(vehicleid, wdriver, 0, wbackleft, wbackright);
			}
		}
		else if(iSeat == 2)
		{
			if(wbackleft == VEHICLE_PARAMS_OFF)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levantou a sua janela.", ReturnName(playerid, 0));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 1, wbackright);
			}
			else if(wbackleft == VEHICLE_PARAMS_ON || wbackleft == VEHICLE_PARAMS_UNSET)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixou a sua janela.", ReturnName(playerid, 0));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, 0, wbackright);
			}
		}
		else if(iSeat == 3)
		{
			if(wbackright == VEHICLE_PARAMS_OFF)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s levantou a sua janela.", ReturnName(playerid, 0));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 1);
			}
			else if(wbackright == VEHICLE_PARAMS_ON || wbackright == VEHICLE_PARAMS_UNSET)
			{
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s abaixou a sua janela.", ReturnName(playerid, 0));
				SetVehicleParamsCarWindows(vehicleid, wdriver, wpassenger, wbackleft, 0);
			}
		}
	}
	return 1;
}

forward SetUnTazed(playerid);
public SetUnTazed(playerid)
{
    ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
    BitFlag_Off(g_PlayerFlags[playerid], IS_PLAYER_TAZER);
	TogglePlayerControllable(playerid, true);
	return 1;
}

public OnUnoccupiedVehicleUpdate(vehicleid, playerid, passenger_seat, Float:new_x, Float:new_y, Float:new_z, Float:vel_x, Float:vel_y, Float:vel_z)
{
	new testtick = GetTickCount();
	new cammode = GetPlayerCameraMode(playerid);
	if(cammode == 7 || cammode == 8 || cammode == 53 || GetPlayerWeapon(playerid) <= 15)
	{
		new newkeys,plylr,plyup;
		GetPlayerKeys(playerid,newkeys,plyup,plylr);
		if(Holding(KEY_FIRE) || (GetTickCount()-playershottick[playerid]) <= SHOT_MS)
		{
			if(GetPlayerWeapon(playerid) <= 15)
			{
				new Float:VehSize[3],Float:VehPos[3];
				GetVehicleSize(GetVehicleModel(vehicleid),VehSize[0],VehSize[1],VehSize[2]);
				GetVehiclePos(vehicleid,VehPos[0],VehPos[1],VehPos[2]);
				if(IsPlayerInRangeOfPoint(playerid,VehSize[1],VehPos[0],VehPos[1],VehPos[2]))
				{
					new animidx = GetPlayerAnimationIndex(playerid);
					if(	animidx == 1136 || animidx == 1137 || animidx == 1138 || animidx == 1141 || //Fightstyle ...
						animidx == 17 || animidx == 18 || animidx == 19 || // Bat
						animidx == 749 || animidx == 750 || animidx == 751 || // Knife
						animidx == 1545 || animidx == 1546 || animidx == 1547 || // Sword
						animidx == 313 || animidx == 314 || animidx == 315 || // CSaw
						animidx == 423 || animidx == 424 || animidx == 425 || // Dildo
						animidx == 533) //Flowerattack
					{
						if(playerblock[playerid] == 0){playerblock[playerid] = 1;}
						else{return 1;}
					}
					else
					{
						playerblock[playerid] = 0;
						return 1;
					}
				}
				else{return 1;}

				OnEmptyVehicleDamage(vehicleid,playerid,(GetTickCount()-testtick));
			}
		}
		else if(playerblock[playerid] == 1){playerblock[playerid] = 0;}
	}
    return 1;
}

stock GetVehicleSize(modelID, &Float: size_X, &Float: size_Y, &Float: size_Z) // Author: RyDeR`
{
	static const
		Float: sizeData[212][3] =
		{
			{ 2.32, 5.11, 1.63 }, { 2.56, 5.82, 1.71 }, { 2.41, 5.80, 1.52 }, { 3.15, 9.22, 4.17 },
			{ 2.20, 5.80, 1.84 }, { 2.34, 6.00, 1.49 }, { 5.26, 11.59, 4.42 }, { 2.84, 8.96, 2.70 },
			{ 3.11, 10.68, 3.91 }, { 2.36, 8.18, 1.52 }, { 2.25, 5.01, 1.79 }, { 2.39, 5.78, 1.37 },
			{ 2.45, 7.30, 1.38 }, { 2.27, 5.88, 2.23 }, { 2.51, 7.07, 4.59 }, { 2.31, 5.51, 1.13 },
			{ 2.73, 8.01, 3.40 }, { 5.44, 23.27, 6.61 }, { 2.56, 5.67, 2.14 }, { 2.40, 6.21, 1.40 },
			{ 2.41, 5.90, 1.76 }, { 2.25, 6.38, 1.37 }, { 2.26, 5.38, 1.54 }, { 2.31, 4.84, 4.90 },
			{ 2.46, 3.85, 1.77 }, { 5.15, 18.62, 5.19 }, { 2.41, 5.90, 1.76 }, { 2.64, 8.19, 3.23 },
			{ 2.73, 6.28, 3.48 }, { 2.21, 5.17, 1.27 }, { 4.76, 16.89, 5.92 }, { 3.00, 12.21, 4.42 },
			{ 4.30, 9.17, 3.88 }, { 3.40, 10.00, 4.86 }, { 2.28, 4.57, 1.72 }, { 3.16, 13.52, 4.76 },
			{ 2.27, 5.51, 1.72 }, { 3.03, 11.76, 4.01 }, { 2.41, 5.82, 1.72 }, { 2.22, 5.28, 1.47 },
			{ 2.30, 5.55, 2.75 }, { 0.87, 1.40, 1.01 }, { 2.60, 6.67, 1.75 }, { 4.15, 20.04, 4.42 },
			{ 3.66, 6.01, 3.28 }, { 2.29, 5.86, 1.75 }, { 4.76, 17.02, 4.30 }, { 2.42, 14.80, 3.15 },
			{ 0.70, 2.19, 1.62 }, { 3.02, 9.02, 4.98 }, { 3.06, 13.51, 3.72 }, { 2.31, 5.46, 1.22 },
			{ 3.60, 14.56, 3.28 }, { 5.13, 13.77, 9.28 }, { 6.61, 19.04, 13.84 }, { 3.31, 9.69, 3.63 },
			{ 3.23, 9.52, 4.98 }, { 1.83, 2.60, 2.72 }, { 2.41, 6.13, 1.47 }, { 2.29, 5.71, 2.23 },
			{ 10.85, 13.55, 4.44 }, { 0.69, 2.46, 1.67 }, { 0.70, 2.19, 1.62 }, { 0.69, 2.42, 1.34 },
			{ 1.58, 1.54, 1.14 }, { 0.87, 1.40, 1.01 }, { 2.52, 6.17, 1.64 }, { 2.52, 6.36, 1.66 },
			{ 0.70, 2.23, 1.41 }, { 2.42, 14.80, 3.15 }, { 2.66, 5.48, 2.09 }, { 1.41, 2.00, 1.71 },
			{ 2.67, 9.34, 4.86 }, { 2.90, 5.40, 2.22 }, { 2.43, 6.03, 1.69 }, { 2.45, 5.78, 1.48 },
			{ 11.02, 11.28, 3.28 }, { 2.67, 5.92, 1.39 }, { 2.45, 5.57, 1.74 }, { 2.25, 6.15, 1.99 },
			{ 2.26, 5.26, 1.41 }, { 0.70, 1.87, 1.32 }, { 2.33, 5.69, 1.87 }, { 2.04, 6.19, 2.10 },
			{ 5.34, 26.20, 7.15 }, { 1.97, 4.07, 1.44 }, { 4.34, 7.84, 4.44 }, { 2.32, 15.03, 4.67 },
			{ 2.32, 12.60, 4.65 }, { 2.53, 5.69, 2.14 }, { 2.92, 6.92, 2.14 }, { 2.30, 6.32, 1.28 },
			{ 2.34, 6.17, 1.78 }, { 4.76, 17.82, 3.84 }, { 2.25, 6.48, 1.50 }, { 2.77, 5.44, 1.99 },
			{ 2.27, 4.75, 1.78 }, { 2.32, 15.03, 4.65 }, { 2.90, 6.59, 4.28 }, { 2.64, 7.19, 3.75 },
			{ 2.28, 5.01, 1.85 }, { 0.87, 1.40, 1.01 }, { 2.34, 5.96, 1.51 }, { 2.21, 6.13, 1.62 },
			{ 2.52, 6.03, 1.64 }, { 2.53, 5.69, 2.14 }, { 2.25, 5.21, 1.16 }, { 2.56, 6.59, 1.62 },
			{ 2.96, 8.05, 3.33 }, { 0.70, 1.89, 1.32 }, { 0.72, 1.74, 1.12 }, { 21.21, 21.19, 5.05 },
			{ 11.15, 6.15, 2.99 }, { 8.69, 9.00, 2.23 }, { 3.19, 10.06, 3.05 }, { 3.54, 9.94, 3.42 },
			{ 2.59, 6.23, 1.71 }, { 2.52, 6.32, 1.64 }, { 2.43, 6.00, 1.57 }, { 20.30, 19.29, 6.94 },
			{ 8.75, 14.31, 2.16 }, { 0.69, 2.46, 1.67 }, { 0.69, 2.46, 1.67 }, { 0.69, 2.47, 1.67 },
			{ 3.58, 8.84, 3.64 }, { 3.04, 6.46, 3.28 }, { 2.20, 5.40, 1.25 }, { 2.43, 5.71, 1.74 },
			{ 2.54, 5.55, 2.14 }, { 2.38, 5.63, 1.86 }, { 1.58, 4.23, 2.68 }, { 1.96, 3.70, 1.66 },
			{ 8.61, 11.39, 4.17 }, { 2.38, 5.42, 1.49 }, { 2.18, 6.26, 1.15 }, { 2.67, 5.48, 1.58 },
			{ 2.46, 6.42, 1.29 }, { 3.32, 18.43, 5.19 }, { 3.26, 16.59, 4.94 }, { 2.50, 3.86, 2.55 },
			{ 2.58, 6.07, 1.50 }, { 2.26, 4.94, 1.24 }, { 2.48, 6.40, 1.70 }, { 2.38, 5.73, 1.86 },
			{ 2.80, 12.85, 3.89 }, { 2.19, 4.80, 1.69 }, { 2.56, 5.86, 1.66 }, { 2.49, 5.84, 1.76 },
			{ 4.17, 24.42, 4.90 }, { 2.40, 5.53, 1.42 }, { 2.53, 5.88, 1.53 }, { 2.66, 6.71, 1.76 },
			{ 2.65, 6.71, 3.55 }, { 28.73, 23.48, 7.38 }, { 2.68, 6.17, 2.08 }, { 2.00, 5.13, 1.41 },
			{ 3.66, 6.36, 3.28 }, { 3.66, 6.26, 3.28 }, { 2.23, 5.25, 1.75 }, { 2.27, 5.48, 1.39 },
			{ 2.31, 5.40, 1.62 }, { 2.50, 5.80, 1.78 }, { 2.25, 5.30, 1.50 }, { 3.39, 18.62, 4.71 },
			{ 0.87, 1.40, 1.01 }, { 2.02, 4.82, 1.50 }, { 2.50, 6.46, 1.65 }, { 2.71, 6.63, 1.58 },
			{ 2.71, 4.61, 1.41 }, { 3.25, 18.43, 5.03 }, { 3.47, 21.06, 5.19 }, { 1.57, 2.32, 1.58 },
			{ 1.65, 2.34, 2.01 }, { 2.93, 7.38, 3.16 }, { 1.62, 3.84, 2.50 }, { 2.49, 5.82, 1.92 },
			{ 2.42, 6.36, 1.85 }, { 62.49, 61.43, 34.95 }, { 3.15, 11.78, 2.77 }, { 2.47, 6.21, 2.55 },
			{ 2.66, 5.76, 2.24 }, { 0.69, 2.46, 1.67 }, { 2.44, 7.21, 3.19 }, { 1.66, 3.66, 3.21 },
			{ 3.54, 15.90, 3.40 }, { 2.44, 6.53, 2.05 }, { 0.69, 2.79, 1.96 }, { 2.60, 5.76, 1.45 },
			{ 3.07, 8.61, 7.53 }, { 2.25, 5.09, 2.11 }, { 3.44, 18.39, 5.03 }, { 3.18, 13.63, 4.65 },
			{ 44.45, 57.56, 18.43 }, { 12.59, 13.55, 3.56 }, { 0.50, 0.92, 0.30 }, { 2.84, 13.47, 2.21 },
			{ 2.41, 5.90, 1.76 }, { 2.41, 5.90, 1.76 }, { 2.41, 5.78, 1.76 }, { 2.92, 6.15, 2.14 },
			{ 2.40, 6.05, 1.55 }, { 3.07, 6.96, 3.82 }, { 2.31, 5.53, 1.28 }, { 2.64, 6.07, 1.42 },
			{ 2.52, 6.17, 1.64 }, { 2.38, 5.73, 1.86 }, { 2.93, 3.38, 1.97 }, { 3.01, 3.25, 1.60 },
			{ 1.45, 4.65, 6.36 }, { 2.90, 6.59, 4.21 }, { 2.48, 1.42, 1.62 }, { 2.13, 3.16, 1.83 }
		}
	;
	if(400 <= modelID <= 611)
	{
		size_X = sizeData[modelID - 400][0];
		size_Y = sizeData[modelID - 400][1];
		size_Z = sizeData[modelID - 400][2];
		return 1;
	}
	return 0;
}

forward OnEmptyVehicleDamage(vehicleid,playerid,exems);
public OnEmptyVehicleDamage(vehicleid,playerid,exems)
{
	/*new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:vA;

	GetVehicleInside(vehicleid, fX, fY, fZ);

	if(!IsValidDynamicObject(TestObject[playerid])) {
	    GetVehicleZAngle(vehicleid, vA);
		//TestObject[playerid] = CreateDynamicObject(356, fX, fY, fZ + 0.1, 90.0, 270, vA+135);
		TestObject[playerid] = CreateDynamicObject(326, fX, fY, fZ, -100.0, -45, vA+135);
	    EditDynamicObject(playerid, TestObject[playerid]);
     	videdit[playerid] = vehicleid;
	}
	else {
		EditDynamicObject(playerid, TestObject[playerid]);
	}*/

	/*static
	    Float:offsetz
	;
	new
	    Float:offsetx,
	    Float:offsety
	;

	offsetx = 0.013783;
	offsety = -1.881438;
 	offsetz += 0.1;//0.1-0.4*/

	/*new Float:px, Float:py, Float:pz, Float:a;
	GetPlayerPos(playerid, px, py, pz);
	GetPlayerFacingAngle(playerid, a);

	px += (0.5 * floatsin(-a, degrees));
	py += (0.5 * floatcos(-a, degrees));*/
	/*printf("%d", TestObject[playerid]);
	if(!IsValidDynamicObject(TestObject[playerid])) {
 	TestObject[playerid] = CreateDynamicObject(356, 0, 0, 0, 0, 0, 0);
	AttachDynamicObjectToVehicle(TestObject[playerid], vehicleid, offsetx, offsety, offsetz, 0, 0, 0);
	}
	else {

		new
		    Float:fX,
		    Float:fY,
		    Float:fZ;

		GetVehiclePos(vehicleid, fX, fY, fZ);

	    new Float:objX,Float:objY,Float:objZ;
	    GetDynamicObjectPos(TestObject[playerid],objX, objY, objZ);


	    printf("%f, %f, %f", fX, fY, fZ);
	    printf("%f, %f, %f", objX, objY, objZ);
	    printf("pos diff %f, %f, %f", fX - objX, fY - objY, fZ - objZ);
		AttachDynamicObjectToVehicle(TestObject[playerid], vehicleid, offsetx, offsety, offsetz, 0, 0, 0);
	}
	printf("%d %f %f %f", TestObject[playerid], offsetx, offsety, offsetz);*/

	if(CoreVehicles[vehicleid][vbreakin] && !CoreVehicles[vehicleid][vbreakdelay])
	{
    	if(IsPlayerNearDriverDoor(playerid, vehicleid) || IsABoatModel(GetVehicleModel(vehicleid))) {

            new id = Car_GetID(vehicleid);

            if(CarData[id][carLock] == 5) return 1;

			if(CoreVehicles[vehicleid][vbreakin] == 150)
			{
				new
					engine,
					lights,
					alarm,
					doors,
					bonnet,
					boot,
					objective;

                GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);


				if(CarData[id][carAlarm] == 2)
				{
				    alarm = 1;

					new other = IsCharacterOnline(CarData[id][carOwner]);
					if(other != -1) SendClientMessageEx(other, COLOR_YELLOW, "Mensagem: Alarme de Roubo %s Sua voz, Remetente: Alarme de veículo (Desconhecido)",ReturnVehicleModelName(CarData[id][carModel]));
				}
				else if(CarData[id][carAlarm] == 3)
				{

					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Alarme de veículos %s", GetPlayerLocation(playerid));
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Descrição: Sistema de Segurança %s Mais alto", g_arrVehicleNames[CarData[id][carModel] - 400]);
					SendFactionMessageEx(FACTION_SASD, COLOR_RADIO, "Alarme de veículos %s", GetPlayerLocation(playerid));
					SendFactionMessageEx(FACTION_SASD, COLOR_RADIO, "Descrição: Sistema de Segurança %s Mais alto", g_arrVehicleNames[CarData[id][carModel] - 400]);

					new other = IsCharacterOnline(CarData[id][carOwner]);
					if(other != -1) SendClientMessageEx(other, COLOR_YELLOW, "Mensagem: Alarme de Roubo %s Sua voz, Remetente: Alarme de veículo (Desconhecido)",ReturnVehicleModelName(CarData[id][carModel]));
				}
				else if(CarData[id][carAlarm] == 4)
				{
				    alarm = 1;
				    objective = 1;

					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Alarme de veículos: %s", GetPlayerLocation(playerid));
					SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Descrição: Sistema de Segurança %s Mais alto", g_arrVehicleNames[CarData[id][carModel] - 400]);
					SendFactionMessageEx(FACTION_SASD, COLOR_RADIO, "Alarme de veículos: %s", GetPlayerLocation(playerid));
					SendFactionMessageEx(FACTION_SASD, COLOR_RADIO, "Descrição: Sistema de Segurança %s Mais alto", g_arrVehicleNames[CarData[id][carModel] - 400]);

					new other = IsCharacterOnline(CarData[id][carOwner]);
					if(other != -1) SendClientMessageEx(other, COLOR_YELLOW, "Mensagem: Alarme de Roubo %s Sua voz, Remetente: Alarme de veículo (Desconhecido)",ReturnVehicleModelName(CarData[id][carModel]));

				}
				else
				{
				    alarm = 1;
				}


				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			}

		 	if(IsValidDynamic3DTextLabel(VehicleLabel[vehicleid][vLabel])) DestroyDynamic3DTextLabel(VehicleLabel[vehicleid][vLabel]);

			if(CarData[id][carLock] == 2) CoreVehicles[vehicleid][vbreakdelay]=1;
			else if(CarData[id][carLock] == 3) CoreVehicles[vehicleid][vbreakdelay]=2;
			else if(CarData[id][carLock] == 4) CoreVehicles[vehicleid][vbreakdelay]=3;
			else CoreVehicles[vehicleid][vbreakdelay]=0;

			SetVehicleLabel(vehicleid, VLT_TYPE_BREAKIN, 3);

			if(CoreVehicles[vehicleid][vbreakin] <= 0)
			{
			    CoreVehicles[vehicleid][vbreakin] = 0;
			    CoreVehicles[vehicleid][vbreaktime] = 0;

				new
					engine,
					lights,
					alarm,
					doors,
					bonnet,
					boot,
					objective;

				GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
				SetVehicleParamsEx(vehicleid, engine, lights, 0, 0, bonnet, boot, 0);

				CarData[id][carLocked] = false;
				Car_Save(id);
			}
		/*numberss--;
		format(string, sizeof(string), "%d", numberss);

		if(IsValidDynamic3DTextLabel(OHMT)) DestroyDynamic3DTextLabel(OHMT);
	    OHMT = CreateDynamic3DTextLabel(string, 0xAFAFAFAA, -0.9, 0.8, 0, 20, INVALID_PLAYER_ID, vehicleid,  0, 0, 0, -1, 50);*/

		}
	}
	return 1;
}

stock IsCharacterOnline(character)//Returns user ID
{

	foreach(new i : Player)
	{
		if(PlayerData[i][pID] == character)
		{
	    	return i;
	 	}
	}
	return -1;
}


//pescaring Job

CMD:irpescar(playerid, params[]) {

	new fishplace = strval(params);

	if (isnull(params) && (fishplace != 1 && fishplace != 2))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /irpescar [1(em um barco)/2(em uma ponte)]");

	if(PlayerData[playerid][pFishes]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode começar a pescar enquanto estiver com um peixe");

	if(FishingPlace[playerid] != -1 || gPlayerCheckpointStatus[playerid] != CHECKPOINT_NONE) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você já checou?");


	if(fishplace == 1)
	{
	    new carid = -1;
		if((carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1 || (carid = Car_GetID(IsNearBoatID(playerid))) != -1)
		{
		    if(IsABoatModel(CarData[carid][carModel])) {
		 	    if(PlayerData[playerid][pFishes] > 1000) {
			        SendClientMessage(playerid, COLOR_GREEN, "Pesque o suficiente");
			        SendClientMessage(playerid, COLOR_GREEN, "/venderpeixe Se Você quiser vender seu peixe.");
			    }

				new rand = random(sizeof(GoFishingPlace));
				SetPlayerCheckpointEx(playerid, GoFishingPlace[rand][0],GoFishingPlace[rand][1],GoFishingPlace[rand][2], 30.0, CHECKPOINT_GOFISHING, rand);
	            SendClientMessage(playerid, COLOR_GREEN, "Vai aos pontos de pesca no oceano para começar a pescar. (/pescar)");
			}
			else
			{
			     SendClientMessage(playerid, COLOR_LIGHTRED, "Você tem que entrar/fechar seu barco para usar.");
			}
		}
		else
		{
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você tem que entrar/fechar seu barco para usar.");
		}
	}
	else
	{
	    if(PlayerData[playerid][pFishes] > 1000) {
	        SendClientMessage(playerid, COLOR_GREEN, "Pesque o suficiente");
	        SendClientMessage(playerid, COLOR_GREEN, "/venderpeixe Se Você quiser vender seu peixe.");
	    }

		if (!IsPlayerInRangeOfPoint(playerid, 30.0, 383.6021,-2061.7881,7.6140))
		{
			SetPlayerCheckpointEx(playerid, 383.6021,-2061.7881,7.6140, 30.0, CHECKPOINT_GOFISHING, 3);
            SendClientMessage(playerid, COLOR_GREEN, "Vai aos pontos de pesca no oceano para começar a pescar. (/pescar)");
		}
		else {
			FishingPlace[playerid] = 2;
			SendClientMessage(playerid, COLOR_WHITE, "Comece a pescar aqui (/pescar). Quando terminar, Você /pararpesca ou /venderpeixe");

		}
	}

	return 1;
}

CMD:pescar(playerid, params[]) {

	if(FishingPlace[playerid] != -1)
	{

    	if (FishingPlace[playerid] == 3 && !IsPlayerInRangeOfPoint(playerid, 30.0, 383.6021,-2061.7881,7.6140)) {
            return SendClientMessage(playerid, COLOR_LIGHTRED, "Aqui não se pode pescar.");
    	}

		if(FishingPlace[playerid] < 3 && IsPlayerInRangeOfPoint(playerid, 30.0, GoFishingPlace[FishingPlace[playerid]][0],GoFishingPlace[FishingPlace[playerid]][1],GoFishingPlace[FishingPlace[playerid]][2]))
		{
			new id = -1;
			if((id = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
			{
			    if(CarData[id][carOwner] != PlayerData[playerid][pID]) {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Você tem que entrar/fechar seu barco para usar.");
			    }
			}
			else if((id = Car_GetID(IsNearBoatID(playerid))) != -1)
			{
			    if(CarData[id][carOwner] != PlayerData[playerid][pID]) {
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Você tem que entrar/fechar seu barco para usar.");
			    }
			}
		}

		if(!fish_timer[playerid])
		{
			new Fishcaught, Fishlbs;

			if(random(7) < 5)
			{
			    Fishcaught = random(5);

				if(FishingPlace[playerid] == 3) Fishlbs = ((Fishcaught+1)*10) + (1 + random(10));
				else Fishlbs = ((Fishcaught+1)*20) + (1 + random(10));

				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "%s arremessa a vara e pesca um %s em seguida.", ReturnName(playerid, 0), FishNames[Fishcaught]);
				SendClientMessageEx(playerid, COLOR_GREEN, "Você pegou %s %d reais", FishNames[Fishcaught], Fishlbs);
			}
			else {
			    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Você não pode lidar com nada.");
			    return 1;
			}
			PlayerData[playerid][pFishes]+=Fishlbs;


			if(PlayerData[playerid][pFishes] > 1000 && FishingPlace[playerid] == 3)
			{
				FishingPlace[playerid]=-1;

				SendClientMessage(playerid, COLOR_GREEN, "Pesque o suficiente");
				SendClientMessage(playerid, COLOR_GREEN, "/venderpeixe Se Você quiser vender seu peixe.");
				return 1;
			}
			else if(PlayerData[playerid][pFishes] > 5000 && FishingPlace[playerid] != 3)
			{
			    FishingPlace[playerid]=-1;

				SendClientMessage(playerid, COLOR_GREEN, "Pesque o suficiente");
				SendClientMessage(playerid, COLOR_GREEN, "/venderpeixe Se Você quiser vender seu peixe.");
				return 1;
			}

			if(FishingPlace[playerid] != 3) {

				FishingBoat[playerid]+=Fishlbs;

				if(FishingBoat[playerid] > 1000) {
					new rand = random(sizeof(GoFishingPlace));
					SetPlayerCheckpointEx(playerid, GoFishingPlace[rand][0],GoFishingPlace[rand][1],GoFishingPlace[rand][2], 30.0, CHECKPOINT_GOFISHING, rand);
	                FishingBoat[playerid]=0;
	                FishingPlace[playerid]=-1;
	                SendClientMessage(playerid, COLOR_GREEN, "vai pescar em outros lugares.");
				}

			}
   			fish_timer[playerid] = 6;
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhum peixe ao redor");
			SendClientMessage(playerid, COLOR_WHITE, "((Por favor, aguarde 6 segundos a cada /peixe))");
		}
	}
	else
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está pescando");
	}

	return 1;
}


CMD:pararpesca(playerid, params[]) {
	if(FishingPlace[playerid] != -1)
	{
	    SendClientMessage(playerid, COLOR_GREEN, "Você parou de pescar.");
	    if(PlayerData[playerid][pFishes]) SendClientMessage(playerid, COLOR_GREEN, "/venderpeixe Se Você quiser vender seu peixe.");
	    FishingPlace[playerid]=-1;
	}
	else SendClientMessage(playerid, COLOR_WHITE, "Você não está pescando");
	return 1;
}

CMD:venderpeixe(playerid, params[]) {
    if(FishingPlace[playerid] != -1)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve parar de pescar primeiro. Use /pararpesca");

	if(PlayerData[playerid][pFishes])
	{
	    SendClientMessage(playerid, COLOR_GREEN, "O local para o transporte do peixe e para receber o pagamento está marcado no mapa.");
        SetPlayerCheckpointEx(playerid, 2475.2932,-2710.7759,3.1963, 2.0, CHECKPOINT_UNLOADFISHING);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está pescando");
	return 1;
}

CMD:meuspeixes(playerid, params[]) {
	if(PlayerData[playerid][pFishes])
	{
	    SendClientMessage(playerid, COLOR_GREEN, "_______________________________________");
	    SendClientMessageEx(playerid, COLOR_GREEN, "Valor do peixe [%d] reais", PlayerData[playerid][pFishes]);
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está pescando");
	return 1;
}

CMD:alugarveiculo(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(IsVehicleRental(vehicleid))
    {
        if(RentCarKey[playerid] != vehicleid && !IsVehicleRented(vehicleid))
        {
			new cost = GetVehicleRentalPrice(GetVehicleModel(vehicleid));
			if(PlayerData[playerid][pCash] >= cost)
			{
		        /*if(RentCarKey[playerid] != 9999)
		        {
					SetVehicleToRespawn(RentCarKey[playerid]);
		            RentCarKey[playerid] = 9999;
		        }
				*/
			    RentCarKey[playerid] = GetPlayerVehicleID(playerid);
			    PlayerData[playerid][pCash] -= cost;
				SendClientMessage(playerid,COLOR_GREEN,"Você alugou um veículo, para desalugar, digite: /desalugarveiculo");
                SendClientMessage(playerid,COLOR_WHITE,"DICA: Para trancar o veículo, digite: /trancar");
                SendClientMessage(playerid,COLOR_WHITE,"/motor para ligar o veículo.");
				return 1;
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem dinheiro suficiente!");
        }
        else return SendClientMessage(playerid, COLOR_LIGHTRED,"Este veículo já foi alugado!");
    }
    else return GameTextForPlayer(playerid, "~r~Você deve estar em um veículo.", 5000, 1);
}

CMD:desalugarveiculo(playerid)
{
	if(RentCarKey[playerid] != 9999)
 	{
 	    SetVehicleToRespawn(RentCarKey[playerid]);
        RentCarKey[playerid] = 9999;

        return SendClientMessage(playerid,COLOR_GREEN,"Você desalugou o veículo.");
 	}
 	else return GameTextForPlayer(playerid, "~r~Você deve estar em um veículo.", 5000, 1);
}

stock IsPlayerFacingVehicle(playerid,vehicleid)
{
	new Float:pX,Float:pY,Float:pZ,Float:X,Float:Y,Float:Z,Float:ang;

	if(!IsPlayerConnected(playerid)) return 0;

	GetVehiclePos(vehicleid, X, Y, Z);
	GetPlayerPos(playerid, pX, pY, pZ);

	if( Y > pY ) ang = (-acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);
	else if( Y < pY && X < pX ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 450.0);
	else if( Y < pY ) ang = (acos((X - pX) / floatsqroot((X - pX)*(X - pX) + (Y - pY)*(Y - pY))) - 90.0);

	if(X > pX) ang = (floatabs(floatabs(ang) + 180.0));
	else ang = (floatabs(ang) - 180.0);
	new Float:russia;
	GetPlayerFacingAngle(playerid,russia);
	if(ang-russia<-130 || ang-russia>130) return 0;
	else return 1;
}

forward ResprayTimer(playerid,vehicleid);
public ResprayTimer(playerid,vehicleid){
	if(GetPlayerWeapon(playerid) == 41 && Vehicle_Nearest(playerid) == vehicleid && Firehold[playerid] == 1){
		if(IsPlayerFacingVehicle(playerid,vehicleid)){

			/*ChangeVehicleColor(vehicleid,random(127),random(127));
			RepairVehicle(vehicleid);
			GameTextForPlayer(playerid,"~g~Respray sucessfull",3000,4);*/
		//Mechanic fixing
			Firetimer[playerid] = SetTimerEx("ResprayTimer",1000,0,"ii",playerid,vehicleid);
		}
	}
	return 1;
}

stock SetPlayerThrowMeal(playerid)
{
	if(MealHolding[playerid] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9))
	{
	    MealHolding[playerid]=0;
	    RemovePlayerAttachedObject(playerid, FREESLOT9);
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    return 1;
	}
	return 0;
}

stock IsPlayerHoldMeal(playerid)
{
	if(MealHolding[playerid] != 0 && IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9))
	{
	    return 1;
	}
	return 0;
}


stock GetPlayerNearMeal(playerid)
{
	if (MealObject[playerid] != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, MealDrop[MealObject[playerid]][mX],MealDrop[MealObject[playerid]][mY],MealDrop[MealObject[playerid]][mZ]))
	{
		return true;
	}
	/*for(new i = 0; i != sizeof(MealDrop); i++)
  	{
	    if (IsPlayerInRangeOfPoint(playerid, 2.5, MealDrop[i][mX],MealDrop[i][mY],MealDrop[i][mZ]))
	    {
			return i;
	    }
    }*/
    return false;
}

forward MealDestroy(mid);
public MealDestroy(mid)
{
	if(MealDrop[mid][mExist])
	{
		MealDrop[mid][mExist]=false;
      	MealDrop[mid][mX]=0.0;
       	MealDrop[mid][mY]=0.0;
       	MealDrop[mid][mZ]=0.0;
     	MealDrop[mid][mID]=0;
     	MealDrop[mid][mInt]=0;
     	MealDrop[mid][mWorld]=0;

	   	if(IsValidDynamicObject(MealDrop[mid][mObject])) DestroyDynamicObject(MealDrop[mid][mObject]);
		if(MealDrop[mid][mTimer]) KillTimer(MealDrop[mid][mTimer]);

		foreach (new i : Player)
		{
			if(MealObject[i] == mid)
			{
			    MealObject[i]=-1;
			    break;
			}
		}
     	return mid;
	}
  	return -1;
}

stock MealPlace(objectid, Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz, int, world)
{
	for(new i = 0; i != sizeof(MealDrop); i++)
  	{
  	    if(!MealDrop[i][mExist])
  	    {
            MealDrop[i][mExist] = true;
            MealDrop[i][mX]=x;
            MealDrop[i][mY]=y;
            MealDrop[i][mZ]=z;
            MealDrop[i][mID]=objectid;
            MealDrop[i][mInt]=int;
            MealDrop[i][mWorld]=world;
			MealDrop[i][mObject] = CreateDynamicObject(objectid,x,y,z,rx,ry,rz,world, int);
            MealDrop[i][mTimer] = SetTimerEx("MealDestroy", 600000, false, "d", i);
	        return i;
  	    }
  	}
  	return -1;
}

stock SetPlayerMealHold(playerid, mealobject) {
	if(mealobject >= 2221 && mealobject <= 2223) SetPlayerAttachedObject(playerid,FREESLOT9, mealobject, 5,0.165000,0.100999,0.139999,-78.300018,-11.500016,20.599998,1.000000,1.000000,1.000000);
	else SetPlayerAttachedObject(playerid,FREESLOT9, mealobject, 5,0.212000,0.046999,0.371000,-106.700012,15.100011,2.399998,1.000000,1.000000,1.000000);
}

CMD:curarme(playerid, params[])
{

	new id = -1;
	if ((id = House_Inside(playerid)) != -1) {

		if(HouseEntered[playerid] == id && GetHouseItem(id, 1))
		{
		 	if (IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[id][hCheckPosX], HouseInfo[id][hCheckPosY], HouseInfo[id][hCheckPosZ])) {
                SetPlayerHealthEx(playerid, 100.0 + PlayerData[playerid][pSHealth]);
		    } else return SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em casa para usar este comando.");
 		}
 		else {
 		    SendClientMessage(playerid, COLOR_LIGHTRED, "Esta casa não tem uma geladeira.");
 		}
    }
	return 1;
}

// *** PLACE COMMAND
CMD:pegararma2(playerid, params[]) // Gun ID: 29 - MP5. Is currently occupying your Primary slot.
{
    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nível 2 ou superior para utilizar este comando.");

	new bool:success, id = -1;
	if ((id = House_Inside(playerid)) != -1) {

		if(HouseEntered[playerid] == id)
		{
   			if (IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[id][hCheckPosX], HouseInfo[id][hCheckPosY], HouseInfo[id][hCheckPosZ])) {
				new slot;

				if (sscanf(params, "d", slot))
					return SendClientMessage(playerid, COLOR_WHITE, "/pegararma slot_id (Lista: /verificar)");

	            slot--;

				if(slot >= 0 && HouseInfo[id][hWeapon][slot]) {

					if(PlayerData[playerid][pGuns][g_aWeaponSlots[HouseInfo[id][hWeapon][slot]]] != 0) {
	                    SendClientMessageEx(playerid, -1, "Arma: %d - %s Este slot está em uso.", PlayerData[playerid][pGuns][g_aWeaponSlots[HouseInfo[id][hWeapon][slot]]], ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[HouseInfo[id][hWeapon][slot]]]));
						return 1;
					}

					GivePlayerValidWeapon(playerid, HouseInfo[id][hWeapon][slot], HouseInfo[id][hAmmo][slot], HouseInfo[id][hWeaponLicense][slot]);

					if(HouseInfo[id][hWeaponLicense][slot]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) pegou %s(%d) de sua casa %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(HouseInfo[id][hWeapon][slot]), HouseInfo[id][hAmmo][slot], id, HouseInfo[id][hID], HouseInfo[id][hWeaponLicense][slot]);

					HouseInfo[id][hWeapon][slot]=0;
					HouseInfo[id][hAmmo][slot]=0;
					HouseInfo[id][hWeaponLicense][slot]=0;

					UpdateHouseInfo(id);

					success = true;

					return 1;
				}
				else return SendClientMessage(playerid, COLOR_WHITE, "Nada foi encontrado.");
			}
			else return SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em casa para usar este comando.");
		}
	}
	else
	{
		new vid = GetPlayerVehicleID(playerid);
		if(!vid) foreach(new i : sv_vehicles) if (IsPlayerNearBoot(playerid, i) && (GetTrunkStatus(i) || IsVehicleTrunkBroken(i))) { vid = i; break; }

		new vehicle_fid = -1;
		if(GetFactionType(playerid) == FACTION_POLICE && vid && (vehicle_fid = IsACopCar(vid)) != -1 && (vehicleVariables[vehicle_fid][vVehicleModelID] >= 596 && vehicleVariables[vehicle_fid][vVehicleModelID] <= 599 || vehicleVariables[vehicle_fid][vVehicleModelID] == 427))
		{
			new slot;
			if (sscanf(params, "d", slot) || !slot)
				return SendClientMessage(playerid, COLOR_WHITE, "/pegararma [SLOT ID (1/2/3/4/5)]");

			if(slot >= 1 && slot <= 5) {
			    new weaponid,ammo;

			    if(slot >= 4 && !PlayerData[playerid][pSwat]) return SendClientMessage(playerid, COLOR_LIGHTRED,"Este arma sí pode ser usada pelas as divisÃµes especiais das policias.");

				switch(slot) {
			        case 1: weaponid = 25, ammo = 100;
			        case 2: weaponid = 29, ammo = 500;
			        case 3: weaponid = 31, ammo = 500;
			        case 4: weaponid = 27, ammo = 100;
			        case 5: weaponid = 34, ammo = 50;
			    }
				if(PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] == 0) {
					GivePlayerWeaponEx(playerid, weaponid, ammo);
				    return 1;
				}
				return SendClientMessageEx(playerid, -1, "Arma: %d - %s Este slot está em uso.", PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]], ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]]));
			}
			else {
			    return SendClientMessage(playerid, COLOR_LIGHTRED,"Desculpe, nenhuma dessas armas foi encontrada.");
			}
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
		{
			foreach(new i : sv_playercar) if (IsPlayerNearBoot(playerid, CarData[i][carVehicle])) if(GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))
			{
				new slot;

				if (sscanf(params, "d", slot))
				    return SendClientMessage(playerid, COLOR_WHITE, "/pegararma slot_id (Lista: /verificar)");

				if (!GetEngineStatus(CarData[i][carVehicle]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Ao ligar o motor.");

                slot--;

				if(slot >= 0 && slot < MAX_CAR_WEAPONS && CarData[i][carWeapon][slot])
				{
					if (!CarPlace[i][slot][cPType] || !IsDoorVehicle(CarData[i][carVehicle]))
					{
						if(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][slot]]] != 0) {
							SendClientMessageEx(playerid, -1, "Arma: %d - %s Este slot está em uso.", PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][slot]]], ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][slot]]]));
						    return 1;
						}
					    DestroyDynamicObject(CarPlace[i][slot][cPobj]);
						GivePlayerValidWeapon(playerid, CarData[i][carWeapon][slot], CarData[i][carAmmo][slot], CarData[i][carWeaponLicense][slot]);

						if(CarData[i][carWeaponLicense][slot]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) pegou %s(%d) do carro %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][slot]), CarData[i][carAmmo][slot], i, CarData[i][carID], CarData[i][carWeaponLicense][slot]);

						CarData[i][carWeapon][slot]=0;
						CarData[i][carAmmo][slot]=0;
						CarData[i][carWeaponLicense][slot]=0;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"não tem nenhuma arma próximo a Você!");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");

				success = true;
				break;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");
			}
		}
		else if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new i = -1;

			if((i = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

				new slot;

				if (sscanf(params, "d", slot))
				    return SendClientMessage(playerid, COLOR_WHITE, "/pegararma slot_id (Lista: /verificar)");

				if (!GetEngineStatus(CarData[i][carVehicle]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Ao ligar o motor.");

                slot--;
				if(slot >= 0 && slot < MAX_CAR_WEAPONS && CarData[i][carWeapon][slot])
				{
					if (CarPlace[i][slot][cPType] || !IsDoorVehicle(CarData[i][carVehicle]))
					{
						if(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][slot]]] != 0) {
							SendClientMessageEx(playerid, -1, "Arma: %d - %s Este slot está em uso.", PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][slot]]], ReturnWeaponName(PlayerData[playerid][pGuns][g_aWeaponSlots[CarData[i][carWeapon][slot]]]));
						    return 1;
						}
					    DestroyDynamicObject(CarPlace[i][slot][cPobj]);
						GivePlayerValidWeapon(playerid, CarData[i][carWeapon][slot], CarData[i][carAmmo][slot], CarData[i][carWeaponLicense][slot]);

                        if(CarData[i][carWeaponLicense][slot]) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) pegou %s(%d) do carro %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(CarData[i][carWeapon][slot]), CarData[i][carAmmo][slot], i, CarData[i][carID], CarData[i][carWeaponLicense][slot]);

						CarData[i][carWeapon][slot]=0;
						CarData[i][carAmmo][slot]=0;
						CarData[i][carWeaponLicense][slot]=0;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"não tem nenhuma arma próximo a Você!");
				}
				else return SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");

				success = true;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Nada foi encontrado.");
			}
		}
	}
	return 1;
}

CMD:colocararma(playerid, params[])
{
    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nivel 2 ou superior para utilizar este comando.");

	new bool:success, id = -1;
	if ((id = House_Inside(playerid)) != -1) {

		if(HouseEntered[playerid] == id)
		{
			if (IsPlayerInRangeOfPoint(playerid, 1.5, HouseInfo[id][hCheckPosX], HouseInfo[id][hCheckPosY], HouseInfo[id][hCheckPosZ])) {

				new weaponid;

	  			if (sscanf(params, "d", weaponid) || !weaponid)
					return SendClientMessage(playerid, COLOR_WHITE, "/colocararma weapon_id (Para verificar suas armas, digite: /armas)");


				if (PlayerData[playerid][pGun1] == weaponid || PlayerData[playerid][pGun2] == weaponid || PlayerData[playerid][pGun3] == weaponid) {

	  				new ammo, license, slot = -1;

					if(PlayerData[playerid][pGun1] == weaponid)
	  				{
						ammo = PlayerData[playerid][pAmmo1];

						PlayerData[playerid][pGun1]=0;
						PlayerData[playerid][pAmmo1]=0;
	  				}
					else if(PlayerData[playerid][pGun2] == weaponid)
					{
						ammo = PlayerData[playerid][pAmmo2];
						license = PlayerData[playerid][pPLicense];
	  					PlayerData[playerid][pGun2]=0;
						PlayerData[playerid][pAmmo2]=0;
						PlayerData[playerid][pPLicense]=0;
					}
					else
					{
	 					ammo = PlayerData[playerid][pAmmo3];
	 					license = PlayerData[playerid][pSLicense];
						PlayerData[playerid][pGun3]=0;
						PlayerData[playerid][pAmmo3]=0;
						PlayerData[playerid][pSLicense]=0;
					}
					RemoveWeapon(playerid, weaponid);

					for(new x = 0; x != MAX_HOUSE_WEAPONS; x++) {
						if(!HouseInfo[id][hWeapon][x]) {
							HouseInfo[id][hWeapon][x] = weaponid;
							HouseInfo[id][hAmmo][x] = ammo;
							HouseInfo[id][hWeaponLicense][x]=license;
							slot=x;
	 						break;
						}
					}
					if(slot == -1) return SendClientMessage(playerid, COLOR_LIGHTRED,"não há espaço nesta casa.");

					if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) dropou %s(%d) em sua casa %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, id, HouseInfo[id][hID], license);

					SendClientMessageEx(playerid, COLOR_YELLOW,"Você armazenou %s em sua casa.", ReturnWeaponName(weaponid));
					SendClientMessage(playerid, COLOR_LIGHTRED,"/pegararma para pegar sua arma em sua casa ou carro.");

				} else return SendClientMessage(playerid, COLOR_LIGHTRED,"Desculpe, apenas as armas que estáo no /status");
            } else return SendClientMessage(playerid, COLOR_GRAD1, "Você deve estar em casa para usar este comando.");
			return 1;
		}
	}
	else
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
			new i = -1;

			if((i = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {

				new weaponid;

				if (sscanf(params, "d", weaponid) || !weaponid)
				    return SendClientMessage(playerid, COLOR_WHITE, "/colocararma weapon_id (Para verificar suas armas, digite: /armas)");

				if (PlayerData[playerid][pGun1] == weaponid || PlayerData[playerid][pGun2] == weaponid || PlayerData[playerid][pGun3] == weaponid) {

					new ammo, license, slot;

					if(PlayerData[playerid][pGun1] == weaponid)
					{
					    ammo = PlayerData[playerid][pAmmo1];
					    PlayerData[playerid][pGun1]=0;
					    PlayerData[playerid][pAmmo1]=0;
					}
					else if(PlayerData[playerid][pGun2] == weaponid)
					{
					    ammo = PlayerData[playerid][pAmmo2];
                        license = PlayerData[playerid][pPLicense];
					    PlayerData[playerid][pGun2]=0;
					    PlayerData[playerid][pAmmo2]=0;
					    PlayerData[playerid][pPLicense]=0;
					}
					else
					{
					    ammo = PlayerData[playerid][pAmmo3];
					    license = PlayerData[playerid][pSLicense];
					    PlayerData[playerid][pGun3]=0;
					    PlayerData[playerid][pAmmo3]=0;
					    PlayerData[playerid][pSLicense]=0;
					}
					RemoveWeapon(playerid, weaponid);

					if(!CarData[i][carWeapon][0])
					{
					    CarData[i][carWeapon][0] = weaponid;
					    CarData[i][carAmmo][0] = ammo;
					    CarData[i][carWeaponLicense][0]=license;
					    slot=0;
					}
					else if(!CarData[i][carWeapon][1])
					{
					    CarData[i][carWeapon][1] = weaponid;
					    CarData[i][carAmmo][1] = ammo;
					    CarData[i][carWeaponLicense][1]=license;
					    slot=1;
					}
					else if(!CarData[i][carWeapon][2])
					{
					    CarData[i][carWeapon][2] = weaponid;
					    CarData[i][carAmmo][2] = ammo;
					    CarData[i][carWeaponLicense][2]=license;
					    slot=2;
					}
					else if(!CarData[i][carWeapon][3])
					{
                        CarData[i][carWeapon][3] = weaponid;
                        CarData[i][carAmmo][3] = ammo;
                        CarData[i][carWeaponLicense][3]=license;
                        slot=3;
					}
					else return SendClientMessage(playerid, COLOR_LIGHTRED,"não há mais espaço neste carro.");

					if(license) Log_Write("logs/license_weapon.txt", "[%s] %s (%s) place %s(%d) to car %d (SID:%d) [%d]", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, i, CarData[i][carID], license);

                    SendClientMessage(playerid, COLOR_LIGHTRED,"[ ! ] {FFFFFF}Para mover sua camera, segure espaço{FFFFFF} e mova o mouse.");
					SendClientMessageEx(playerid, COLOR_YELLOW,"Você armazenou %s no %s", ReturnWeaponName(weaponid), g_arrVehicleNames[CarData[i][carModel] - 400]);
                    SendClientMessage(playerid, COLOR_LIGHTRED,"/pegararma para pegar sua arma em sua casa ou carro.");

					new
						Float:fX,
						Float:fY,
						Float:fZ,
						Float:vA,
						Float:finalx,
						Float:finaly,
						Float:finalz,
						Float:finalrz;

					GetVehicleInside(CarData[i][carVehicle], fX, fY, fZ);
					GetVehicleZAngle(CarData[i][carVehicle], vA);

					CarPlace[i][slot][cPobj] = CreateDynamicObject(GetGunObjectID(weaponid), fX, fY, fZ, -100.0, -45, vA+135);

					GetVehicleAttachCroods(CarData[i][carVehicle], fX, fY, fZ, vA+135, finalx, finaly, finalz, finalrz);

					CarPlace[i][slot][cPx]=finalx;
					CarPlace[i][slot][cPy]=finaly;
					CarPlace[i][slot][cPz]=finalz;
					CarPlace[i][slot][cPrx]=-100.0;
					CarPlace[i][slot][cPry]=-45.0;
					CarPlace[i][slot][cPrz]=finalrz;
					//CarPlace[i][slot][cPType]=1;

					EditDynamicObject(playerid, CarPlace[i][slot][cPobj]);

					PlayerPlaceSlot[playerid]=slot;
					PlayerPlaceCar[playerid]=i;

				} else return SendClientMessage(playerid, COLOR_LIGHTRED,"Desculpe, apenas as armas que estáo no /status");

				success = true;
			}
			if(!success)
			{
				SendClientMessage(playerid, COLOR_LIGHTRED,"Nenhum veículo próximo a Você...");
			}
		}
		else {
		    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED,"Nenhum veículo próximo a Você...");
		}
	}
	return 1;
}


CMD:verificar(playerid, params[])
{
    if(PlayerData[playerid][pLevel] < 2)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você deve ter nível 2 ou mais para usar este comando.");


	new bool:success, id = -1;

	if ((id = House_Inside(playerid)) != -1) {

		if(HouseEntered[playerid] == id)
		{
			new string[512];

			for(new x = 0; x != MAX_HOUSE_WEAPONS; x++) {
				if(HouseInfo[id][hWeapon][x] != 0) {
				    if(IsMelee(HouseInfo[id][hWeapon][x])) {
						format(string, sizeof(string), "%s(%d)%s\n", string, x+1, ReturnWeaponName(HouseInfo[id][hWeapon][x]));
					}
					else format(string, sizeof(string), "%s(%d)%s[munição:%d]\n", string, x+1, ReturnWeaponName(HouseInfo[id][hWeapon][x]), HouseInfo[id][hAmmo][x]);
				}
				else format(string, sizeof(string), "%s[VAZIO]\n", string);
			}
		  	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Armazenamento de armas", string, ">>", "");
	     	success = true;
			return 1;
		}
	}
	else
	{
	    new vehicleid = GetPlayerVehicleID(playerid);
		foreach(new i : sv_playercar)
		{
			if(vehicleid == CarData[i][carVehicle]  || (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))))
		    {
		        new string[128];

				for(new x = 0; x != MAX_CAR_WEAPONS; x++) {
				   	if(CarData[i][carWeapon][x] != 0) {
				 		if(IsMelee(CarData[i][carWeapon][x])) {
							format(string, sizeof(string), "%s(%d)%s\n", string, x+1, ReturnWeaponName(CarData[i][carWeapon][x]));
						}
						else format(string, sizeof(string), "%s(%d)%s[munição:%d]\n", string, x+1, ReturnWeaponName(CarData[i][carWeapon][x]), CarData[i][carAmmo][x]);
					}
					else format(string, sizeof(string), "%s[VAZIO]\n", string);
				}
		        Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Armazenamento de armas", string, ">>", "");
	            success = true;
				return 1;
			}
		//	else return SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: You are not near the storage of the vehicle.");
		}
	}
	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você deve estar perto de um veículo ou dentro da sua casa para armazenar qualquer tipo de arma.");
	return 1;
}

CMD:vehpackage(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um veículo.");

	new vehicleid = GetPlayerVehicleID(playerid), bool:success;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
			ShowVehicleWeapons(playerid, i);
			success = true;
			return 1;
		}
	}
    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Este comando está disponível apenas para veículos particulares, mas Você está em um veículo público.");
	return 1;
}

stock GetVehicleAttachCroods(vehicleid, Float:oPosX, Float:oPosY, Float:oPosZ, Float:oPosRZ, &Float:AttachX, &Float:AttachY, &Float:AttachZ, &Float:AttachRZ)
{
	new Float:Pos[3], Float:vPosX, Float:vPosY, Float:vPosZ, Float:vPosA;

	GetVehiclePos(vehicleid, vPosX, vPosY, vPosZ);
	GetVehicleZAngle(vehicleid, vPosA);

	Pos[0] = oPosX-vPosX;
	Pos[1] = oPosY-vPosY;
	Pos[2] = oPosZ-vPosZ;
	AttachRZ = oPosRZ-vPosA;

	AttachZ = Pos[2];
	AttachX = Pos[0]*floatcos(vPosA, degrees)+Pos[1]*floatsin(vPosA, degrees);
	AttachY = -Pos[0]*floatsin(vPosA, degrees)+Pos[1]*floatcos(vPosA, degrees);
	return 1;
}

// XM Radio

/*stock ShowHouseBoomBoxStations(houseid, playerid) {
	new string[256];

	for(new i = 0; i != sizeof(xmGenres); ++i)
	{
		format(string, sizeof(string), "%s%s\n", string, xmGenres[i]);
	}
	format(string, sizeof(string), "%s{FFFF00}OFF - To turn off\n", string);
	Dialog_Show(playerid, xmGenresDialog, DIALOG_STYLE_LIST, "Genres:", string, "Selecionar", "<<");
	return 1;
}*/

stock ShowBoomBoxStations(playerid) {
	new string[256];

	for(new i = 0; i != sizeof(xmGenres); ++i)
	{
		format(string, sizeof(string), "%s%s\n", string, xmGenres[i]);
	}
	format(string, sizeof(string), "%s{FFFF00}OFF - To turn off\n", string);
	Dialog_Show(playerid, xmGenresDialog, DIALOG_STYLE_LIST, "Genres:", string, "Selecionar", "<<");
	return 1;
}

CMD:setestacao(playerid, params[])
{
	new id=-1;
	if (IsPlayerInAnyVehicle(playerid))
	{
		new vehicleid = GetPlayerVehicleID(playerid), carid = -1;

		if((carid = Car_GetID(vehicleid)) != -1) {

			if (!GetEngineStatus(vehicleid))
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Ao ligar o motor.");

			if(CarData[carid][carXM] == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "Seu veículo não tem o sistema XM-rádio.");

			ShowBoomBoxStations(playerid);
			return 1;
		}
		else
		{
			foreach(new i : sv_servercar) {
				if(vehicleVariables[i][vVehicleScriptID] == vehicleid && vehicleVariables[i][vVehicleFaction] != -1 && FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_POLICE && FactionData[vehicleVariables[i][vVehicleFaction]][factionType] == FACTION_SASD) {
					ShowBoomBoxStations(playerid);
				}
			}
		}
	}
	else if((id = Boombox_Nearest(playerid, 5.0)) != INVALID_PLAYER_ID)
	{
		if(grantboombox[playerid] == id || id == playerid) {
			ShowBoomBoxStations(playerid);
		}
		else {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem permissão para ligar o rádio.");
		}
	}
	else
	{
		if ((id = House_Inside(playerid)) != -1 && GetHouseItem(id, 2)) {

			if(HouseEntered[playerid] == id)
			{
                ShowBoomBoxStations(playerid);
			}
		}
		else {
		    SendClientMessage(playerid, COLOR_LIGHTRED, "está casa não tem um sistema de SOM.");
		}
	}
	return 1;
}

/*stock StartMusicInVehicle(vehicle, url[])
{
	if(CoreVehicles[vehicle][vradioOn])
	{
		foreach(Player, i)
		{
			if(GetPlayerVehicleID(i) == vehicle)
			{
				StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);

                SendClientMessageEx(i, COLOR_DARKGREEN, "> %s The radio has been adjusted to %s", ReturnName(playerid, 0), CoreVehicles[vehicle][vradioStation]);
				SendClientMessageEx(i, COLOR_LIGHTRED, "Radio changed to Station %s", CoreVehicles[vehicle][vradioStation]);

			}
		}
	}
	return 1;
}*/

stock StopCarBoomBox(carid)
{
	if(CoreVehicles[carid][vradioOn])
	{
		CoreVehicles[carid][vradioOn] = false;

		foreach(new i : Player)
		{
			if(GetPlayerVehicleID(i) == carid)
			{
				StopAudioStreamForPlayer(i);
                SendClientMessage(i, COLOR_LIGHTRED, "O rádio foi desligado.");
			}
		}
	}
	return 1;
}

Dialog:xmGenresDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    	if(!strcmp(inputtext, "OFF - Desligar", true))
	 	{
	 	    new id = -1;
	 	    if (IsPlayerInAnyVehicle(playerid)) StopCarBoomBox(GetPlayerVehicleID(playerid));
	 	    else if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID)
	 	    {
	 	        StopBoomBox(id);
	 	    }
		 	else {
				if(HouseEntered[playerid] != -1)
				{
				    StopHouseBoomBox(HouseEntered[playerid]);
				}
			}

	 	    return 1;
	   	}
	    new category = listitem;

		SetPVarInt(playerid, "GenresSelected", category);

		new string[256];

		for(new i = 0; i != sizeof(xmSubGenres); ++i)
		{
		    if(xmSubGenres[i][xmid] == category) {
				format(string, sizeof(string), "%s%s\n", string, xmSubGenres[i][subname]);
			}
		}
		format(string, sizeof(string), "%s{FFFF00}OFF - Desligar\n", string);
		Dialog_Show(playerid, xmSubGenresDialog, DIALOG_STYLE_LIST, "Sub-generos:", string, "Selecionar", "<<");
	}
	return 1;
}

Dialog:xmSubGenresDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    	if(!strcmp(inputtext, "OFF - Desligar", true))
	 	{
	 	    new id = -1;
	 	    if (IsPlayerInAnyVehicle(playerid)) StopCarBoomBox(GetPlayerVehicleID(playerid));
	 	    else if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID)
	 	    {
	 	        StopBoomBox(id);
	 	    }
		 	else {
				if(HouseEntered[playerid] != -1)
				{
				    StopHouseBoomBox(HouseEntered[playerid]);
				}
			}
	 	    return 1;
	   	}

		new string[1280], category = GetPVarInt(playerid, "GenresSelected"), count;

		for(new i = 0; i != sizeof(xmSubGenres); ++i)
		{
		    if(xmSubGenres[i][xmid] == category) {
				if(listitem == count)
				{
					SetPVarInt(playerid, "SubGenresIndex", i);
					break;
				}
				count++;
			}
		}

		SetPVarInt(playerid, "SubGenresSelected", listitem);

	    new
			xmstation,
			query[128];

		format(query, sizeof(query), "SELECT * FROM `radio_station` WHERE `genres_id` = %d AND `subgenres_id` = %d", category, listitem);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(xmstation);

		if (xmstation) {

		    new id, name[32];

			for (new i = 0; i < xmstation; i ++)
			{
			    cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "station_name", name);
			    format(string, sizeof(string), "%sID:%d - %s\n", string, id, name);
			}
		}
		format(string, sizeof(string), "%s{FFFF00}OFF - Desligar\n", string);
		Dialog_Show(playerid, xmSetStationDialog, DIALOG_STYLE_LIST, "estações:", string, "Selecionar", "<<");
	}
	else
	{
		ShowBoomBoxStations(playerid);
		DeletePVar(playerid, "GenresSelected");
	}
	return 1;
}


Dialog:xmSetStationDialog(playerid, response, listitem, inputtext[])
{
	if(response)
	{
    	if(!strcmp(inputtext, "OFF - Desligar", true))
	 	{
	 	    new id = -1;
	 	    if (IsPlayerInAnyVehicle(playerid)) StopCarBoomBox(GetPlayerVehicleID(playerid));
	 	    else if((id = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID)
	 	    {
	 	        StopBoomBox(id);
	 	    }
		 	else {
				if(HouseEntered[playerid] != -1)
				{
				    StopHouseBoomBox(HouseEntered[playerid]);
				}
			}
	 	    return 1;
	   	}

	    new genres = GetPVarInt(playerid, "GenresSelected"), subgenres = GetPVarInt(playerid, "SubGenresSelected"), string[1280];

	    new
			xmstation,
			query[128],
			count;

		format(query, sizeof(query), "SELECT * FROM `radio_station` WHERE `genres_id` = %d AND `subgenres_id` = %d", genres, subgenres);
		mysql_query(dbCon, query);

		// Getting Data
		cache_get_row_count(xmstation);

		if (xmstation) {

		    new id, name[32], url[256];

			for (new i = 0; i < xmstation; i ++)
			{
			    cache_get_value_name_int(i, "id", id);
				cache_get_value_name(i, "station_name", name);
				cache_get_value_name(i, "station_url", url);

			    if(count == listitem)
			    {
			        new boomboxid=-1;
			        if (IsPlayerInAnyVehicle(playerid))
			        {
			            new vehicleid = GetPlayerVehicleID(playerid);
				        CoreVehicles[vehicleid][vradioOn] = true;
				        format(CoreVehicles[vehicleid][vradioURL], 256, "%s", url);

						foreach(new x : Player)
						{
							if(GetPlayerVehicleID(x) == vehicleid)
							{
								StopAudioStreamForPlayer(x);
								PlayAudioStreamForPlayer(x, url);

				                SendClientMessageEx(x, COLOR_DARKGREEN, "> %s o rádio foi sintonizado para %s", ReturnName(playerid, 0), name);
								SendClientMessageEx(x, COLOR_LIGHTRED, "Você mudou a estação para %s", name);
							}
						}

						format(query, sizeof(query), "%s o rádio foi sintonizado para %s", ReturnName(playerid, 0), name);
					 	SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);

					}
					else if((boomboxid = Boombox_Nearest(playerid)) != INVALID_PLAYER_ID) {

						if(grantboombox[playerid] == boomboxid || boomboxid == playerid) {

	                        BoomboxData[boomboxid][boomboxOn]=true;
						//	format(BoomboxData[playerid][boomboxURL], 256, "%s", url);
							strpack(BoomboxData[boomboxid][boomboxURL], url, 128 char);

							SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s o rádio foi sintonizado para %s", ReturnName(playerid, 0), name);

	                        foreach(new x : Player)
							{
								if(Boombox_Nearest(x) == boomboxid)
								{
									StopAudioStreamForPlayer(x);
									PlayAudioStreamForPlayer(x, url, BoomboxData[boomboxid][boomboxPos][0], BoomboxData[boomboxid][boomboxPos][1], BoomboxData[boomboxid][boomboxPos][2], 30, 1);
									SendClientMessageEx(x, COLOR_LIGHTRED, "Você mudou a estação para %s", name);
								}
							}
							format(query, sizeof(query), "%s o rádio foi sintonizado para %s", ReturnName(playerid, 0), name);
							SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
						}
						else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem permissão para ligar o rádio.");
					}
			        else
			        {
			            new house = HouseEntered[playerid];
						if(house != -1)
						{
					        HouseInfo[house][hradioOn] = true;
					        format(HouseInfo[house][hradioURL], 256, "%s", url);
					        SendNearbyMessage(playerid, 30.0, COLOR_DARKGREEN, "> %s o rádio foi sintonizado para %s", ReturnName(playerid, 0), name);

                            foreach(new x : Player)
							{
								if(HouseEntered[x] == house)
								{
									StopAudioStreamForPlayer(x);
									PlayAudioStreamForPlayer(x, url);
									SendClientMessageEx(x, COLOR_LIGHTRED, "Você mudou a estação para %s", name);
								}
							}

							format(query, sizeof(query), "%s o rádio foi sintonizado para %s", ReturnName(playerid, 0), name);
						 	SetPlayerChatBubble(playerid, query, COLOR_DARKGREEN, 30.0, 6000);
						}
			        }
			    }
			    format(string, sizeof(string), "%sID:%d - %s\n", string, id, name);

			    count++;
			}
		}
		format(string, sizeof(string), "%s{FFFF00}OFF - Desligar\n", string);
		Dialog_Show(playerid, xmSetStationDialog, DIALOG_STYLE_LIST, "estações:", string, "Selecionar", "<<");
	}
	else
	{
	    new category = GetPVarInt(playerid, "GenresSelected");

		new string[256];

		for(new i = 0; i != sizeof(xmSubGenres); ++i)
		{
		    if(xmSubGenres[i][xmid] == category) {
				format(string, sizeof(string), "%s%s\n", string, xmSubGenres[i][subname]);
			}
		}
		format(string, sizeof(string), "%s{FFFF00}OFF - Desligar\n", string);
		Dialog_Show(playerid, xmSubGenresDialog, DIALOG_STYLE_LIST, "Sub-generos:", string, "Selecionar", "<<");
	}
	return 1;
}

// Fuel

CMD:abastecer(playerid, params[]) {
	if (IsPlayerInAnyVehicle(playerid)) {
		new id;
		if ((id = Bizz_Nearest(playerid, 50.0)) != -1 && BizInfo[id][bType] == 1) {
		    new string[256], vehicleid = GetPlayerVehicleID(playerid);
		    new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(vehicleid));
		    new Float:fueladd = maxfuel - CoreVehicles[vehicleid][vehFuel];

			format(string, sizeof(string), "{FFFFFF}Tipo de combustivel:{FFFF00}%s\n\t{FFFFFF}combustivel atual: {FFFF00}%.6f{FFFFFF}/{FFFF00}%.6f{FFFFFF}( MAX )\n\tQuantidade adicionada:{FFFF00}%.6f\n\t{FFFFFF}preço:{FFFF00}%s", (BizInfo[id][bsubType]) ? ("Diesel") : ("Petroleo"), CoreVehicles[vehicleid][vehFuel], maxfuel, fueladd, FormatNumber(floatround(fueladd*float(BizInfo[id][bItems][0]), floatround_ceil)));
            Dialog_Show(playerid, FuelRefill, DIALOG_STYLE_MSGBOX, "Comprar combustivel:", string, "Comprar", "Cancelar");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um posto de gasolina!");
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar no veículo.");
	return 1;
}

Dialog:FuelRefill(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    if (IsPlayerInAnyVehicle(playerid)) {
			new id=-1 , vehicleid = GetPlayerVehicleID(playerid);
			if ((id = Bizz_Nearest(playerid, 20.0)) != -1 && BizInfo[id][bType] == 1) {
				if(!VehicleLabel[vehicleid][vLabelTime]) {
				    new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(vehicleid));
				    new Float:fueladd = maxfuel - CoreVehicles[vehicleid][vehFuel];
					new price = floatround(fueladd*float(BizInfo[id][bItems][0]), floatround_ceil);
				    if(PlayerData[playerid][pCash] >= price) {
					    new time = 10, timecal = floatround(fueladd, floatround_ceil);
					    if(timecal >= 10) time = (timecal*2) - (5 * (timecal/5));
						SetVehicleLabel(vehicleid, VLT_TYPE_REFILL, time);
						CoreVehicles[vehicleid][vOwnerID] = playerid;
						SendClientMessageEx(playerid, COLOR_GREEN, "SERVER: Esta ação deve levar algum tempo. Quantidade: %.6f", time, fueladd);
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem essa quantidade de dinheiro!");
				} else SendClientMessage(playerid, COLOR_LIGHTRED, "O veículo atual já iniciou a operação.");
			} else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um posto de gasolina!");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um posto de gasolina!");
	}
	return 1;
}

CMD:kick(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");
	new pid, reason[128];
	if(sscanf(params,"us[128]",pid,reason)) return SendSyntaxMessage(playerid, "/kick [playerid] [motivo]");

	if(pid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((pid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	format(largeQuery, sizeof(largeQuery), "INSERT INTO `logs_kick` (`IP`, `charName`, `KickedBy`, `Reason`, `character_id`, `user_id`) VALUES ('%s', '%s', '%s', '%s', %d, %d)", ReturnIP(pid), ReturnName(pid), ReturnName(playerid), reason, PlayerData[pid][pID], AccountData[pid][aUserid]);
	mysql_query(dbCon, largeQuery);
	//printf("%s", strlen(largeQuery));

	format(szString, sizeof(szString), "AdmCmd: %s kickou o jogador %s pelo motivo: %s.", ReturnName(playerid,0), ReturnName(pid), reason);
	SendClientMessageToAll(COLOR_LIGHTRED, szString);

    Log_Write("logs/admin_action.txt", "[%s] [/kick] %s has kicked %s reason %s.", ReturnDate(), ReturnName(playerid), ReturnName(pid), reason);

	format(szString, sizeof(szString), "Kick %s motivo %s", ReturnName(pid), reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

	KickEx(pid);
	return 1;
}

CMD:ban(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");
	new pid, reason[128], ip[16];
	if(sscanf(params,"us[128]",pid,reason)) return SendSyntaxMessage(playerid, "/ban [ID/Nome] [Motivo]");
	if(pid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((pid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	format(ip, 16, "%s", ReturnIP(pid));
	//format(date, 36, "%s", ReturnSiteDate());

	format(largeQuery, sizeof(largeQuery), "INSERT INTO `bans` (`name`, `bannedby`, `reason`, `playerIP`) VALUES ('%s', '%s', '%s', '%s')", ReturnName(pid), ReturnName(playerid), reason, ip);
	mysql_query(dbCon, largeQuery);

	format(largeQuery, sizeof(largeQuery), "INSERT INTO `logs_ban` (`charName`, `BannedBy`, `Reason`, `IP`, `character_id`, `user_id`) VALUES ('%s', '%s', '%s', '%s', %d, %d)", ReturnName(pid), ReturnName(playerid), reason, ip, PlayerData[pid][pID], AccountData[pid][aUserid]);
	mysql_query(dbCon, largeQuery);

	format(szString, sizeof(szString), "AdmCmd:O administrador %s baniu o jogador %s pelo motivo: %s.", ReturnName(playerid,0), ReturnName(pid), reason);
	SendClientMessageToAll(COLOR_LIGHTRED, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/ban] O administrador %s baniu o %s pelo motivo: %s", ReturnDate(), ReturnName(playerid), ReturnName(pid), reason);

	format(szString, sizeof(szString), "banned %s reason %s", ReturnName(pid), reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

    KickEx(pid);
	return 1;
}

CMD:tempoban(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");
	new pid, reason[128], ip[16], htime;
	if(sscanf(params,"uds[128]",pid,htime,reason)) return SendSyntaxMessage(playerid, "/tempoban [ID/Nome] [tempo(em horas)] [motivo]");
	if(pid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{ds[128]}", maskid);
		if((pid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	format(ip, 16, "%s", ReturnIP(pid));
	//format(date, 36, "%s", ReturnSiteDate());

	format(largeQuery, sizeof(largeQuery), "INSERT INTO `bans` (`name`,`bannedby`,`reason`,`playerIP`,`perm`,`expire`) VALUES ('%s', '%s', '%s', '%s', 0,DATE_ADD(NOW(),INTERVAL %d HOUR))", ReturnName(pid), ReturnName(playerid), reason, ip, htime);
	mysql_query(dbCon, largeQuery);

	format(largeQuery, sizeof(largeQuery), "INSERT INTO `logs_ban` (`charName`, `BannedBy`, `Reason`, `IP`, `character_id`, `user_id`) VALUES ('%s', '%s', '%s', '%s', %d, %d)", ReturnName(pid), ReturnName(playerid), reason, ip, PlayerData[pid][pID], AccountData[pid][aUserid]);
	mysql_query(dbCon, largeQuery);

	format(szString, sizeof(szString), "AdmCmd: O administrador %s baniu o jogador %s por %d dias pelo motivo: %s.", ReturnName(playerid,0), ReturnName(pid), htime, reason);
	SendClientMessageToAll(COLOR_LIGHTRED, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/timeban] %s has banned %s %d hours reason %s", ReturnDate(), ReturnName(playerid), ReturnName(pid), htime, reason);

	format(szString, sizeof(szString), "banned %s %d for %s", ReturnName(pid), htime, reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

    KickEx(pid);
	return 1;
}

CMD:desbanir(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pBanTeam] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");
	new name[MAX_PLAYER_NAME];
	if(sscanf(params,"s[24]",name)) return SendSyntaxMessage(playerid, "/desbanir [Nome_Sobrenome]");

	SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s foi desbanido pelo administrador %s.", name, ReturnName(playerid));

	format(szQuery, sizeof(szQuery), "DELETE FROM `bans` WHERE `name` = '%s'", name);
	mysql_tquery(dbCon, szQuery, "OnQueryFinished", "dd", playerid, THREAD_UNBAN);

	Log_Write("logs/admin_action.txt", "[%s] [/unban] %s has unbanned %s", ReturnDate(), ReturnName(playerid), name);

	SetPVarString(playerid, "unban_name", name);

	return 1;
}

CMD:desbanirip(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4 && PlayerData[playerid][pBanTeam] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");

	if(!regex_match(params, ".*\\d{1,3}\\.+\\d{1,3}\\.+\\d{1,3}\\.+\\d{1,3}.*")) return SendSyntaxMessage(playerid, "/desbanirip [IP]");
	SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s desbaniu o IP %s.", params, ReturnName(playerid));

	format(szQuery, sizeof(szQuery), "DELETE FROM `bans` WHERE `playerIP` = '%s'", params);
	mysql_tquery(dbCon, szQuery, "OnQueryFinished", "dd", playerid, THREAD_UNBAN);

	Log_Write("logs/admin_action.txt", "[%s] [/unban] %s has unbanned ip %s", ReturnDate(), ReturnName(playerid), params);

	format(szString, sizeof(szString), "Unlock IP %s", params);
    SQL_LogAdmin_Action(playerid, "IG", szString);

	return 1;
}


/*CMD:blacklist(playerid, params[])
{
	new
		type[24],
		data[24],
		string[64];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_GRAD1, "You are not allowed to use this command.");

	if (sscanf(params, "s[24]s[128]S()", type, data, string))
 	{
	 	SendSyntaxMessage(playerid, "/blacklist [name] [parameter]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} ban, banip, unbanip");
	 	return 1;
	}
	if (!strcmp(type, "ban", true))
	{
	    new name[32], reason[64], pid = INVALID_PLAYER_ID;

		foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], data) || !strcmp(ReturnName(i), data, true)) {
            pid = i;
            break;
		}

	    if (sscanf(string, "s[32]", reason))
	        return SendSyntaxMessage(playerid, "/blacklist ban %s [reason]", data);


		Blacklist_Add("0.0.0.0", data, PlayerData[pid][pUsername], "Blacklist (/blacklist)");

	    SendClientMessage(playerid, COLOR_WHITE, "SERVER: You have banned \"%s\" Bem-sucedido(a)", params);
	    SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s banned \"%s\"", ReturnName(playerid, 0), params);

	    Log_Write("logs/admin_action.txt", "[%s] [/blacklist] %s has banned \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);

		KickEx(pid);
	}
	else if (!strcmp(type, "banip", true))
	{
	    if (!IsAnIP(params))
	        return ErrorMsg(playerid, "The IP address you entered is not valid in the format.");

		Blacklist_Add(params, "", PlayerData[playerid][pUsername], "IP Ban (/blacklist)");

	    SendClientMessage(playerid, COLOR_WHITE, "SERVER: You have banned the IP. \"%s\" Bem-sucedido(a)", params);
	    SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s banned the IP \"%s\"", ReturnName(playerid, 0), params);

	    Log_Write("logs/admin_action.txt", "[%s] [/blacklist] %s has banned IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);

		foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], params)) {
		    KickEx(i);
		}
	}
	else if (!strcmp(type, "unbanip", true))
	{
	    if (!IsAnIP(params))
	        return ErrorMsg(playerid, "The IP address you entered is not valid in the format.");

		Blacklist_RemoveIP(params);

	    SendClientMessage(playerid, COLOR_WHITE, "SERVER: You have disconnected the IP \"%s\" Bem-sucedido(a)", params);
	    SendAdminAlert(COLOR_YELLOW, "AdmCmd: %s IP Disconnect \"%s\"", ReturnName(playerid, 0), params);

	    Log_Write("logs/admin_action.txt", "[%s] [/blacklist] %s has unbanned IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	return 1;
}*/

/*IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}*/

CMD:pegarip(playerid, params[])
{
	new
	    userid;

    if (PlayerData[playerid][pAdmin] < 3 && PlayerData[playerid][pBanTeam] < 1)
	    return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/pegarip [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	SendClientMessageEx(playerid, COLOR_WHITE, "O endereço IP de %s é %s", ReturnName(userid), PlayerData[userid][pIP]);
	return 1;
}
/*
Blacklist_Add(ip[], username[], banner[], reason[])
{
	new
	    string[256];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`) VALUES('%s', '%s', '%s', '%s', '%s')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate()
	);
	mysql_tquery(dbCon, string);
}

Blacklist_Remove(username[])
{
	new
	    string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
    mysql_tquery(dbCon, string);
}

Blacklist_RemoveIP(ip[])
{
	new
	    string[128];

    format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
    mysql_tquery(dbCon, string);
}*/

/*stock CharacterUpdate(playerid,numb,key[][][])
{
    new modifs[512];
    for(new i=0; i<numb;i++)
    {
        if(i!=0) format(modifs,sizeof(modifs),"%s, ", modifs);
        if(IsNumeric(key[i][1])) format(modifs,sizeof(modifs),"%s%s=%s", modifs, key[i][0], key[i][1]);
        else format(modifs,sizeof(modifs),"%s%s = \"%s\"", modifs, key[i][0], key[i][1]);
    }
    format(largeQuery,sizeof(largeQuery),"UPDATE characters SET %s WHERE ID=%d",modifs,PlayerData[playerid][pID]);
	mysql_query(dbCon, largeQuery);
	printf(largeQuery);
}*/


/*stock MySQLUpdate(table[],numb,key[][][], where[])
{
    new modifs[512];
    for(new i=0; i<numb;i++)
    {
        if(i!=0) format(modifs,sizeof(modifs),"%s, ", modifs);
        if(IsNumeric(key[i][1])) format(modifs,sizeof(modifs),"%s%s=%s", modifs, key[i][0], key[i][1]);
        else format(modifs,sizeof(modifs),"%s%s = \"%s\"", modifs, key[i][0], key[i][1]);
    }
    format(largeQuery,sizeof(largeQuery),"UPDATE %s SET %s WHERE %s",table,modifs,where);
	mysql_query(dbCon, largeQuery);
}
*/

/*forward HttpVerifyRequest(index, response_code, data[]);
public HttpVerifyRequest(index, response_code, data[])
{
    if(response_code == 200)
    {
	    SendClientMessageEx(index, COLOR_YELLOW, "Um email foi enviado para %s com instruções sobre como verificar sua conta.", data);
		SendClientMessage(index, COLOR_YELLOW, "Isso deve levar até dois minutos. Certifique-se de verificar sua pasta de spam.);
		//printf("Email Result: %s !", data);
    }
    else
    {
	    SendClientMessage(index, COLOR_LIGHTRED, "O envio do EMAIL teve um erro, procura um administrador.");
        printf("%s: Falha no envio de verificação de e-mail!", ReturnName(index));
    }
    KickEx(index);
}*/

stock ReturnDonateRank(rank) {
	new drank[20];
	switch(rank) {
		case 1: drank = "usuário Bronze";
		case 2: drank = "usuário Prata";
		case 3: drank = "usuário Ouro";
		default: drank = "Nenhum";
	}
	return drank;
}

CMD:setarpremium(playerid, params[])
{
	new pid, viplevel, viptime;

	if(PlayerData[playerid][pAdmin] < 5) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params, "uiI(30)", pid, viplevel, viptime)) return SendSyntaxMessage(playerid, "/setdonaterank [ID/Nome] [nível(1-3)] [dia]");
	if(viplevel == 0)
	{

	    PlayerData[pid][pDonateRank] = 0;
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s setou premium para %s.", ReturnName(playerid), ReturnName(pid));
		Log_Write("logs/admin_action.txt", "[%s] [/setarpremium] %s retirou o premium de %s.", ReturnDate(), ReturnName(playerid), ReturnName(pid));
		SendClientMessageEx(pid, COLOR_YELLOW, "%s removeu seu status de doador.", ReturnName(playerid));

		format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `DonateRank` = 0 WHERE `ID` = %d", PlayerData[pid][pID]);
		mysql_query(dbCon, szQuery);

		return 1;
	}
	if(viplevel < 0 || viplevel > 3) return SendClientMessage(playerid, COLOR_GRAD2, "O nível deve estar entre 0 e 3!");

	PlayerData[pid][pDonateRank] = viplevel;
	PlayerData[pid][pDonateUnix] = gettime() + (viptime * 86400);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s deu o status de %s de %s pelo o número de %d dias.", ReturnName(playerid), ReturnDonateRank(viplevel), ReturnName(pid), viptime);
	Log_Write("logs/admin_action.txt", "[%s] [/setarpremium] %s definiu a classificação de doação %s para %d por %d dias.", ReturnDate(), ReturnName(playerid), ReturnName(pid), viplevel, viptime);


	/*new cts, ctm, cth, ctd, ctmo, cty, expired[24];
	TimestampToDate(PlayerData[pid][pDonateUnix], cty, ctmo, ctd, cth, ctm, cts);
	format(expired, 24, "%04d-%02d-%02d %02d:%02d:%02d", cty, ctmo, ctd, cth, ctm, cts);*/
	SendClientMessageEx(pid, COLOR_YELLOW, "%s fornecer status de %s para Você!", ReturnName(playerid), ReturnDonateRank(viplevel));

	format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `DonateRank` = %d, `DonateExpired` = DATE_ADD(NOW(), INTERVAL 1 MONTH) WHERE `ID` = %d", viplevel, PlayerData[pid][pID]);
	mysql_query(dbCon, szQuery);



	format(szQuery, sizeof(szQuery), "Deu status de doador %s de %s pelo o número de %d dias.", ReturnDonateRank(viplevel), ReturnName(pid), viptime);
	SQL_LogAdmin_Action(playerid, "/setarpremium", szQuery);

	return 1;
}

CMD:sairdocarro(playerid) {
	if (IsPlayerInAnyVehicle(playerid)) RemovePlayerFromVehicle(playerid);
	return 1;
}

CMD:girarveh(playerid, params[]) {

	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:{FFFFFF}Você não está autorizado.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/girarveh [veículoid]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendClientMessage(playerid, COLOR_GRAD2, "O ID do veículo está invalido.");


    new Float:angle;
    GetVehicleZAngle(vehicleid, angle);
    SetVehicleZAngle(vehicleid, angle);

    return 1;
}

CMD:mostrarlicencas(playerid, params[])
{
	new emote[128], userid;

	if (sscanf(params, "uS()[128]", userid, emote))
	    return SendSyntaxMessage(playerid, "/mostrarlicencas [ID/Nome]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{S()[128]}", maskid);
		userid = GetPlayerMaskID(maskid);
	}

	if(userid == playerid || userid == INVALID_PLAYER_ID) {

		SendClientMessage(userid, COLOR_GREEN, "______São Paulo ID______");
		SendClientMessageEx(userid, COLOR_WHITE, "Nome : %s", ReturnNameEx(playerid));

		if(PlayerData[playerid][pCarLic]) SendClientMessage(userid, COLOR_WHITE, "CNH A/B: Sim");
		else SendClientMessage(userid, COLOR_LIGHTRED, "CNH A/B: não");
		if(PlayerData[playerid][pWepLic]) SendClientMessageEx(userid, COLOR_WHITE, "Porte de armas: %s", PlayerData[playerid][pCCWLic] ? (" (Sim)") : ("não"));
		else SendClientMessage(userid, COLOR_LIGHTRED, "Porte de armas: não");
		if(PlayerData[playerid][pJob] == JOB_TRUCKER) SendClientMessage(userid, COLOR_WHITE, "CNH C/E: Sim");
		else SendClientMessage(userid, COLOR_LIGHTRED, "CNH C/E: não");

		SendClientMessage(userid, COLOR_GREEN, "_________________________");


		/*if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s mostrar a identidade dele.", ReturnName(playerid, 0));
		else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), emote);*/
		if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s mostrou sua identidade para %s", ReturnName(playerid, 0), ReturnName(userid, 0));
		else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s %s", ReturnName(playerid, 0), emote, ReturnName(userid, 0));


		return 1;
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");

	SendClientMessage(userid, COLOR_GREEN, "______São Paulo ID______");
	SendClientMessageEx(userid, COLOR_WHITE, "Nome : %s", ReturnNameEx(playerid));

	if(PlayerData[playerid][pCarLic]) SendClientMessage(userid, COLOR_WHITE, "CNH A/B/D: Sim");
	else SendClientMessage(userid, COLOR_LIGHTRED, "CNH A/B/D: não");
	if(PlayerData[playerid][pWepLic]) SendClientMessageEx(userid, COLOR_WHITE, "Porte de armas: %s", PlayerData[playerid][pCCWLic] ? (" Sim") : ("não"));
	else SendClientMessage(userid, COLOR_LIGHTRED, "Porte de armas: não");
	if(PlayerData[playerid][pJob] == JOB_TRUCKER) SendClientMessage(userid, COLOR_WHITE, "CNH C/E: Sim");
	else SendClientMessage(userid, COLOR_LIGHTRED, "CNH C/E: não");

	SendClientMessage(userid, COLOR_GREEN, "_________________________");

	if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s mostrou sua identidade para %s", ReturnName(playerid, 0), ReturnName(userid, 0));
	else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s %s", ReturnName(playerid, 0), emote, ReturnName(userid, 0));

	return 1;
}

/*CMD:licenses(playerid, params[])
{
	new string[128];
	SendClientMessage(playerid, COLOR_LIGHTBLUE, "|____ License ____|");
	format(string, sizeof(string), "Name: %s", ReturnName(playerid, 0));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Driver's license: %s", (PlayerData[playerid][pCarLic]) ? ("Possui") : ("não possui"));
	SendClientMessage(playerid, COLOR_LIGHTBLUE, string);
	return 1;
}

CMD:showlicenses(playerid, params[])
{
	new string[128], playerb;
	if(sscanf(params, "u", playerb)) return SendSyntaxMessage(playerid, "/showlicenses [Player Account]");

	SendClientMessage(playerb, COLOR_LIGHTBLUE, "|____ License ____|");
	format(string, sizeof(string), "Name: %s", ReturnName(playerid, 0));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	format(string, sizeof(string), "Driver's license: %s", (PlayerData[playerid][pCarLic]) ? ("Possui") : ("não possui"));
	SendClientMessage(playerb, COLOR_LIGHTBLUE, string);
	return 1;
}*/


CMD:reportar(playerid, params[])
	return cmd_re(playerid, params);

CMD:re(playerid, params[])
{
	if(systemVariables[reportSystem] == 0)
	{
	    if(isnull(params))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "USE: /reportar [texto]");
		}
		else {
		    if(PlayerData[playerid][pReport] >= 1)
		    {
		        SendClientMessage(playerid, COLOR_YELLOW, "Você fez um reporte para um administrador, espere um momento que iremos checar.");
			}
			else {
			    if(strlen(params) >= 64) {
			        return SendClientMessage(playerid, COLOR_GREY, "Sua mensagem está muito longa. Forneça uma mensagem abaixo de 64 caracteres.");
				}
				else {
					new pDialog[1900];
					strcpy(PlayerData[playerid][pReportMessage], params, 64);

					format(pDialog, sizeof(pDialog), "{FF6347}AVISO{FFFFFF}:\nVocê está prestes a enviar a todos os administradores online o seguinte relatório: %s\n\n", params);
					//strcat(pDialog, "{FF6347}A warning{FFFFFF}:\nYou are about to send to all online administrators report the following: %s\n\n", sizeof(pDialog));
					strcat(pDialog, "- Relatar uma ação que não ocorreu até o momento. é muito difícil para os administradores online lidar diretamente com as questáes. Porque não há provas\nÉ recomendável ir ao fórum e apresentar um relatório no fórum com provas.\n\n- É muito importante não apresentar estes relatórios no jogo, mas Você será melhor administrado.", sizeof(pDialog));
					Dialog_Show(playerid, ReportConfirm, DIALOG_STYLE_MSGBOX, "Você realmente deseja enviar o relatório??", pDialog, "Reportar", "Cancelar");
				}
			}
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_WHITE, "O sistema de relatórios está desligado. Por favor, relate novamente mais tarde.");
	}
	return 1;
}

CMD:spec(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 1) {
        new
            userID;

		if(sscanf(params, "u", userID)) {
		    return SendSyntaxMessage(playerid, "/spec [playerid]");
		}
		else if(!IsPlayerConnected(userID)) {
		    return SendClientMessage(playerid, COLOR_GREY, "O jogador esta desconectado ou não foi encontrado.");
		}
		else {
			if(PlayerData[playerid][pSpectating] == INVALID_PLAYER_ID) { // Will only save pos/etc if they're NOT spectating. This will stop the annoying death/pos/int/VW/crash bugs everyone's experiencing...
				GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
				PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
				PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    }
		    PlayerData[playerid][pSpectating] = userID;
		    TogglePlayerSpectating(playerid, true);

			SetPlayerInterior(playerid, GetPlayerInterior(userID));
			SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userID));

		    if(IsPlayerInAnyVehicle(userID)) {
		        PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userID));
		    }
		    else {
				PlayerSpectatePlayer(playerid, userID);
			}

			if(PlayerData[playerid][pTutorialStep]) {
				SendClientMessage(playerid, COLOR_GREY, "O jogador está no tutorial.");
			}

		}
	}
	return 1;
}

CMD:interior(playerid) return SendClientMessageEx(playerid, COLOR_GENANNOUNCE, "Interior no momento: %d", GetPlayerInterior(playerid));

CMD:setarint(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 1) {
        new
            userID, intid;

		if(sscanf(params, "ud", userID, intid)) {
		    return SendSyntaxMessage(playerid, "/setarint [ID/Nome] [Interiorid]");
		}
		else if(IsPlayerConnected(userID)) {
			SetPlayerInterior(userID,intid);
			PlayerData[userID][pInterior] = intid;
			SendClientMessageEx(userID, COLOR_GRAD1, " Interior: %d", intid);
		}
	}
	return 1;
}

CMD:setarvw(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 1) {
        new
            userID, world;

		if(sscanf(params, "ud", userID, world)) {
		    return SendSyntaxMessage(playerid, "/setarvw [ID/Nome] [Virtualworldid]");
		}
		else if(IsPlayerConnected(userID)) {
			SetPlayerVirtualWorld(userID,world);
			PlayerData[userID][pWorld] = world;
			SendClientMessageEx(userID, COLOR_GRAD1, " VirtualWorld: %d", world);
		}
	}
	return 1;
}

CMD:reportes(playerid, params[]) {
	if(PlayerData[playerid][pAdmin] >= 1)
	{
		new
			tool[16];

		if(sscanf(params, "s[16] ", tool))
		{
		    SendClientMessage(playerid, COLOR_GREY, "USE:/reportes [opção]");
		    SendClientMessage(playerid, COLOR_GREY, "Opções: Lista, aceitar, negar, status");
		}
		else
		{
		    if(strcmp(tool, "Lista", true) == 0 || strcmp(tool, "l", true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");

		        new
					string[128],
					reportCount;

		        foreach (new  i: Player)
				{
		            if(PlayerData[i][pReport] >= 1)
					{
		                format(string, sizeof(string), "[ACTIVE]{FFFFFF} %s {FF6347}[%d] {FFFF91}: %s", ReturnName(i), i, PlayerData[i][pReportMessage]);
		                SendClientMessage(playerid, COLOR_REPORT, string);
		                reportCount++;
		            }
		        }

		        format(string, sizeof(string), "RELATÓRIOS ATIVOS: %d (Use /reportes aceitar)", reportCount);
		        SendClientMessage(playerid, COLOR_WHITE, string);

				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");
		    }
		    else if(strcmp(tool, "aceitar", true) == 0 || strcmp(tool, "a", true) == 0)
		    {
		        new
					userID;

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USE:/reportes aceitar [playerid]");
		        }
		        else
				{
		            if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "O jogador está desconectado ou não foi encontrado");
		            }
		            else
		            {
		                if(PlayerData[userID][pReport] >= 1)
						{
		                    new

								string[128];

		                    format(string, sizeof(string), "Você aceitou o reporte de %s (%s)", ReturnName(userID), PlayerData[userID][pReportMessage]);
		                    SendClientMessage(playerid, COLOR_WHITE, string);

		                    PlayerData[userID][pReport] = 0;
		                    format(PlayerData[userID][pReportMessage], 64, "null");

							if(PlayerData[playerid][pAdmin] >= 1)
							{
		                    	format(string, sizeof(string), "Obrigado por reportar! %s seu relatorio foi aceito.", ReturnName(playerid));
                                SendClientMessage(userID, COLOR_REPORT, string);
							}
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "O jogador não reportou nada.");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "negar", true) == 0 || strcmp(tool, "d", true) == 0)
			{
		        new
					userID,
					string[128];

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USE:/reportes negar [playerid]");
		        }
		        else
				{
				    if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "O jogador está desconectado ou não foi encontrado");
		            }
		            else
					{
		                if(PlayerData[userID][pReport] != 0) {

		                    PlayerData[userID][pReport] = 0;
		                    format(PlayerData[userID][pReportMessage], 64, "(null)");

		                    format(string, sizeof(string), "Você rejeitou o relatorio %s", ReturnName(userID));
		                    SendClientMessage(playerid, COLOR_WHITE, string);
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "O jogador não reportou nada.");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "status", true) == 0 || strcmp(tool, "s", true) == 0)
			{
		        if(PlayerData[playerid][pAdmin] >= 4)
				{
			        if(systemVariables[reportSystem] == 0)
					{
			            systemVariables[reportSystem] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "Você cancelou o sistema de relatórios.");
			            SendClientMessageToAll(COLOR_REPORT, "O sistema de relatórios foi desligado.");
			        }
			        else
					{
			            systemVariables[reportSystem] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "Você ativou o sistema de relatórios.");
			            SendClientMessageToAll(COLOR_REPORT, "O sistema de relatórios é reativado.");
			        }
		        }
		        else
				{
					return SendClientMessage(playerid, COLOR_GREY, "Você deve ser um administrador nível alto para usar este comando!");
				}
 		    }
		    else
			{
			    SendClientMessage(playerid, COLOR_GREY, "USE:/reportes [opção]");
			    SendClientMessage(playerid, COLOR_GREY, "Opções: Lista, aceitar, negar, status");
		    }
		}
	}

	return 1;
}

CMD:sos(playerid, params[])
{
	if(systemVariables[helpmeSystem] == 0)
	{
	    if(isnull(params))
	    {
	        SendClientMessage(playerid, COLOR_GREY, "USE: /sos [texto]");
		}
		else {
		    if(PlayerData[playerid][pHelpme] >= 1)
		    {
		        SendClientMessage(playerid, COLOR_WHITE, "Você já enviou uma solicitação de suporte. Por favor aguarde uma resposta...");
			}
			else {
			    if(strlen(params) >= 64) {
			        return SendClientMessage(playerid, COLOR_GREY, "Sua mensagem está muito longa.");
				}
				else {
				    SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Seu pedido de ajuda foi enviado a todos os administradores online.");

					strcpy(PlayerData[playerid][pHelpmeMessage], params, 64);
				    PlayerData[playerid][pHelpme] = 1;

					SendAdminAlert(COLOR_HELPME, "Um novo SOS foi enviado. Relate novamente mais tarde. '/pedidos lista' para verificar.");
				}
			}
		}
	}
	else {
	    SendClientMessage(playerid, COLOR_WHITE, "O sistema de SOS agora está fechado. Por favor, relate novamente mais tarde.");
	}
	return 1;
}

CMD:pedidos(playerid, params[]) {
	if(PlayerData[playerid][pAdmin] >= 1)
	{
		new
			tool[16];

		if(sscanf(params, "s[16] ", tool))
		{
		    SendClientMessage(playerid, COLOR_GREY, "USE:/pedidos [opção]");
		    SendClientMessage(playerid, COLOR_GREY, "Opções: lista, aceitar, negar, status");
		}
		else
		{
		    if(strcmp(tool, "lista", true) == 0 || strcmp(tool, "l", true) == 0)
			{
				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");

		        new
					string[128],
					reportCount;

		        foreach (new  i: Player)
				{
		            if(PlayerData[i][pHelpme] >= 1)
					{
		                format(string, sizeof(string), "[ATIVOS]{FFFFFF} %s {FF6347}[%d] {FFFF91}: %s", ReturnName(i), i, PlayerData[i][pHelpmeMessage]);
		                SendClientMessage(playerid, COLOR_HELPME, string);
		                reportCount++;
		            }
		        }

		        format(string, sizeof(string), "RELATÓRIOS ATIVOS: %d (Use /pedidos aceitar)", reportCount);
		        SendClientMessage(playerid, COLOR_WHITE, string);

				SendClientMessage(playerid, COLOR_WHITE, "-------------------------------------------------------------------------------------------------------------------------------");
		    }
		    else if(strcmp(tool, "aceitar", true) == 0 || strcmp(tool, "a", true) == 0)
		    {
		        new
					userID;

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USE: /pedidos aceitar [playerid]");
		        }
		        else
				{
				    if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "O jogador está desconectado ou não foi encontrado");
		            }
		            else
		            {
		                if(PlayerData[userID][pHelpme] >= 1)
						{
		                    new
								string[128];

		                    format(string, sizeof(string), "Você confirmou o pedido de ajuda de %s (%s)", ReturnName(userID), PlayerData[userID][pHelpmeMessage]);
		                    SendClientMessage(playerid, COLOR_WHITE, string);

		                    PlayerData[userID][pHelpme] = 0;
		                    format(PlayerData[userID][pHelpmeMessage], 64, "(null)");

							if(PlayerData[playerid][pAdmin] >= 1)
							{
		                    	format(string, sizeof(string), "Obrigado! %s seu pedido de ajuda foi aceito!", ReturnName(playerid, 0));
							}
							SendClientMessage(userID, COLOR_HELPME, string);

		                    SetPVarInt(playerid, "aR", 1);
		                    SetPVarInt(playerid, "aRf", userID);

		                    Dialog_Show(playerid, ReportDialog, DIALOG_STYLE_LIST, "Sistema de Reporte", "Teleporte\nSpectar\nNão faça nada", "Selecionar", "Sair");
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "O jogador não pediu ajuda.");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "negar", true) == 0 || strcmp(tool, "d", true) == 0)
			{
		        new
					userID,
					string[128];

		        if(sscanf(params, "s[16]u", tool, userID))
				{
		            SendClientMessage(playerid, COLOR_GREY, "USE:/pedidos negar [playerid]");
		        }
		        else
				{
				    if(!IsPlayerConnected(userID))
					{
		                SendClientMessage(playerid, COLOR_GREY, "O jogador está desconectado ou não foi encontrado");
		            }
		            else
					{
		                if(PlayerData[userID][pHelpme] != 0) {

		                    PlayerData[userID][pHelpme] = 0;
		                    format(PlayerData[userID][pHelpmeMessage], 64, "(null)");

		                    format(string, sizeof(string), "Você negou o pedido de ajuda de %s", ReturnName(userID));
		                    SendClientMessage(playerid, COLOR_WHITE, string);
		                }
		                else
						{
		                    SendClientMessage(playerid, COLOR_GREY, "Este jogador não pediu ajuda.");
		                }
		            }
		        }
		    }
		    else if(strcmp(tool, "status", true) == 0 || strcmp(tool, "s", true) == 0)
			{
		        if(PlayerData[playerid][pAdmin] >= 4)
				{
			        if(systemVariables[helpmeSystem] == 0)
					{
			            systemVariables[helpmeSystem] = 1;
			            SendClientMessage(playerid, COLOR_WHITE, "Você cancelou o sitema de ajuda.");
			            SendClientMessageToAll(COLOR_HELPME, "O sistema de ajuda foi cancelado.");
			        }
			        else
					{
			            systemVariables[helpmeSystem] = 0;
			            SendClientMessage(playerid, COLOR_WHITE, "Você ativou o sistema de ajuda..");
			            SendClientMessageToAll(COLOR_HELPME, "O sistema de ajuda está devolta.");
			        }
		        }
		        else
				{
					return SendClientMessage(playerid, COLOR_GREY, "Você deve ser um administrador nível alto para usar este comando!");
				}
 		    }
		    else
			{
			    SendClientMessage(playerid, COLOR_GREY, "USE:/pedidos [opção]");
			    SendClientMessage(playerid, COLOR_GREY, "Opções: Lista, aceitar, negar, status");
		    }
		}
	}

	return 1;
}

SQL_LogAdmin_Action(adminid, key[], log[])
{
	new query[512];
	format(query,sizeof(query),"INSERT INTO logs_admin_action (admin,action_key,action_log) VALUES (%d,'%s','%s')",PlayerData[adminid][pID], key, log);
	mysql_query(dbCon, query);

}

/*SQL_LogCommand(playerid, key[], log[])
{
	new query[512];

	new clean_log[128];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_command (admin,action_key,action_log) VALUES (%d,'%s','%s')",PlayerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}*/

SQL_LogChat(playerid, key[], log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_chat (admin,action_key,action_log) VALUES (%d,'%s','%s')",PlayerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}

SQL_LogPay(playerid, key[], log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_pay (admin,action_key,action_log) VALUES (%d,'%s','%s')",PlayerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}


/*SQL_LogCheat(playerid, key[], log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_cheat (admin,action_key,action_log) VALUES (%d,'%s','%s')",PlayerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}*/

SQL_LogMask(playerid, key[], log[])
{
	new query[512];

	new clean_log[256];
	mysql_escape_string(log,clean_log);

	new clean_key[20];
	mysql_escape_string(key,clean_key);

	format(query,sizeof(query),"INSERT INTO logs_mask (admin,action_key,action_log) VALUES (%d,'%s','%s')",PlayerData[playerid][pID], clean_key, clean_log);
	mysql_query(dbCon, query);

}
/*strtok(const string[])
{
	new length = strlen(string), index;
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}*/

CMD:algemar(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é um policial.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/algemar [playerid/name]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O jogador não está online.");
		}
	}

    if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode se algemar.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O jogador não está próximo.");

    if (!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_TAZER) && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, " ERRO: O jogador está neutralizado por uma taser.");

	if (GetPlayerState(userid) != PLAYER_STATE_ONFOOT)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O jogador está dentro de um veículo.");

    if (BitFlag_Get(g_PlayerFlags[userid],PLAYER_CUFFED))
        return SendClientMessage(playerid, COLOR_GREY, "ERRO: O jogador já encontra-se algemado.");

	new
	    string[64];

    BitFlag_On(g_PlayerFlags[userid],PLAYER_CUFFED);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);
    SetPlayerAttachedObject(userid, FREESLOT9, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.000000, 1.168000);

	format(string, sizeof(string), "Você foi ~r~algemado~w~ por %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s retira um par de algemas do cinto tático e pega nos braços de %s, logo após algema-o.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:desalgemar(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é um policial.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/desalgemar [playerid/name]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O jogador encontra-se offline.");
		}
	}

    if (userid == playerid)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode retirar a algema de Você mesmo.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O jogador não está próximo de Você.");

    if (!BitFlag_Get(g_PlayerFlags[userid],PLAYER_CUFFED))
        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: O jogaodr não está algemado.");

	new
	    string[64];

    BitFlag_Off(g_PlayerFlags[userid],PLAYER_CUFFED);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(userid, FREESLOT9);

	format(string, sizeof(string), "Foi Você ~g~desalgemado~w~ por %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s usa uma chave para retirar as algemas de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

stock IsPlayerInWater(playerid)
{
    new anim = GetPlayerAnimationIndex(playerid);
    if (((anim >=  1538) && (anim <= 1542)) || (anim == 1544) || (anim == 1250) || (anim == 1062)) return true;
	return false;
}

CMD:animlist(playerid, params[])
{
    new var;
	if (sscanf(params, "I(1)",var))
	{
	}
	else
	{
	    if(var == 1)
	    {
	        SendClientMessage(playerid, COLOR_LIGHTGREEN, "______________________Animações______________________");
			SendClientMessage(playerid, COLOR_ANIMS, "/pararanim ou /stopanim");
			SendClientMessage(playerid, COLOR_ANIMS, "/camera /crack /handsup /urinar /tapabunda /bebado /cair /bar /baseball /sentar /bastao");
			SendClientMessage(playerid, COLOR_ANIMS, "/bravo /mirar /gsign /animgang /cpr /rir /crossarms /deitar /acenar /relaxar /cair /machucado");
			SendClientMessage(playerid, COLOR_ANIMS, "/levartapa /convidar1 /convidar2 /arranhar /bomba /vomitar /comer /chuteporta /animrevistar");
			SendClientMessage(playerid, COLOR_ANIMS, "/beber /negociar /chat /fucku /taichi /chorar /carsit /alongar /chant /ghand /cansado");
			SendClientMessage(playerid, COLOR_ANIMS, "/fumarnocarro /basquete /lancar /abrir /pcaixa /dcaixa /medo /fumar /spray /lean");
			SendClientMessage(playerid, COLOR_ANIMS, "/supino /dancar /rap /punheta /strip /sexy /bj /cotovelada /levantarguarda /gpunch");
			SendClientMessage(playerid, COLOR_ANIMS, "/airkick /gkick /dpunch /alevantar /animalgemar /rimando /eatsit /esquivar /segurar");
			SendClientMessage(playerid, COLOR_ANIMS, "/sinuca /gfunk /vadiar /box /revistacapo /observar /seguir /facepalm /cobrir ");
			SendClientMessage(playerid, COLOR_ANIMS, "/fixcar /lowrider /animgritar /puton /esquerda /direita /gwalk /andar /animcelular");
			SendClientMessage(playerid, COLOR_ANIMS, "/maosfrente /maostras /sh (Sair do H do veículo)");
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "__________________________________________________________");
			return 1;
	    }
	    if(var == 2)
	    {
			return 1;
	    }
	    else if(var == 3)
	    {
			return 1;
	    }
	}
 	return 1;
}

stock AnimationCheck(playerid)
{
	return (deathmode[playerid] || BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_TAZER) || PlayerData[playerid][pJailed] || BitFlag_Get(g_PlayerFlags[playerid],PLAYER_CUFFED));
}

CMD:maosfrente(playerid, params[])
{
	PlayerData[playerid][pAnimation] = 1;
	PlayerPlaySound(playerid, 1130, 0.0, 0.0, 10.0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return true;
}

CMD:maostras(playerid, params[])
{
	PlayerData[playerid][pAnimation] = 1;
	PlayerPlaySound(playerid, 1130, 0.0, 0.0, 10.0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);
	return true;
}

CMD:sh(playerid, params[]) // sair do H dentro do veiculo
{
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "ped", "CAR_sit", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:animcelular(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

CMD:andar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /andar [1-11]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
            case 4: ApplyAnimation(playerid,"FAT","FatWalk",4.1,1,1,1,1,1);
		    case 1: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		    case 2: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		    case 3: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		    case 5: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		    case 6: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		    case 7: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		    case 8: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		    case 9: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		    case 10: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		    case 11: ApplyAnimation(playerid,"POOL","POOL_Walk",4.1,1,1,1,1,1);
		}
	//
	}
	return 1;
}

CMD:animped(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /animped [1-255]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;

		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"PED","abseil",4.1,0,1,1,1,1);
	 	    case 2: ApplyAnimation(playerid,"PED","ARRESTgun",4.1,0,1,1,1,1);
            case 3: ApplyAnimation(playerid,"PED","ATM",4.1,0,1,1,1,1);
			case 4: ApplyAnimation(playerid,"PED","BIKE_elbowL",4.1,0,1,1,1,1);
			case 5: ApplyAnimation(playerid,"PED","BIKE_elbowR",4.1,0,1,1,1,1);
			case 6: ApplyAnimation(playerid,"PED","BIKE_fallR",4.1,0,1,1,1,1);
			case 7: ApplyAnimation(playerid,"PED","BIKE_fall_off",4.1,0,1,1,1,1);
			case 8: ApplyAnimation(playerid,"PED","BIKE_pickupL",4.1,0,1,1,1,1);
			case 9: ApplyAnimation(playerid,"PED","BIKE_pickupR",4.1,0,1,1,1,1);
			case 10: ApplyAnimation(playerid,"PED","BIKE_pullupL",4.1,0,1,1,1,1);
			case 11: ApplyAnimation(playerid,"PED","BIKE_pullupR",4.1,0,1,1,1,1);
			case 12: ApplyAnimation(playerid,"PED","bomber",4.1,0,1,1,1,1);
			case 13: ApplyAnimation(playerid,"PED","CAR_alignHI_LHS",4.1,0,1,1,1,1);
			case 14: ApplyAnimation(playerid,"PED","CAR_alignHI_RHS",4.1,0,1,1,1,1);
			case 15: ApplyAnimation(playerid,"PED","CAR_align_LHS",4.1,0,1,1,1,1);
			case 16: ApplyAnimation(playerid,"PED","CAR_align_RHS",4.1,0,1,1,1,1);
			case 17: ApplyAnimation(playerid,"PED","CAR_closedoorL_LHS",4.1,0,1,1,1,1);
			case 18: ApplyAnimation(playerid,"PED","CAR_closedoorL_RHS",4.1,0,1,1,1,1);
			case 19: ApplyAnimation(playerid,"PED","CAR_closedoor_LHS",4.1,0,1,1,1,1);
			case 20: ApplyAnimation(playerid,"PED","CAR_closedoor_RHS",4.1,0,1,1,1,1);
			case 21: ApplyAnimation(playerid,"PED","CAR_close_LHS",4.1,0,1,1,1,1);
			case 22: ApplyAnimation(playerid,"PED","CAR_close_RHS",4.1,0,1,1,1,1);
			case 23: ApplyAnimation(playerid,"PED","CAR_crawloutRHS",4.1,0,1,1,1,1);
			case 24: ApplyAnimation(playerid,"PED","CAR_dead_LHS",4.1,0,1,1,1,1);
			case 25: ApplyAnimation(playerid,"PED","CAR_dead_RHS",4.1,0,1,1,1,1);
			case 26: ApplyAnimation(playerid,"PED","CAR_doorlocked_LHS",4.1,0,1,1,1,1);
			case 27: ApplyAnimation(playerid,"PED","CAR_doorlocked_RHS",4.1,0,1,1,1,1);
			case 28: ApplyAnimation(playerid,"PED","CAR_fallout_LHS",4.1,0,1,1,1,1);
			case 29: ApplyAnimation(playerid,"PED","CAR_fallout_RHS",4.1,0,1,1,1,1);
			case 30: ApplyAnimation(playerid,"PED","CAR_getinL_LHS",4.1,0,1,1,1,1);
			case 31: ApplyAnimation(playerid,"PED","CAR_getinL_RHS",4.1,0,1,1,1,1);
			case 32: ApplyAnimation(playerid,"PED","CAR_getin_LHS",4.1,0,1,1,1,1);
			case 33: ApplyAnimation(playerid,"PED","CAR_getin_RHS",4.1,0,1,1,1,1);
			case 34: ApplyAnimation(playerid,"PED","CAR_getoutL_LHS",4.1,0,1,1,1,1);
			case 35: ApplyAnimation(playerid,"PED","CAR_getoutL_RHS",4.1,0,1,1,1,1);
			case 36: ApplyAnimation(playerid,"PED","CAR_getout_LHS",4.1,0,1,1,1,1);
			case 37: ApplyAnimation(playerid,"PED","CAR_getout_RHS",4.1,0,1,1,1,1);
			case 38: ApplyAnimation(playerid,"PED","car_hookertalk",4.1,0,1,1,1,1);
			case 39: ApplyAnimation(playerid,"PED","CAR_jackedLHS",4.1,0,1,1,1,1);
			case 40: ApplyAnimation(playerid,"PED","CAR_jackedRHS",4.1,0,1,1,1,1);
			case 41: ApplyAnimation(playerid,"PED","CAR_jumpin_LHS",4.1,0,1,1,1,1);
			case 42: ApplyAnimation(playerid,"PED","CAR_LB",4.1,0,1,1,1,1);
			case 43: ApplyAnimation(playerid,"PED","CAR_LB_pro",4.1,0,1,1,1,1);
			case 44: ApplyAnimation(playerid,"PED","CAR_LB_weak",4.1,0,1,1,1,1);
			case 45: ApplyAnimation(playerid,"PED","CAR_LjackedLHS",4.1,0,1,1,1,1);
			case 46: ApplyAnimation(playerid,"PED","CAR_LjackedRHS",4.1,0,1,1,1,1);
			case 47: ApplyAnimation(playerid,"PED","CAR_Lshuffle_RHS",4.1,0,1,1,1,1);
			case 48: ApplyAnimation(playerid,"PED","CAR_Lsit",4.1,0,1,1,1,1);
			case 49: ApplyAnimation(playerid,"PED","CAR_open_LHS",4.1,0,1,1,1,1);
			case 50: ApplyAnimation(playerid,"PED","CAR_open_RHS",4.1,0,1,1,1,1);
			case 51: ApplyAnimation(playerid,"PED","CAR_pulloutL_LHS",4.1,0,1,1,1,1);
			case 52: ApplyAnimation(playerid,"PED","CAR_pulloutL_RHS",4.1,0,1,1,1,1);
			case 53: ApplyAnimation(playerid,"PED","CAR_pullout_LHS",4.1,0,1,1,1,1);
			case 54: ApplyAnimation(playerid,"PED","CAR_pullout_RHS",4.1,0,1,1,1,1);
			case 55: ApplyAnimation(playerid,"PED","CAR_Qjacked",4.1,0,1,1,1,1);
			case 56: ApplyAnimation(playerid,"PED","CAR_rolldoor",4.1,0,1,1,1,1);
			case 57: ApplyAnimation(playerid,"PED","CAR_rolldoorLO",4.1,0,1,1,1,1);
			case 58: ApplyAnimation(playerid,"PED","CAR_rollout_LHS",4.1,0,1,1,1,1);
			case 59: ApplyAnimation(playerid,"PED","CAR_rollout_RHS",4.1,0,1,1,1,1);
			case 60: ApplyAnimation(playerid,"PED","CAR_shuffle_RHS",4.1,0,1,1,1,1);
			case 61: ApplyAnimation(playerid,"PED","CAR_sit",4.1,0,1,1,1,1);
			case 62: ApplyAnimation(playerid,"PED","CAR_sitp",4.1,0,1,1,1,1);
			case 63: ApplyAnimation(playerid,"PED","CAR_sitpLO",4.1,0,1,1,1,1);
			case 64: ApplyAnimation(playerid,"PED","CAR_sit_pro",4.1,0,1,1,1,1);
			case 65: ApplyAnimation(playerid,"PED","CAR_sit_weak",4.1,0,1,1,1,1);
			case 66: ApplyAnimation(playerid,"PED","CAR_tune_radio",4.1,0,1,1,1,1);
			case 67: ApplyAnimation(playerid,"PED","CLIMB_idle",4.1,0,1,1,1,1);
			case 68: ApplyAnimation(playerid,"PED","CLIMB_jump",4.1,0,1,1,1,1);
			case 69: ApplyAnimation(playerid,"PED","CLIMB_jump2fall",4.1,0,1,1,1,1);
			case 70: ApplyAnimation(playerid,"PED","CLIMB_jump_B",4.1,0,1,1,1,1);
			case 71: ApplyAnimation(playerid,"PED","CLIMB_Pull",4.1,0,1,1,1,1);
			case 72: ApplyAnimation(playerid,"PED","CLIMB_Stand",4.1,0,1,1,1,1);
			case 73: ApplyAnimation(playerid,"PED","CLIMB_Stand_finish",4.1,0,1,1,1,1);
			case 74: ApplyAnimation(playerid,"PED","cower",4.1,0,1,1,1,1);
			case 75: ApplyAnimation(playerid,"PED","Crouch_Roll_L",4.1,0,1,1,1,1);
			case 76: ApplyAnimation(playerid,"PED","Crouch_Roll_R",4.1,0,1,1,1,1);
			case 77: ApplyAnimation(playerid,"PED","DAM_armL_frmBK",4.1,0,1,1,1,1);
			case 78: ApplyAnimation(playerid,"PED","DAM_armL_frmFT",4.1,0,1,1,1,1);
			case 79: ApplyAnimation(playerid,"PED","DAM_armL_frmLT",4.1,0,1,1,1,1);
			case 80: ApplyAnimation(playerid,"PED","DAM_armR_frmBK",4.1,0,1,1,1,1);
			case 81: ApplyAnimation(playerid,"PED","DAM_armR_frmFT",4.1,0,1,1,1,1);
			case 82: ApplyAnimation(playerid,"PED","DAM_armR_frmRT",4.1,0,1,1,1,1);
			case 83: ApplyAnimation(playerid,"PED","DAM_LegL_frmBK",4.1,0,1,1,1,1);
			case 84: ApplyAnimation(playerid,"PED","DAM_LegL_frmFT",4.1,0,1,1,1,1);
			case 85: ApplyAnimation(playerid,"PED","DAM_LegL_frmLT",4.1,0,1,1,1,1);
			case 86: ApplyAnimation(playerid,"PED","DAM_LegR_frmBK",4.1,0,1,1,1,1);
			case 87: ApplyAnimation(playerid,"PED","DAM_LegR_frmFT",4.1,0,1,1,1,1);
			case 88: ApplyAnimation(playerid,"PED","DAM_LegR_frmRT",4.1,0,1,1,1,1);
			case 89: ApplyAnimation(playerid,"PED","DAM_stomach_frmBK",4.1,0,1,1,1,1);
			case 90: ApplyAnimation(playerid,"PED","DAM_stomach_frmFT",4.1,0,1,1,1,1);
			case 91: ApplyAnimation(playerid,"PED","DAM_stomach_frmLT",4.1,0,1,1,1,1);
			case 92: ApplyAnimation(playerid,"PED","DAM_stomach_frmRT",4.1,0,1,1,1,1);
			case 93: ApplyAnimation(playerid,"PED","DOOR_LHinge_O",4.1,0,1,1,1,1);
			case 94: ApplyAnimation(playerid,"PED","DOOR_RHinge_O",4.1,0,1,1,1,1);
			case 95: ApplyAnimation(playerid,"PED","DrivebyL_L",4.1,0,1,1,1,1);
			case 96: ApplyAnimation(playerid,"PED","DrivebyL_R",4.1,0,1,1,1,1);
			case 97: ApplyAnimation(playerid,"PED","Driveby_L",4.1,0,1,1,1,1);
			case 98: ApplyAnimation(playerid,"PED","Driveby_R",4.1,0,1,1,1,1);
			case 99: ApplyAnimation(playerid,"PED","DRIVE_BOAT",4.1,0,1,1,1,1);
			case 100: ApplyAnimation(playerid,"PED","DRIVE_BOAT_back",4.1,0,1,1,1,1);
			case 101: ApplyAnimation(playerid,"PED","DRIVE_BOAT_L",4.1,0,1,1,1,1);
			case 102: ApplyAnimation(playerid,"PED","DRIVE_BOAT_R",4.1,0,1,1,1,1);
			case 103: ApplyAnimation(playerid,"PED","Drive_L",4.1,0,1,1,1,1);
			case 104: ApplyAnimation(playerid,"PED","Drive_LO_l",4.1,0,1,1,1,1);
			case 105: ApplyAnimation(playerid,"PED","Drive_LO_R",4.1,0,1,1,1,1);
			case 106: ApplyAnimation(playerid,"PED","Drive_L_pro",4.1,0,1,1,1,1);
			case 107: ApplyAnimation(playerid,"PED","Drive_L_pro_slow",4.1,0,1,1,1,1);
			case 108: ApplyAnimation(playerid,"PED","Drive_L_slow",4.1,0,1,1,1,1);
			case 109: ApplyAnimation(playerid,"PED","Drive_L_weak",4.1,0,1,1,1,1);
			case 110: ApplyAnimation(playerid,"PED","Drive_L_weak_slow",4.1,0,1,1,1,1);
			case 111: ApplyAnimation(playerid,"PED","Drive_R",4.1,0,1,1,1,1);
			case 112: ApplyAnimation(playerid,"PED","Drive_R_pro",4.1,0,1,1,1,1);
			case 113: ApplyAnimation(playerid,"PED","Drive_R_pro_slow",4.1,0,1,1,1,1);
			case 114: ApplyAnimation(playerid,"PED","Drive_R_slow",4.1,0,1,1,1,1);
			case 115: ApplyAnimation(playerid,"PED","Drive_R_weak",4.1,0,1,1,1,1);
			case 116: ApplyAnimation(playerid,"PED","Drive_R_weak_slow",4.1,0,1,1,1,1);
			case 117: ApplyAnimation(playerid,"PED","Drive_truck",4.1,0,1,1,1,1);
			case 118: ApplyAnimation(playerid,"PED","DRIVE_truck_back",4.1,0,1,1,1,1);
			case 119: ApplyAnimation(playerid,"PED","DRIVE_truck_L",4.1,0,1,1,1,1);
			case 120: ApplyAnimation(playerid,"PED","DRIVE_truck_R",4.1,0,1,1,1,1);
			case 121: ApplyAnimation(playerid,"PED","Drown",4.1,0,1,1,1,1);
			case 122: ApplyAnimation(playerid,"PED","DUCK_cower",4.1,0,1,1,1,1);
			case 123: ApplyAnimation(playerid,"PED","endchat_01",4.1,0,1,1,1,1);
			case 124: ApplyAnimation(playerid,"PED","endchat_02",4.1,0,1,1,1,1);
			case 125: ApplyAnimation(playerid,"PED","endchat_03",4.1,0,1,1,1,1);
			case 126: ApplyAnimation(playerid,"PED","EV_dive",4.1,0,1,1,1,1);
			case 127: ApplyAnimation(playerid,"PED","EV_step",4.1,0,1,1,1,1);
			case 128: ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
			case 129: ApplyAnimation(playerid,"PED","facanger",4.1,0,1,1,1,1);
			case 130: ApplyAnimation(playerid,"PED","facgum",4.1,0,1,1,1,1);
			case 131: ApplyAnimation(playerid,"PED","facsurp",4.1,0,1,1,1,1);
			case 132: ApplyAnimation(playerid,"PED","facsurpm",4.1,0,1,1,1,1);
			case 133: ApplyAnimation(playerid,"PED","factalk",4.1,0,1,1,1,1);
			case 134: ApplyAnimation(playerid,"PED","facurios",4.1,0,1,1,1,1);
			case 135: ApplyAnimation(playerid,"PED","FALL_back",4.1,0,1,1,1,1);
			case 136: ApplyAnimation(playerid,"PED","FALL_collapse",4.1,0,1,1,1,1);
			case 137: ApplyAnimation(playerid,"PED","FALL_fall",4.1,0,1,1,1,1);
			case 138: ApplyAnimation(playerid,"PED","FALL_front",4.1,0,1,1,1,1);
			case 139: ApplyAnimation(playerid,"PED","FALL_glide",4.1,0,1,1,1,1);
			case 140: ApplyAnimation(playerid,"PED","FALL_land",4.1,0,1,1,1,1);
			case 141: ApplyAnimation(playerid,"PED","FALL_skyDive",4.1,0,1,1,1,1);
			case 142: ApplyAnimation(playerid,"PED","Fight2Idle",4.1,0,1,1,1,1);
			case 143: ApplyAnimation(playerid,"PED","FightA_1",4.1,0,1,1,1,1);
			case 144: ApplyAnimation(playerid,"PED","FightA_2",4.1,0,1,1,1,1);
			case 145: ApplyAnimation(playerid,"PED","FightA_3",4.1,0,1,1,1,1);
			case 146: ApplyAnimation(playerid,"PED","FightA_block",4.1,0,1,1,1,1);
			case 147: ApplyAnimation(playerid,"PED","FightA_G",4.1,0,1,1,1,1);
			case 148: ApplyAnimation(playerid,"PED","FightA_M",4.1,0,1,1,1,1);
			case 149: ApplyAnimation(playerid,"PED","FIGHTIDLE",4.1,0,1,1,1,1);
			case 150: ApplyAnimation(playerid,"PED","FightShB",4.1,0,1,1,1,1);
			case 151: ApplyAnimation(playerid,"PED","FightShF",4.1,0,1,1,1,1);
			case 152: ApplyAnimation(playerid,"PED","FightSh_BWD",4.1,0,1,1,1,1);
			case 153: ApplyAnimation(playerid,"PED","FightSh_FWD",4.1,0,1,1,1,1);
			case 154: ApplyAnimation(playerid,"PED","FightSh_Left",4.1,0,1,1,1,1);
			case 155: ApplyAnimation(playerid,"PED","FightSh_Right",4.1,0,1,1,1,1);
			case 156: ApplyAnimation(playerid,"PED","flee_lkaround_01",4.1,0,1,1,1,1);
			case 157: ApplyAnimation(playerid,"PED","FLOOR_hit",4.1,0,1,1,1,1);
			case 158: ApplyAnimation(playerid,"PED","FLOOR_hit_f",4.1,0,1,1,1,1);
			case 159: ApplyAnimation(playerid,"PED","fucku",4.1,0,1,1,1,1);
			case 160: ApplyAnimation(playerid,"PED","gang_gunstand",4.1,0,1,1,1,1);
			case 161: ApplyAnimation(playerid,"PED","gas_cwr",4.1,0,1,1,1,1);
			case 162: ApplyAnimation(playerid,"PED","getup",4.1,0,1,1,1,1);
			case 163: ApplyAnimation(playerid,"PED","getup_front",4.1,0,1,1,1,1);
			case 164: ApplyAnimation(playerid,"PED","gum_eat",4.1,0,1,1,1,1);
			case 165: ApplyAnimation(playerid,"PED","GunCrouchBwd",4.1,0,1,1,1,1);
			case 166: ApplyAnimation(playerid,"PED","GunCrouchFwd",4.1,0,1,1,1,1);
			case 167: ApplyAnimation(playerid,"PED","GunMove_BWD",4.1,0,1,1,1,1);
			case 168: ApplyAnimation(playerid,"PED","GunMove_FWD",4.1,0,1,1,1,1);
			case 169: ApplyAnimation(playerid,"PED","GunMove_L",4.1,0,1,1,1,1);
			case 170: ApplyAnimation(playerid,"PED","GunMove_R",4.1,0,1,1,1,1);
			case 171: ApplyAnimation(playerid,"PED","Gun_2_IDLE",4.1,0,1,1,1,1);
			case 172: ApplyAnimation(playerid,"PED","GUN_BUTT",4.1,0,1,1,1,1);
			case 173: ApplyAnimation(playerid,"PED","GUN_BUTT_crouch",4.1,0,1,1,1,1);
			case 174: ApplyAnimation(playerid,"PED","Gun_stand",4.1,0,1,1,1,1);
			case 175: ApplyAnimation(playerid,"PED","handscower",4.1,0,1,1,1,1);
			case 176: ApplyAnimation(playerid,"PED","handsup",4.1,0,1,1,1,1);
			case 177: ApplyAnimation(playerid,"PED","HitA_1",4.1,0,1,1,1,1);
			case 178: ApplyAnimation(playerid,"PED","HitA_2",4.1,0,1,1,1,1);
			case 179: ApplyAnimation(playerid,"PED","HitA_3",4.1,0,1,1,1,1);
			case 180: ApplyAnimation(playerid,"PED","HIT_back",4.1,0,1,1,1,1);
			case 181: ApplyAnimation(playerid,"PED","HIT_behind",4.1,0,1,1,1,1);
			case 182: ApplyAnimation(playerid,"PED","HIT_front",4.1,0,1,1,1,1);
			case 183: ApplyAnimation(playerid,"PED","HIT_GUN_BUTT",4.1,0,1,1,1,1);
			case 184: ApplyAnimation(playerid,"PED","HIT_L",4.1,0,1,1,1,1);
			case 185: ApplyAnimation(playerid,"PED","HIT_R",4.1,0,1,1,1,1);
			case 186: ApplyAnimation(playerid,"PED","HIT_walk",4.1,0,1,1,1,1);
			case 187: ApplyAnimation(playerid,"PED","HIT_wall",4.1,0,1,1,1,1);
			case 188: ApplyAnimation(playerid,"PED","Idlestance_fat",4.1,0,1,1,1,1);
			case 189: ApplyAnimation(playerid,"PED","idlestance_old",4.1,0,1,1,1,1);
			case 190: ApplyAnimation(playerid,"PED","IDLE_armed",4.1,0,1,1,1,1);
			case 191: ApplyAnimation(playerid,"PED","IDLE_chat",4.1,0,1,1,1,1);
			case 192: ApplyAnimation(playerid,"PED","IDLE_csaw",4.1,0,1,1,1,1);
			case 193: ApplyAnimation(playerid,"PED","Idle_Gang1",4.1,0,1,1,1,1);
			case 194: ApplyAnimation(playerid,"PED","IDLE_HBHB",4.1,0,1,1,1,1);
			case 195: ApplyAnimation(playerid,"PED","IDLE_ROCKET",4.1,0,1,1,1,1);
			case 196: ApplyAnimation(playerid,"PED","IDLE_stance",4.1,0,1,1,1,1);
			case 197: ApplyAnimation(playerid,"PED","IDLE_taxi",4.1,0,1,1,1,1);
			case 198: ApplyAnimation(playerid,"PED","IDLE_tired",4.1,0,1,1,1,1);
			case 199: ApplyAnimation(playerid,"PED","Jetpack_Idle",4.1,0,1,1,1,1);
			case 200: ApplyAnimation(playerid,"PED","JOG_femaleA",4.1,0,1,1,1,1);
			case 201: ApplyAnimation(playerid,"PED","JOG_maleA",4.1,0,1,1,1,1);
			case 202: ApplyAnimation(playerid,"PED","JUMP_glide",4.1,0,1,1,1,1);
			case 203: ApplyAnimation(playerid,"PED","JUMP_land",4.1,0,1,1,1,1);
			case 204: ApplyAnimation(playerid,"PED","JUMP_launch",4.1,0,1,1,1,1);
			case 205: ApplyAnimation(playerid,"PED","JUMP_launch_R",4.1,0,1,1,1,1);
			case 206: ApplyAnimation(playerid,"PED","KART_drive",4.1,0,1,1,1,1);
			case 207: ApplyAnimation(playerid,"PED","KART_L",4.1,0,1,1,1,1);
			case 208: ApplyAnimation(playerid,"PED","KART_LB",4.1,0,1,1,1,1);
			case 209: ApplyAnimation(playerid,"PED","KART_R",4.1,0,1,1,1,1);
			case 210: ApplyAnimation(playerid,"PED","KD_left",4.1,0,1,1,1,1);
			case 211: ApplyAnimation(playerid,"PED","KD_right",4.1,0,1,1,1,1);
			case 212: ApplyAnimation(playerid,"PED","KO_shot_face",4.1,0,1,1,1,1);
			case 213: ApplyAnimation(playerid,"PED","KO_shot_front",4.1,0,1,1,1,1);
			case 214: ApplyAnimation(playerid,"PED","KO_shot_stom",4.1,0,1,1,1,1);
			case 215: ApplyAnimation(playerid,"PED","KO_skid_back",4.1,0,1,1,1,1);
			case 216: ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,1);
			case 217: ApplyAnimation(playerid,"PED","KO_spin_L",4.1,0,1,1,1,1);
			case 218: ApplyAnimation(playerid,"PED","KO_spin_R",4.1,0,1,1,1,1);
			case 219: ApplyAnimation(playerid,"PED","pass_Smoke_in_car",4.1,0,1,1,1,1);
			case 220: ApplyAnimation(playerid,"PED","phone_in",4.1,0,1,1,1,1);
			case 221: ApplyAnimation(playerid,"PED","phone_out",4.1,0,1,1,1,1);
			case 222: ApplyAnimation(playerid,"PED","phone_talk",4.1,0,1,1,1,1);
			case 223: ApplyAnimation(playerid,"PED","Player_Sneak",4.1,0,1,1,1,1);
			case 224: ApplyAnimation(playerid,"PED","Player_Sneak_walkstart",4.1,0,1,1,1,1);
			case 225: ApplyAnimation(playerid,"PED","roadcross",4.1,0,1,1,1,1);
			case 226: ApplyAnimation(playerid,"PED","roadcross_female",4.1,0,1,1,1,1);
			case 227: ApplyAnimation(playerid,"PED","roadcross_gang",4.1,0,1,1,1,1);
			case 228: ApplyAnimation(playerid,"PED","roadcross_old",4.1,0,1,1,1,1);
			case 229: ApplyAnimation(playerid,"PED","run_1armed",4.1,0,1,1,1,1);
			case 230: ApplyAnimation(playerid,"PED","run_armed",4.1,0,1,1,1,1);
			case 231: ApplyAnimation(playerid,"PED","run_civi",4.1,0,1,1,1,1);
			case 232: ApplyAnimation(playerid,"PED","run_csaw",4.1,0,1,1,1,1);
			case 233: ApplyAnimation(playerid,"PED","run_fat",4.1,0,1,1,1,1);
			case 234: ApplyAnimation(playerid,"PED","run_fatold",4.1,0,1,1,1,1);
			case 235: ApplyAnimation(playerid,"PED","run_gang1",4.1,0,1,1,1,1);
			case 236: ApplyAnimation(playerid,"PED","run_left",4.1,0,1,1,1,1);
			case 237: ApplyAnimation(playerid,"PED","run_old",4.1,0,1,1,1,1);
			case 238: ApplyAnimation(playerid,"PED","run_player",4.1,0,1,1,1,1);
			case 239: ApplyAnimation(playerid,"PED","run_right",4.1,0,1,1,1,1);
			case 240: ApplyAnimation(playerid,"PED","run_rocket",4.1,0,1,1,1,1);
			case 241: ApplyAnimation(playerid,"PED","Run_stop",4.1,0,1,1,1,1);
			case 242: ApplyAnimation(playerid,"PED","Run_stopR",4.1,0,1,1,1,1);
			case 243: ApplyAnimation(playerid,"PED","Run_Wuzi",4.1,0,1,1,1,1);
			case 244: ApplyAnimation(playerid,"PED","SEAT_down",4.1,0,1,1,1,1);
			case 245: ApplyAnimation(playerid,"PED","SEAT_idle",4.1,0,1,1,1,1);
			case 246: ApplyAnimation(playerid,"PED","SEAT_up",4.1,0,1,1,1,1);
			case 247: ApplyAnimation(playerid,"PED","SHOT_leftP",4.1,0,1,1,1,1);
			case 248: ApplyAnimation(playerid,"PED","SHOT_partial",4.1,0,1,1,1,1);
			case 249: ApplyAnimation(playerid,"PED","SHOT_partial_B",4.1,0,1,1,1,1);
			case 250: ApplyAnimation(playerid,"PED","SHOT_rightP",4.1,0,1,1,1,1);
			case 251: ApplyAnimation(playerid,"PED","Shove_Partial",4.1,0,1,1,1,1);
			case 252: ApplyAnimation(playerid,"PED","Smoke_in_car",4.1,0,1,1,1,1);
			case 253: ApplyAnimation(playerid,"PED","sprint_civi",4.1,0,1,1,1,1);
			case 254: ApplyAnimation(playerid,"PED","sprint_panic",4.1,0,1,1,1,1);
			case 255: ApplyAnimation(playerid,"PED","Sprint_Wuzi",4.1,0,1,1,1,1);
			case 256: ApplyAnimation(playerid,"PED","swat_run",4.1,0,1,1,1,1);
			case 257: ApplyAnimation(playerid,"PED","Swim_Tread",4.1,0,1,1,1,1);
			case 258: ApplyAnimation(playerid,"PED","Tap_hand",4.1,0,1,1,1,1);
			case 259: ApplyAnimation(playerid,"PED","Tap_handP",4.1,0,1,1,1,1);
			case 260: ApplyAnimation(playerid,"PED","turn_180",4.1,0,1,1,1,1);
			case 261: ApplyAnimation(playerid,"PED","Turn_L",4.1,0,1,1,1,1);
			case 262: ApplyAnimation(playerid,"PED","Turn_R",4.1,0,1,1,1,1);
			case 263: ApplyAnimation(playerid,"PED","WALK_armed",4.1,0,1,1,1,1);
			case 264: ApplyAnimation(playerid,"PED","WALK_civi",4.1,0,1,1,1,1);
			case 265: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,0,1,1,1,1);
			case 266: ApplyAnimation(playerid,"PED","Walk_DoorPartial",4.1,0,1,1,1,1);
			case 267: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,0,1,1,1,1);
			case 268: ApplyAnimation(playerid,"PED","WALK_fat",4.1,0,1,1,1,1);
			case 269: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,0,1,1,1,1);
			case 270: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,0,1,1,1,1);
			case 271: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,0,1,1,1,1);
			case 272: ApplyAnimation(playerid,"PED","WALK_old",4.1,0,1,1,1,1);
			case 273: ApplyAnimation(playerid,"PED","WALK_player",4.1,0,1,1,1,1);
			case 274: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,0,1,1,1,1);
			case 275: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,0,1,1,1,1);
			case 276: ApplyAnimation(playerid,"PED","WALK_start",4.1,0,1,1,1,1);
			case 277: ApplyAnimation(playerid,"PED","WALK_start_armed",4.1,0,1,1,1,1);
			case 278: ApplyAnimation(playerid,"PED","WALK_start_csaw",4.1,0,1,1,1,1);
			case 279: ApplyAnimation(playerid,"PED","WALK_start_rocket",4.1,0,1,1,1,1);
			case 280: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,0,1,1,1,1);
			case 281: ApplyAnimation(playerid,"PED","WEAPON_crouch",4.1,0,1,1,1,1);
			case 282: ApplyAnimation(playerid,"PED","woman_idlestance",4.1,0,1,1,1,1);
			case 283: ApplyAnimation(playerid,"PED","woman_run",4.1,0,1,1,1,1);
			case 284: ApplyAnimation(playerid,"PED","WOMAN_runbusy",4.1,0,1,1,1,1);
			case 285: ApplyAnimation(playerid,"PED","WOMAN_runfatold",4.1,0,1,1,1,1);
			case 286: ApplyAnimation(playerid,"PED","woman_runpanic",4.1,0,1,1,1,1);
			case 287: ApplyAnimation(playerid,"PED","WOMAN_runsexy",4.1,0,1,1,1,1);
			case 288: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,0,1,1,1,1);
			case 289: ApplyAnimation(playerid,"PED","WOMAN_walkfatold",4.1,0,1,1,1,1);
			case 290: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,0,1,1,1,1);
			case 291: ApplyAnimation(playerid,"PED","WOMAN_walkold",4.1,0,1,1,1,1);
			case 292: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,0,1,1,1,1);
			case 293: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,0,1,1,1,1);
			case 294: ApplyAnimation(playerid,"PED","WOMAN_walkshop",4.1,0,1,1,1,1);
			case 295: ApplyAnimation(playerid,"PED","XPRESSscratch",4.1,0,1,1,1,1);
		}
	//
	}
	return 1;
}

CMD:gwalk(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /gwalk [1-2]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;

		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
            case 2: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /gwalk [1-2]");
		}
	//
	}
	return 1;
}

CMD:animgang(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
		
	new animid;
	if(sscanf(params, "i", animid)) SendClientMessage(playerid, COLOR_GREY, "USE: /animgang [1-33]");
	else
	{
		switch(animid)
		{
			case 1: ApplyAnimation(playerid,"GANGS","DEALER_DEAL",4.1,0,1,1,1,1);
			case 2: ApplyAnimation(playerid,"GANGS","DEALER_IDLE",4.1,0,1,1,1,1);
			case 3: ApplyAnimation(playerid,"GANGS","drnkbr_prtl",4.1,0,1,1,1,1);
			case 4: ApplyAnimation(playerid,"GANGS","drnkbr_prtl_F",4.1,0,1,1,1,1);
			case 5: ApplyAnimation(playerid,"GANGS","DRUGS_BUY",4.1,0,1,1,1,1);
			case 6: ApplyAnimation(playerid,"GANGS","hndshkaa",4.1,0,1,1,1,1);
			case 7: ApplyAnimation(playerid,"GANGS","hndshkba",4.1,0,1,1,1,1);
			case 8: ApplyAnimation(playerid,"GANGS","hndshkca",4.1,0,1,1,1,1);
			case 9: ApplyAnimation(playerid,"GANGS","hndshkcb",4.1,0,1,1,1,1);
			case 10: ApplyAnimation(playerid,"GANGS","hndshkda",4.1,0,1,1,1,1);
			case 11: ApplyAnimation(playerid,"GANGS","hndshkea",4.1,0,1,1,1,1);
			case 12: ApplyAnimation(playerid,"GANGS","hndshkfa",4.1,0,1,1,1,1);
			case 13: ApplyAnimation(playerid,"GANGS","hndshkfa_swt",4.1,0,1,1,1,1);
			case 14: ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1);
			case 15: ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1);
			case 16: ApplyAnimation(playerid,"GANGS","leanIDLE",4.1,0,1,1,1,1);
			case 17: ApplyAnimation(playerid,"GANGS","leanIN",4.1,0,1,1,1,1);
			case 18: ApplyAnimation(playerid,"GANGS","leanOUT",4.1,0,1,1,1,1);
			case 19: ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.1,0,1,1,1,1);
			case 20: ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.1,0,1,1,1,1);
			case 21: ApplyAnimation(playerid,"GANGS","prtial_gngtlkCt",4.1,0,1,1,1,1);
			case 22: ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1,0,1,1,1,1);
			case 23: ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.1,0,1,1,1,1);
			case 24: ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.1,0,1,1,1,1);
			case 25: ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.1,0,1,1,1,1);
			case 26: ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.1,0,1,1,1,1);
			case 27: ApplyAnimation(playerid,"GANGS","prtial_hndshk_01",4.1,0,1,1,1,1);
			case 28: ApplyAnimation(playerid,"GANGS","prtial_hndshk_biz_01",4.1,0,1,1,1,1);
			case 29: ApplyAnimation(playerid,"GANGS","shake_cara",4.1,0,1,1,1,1);
			case 30: ApplyAnimation(playerid,"GANGS","shake_carK",4.1,0,1,1,1,1);
			case 31: ApplyAnimation(playerid,"GANGS","shake_carSH",4.1,0,1,1,1,1);
			case 32: ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.1,0,1,1,1,1);
			case 33: ApplyAnimation(playerid,"GANGS","smkcig_prtl_F",4.1,0,1,1,1,1);
		}
	//
	}
	return 1;
}
CMD:puton(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "goggles", "goggles_put_on", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:animgritar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "RIOT", "RIOT_shout", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:lowrider(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /lowrider [1-8]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "LOWRIDER","lrgirl_hair", 4.0, 0, 1, 1, 1, -1, 1);
		    case 2: ApplyAnimation(playerid, "LOWRIDER","lrgirl_hurry", 4.0, 0, 1, 1, 1, -1, 1);
		    case 3: ApplyAnimation(playerid, "LOWRIDER","lrgirl_idleloop", 4.0, 0, 1, 1, 1, -1, 1);
		    case 4: ApplyAnimation(playerid, "LOWRIDER","lrgirl_idle_to_l0", 4.0, 0, 1, 1, 1, -1, 1);
		    case 5: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l0_loop", 4.0, 0, 1, 1, 1, -1, 1);
		    case 6: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l1_loop", 4.0, 0, 1, 1, 1, -1, 1);
		    case 7: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l1_to_l2", 4.0, 0, 1, 1, 1, -1, 1);
		    case 8: ApplyAnimation(playerid, "LOWRIDER","lrgirl_l2_to_l3", 4.0, 0, 1, 1, 1, -1, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /lowrider [1-8]");
		}
	//
	}
	return 1;
}

CMD:fixcar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /fixcar [1-2]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "CAR","Fixn_Car_Loop", 4.0, 1, 0, 0, 1, 0, 1);
            case 2: ApplyAnimation(playerid, "CAR","Fixn_Car_Out", 3.0, 0, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /fixcar [1-2]");
		}
	//
	}
	return 1;
}

CMD:cobrir(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /cobrir [1-6]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
            case 1: ApplyAnimation(playerid, "SWAT", "swt_wllshoot_in_L", 4.0, 0, 1, 1, 1, -1, 1);
            case 2: ApplyAnimation(playerid, "SWAT", "swt_wllshoot_in_R", 4.0, 0, 1, 1, 1, -1, 1);
            case 3: ApplyAnimation(playerid, "SWAT", "swt_wllshoot_out_L", 4.0, 0, 1, 1, 1, -1, 1);
            case 4: ApplyAnimation(playerid, "SWAT", "swt_wllshoot_out_R", 4.0, 0, 1, 1, 1, -1, 1);
            case 5: ApplyAnimation(playerid, "SWAT", "swt_wllpk_L", 4.0, 0, 1, 1, 1, -1, 1);
            case 6: ApplyAnimation(playerid, "SWAT", "swt_wllpk_R", 4.0, 0, 1, 1, 1, -1, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /cobrir [1-6]");
		}
	//
	}
	return 1;
}

CMD:facepalm(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "MISC", "plyr_shkhead", 4.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:seguir(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"WUZI","Wuzi_follow",4.0,0,0,0,0,0,1);
//
    return 1;
}

CMD:observar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "SHOP", "ROB_Shifty", 4.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:revistacapo(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"POLICE","crm_drgbst_01",4.0,0,1,1,1,0,1);
//
    return 1;
}

CMD:box(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"GYMNASIUM","gym_shadowbox",4.1,1,1,1,1,1,1);
//
    return 1;
}

CMD:vadiar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /vadiar [1-4]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "PED", "IDLE_HBHB", 4.0, 1, 0, 0, 1, 0,1);
		    case 2: ApplyAnimation(playerid, "PLAYIDLES", "shift", 4.0,1,1,1,1,0,1);
		    case 3: ApplyAnimation(playerid, "PLAYIDLES", "shldr", 4.0,1,1,1,1,0,1);
		    case 4: ApplyAnimation(playerid, "PLAYIDLES", "strleg", 4.0,1,1,1,1,0,1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /vadiar [1-4]");
		}
	//
	}
	return 1;
}

CMD:gfunk(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /gfunk [1-17]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"GFUNK","DANCE_LOOP",4.0, 1, 0, 0, 1, 0, 1);
		    case 2: ApplyAnimation(playerid,"GFUNK","DANCE_G3",4.0, 1, 0, 0, 1, 0, 1);
		    case 3: ApplyAnimation(playerid,"GFUNK","DANCE_G4",4.0, 1, 0, 0, 1, 0, 1);
		    case 4: ApplyAnimation(playerid,"GFUNK","DANCE_G2",4.0, 1, 0, 0, 1, 0, 1);
		    case 5: ApplyAnimation(playerid,"GFUNK","DANCE_G1",4.0, 1, 0, 0, 1, 0, 1);
		    case 6: ApplyAnimation(playerid,"GFUNK","DANCE_G10",4.0, 1, 0, 0, 1, 0, 1);
		    case 7: ApplyAnimation(playerid,"GFUNK","DANCE_G9",4.0, 1, 0, 0, 1, 0, 1);
		    case 8: ApplyAnimation(playerid,"GFUNK","DANCE_G11",4.0, 1, 0, 0, 1, 0, 1);
		    case 9: ApplyAnimation(playerid,"GFUNK","DANCE_G12",4.0, 1, 0, 0, 1, 0, 1);
		    case 10: ApplyAnimation(playerid,"WOP","DANCE_LOOP",4.0, 1, 0, 0, 1, 0, 1);
		    case 11: ApplyAnimation(playerid,"WOP","DANCE_G10",4.0, 1, 0, 0, 1, 0, 1);
		    case 12: ApplyAnimation(playerid,"WOP","DANCE_G9",4.0, 1, 0, 0, 1, 0, 1);
		    case 13: ApplyAnimation(playerid,"WOP","DANCE_G12",4.0, 1, 0, 0, 1, 0, 1);
		    case 14: ApplyAnimation(playerid,"WOP","DANCE_G11",4.0, 1, 0, 0, 1, 0, 1);
		    case 15: ApplyAnimation(playerid,"WOP","DANCE_G2",4.0, 1, 0, 0, 1, 0, 1);
		    case 16: ApplyAnimation(playerid,"WOP","DANCE_G1",4.0, 1, 0, 0, 1, 0, 1);
		    case 17: ApplyAnimation(playerid,"WOP","DANCE_G4",4.0, 1, 0, 0, 1, 0, 1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /gfunk [1-17]");
		}
	//
	}
	return 1;
}

CMD:sinuca(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /sinuca [1-11]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"POOL","POOL_ChalkCue",4.0, 0, 1, 1, 1, -1, 1);
		    case 2: ApplyAnimation(playerid,"POOL","POOL_Idle_Stance",4.0, 0, 1, 1, 1, -1, 1);
		    case 3: ApplyAnimation(playerid,"POOL","POOL_Long_Shot",4.0, 0, 1, 1, 1, -1, 1);
		    case 4: ApplyAnimation(playerid,"POOL","POOL_Long_Start",4.0, 0, 1, 1, 1, -1, 1);
		    case 5: ApplyAnimation(playerid,"POOL","POOL_Med_Shot",4.0, 0, 1, 1, 1, -1, 1);
		    case 6: ApplyAnimation(playerid,"POOL","POOL_Med_Start",4.0, 0, 1, 1, 1, -1, 1);
		    case 7: ApplyAnimation(playerid,"POOL","POOL_Place_White",4.0, 0, 1, 1, 1, -1, 1);
		    case 8: ApplyAnimation(playerid,"POOL","POOL_Short_Shot",4.0, 0, 1, 1, 1, -1, 1);
		    case 9: ApplyAnimation(playerid,"POOL","POOL_Short_Start",4.0, 0, 1, 1, 1, -1, 1);
		    case 10: ApplyAnimation(playerid,"POOL","POOL_XLong_Shot",4.0, 0, 1, 1, 1, -1, 1);
		    case 11: ApplyAnimation(playerid,"POOL","POOL_XLong_Start",4.0, 0, 1, 1, 1, -1, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /sinuca [1-11]");
		}
	//
	}
	return 1;
}

CMD:segurar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "ped", "IDLE_armed", 4.0, 1, 0, 0, 1, 0,1);
//
    return 1;
}

CMD:esquivar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /esquivar [1-3]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
            case 1: ApplyAnimation(playerid,"ped","Crouch_Roll_L",4.0,0,1,1,0,0,1);
            case 2: ApplyAnimation(playerid,"ped","Crouch_Roll_R",4.0,0,1,1,0,0,1);
            case 3: ApplyAnimation(playerid,"ped","EV_dive",4.0,0,1,1,0,0,1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /dive [1-3]");
		}
	//
	}
	return 1;
}

CMD:eatsit(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FOOD","FF_Sit_Loop", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:rimando(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"benchpress","gym_bp_celebrate", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:animalgemar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"COP_AMBIENT","Copbrowse_shake",4.0, 0, 1, 1, 1, -1, 1);
//
    return 1;
}

CMD:alevantar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","getup",4.0,0,0,0,0,0,1);
//
    return 1;
}

CMD:dpunch(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_B","FightB_1",4.0,0,1,1,0,0,1);
//
    return 1;
}

CMD:gkick(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_D","FightD_G",4.0,0,0,0,0,0,1);
//
    return 1;
}

CMD:airkick(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_C","FightC_M",4.0,0,1,1,0,0,1);
//
    return 1;
}

CMD:gpunch(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_B","FightB_G",4.0,0,0,0,0,0,1);
//
    return 1;
}

CMD:levantarguarda(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_D","FightD_IDLE",4.0,1,1,1,1,0,1);
//
    return 1;
}

CMD:cotovelada(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FIGHT_D","FightD_3",4.0,0,1,1,0,0,1);
//
    return 1;
}

CMD:bj(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /bj [1-18]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_P",4.1,0,1,1,1,1,1);
            case 2: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_START_W",4.1,0,1,1,1,1,1);
            case 3: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_P",4.1,0,1,1,1,1,1);
            case 4: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_LOOP_W",4.1,0,1,1,1,1,1);
            case 5: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_P",4.1,0,1,1,1,1,1);
            case 6: ApplyAnimation(playerid,"BLOWJOBZ","BJ_COUCH_END_W",4.1,0,1,1,1,1,1);
            case 7: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_P",4.1,0,1,1,1,1,1);
            case 8: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_START_W",4.1,0,1,1,1,1,1);
            case 9: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_P",4.1,0,1,1,1,1,1);
            case 10: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_LOOP_W",4.1,0,1,1,1,1,1);
            case 11: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_P",4.1,0,1,1,1,1,1);
            case 12: ApplyAnimation(playerid,"BLOWJOBZ","BJ_STAND_END_W",4.1,0,1,1,1,1,1);
            case 13: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_W", 4.0, 0, 1, 1, 1, -1,1);
		    case 14: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_START_P", 4.0, 0, 1, 1, 1, -1,1);
		    case 15: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_W", 4.0, 1, 1, 1, 1, 0,1);
		    case 16: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_LOOP_P", 4.0, 1, 1, 1, 1, 0,1);
		    case 17: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_W", 4.0, 0, 1, 1, 1, -1,1);
		    case 18: ApplyAnimation(playerid, "BLOWJOBZ", "BJ_CAR_END_P", 4.0, 0, 1, 1, 1, -1,1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /bj [1-18]");
		}
	//
	}
	return 1;
}

CMD:sexy(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /sexy [1-8]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"SNM","SPANKING_IDLEW",4.1,0,1,1,1,1,1);
            case 2: ApplyAnimation(playerid,"SNM","SPANKING_IDLEP",4.1,0,1,1,1,1,1);
            case 3: ApplyAnimation(playerid,"SNM","SPANKINGW",4.1,0,1,1,1,1,1);
            case 4: ApplyAnimation(playerid,"SNM","SPANKINGP",4.1,0,1,1,1,1,1);
            case 5: ApplyAnimation(playerid,"SNM","SPANKEDW",4.1,0,1,1,1,1,1);
            case 6: ApplyAnimation(playerid,"SNM","SPANKEDP",4.1,0,1,1,1,1,1);
            case 7: ApplyAnimation(playerid,"SNM","SPANKING_ENDW",4.1,0,1,1,1,1,1);
            case 8: ApplyAnimation(playerid,"SNM","SPANKING_ENDP",4.1,0,1,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /sexy [1-8]");
		}
	//
	}
	return 1;
}

CMD:strip(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /strip [1-7]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"STRIP","strip_A",4.0,1,1,1,1,0,1);
            case 2: ApplyAnimation(playerid,"STRIP","strip_B",4.0,1,1,1,1,0,1);
            case 3: ApplyAnimation(playerid,"STRIP","strip_C",4.0,1,1,1,1,0,1);
            case 4: ApplyAnimation(playerid,"STRIP","strip_D",4.0,1,1,1,1,0,1);
            case 5: ApplyAnimation(playerid,"STRIP","strip_E",4.0,1,1,1,1,0,1);
            case 6: ApplyAnimation(playerid,"STRIP","strip_F",4.0,1,1,1,1,0,1);
            case 7: ApplyAnimation(playerid,"STRIP","strip_G",4.0,1,1,1,1,0,1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /strip [1-7]");
		}
	//
	}
	return 1;
}

CMD:punheta(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /punheta [1-3]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"PAULNMAC","wank_in",4.0,1,1,1,1,0,1);
            case 2: ApplyAnimation(playerid,"PAULNMAC","wank_loop",4.0, 1, 0, 0, 1, 0,1);
            case 3: ApplyAnimation(playerid,"PAULNMAC","wank_out",4.0,1,1,1,1,0,1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /punheta [1-3]");
		}
	//
	}
	return 1;
}

CMD:rap(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /rap [1-3]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"RAPPING","RAP_A_Loop",4.0,1,1,1,1,0, 1);
            case 2: ApplyAnimation(playerid,"RAPPING","RAP_B_Loop",4.0,1,1,1,1,0, 1);
            case 3: ApplyAnimation(playerid,"RAPPING","RAP_C_Loop",4.0,1,1,1,1,0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /rap [1-3]");
		}
	//
	}
	return 1;
}

CMD:dancar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /dancar [1-15]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
            case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
            case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
            case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
            case 5: ApplyAnimation(playerid,"DANCING","bd_clap",4.0, 1, 0, 0, 1, 0, 1);
            case 6: ApplyAnimation(playerid,"DANCING","DAN_Down_A",4.0, 1, 0, 0, 1, 0, 1);
            case 7: ApplyAnimation(playerid,"DANCING","DAN_Left_A",4.0, 1, 0, 0, 1, 0, 1);
            case 8: ApplyAnimation(playerid,"DANCING","DAN_Loop_A",4.0, 1, 0, 0, 1, 0, 1);
            case 9: ApplyAnimation(playerid,"DANCING","DAN_Right_A",4.0, 1, 0, 0, 1, 0, 1);
            case 10: ApplyAnimation(playerid,"DANCING","DAN_Up_A",4.0, 1, 0, 0, 1, 0, 1);
            case 11: ApplyAnimation(playerid,"DANCING","dnce_M_a",4.0, 1, 0, 0, 1, 0, 1);
            case 12: ApplyAnimation(playerid,"DANCING","dnce_M_b",4.0, 1, 0, 0, 1, 0, 1);
            case 13: ApplyAnimation(playerid,"DANCING","dnce_M_c",4.0, 1, 0, 0, 1, 0, 1);
            case 14: ApplyAnimation(playerid,"DANCING","dnce_M_d",4.0, 1, 0, 0, 1, 0, 1);
            case 15: ApplyAnimation(playerid,"DANCING","dnce_M_e",4.0, 1, 0, 0, 1, 0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /dance [1-15]");
		}
	//
	}
	return 1;
}

CMD:supino(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /supino [1-5]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"benchpress","gym_bp_geton",4.0,0,0,0,1,0,1);
		    case 2: ApplyAnimation(playerid,"benchpress","gym_bp_getoff",4.0,0,0,0,1,0,1);
		    case 3: ApplyAnimation(playerid,"benchpress","gym_bp_down",4.0,0,0,0,1,0,1);
		    case 4: ApplyAnimation(playerid,"benchpress","gym_bp_up_A",4.0,0,0,0,1,0,1);
		    case 5: ApplyAnimation(playerid,"benchpress","gym_bp_up_B",4.0,0,0,0,1,0,1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /supino [1-5]");
		}
	//
	}
	return 1;
}

CMD:lean(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /lean [1-3]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"GANGS","leanIDLE",4.0,0,0,0,1,0,1);
            case 2: ApplyAnimation(playerid,"MISC","Plyrlean_loop",4.0,0,0,0,1,0,1);
            case 3: ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 1, 0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /lean [1-3]");
		}
	//
	}
	return 1;
}

CMD:spray(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /spray [1-4]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"GRAFFITI", "graffiti_Chkout", 4.0,1,1,1,1,1,1);
            case 2: ApplyAnimation(playerid,"GRAFFITI","spraycan_fire",4.0,0,1,1,1,1,1);
            case 3: ApplyAnimation(playerid,"SPRAYCAN","spraycan_fire",4.0,0,1,1,1,1,1);
            case 4: ApplyAnimation(playerid,"SPRAYCAN","spraycan_full",4.0,0,1,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /sray [1-4]");
		}
	//
	}
	return 1;
}

CMD:fumar(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"GANGS","smkcig_prtl",4.0,0,1,1,1,1, 1);
//
	return 1;
}

CMD:medo(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	
	ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0);
//
    return 1;
}

CMD:pcaixa(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	
	ApplyAnimation(playerid, "CARRY", "liftup", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:dcaixa(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "CARRY", "putdwn", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:abrir(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "AIRPORT", "thrw_barl_thrw", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:lancar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:basquete(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /basquete [1-7]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"BSKTBALL","BBALL_def_loop", 4.0, 1, 0, 0, 0, 0, 1);
            case 2: ApplyAnimation(playerid,"BSKTBALL","BBALL_idleloop", 4.0, 1, 0, 0, 0, 0, 1);
            case 3: ApplyAnimation(playerid,"BSKTBALL","BBALL_pickup",4.0,0,0,0,0,0, 1);
            case 4: ApplyAnimation(playerid,"BSKTBALL","BBALL_Jump_Shot",4.0,0,0,0,0,0, 1);
            case 5: ApplyAnimation(playerid,"BSKTBALL","BBALL_Dnk",4.1,0,1,1,1,1, 1);
            case 6: ApplyAnimation(playerid,"BSKTBALL","BBALL_run",4.1,1,1,1,1,1, 1);
            case 7: ApplyAnimation(playerid,"BSKTBALL","BBALL_walk",4.1,1,1,1,1,1, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /basquete [1-7]");
		}
	//
	}
	return 1;
}

CMD:fumarnocarro(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","Smoke_in_car", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:cansado(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"FAT","IDLE_tired", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:ghand(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /ghand [1-5]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"GHANDS","gsign1LH",4.0,0,1,1,1,1,1);
            case 2: ApplyAnimation(playerid,"GHANDS","gsign2LH",4.0,0,1,1,1,1,1);
            case 3: ApplyAnimation(playerid,"GHANDS","gsign3LH",4.0,0,1,1,1,1,1);
            case 4: ApplyAnimation(playerid,"GHANDS","gsign4LH",4.0,0,1,1,1,1,1);
            case 5: ApplyAnimation(playerid,"GHANDS","gsign5LH",4.0,0,1,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /ghand [1-5]");
		}
	//
	}
	return 1;
}

CMD:chant(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"RIOT","RIOT_CHANT", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:alongar(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PLAYIDLES","stretch",4.0,0,0,0,0,0,1);
//
    return 1;
}

CMD:carsit(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"CAR","Tap_hand", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:chorar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USO: /chorar [1-2]");
	else
	{
       	
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"GRAVEYARD","mrnF_loop", 4.0, 1, 0, 0, 0, 0, 1);
            case 2: ApplyAnimation(playerid,"GRAVEYARD","mrnM_loop", 4.0, 1, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USO: /chorar [1-2]");
		}
	//
	}
	return 1;
}

CMD:taichi(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PARK","Tai_Chi_Loop", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:fucku(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0,1);
//
    return 1;
}

CMD:chat(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /chat [1-9]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
 		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,1,1,1,1,1,1);
            case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.0, 0, 1, 1, 1, -1,1);
            case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.0, 0, 1, 1, 1, -1,1);
            case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkC", 4.0, 0, 1, 1, 1, -1,1);
            case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.0, 0, 1, 1, 1, -1,1);
            case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.0, 0, 1, 1, 1, -1,1);
            case 7: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.0, 0, 1, 1, 1, -1,1);
            case 8: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.0, 0, 1, 1, 1, -1,1);
            case 9: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.0, 0, 1, 1, 1, -1,1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /chat [1-9]");
		}
	//
	}
	return 1;
}

CMD:negociar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USAGE: /USE [1-2]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
 		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 3.0, 0, 0, 0, 0, 0, 1);
            case 2: ApplyAnimation(playerid,"DEALER","DRUGS_BUY", 4.0, 0, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /negociar [1-2]");
		}
	//
	}
	return 1;
}

CMD:beber(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
 	ApplyAnimation(playerid, "GANGS", "drnkbr_prtl", 3.0,1,1,1,1,1, 1);
//
    return 1;
}

CMD:animrevistar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /animrevistar [1-2]");
	else
	{
		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
    	switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "POLICE", "plc_drgbst_01", 3.0, 0, 0, 0, 0, 0, 1);
            case 2: ApplyAnimation(playerid, "POLICE", "plc_drgbst_02", 3.0, 0, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USE: /animrevistar [1-2]");
		}
	//
	}
	return 1;
}

CMD:chuteporta(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "POLICE", "Door_Kick", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:comer1(playerid, params[])
{
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "FOOD", "EAT_Burger", 3.0, 0, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:vomitar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 3.0, 0, 0, 0, 0, 0, 1); // Vomit BAH!
//
    return 1;
}

CMD:bomba(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.0, 0, 0, 0, 0, 0, 1); // Place Bomb
//
    return 1;
}

CMD:arranhar(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid,"MISC","Scratchballs_01", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:convidar2(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid,"GANGS","Invite_No",4.1,0,1,1,1,1,1);
//
    return 1;
}

CMD:convidar1(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid,"GANGS","Invite_Yes",4.1,0,1,1,1,1,1);
//
    return 1;
}

CMD:levartapa(playerid, params[])
{
    
	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid,"SWEET","ho_ass_slapped",4.0,0,0,0,0,0,1);
//
    return 1;
}

CMD:machucado(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USO: /machucado [1-2]");
	else
	{
	    
   		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
  		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
  		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"SWEET","Sweet_injuredloop", 	4.0, 1, 0, 0, 0, 0, 1);
            case 2: ApplyAnimation(playerid,"SWAT","gnstwall_injurd", 		4.0, 1, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_GREY, "USO: /machucado [1-2]");
		}
	//
	}
	return 1;
}

CMD:cair(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USO: /cair [1-6]");
	else
	{
   		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
  		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
  		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "ped", "FLOOR_hit", 4.0, 0, 1, 1, 1, -1, 1);
		    case 2: ApplyAnimation(playerid, "ped", "FLOOR_hit_f", 4.0, 0, 1, 1, 1, -1, 1);
		    case 3: ApplyAnimation(playerid, "ped", "KO_shot_front", 4.0, 0, 1, 1, 1, -1, 1);
		    case 4: ApplyAnimation(playerid, "ped", "KO_shot_stom", 4.0, 0, 1, 1, 1, -1, 1);
            case 5: ApplyAnimation(playerid, "ped", "BIKE_fall_off", 4.0, 0, 1, 1, 1, -1, 1);
			case 6: ApplyAnimation(playerid, "FINALE", "FIN_Land_Die", 4.0, 0, 1, 1, 1, -1, 1);
            default: return SendClientMessage(playerid, COLOR_GREY, "USO: /cair [1-6]");
		}
	//
	}
	return 1;
}

CMD:relaxar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /relaxar [1-2]");
	else
	{
	    
   		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
  		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
  		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"BEACH","Lay_Bac_Loop", 4.0, 1, 0, 0, 0, 0, 1);
            case 2: ApplyAnimation(playerid,"BEACH", "SitnWait_loop_W", 4.0, 1, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /relaxar [1-2]");
		}
	//
	}
	return 1;
}

CMD:acenar(playerid, params[])
{
    
   	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
  	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
  	PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1);
//
	return 1;
}

CMD:deitar(playerid, params[])
{
    
   	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
  	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
  	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1);
//
	return 1;
}

CMD:crossarms(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /crossarms [1-5]");
	else
	{
    	
   		if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
   		if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
   		PlayerData[playerid][pAnimation] = 1;

		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid, "COP_AMBIENT", "Coplook_loop", 4.0, 0, 1, 1, 1, -1, 1);
            case 2: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE", 		4.0, 0, 1, 1, 1, -1, 1);
            case 3: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_01", 	4.0, 0, 1, 1, 1, -1, 1);
            case 4: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_02", 	4.0, 0, 1, 1, 1, -1, 1);
            case 5: ApplyAnimation(playerid, "DEALER", "DEALER_IDLE_03", 	4.0, 0, 1, 1, 1, -1, 1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /crossarms [1-5]");
		}
	//
	}
	return 1;
}

CMD:rir(playerid, params[])
{
    
   	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
   	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
   	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid, "RAPPING", "Laugh_01", 4.0, 0, 0, 0, 0, 0, 1);
//
	return 1;
}

CMD:cpr(playerid, params[])
{
    
   	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
   	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
   	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"MEDIC","CPR", 4.0, 1, 0, 0, 0, 0, 1);
//
    return 1;
}

CMD:gsign(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_GREY, "USE: /gsign [1-10]");
	else
	{
    	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
    	PlayerData[playerid][pAnimation] = 1;

		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"GHANDS","gsign1",4.0,0,1,1,1,1,1);
            case 2: ApplyAnimation(playerid,"GHANDS","gsign2",4.0,0,1,1,1,1,1);
            case 3: ApplyAnimation(playerid,"GHANDS","gsign3",4.0,0,1,1,1,1,1);
            case 4: ApplyAnimation(playerid,"GHANDS","gsign4",4.0,0,1,1,1,1,1);
            case 5: ApplyAnimation(playerid,"GHANDS","gsign5",4.0,0,1,1,1,1,1);
			case 6: ApplyAnimation(playerid,"GHANDS","gsign1LH",4.1,0,1,1,1,1);
			case 7: ApplyAnimation(playerid,"GHANDS","gsign2LH",4.1,0,1,1,1,1);
			case 8: ApplyAnimation(playerid,"GHANDS","gsign3LH",4.1,0,1,1,1,1);
			case 9: ApplyAnimation(playerid,"GHANDS","gsign4LH",4.1,0,1,1,1,1);
			case 10: ApplyAnimation(playerid,"GHANDS","gsign5LH",4.1,0,1,1,1,1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /gsign [1-10]");
		}
	//
	}
	return 1;
}

CMD:mirar(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /mirar [1-7]");
	else
	{
    	if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    	if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
    	PlayerData[playerid][pAnimation] = 1;
    	switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"PED","gang_gunstand",		4.0, 1, 1, 1, 1, 1, 1);
            case 2: ApplyAnimation(playerid, "SHOP", "SHP_Gun_Aim", 	4.0, 0, 1, 1, 1, -1, 1);
            case 3: ApplyAnimation(playerid,"PED","Driveby_L",			4.0, 0, 1, 1, 1, -1, 1);
            case 4: ApplyAnimation(playerid,"PED","Driveby_R",			4.0, 0, 1, 1, 1, -1, 1);
            case 5: ApplyAnimation(playerid,"ped", "ARRESTgun", 		4.0, 0, 1, 1, 1, -1, 1);
            case 6: ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1);
            case 7: ApplyAnimation(playerid, "PED", "GUN_STAND", 		4.0, 1, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /aim [1-7]");
		}
	//
	}
	return 1;
}

CMD:bravo(playerid, params[])
{
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"RIOT","RIOT_ANGRY",4.0,0,0,0,0,0, 1);
//
	return 1;
}

CMD:bastao(playerid, params[])
{
	new aimid;
	if(sscanf(params, "i", aimid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /bastao [1-2]");
	else
	{
	    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
		PlayerData[playerid][pAnimation] = 1;
		switch(aimid)
		{
		    case 1: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
            case 2: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
            default: SendClientMessage(playerid, COLOR_LIGHTRED, "USE: /bastao [1-2]");
		}
	//
	}
	return 1;
}

CMD:chairsit(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
	PlayerData[playerid][pAnimation] = 1;
	ApplyAnimation(playerid,"PED","SEAT_idle", 4.0, 1, 0, 0, 0, 0,1);
//
	return 1;
}

CMD:sentar(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
    new anim;
 	if(sscanf(params, "i", anim)) return SendClientMessage(playerid, 0xfce80cFF, "/sentar [1-17]");
 	if(anim < 1 || anim > 17) return SendClientMessage(playerid, 0xfce80cFF, "/sentar [1-17]");
	switch(anim)
	{
	    case 1: ApplyAnimation(playerid,"PED","SEAT_down",					4.1, 0, 1, 1, 1, 0, 1);
   		case 2: ApplyAnimation(playerid,"MISC","seat_lr",					2.0, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid,"MISC","seat_talk_01",				2.0, 1, 0, 0, 0, 0, 1);
  		case 4: ApplyAnimation(playerid,"MISC","seat_talk_02",				2.0, 1, 0, 0, 0, 0, 1);
  		case 5: ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 			4.0, 1, 0, 0, 0, 0, 1);
  		case 6: ApplyAnimation(playerid,"BEACH", "ParkSit_W_loop", 			4.0, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid,"INT_OFFICE", "FF_Dam_Fwd", 		4.1, 1, 1, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_2Idle_180", 	4.1, 0, 1, 0, 0, 0, 1);
		case 9: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 1, 0, 0, 0, 1);
		case 10: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Crash", 	4.1, 1, 1, 0, 0, 0, 1);
		case 11: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Drink", 	4.1, 1, 1, 0, 0, 0, 1);
		case 12: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Idle_Loop", 4.1, 1, 1, 0, 0, 0, 1);
		case 13: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_In", 		4.1, 0, 1, 0, 0, 0, 1);
		case 14: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Read", 		4.1, 1, 1, 0, 0, 0, 1);
		case 15: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Type_Loop", 4.1, 1, 1, 0, 0, 0, 1);
		case 16: ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Watch", 	4.1, 1, 1, 0, 0, 0, 1);
		case 17: ApplyAnimation(playerid,"PED", "SEAT_idle", 				4.0, 1, 0, 0, 0, 0, 1);
	}
//
    return 1;
}

CMD:baseball(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
    new anim;
 	if(sscanf(params, "i", anim)) return SendClientMessage(playerid, 0xfce80cFF, "/baseball [1-13]");
	PlayerData[playerid][pAnimation] = 1;
	if( 0 < anim < 14)
	{
		switch(anim)
		{
		    case 1: ApplyAnimation(playerid, "BASEBALL", "Bat_1", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 2: ApplyAnimation(playerid, "BASEBALL", "Bat_2", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 3: ApplyAnimation(playerid, "BASEBALL", "Bat_3", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 4: ApplyAnimation(playerid, "BASEBALL", "Bat_4", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 5: ApplyAnimation(playerid, "BASEBALL", "Bat_block", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 6: ApplyAnimation(playerid, "BASEBALL", "Bat_Hit_1", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 7: ApplyAnimation(playerid, "BASEBALL", "Bat_Hit_2", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 8: ApplyAnimation(playerid, "BASEBALL", "Bat_Hit_3", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 9: ApplyAnimation(playerid, "BASEBALL", "Bat_IDLE", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 10: ApplyAnimation(playerid, "BASEBALL", "Bat_M", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 11: ApplyAnimation(playerid, "BASEBALL", "BAT_PART", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 12: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_01", 4.0, 1, 0, 0, 0, 0, 1);
            case 13: ApplyAnimation(playerid,"CRACK","Bbalbat_Idle_02", 4.0, 1, 0, 0, 0, 0, 1);
		}
	//
	}
    return 1;
}

CMD:bar(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver na água!");
    PlayerData[playerid][pAnimation] = 1;
	new anim;
 	if(sscanf(params, "i", anim)) return SendClientMessage(playerid, 0xfce80cFF, "/bar [1-12]");
	if( 0 < anim < 13)
	{
		switch(anim)
		{
		    case 1: ApplyAnimation(playerid, "BAR", "Barcustom_get", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 2: ApplyAnimation(playerid, "BAR", "Barcustom_loop", 	4.1, 1, 1, 1, 1, 0, 1);
		    case 3: ApplyAnimation(playerid, "BAR", "Barcustom_order", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 4: ApplyAnimation(playerid, "BAR", "BARman_idle", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 5: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 6: ApplyAnimation(playerid, "BAR", "Barserve_give", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 7: ApplyAnimation(playerid, "BAR", "Barserve_glass", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 8: ApplyAnimation(playerid, "BAR", "Barserve_in", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 9: ApplyAnimation(playerid, "BAR", "Barserve_loop", 	4.1, 1, 1, 1, 1, 0, 1);
		    case 10: ApplyAnimation(playerid, "BAR", "Barserve_order", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 11: ApplyAnimation(playerid, "BAR", "dnk_stndF_loop", 	4.1, 1, 1, 1, 1, 0, 1);
		    case 12: ApplyAnimation(playerid, "BAR", "dnk_stndM_loop", 	4.1, 1, 1, 1, 1, 0, 1);
		}
	//
	}
    return 1;
}

CMD:bebado(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver naágua!");
    PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid,"PED","WALK_DRUNK",4.1,1,1,1,1,1, 1);
	return 1;
}

CMD:tapabunda(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver naágua!");
    PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid,"SWEET","sweet_ass_slap",4.0,0,0,0,0,0, 1);
	return 1;
}

CMD:urinar(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver naágua!");
    PlayerData[playerid][pAnimation] = 1;
    SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:handsup(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver naágua!");
    PlayerData[playerid][pAnimation] = 1;
    ApplyAnimation(playerid, "ROB_BANK", "SHP_HandsUp_Scr", 4.0, 0, 1, 1, 1, 0, 1);
    PlayerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:crack(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver naágua!");

    ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 0, 1, 1, 1, 0, 1);
    PlayerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:camera(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");

    new anim;
 	if(sscanf(params, "i", anim)) SendClientMessage(playerid, 0xfce80cFF, "/camera [1-14]");
	if(anim > 0 && anim < 15)
	{
		switch(anim)
		{
		    case 1: ApplyAnimation(playerid, "camera", "camcrch_cmon", 			4.1, 0, 1, 1, 1, 0, 1);
		    case 2: ApplyAnimation(playerid, "camera", "camcrch_idleloop", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 3: ApplyAnimation(playerid, "camera", "camcrch_stay", 			4.1, 0, 1, 1, 1, 0, 1);
		    case 4: ApplyAnimation(playerid, "camera", "camcrch_to_camstnd", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 5: ApplyAnimation(playerid, "camera", "camstnd_cmon", 			4.1, 0, 1, 1, 1, 0, 1);
		    case 6: ApplyAnimation(playerid, "camera", "camstnd_idleloop", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 7: ApplyAnimation(playerid, "camera", "camstnd_lkabt", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 8: ApplyAnimation(playerid, "camera", "camstnd_to_camcrch", 	4.1, 0, 1, 1, 1, 0, 1);
		    case 9: ApplyAnimation(playerid, "camera", "piccrch_in", 			4.1, 0, 1, 1, 1, 0, 1);
		    case 10: ApplyAnimation(playerid, "camera", "piccrch_out", 			4.1, 0, 1, 1, 1, 0, 1);
		    case 11: ApplyAnimation(playerid, "camera", "piccrch_take", 		4.1, 0, 1, 1, 1, 0, 1);
		    case 12: ApplyAnimation(playerid, "camera", "picstnd_in", 			4.1, 0, 1, 1, 1, 0, 1);
		    case 13: ApplyAnimation(playerid, "camera", "picstnd_out", 			4.1, 0, 1, 1, 1, 0, 1);
		    case 14: ApplyAnimation(playerid, "camera", "picstnd_take", 		4.1, 0, 1, 1, 1, 0, 1);
		}
	//
	}
    return 1;
}

CMD:stopanim(playerid)
{
    if (AnimationCheck(playerid))
        return SendClientMessage(playerid, COLOR_GRAD1, "A animação não pode ser interrompida neste momento.");

	if(PlayerData[playerid][pAnimation]) {
		ApplyAnimationEx(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		PlayerData[playerid][pAnimation] = 0;
	}
	return 1;
}

CMD:pararanim(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
	if(IsPlayerInAnyVehicle(playerid)) ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
    PlayerData[playerid][pAnimation] = 1;
    ClearAnimations(playerid, 1);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	return 1;
}

CMD:esquerda(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver naágua!");

    ApplyAnimation(playerid, "MISC","hiker_pose_l", 4.0, 0, 1, 1, 1, 0, 1);
    PlayerData[playerid][pAnimation] = 1;
	return 1;
}

CMD:direita(playerid, params[])
{
    
    if(deathmode[playerid]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você está morto!");
    if(IsPlayerInWater(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode utilizar este comando enquanto estiver naágua!");  

    ApplyAnimation(playerid, "MISC","hiker_pose", 4.0, 0, 1, 1, 1, 0, 1);
    PlayerData[playerid][pAnimation] = 1;
	return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1)
	    return 0;

	new
	    string[512];

	switch (BizInfo[bizid][bType])
	{
	    case 3:
	    {
			format(string, sizeof(string), "galão de gasolina - %s\nJBL - %s\nTaco de baseball - %s\nFlores - %s\nCane - %s\nCamera - %s\nMascara - %s\nDrink - %s\nCigarros - %s\nCelular - %s\nRadio Comunicador.",
				FormatNumber(BizInfo[bizid][bItems][0]),
				FormatNumber(BizInfo[bizid][bItems][1]),
				FormatNumber(BizInfo[bizid][bItems][2]),
				FormatNumber(BizInfo[bizid][bItems][3]),
				FormatNumber(BizInfo[bizid][bItems][4]),
				FormatNumber(BizInfo[bizid][bItems][5]),
				FormatNumber(BizInfo[bizid][bItems][6]),
				FormatNumber(BizInfo[bizid][bItems][7]),
				FormatNumber(BizInfo[bizid][bItems][8]),
				FormatNumber(BizInfo[bizid][bItems][9]),
				FormatNumber(BizInfo[bizid][bItems][11])

			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_LIST, BizInfo[bizid][bInfo], string, "Comprar", "Cancelar");
		}
	}
	return 1;
}

CMD:meusitens(playerid) {
	ShowPlayerDrugs(playerid, playerid);
	return 1;
}


stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);
	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);
	BoomboxData[playerid][boomboxPlaced] = true;
    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, 0, 0);

	return 1;
}

stock Boombox_Nearest(playerid, Float:dist = 30.0)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) == 0 && IsPlayerInRangeOfPoint(playerid, dist, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		foreach (new i : Player) if (Boombox_Nearest(i) == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxOn] = false;

	}
	return 1;
}

CMD:jbl(playerid,params[])
{
	new
	    name[16], giveplayerid;

	if (sscanf(params, "s[16]U(65535)", name, giveplayerid))
 	{
		SendSyntaxMessage(playerid, "/jbl [colocar/pegar/mexer/ajustar]");
		return 1;
	}

	if (!strcmp(name, "colocar", true))
	{
	    if (!PlayerData[playerid][pBoombox])
	        return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não tem uma JBL.");

	    if (BoomboxData[playerid][boomboxPlaced])
	        return SendClientMessage(playerid, COLOR_GRAD3, "Você colocou a JBL.");

		if (IsPlayerInAnyVehicle(playerid) || GetPlayerVirtualWorld(playerid) != 0 || GetPlayerInterior(playerid) != 0 || Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não pode colocar uma JBL próximo ao outra JBL.");

		Boombox_Place(playerid);

		SendClientMessage(playerid, COLOR_GREEN, "[SERVER] use /setestacao para colocar música");
		SendClientMessage(playerid, COLOR_GREEN, "[SERVER] use /jbl pegar para remover-la do chão.");
	}
	else if (!strcmp(name, "pegar", true))
	{
		if(Boombox_Nearest(playerid, 5.0) == playerid)
		{
            Boombox_Destroy(playerid);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não possui nenhuma JBL Próxima.");
		}
	}
	/*else if (!strcmp(name, "give", true))
	{
	    new userid = INVALID_PLAYER_ID;

		if (!PlayerData[playerid][pBoombox])
	   		return SendClientMessage(playerid, COLOR_LIGHTRED, "You do not have Boombox");

		if (sscanf(params, "s[16]u", name, userid))
	 	{
			SendSyntaxMessage(playerid, "/jbl give [ID]");
			return 1;
		}

		if (userid == INVALID_PLAYER_ID && GetPlayerMaskID(userid) == INVALID_PLAYER_ID)
	         	return SendClientMessage(playerid, COLOR_GRAD1, "The specified player is not connected to the server.");

		if(userid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "Can't Give yourself!");



	}*/
	else if (!strcmp(name, "mexer", true))
	{
		//new giveplayerid = INVALID_PLAYER_ID;

		if (sscanf(params, "{s[16]}u", giveplayerid))
	 	{
			SendSyntaxMessage(playerid, "/jbl mexer [ID]");
			return 1;
		}

		if(giveplayerid == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "{s[16]}s[24]", maskid);
			if((giveplayerid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: ID invalido do jogador.");
			}
		}

		if (!IsPlayerNearPlayer(playerid, giveplayerid, 5.0))
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador não pode ser encontrado perto de Você.");

		if (giveplayerid == playerid)
			return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não pode dar uma JBL a Você mesmo.");

		if(grantboombox[giveplayerid]==playerid) {
		    grantboombox[giveplayerid]=INVALID_PLAYER_ID;
			SendClientMessageEx(playerid, COLOR_WHITE, "não é permitida a mudança da %s estação de rádio", ReturnName(giveplayerid, 0));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s não é permitida a mudança de estações de rádio.", ReturnName(playerid, 0));
		}
		else
		{
			grantboombox[giveplayerid]=playerid;
			SendClientMessageEx(playerid, COLOR_WHITE, "Permite que as %s mudem a sua estação de rádio", ReturnName(giveplayerid, 0));
			SendClientMessageEx(giveplayerid, COLOR_WHITE, "%s permite-lhe mudar a sua estação de rádio", ReturnName(playerid, 0));
			SendClientMessage(giveplayerid, COLOR_GREEN, "instruções: /setestacao para setar uma estação.");
		}
	}
	else if (!strcmp(name, "ajustar", true))
	{
		if(Boombox_Nearest(playerid, 5.0) == playerid)
		{
			SetPVarInt(playerid, "BoomboxAdjust", 1);
			EditDynamicObject(playerid, BoomboxData[playerid][boomboxObject]);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui uma JBL.");
		}
	}

	return 1;
}

CMD:galaogasolina(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Deve estar fora do veículo.");

	new vehicleid = -1;
	if((vehicleid = Vehicle_Nearest(playerid)) != -1) {
		if(PlayerData[playerid][pGasCan]) {
	        if (!GetLockStatus(vehicleid)) {
				new Float:maxfuel = GetVehicleDataFuel(GetVehicleModel(vehicleid));
				if(CoreVehicles[vehicleid][vehFuel] < maxfuel) {

				    CoreVehicles[vehicleid][vehFuel] += 5.0;
				    if(CoreVehicles[vehicleid][vehFuel] > maxfuel) {
				        CoreVehicles[vehicleid][vehFuel] = maxfuel;
				    }
				} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não há mais combustível disponível.");
		    } else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: veículo está trancado.");
		} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não tem um galão de gasolina.");
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: não possui veículos por perto.");
	return 1;
}


CMD:cigarro(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Deve estar fora do veículo.");

	if(PlayerData[playerid][pCigarettes]) {
		if(GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_SMOKE_CIGGY) {

			SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s retira um Maço de cigarro do bolso e coloca na boca.", ReturnName(playerid, 0));
			PlayerData[playerid][pCigarettes]--;

		} else SendClientMessage(playerid, COLOR_LIGHTRED, "não tem isqueiro.");
	} else SendClientMessage(playerid, COLOR_LIGHTRED, "não se fuma.");
	return 1;
}

CMD:cerveja(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Deve estar fora do veículo.");
    if(!PlayerData[playerid][pDrink]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não possui uma cerveja.");

	new
	    name[16];

	if (sscanf(params, "s[16]", name))
 	{
		SendSyntaxMessage(playerid, "/cerveja [brahma/budweiser/skol]");
		return 1;
	}

	if (!strcmp(name, "brahma", true))
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
		PlayerData[playerid][pDrink]--;
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "*%s abre sua brahma duplo malte.", ReturnName(playerid, 0));
	}
	else if (!strcmp(name, "budweiser", true))
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
		PlayerData[playerid][pDrink]--;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s abre sua budweiser long neck.", ReturnName(playerid, 0));
	}
	else if (!strcmp(name, "skol", true))
	{
		SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
		PlayerData[playerid][pDrink]--;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s abre sua skol.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:mascara(playerid,params[])
{
    if(PlayerData[playerid][pOOCMask] || PlayerData[playerid][pAdmin])
    {
        if(!BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_MASK))
        {
            format(PlayerData[playerid][pMask_Name], MAX_PLAYER_NAME, "%d_%d", randomEx(100000,999999), randomEx(10,99));

			BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_MASK);
	      	foreach (new i : Player)
	     	{
				if(i != playerid)
		      	{
					RefreshMaskStatus(playerid,i);
				}
	     	}
	     	SQL_LogMask(playerid, "masked", PlayerData[playerid][pMask_Name]);//
	       	SendClientMessage(playerid,COLOR_LIGHTRED,"Colocou a mascara.");
            /*new bool:found = false;

			while(!found) {

	            foreach (new i : Player) {
	                found = true;
                    if(playerid != i && BitFlag_Get(g_PlayerFlags[i], IS_PLAYER_MASK) && !strcmp(PlayerData[i][pMask_Name], PlayerData[playerid][pMask_Name], true))
					{
					    found = false;
					    continue;
					}
				}

				format(PlayerData[playerid][pMask_Name], MAX_PLAYER_NAME, "%d_%d", randomEx(100000,999999), randomEx(10,99));
			}

            if(found) {
	            BitFlag_On(g_PlayerFlags[playerid], IS_PLAYER_MASK);
	            foreach (new i : Player)
	            {
		        	if(i != playerid)
		        	{
						RefreshMaskStatus(playerid,i);
					}
	            }
	            SQL_LogMask(playerid, "masked", PlayerData[playerid][pMask_Name]);
	            SendClientMessage(playerid,COLOR_LIGHTRED,"You have entered OOC Mask");
            }*/
            return 1;
        }
        else
        {

            BitFlag_Off(g_PlayerFlags[playerid], IS_PLAYER_MASK);
            foreach (new i : Player)
            {
	        	if(i != playerid)
	        	{
					RefreshMaskStatus(playerid,i);
				}
            }
            format(PlayerData[playerid][pMask_Name], MAX_PLAYER_NAME, "");
            SendClientMessage(playerid,COLOR_LIGHTRED,"Retira a mascara.");
            return 1;
        }

    }
    else
    {
        SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO: Você não possui uma mascara.");
        return 1;
    }
}

CMD:retirarmascara(playerid,params[])
{
	new userid = INVALID_PLAYER_ID;

 	if(PlayerData[playerid][pAdmin] < 3)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado a usar este comando.");

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/retirarmascara [PlayerID/PartOfName]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (userid == playerid)
		return SendClientMessage(playerid, COLOR_GRAD1, "não pode utiliza-lo para si próprio.");

 	if(BitFlag_Get(g_PlayerFlags[userid], IS_PLAYER_MASK))
	{

   		BitFlag_Off(g_PlayerFlags[userid], IS_PLAYER_MASK);
    	foreach (new i : Player)
       	{
	     	if(i != userid)
	    	{
				RefreshMaskStatus(userid,i);
			}
     	}
       	SendClientMessage(userid,COLOR_LIGHTRED,"Um administrador removeu a mascara.");
 	}
 	return 1;
}

forward RefreshMaskStatus(playerid,togglefor);
public RefreshMaskStatus(playerid,togglefor)
{

	if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_MASK) || isAdminDuty(playerid)) ShowPlayerNameTagForPlayer(togglefor,playerid,false);
	else ShowPlayerNameTagForPlayer(togglefor,playerid,true);

	if(isAdminDuty(togglefor)) ShowPlayerNameTagForPlayer(togglefor,playerid,true);

}

forward GetPlayerMaskID(maskid[]);
public GetPlayerMaskID(maskid[]) {

	if(strlen(maskid)) {
	   	foreach (new i : Player) {
			if(BitFlag_Get(g_PlayerFlags[i], IS_PLAYER_MASK) && !strcmp(PlayerData[i][pMask_Name], maskid, true)) return i;
		}
	}
	return INVALID_PLAYER_ID;
}

CMD:nomeooc(playerid, params[]) {
    if(PlayerData[playerid][pAdmin] >= 4) {
        new
            userID,
            playerNameString[MAX_PLAYER_NAME],
			clean_admin[MAX_PLAYER_NAME];

        if(sscanf(params, "us[24]", userID, playerNameString)) {
            return SendSyntaxMessage(playerid, "/nomeooc [playerid] [nome ooc]");
        }
        else {
            if(!IsPlayerConnected(userID))
				return SendClientMessage(playerid, COLOR_GREY, "O ID do jogador especificado ou não está ligado ou não autenticou.");

            if(PlayerData[userID][pAdmin]) {
                if(PlayerData[userID][pAdmin] > PlayerData[playerid][pAdmin]) {
                    return SendClientMessage(playerid, COLOR_GREY, "não se pode renomear um administrador de nível superior.");
                }
                else {
                    new
                        messageString[128];

                    format(messageString, sizeof(messageString), "Mudou o nome do administrador %s para %s", ReturnName(userID, 0), playerNameString);
                    SendClientMessage(playerid, COLOR_WHITE, messageString);

                    format(messageString, sizeof(messageString), "O administrador %s alterou o seu nome para %s", ReturnName(playerid, 0), playerNameString);
                    SendClientMessage(userID, COLOR_WHITE, messageString);

					mysql_escape_string(playerNameString,clean_admin);
				    format(PlayerData[userID][pAdminName], MAX_PLAYER_NAME, clean_admin);
					format(szQuery, sizeof(szQuery), "UPDATE `characters` SET `AdminName` = '%s' WHERE `ID` = %d", clean_admin, PlayerData[userID][pID]);
					mysql_query(dbCon, szQuery);

                    return 1;
                }
            }
            else {
                return SendClientMessage(playerid, COLOR_GREY, "não se pode mudar o nome de uma pessoa que não é administrador.");
            }
        }
	}
	return 1;
}

CMD:ads(playerid) {

	if (Bizz_Nearest(playerid) != -1)
	{
		mysql_query(dbCon, "SELECT * FROM `advertisement` WHERE `time` > UNIX_TIMESTAMP() ORDER BY `a_id` ASC");

		new rows, str[256];

		cache_get_row_count(rows);
		if(rows) {

		    new adText[128], time, id, menu[10];

		    format(str, sizeof(str), "#\tAnuncie\taqui\n");

		    for(new i=0;i!=rows;i++)
		    {
		        cache_get_value_name(i, "text", adText);
				cache_get_value_name_int(i, "time", time);
				cache_get_value_name_int(i, "a_id", id);

				if (strlen(adText) > 28) format(str, sizeof(str), "%s%d\t%.28s...\t~%ds\n", str, i+1, adText, time - gettime());
				else format(str, sizeof(str), "%s%d\t%s\t~%ds\n", str, i+1, adText, time - gettime());

				format(menu, 10, "menu%d", i);
				SetPVarInt(playerid, menu, id);
            }

			Dialog_Show(playerid, AdvertiseDialog, DIALOG_STYLE_TABLIST_HEADERS, "Ver anúncios", str, "Okay", "");
		}
		else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: não possui anuncios.");

	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Deve estar na área de publicidade para verificar a lista de anúncios.");

	return 1;
}

CMD:ad(playerid, params[]) {

    if (!isnull(params)) {
        new id = -1;
		if ((id = Bizz_Nearest(playerid)) != -1)
		{
			if (BizInfo[id][bType] == 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Deve estar na área de publicidade para anunciar.");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora de estoque", 5000, 1);
				return 1;
			}
			if(PlayerData[playerid][pPnumber]) {
				if(!adTick[playerid]) {

                	if(strlen(params) <= 128) {
						new string[256];
						new price, players;

					 	foreach (new i : Player) if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED)) players++;

						if(PlayerData[playerid][pADPoint] > 2) price = 40;
						else if(PlayerData[playerid][pADPoint] > 4) price = 80;
					  	else if(PlayerData[playerid][pADPoint] > 6) price = 180;
					    else price = 220;

						price += players * 40;

                        if(PlayerData[playerid][pCash] >= price) {
                            if(Advert_Free() != -1 && (!CountPlayerAdvert(playerid) || PlayerData[playerid][pDonateRank])) {
                                SetPVarString(playerid,"AdvertPost", params);
								format(string, sizeof(string), "Ads: %s\n\nCustos de publicidade: %s", params, FormatNumber(price));
								Dialog_Show(playerid, AdvertPost, DIALOG_STYLE_MSGBOX, "Publicidade", string, "Postar", "Cancelar");
							}
							else
							{
							    SendClientMessage(playerid, COLOR_GRAD1, "A fila está cheia ou o seu anúncio está na fila, por favor tente novamente mais tarde");
							}
						}
						else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui dinheiro o suficiente.");
					}
					else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: O texto excedeu o limite de 128 caracteres.");
				}
				else {
					return SendClientMessageEx(playerid, COLOR_GRAD1, "Deve esperar %d segundos para a publicação do anúncio.", adTick[playerid]);
				}
			}
			else {
				return SendClientMessage(playerid, COLOR_GREY, "ERRO: não tem um número de telefone, pelo que não poderia enviar o anúncio.");
			}
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Deve estar numa área para que o seu anúncio possa ser publicado.");

	}
	else SendSyntaxMessage(playerid, "/ad [texto]");

	return 1;
}

CMD:cad(playerid, params[]) {

    if (!isnull(params)) {
		new id = -1;
		if ((id = Bizz_Nearest(playerid)) != -1)
		{
			if (BizInfo[id][bType] != 11) // Advertisement
			{
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Deve estar na área de publicidade para anunciar.");
			}
			if(BizInfo[id][bProducts] == 0)
			{
				GameTextForPlayer(playerid, "~r~Fora do estoque", 5000, 1);
				return 1;
			}

			if(PlayerData[playerid][pPnumber]) {
			    if(!adTick[playerid]) {

					if(strlen(params) <= 128) {

						new string[256];
						new price, players;

					 	foreach (new i : Player) if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_LOGGED)) players++;

						price = 220 + players * 40;

                        if(PlayerData[playerid][pCash] >= price) {

	                        if(Advert_Free() != -1 && (!CountPlayerAdvert(playerid) || PlayerData[playerid][pDonateRank])) {

	                            if(Advert_Free() != -1 && (!CountPlayerAdvert(playerid) || PlayerData[playerid][pDonateRank])) {
	                                SetPVarString(playerid,"AdvertPost", params);
									format(string, sizeof(string), "Ads: %s\n\nCustos da publicidade: %s", params, FormatNumber(price));
									Dialog_Show(playerid, CompanyAdvertPost, DIALOG_STYLE_MSGBOX, "Postar anúncio", string, "Postar", "Cancelar");
								}
								else
								{
								    SendClientMessage(playerid, COLOR_GRAD1, "A fila está cheia ou o seu anúncio está na fila, por favor tente novamente mais tarde.");
								}
							}
							else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui dinheiro suficiente.");
						} else SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não possui dinheiro suficiente.");
					} else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você excedeu o limite de 128 caracteres.");
			    } else SendClientMessageEx(playerid, COLOR_GRAD1, "INFO: Você deve esperar %d segundos para seu anúncio ser publicado.", adTick[playerid]);
			} else SendClientMessage(playerid, COLOR_GREY, "ERRO: não tem um número de telefone, pelo que não poderia enviar o anúncio.");
		} else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Deve estar numa área para que o seu anúncio possa ser publicado.");
	} else SendSyntaxMessage(playerid, "/cad [texto]");
	return 1;
}

CMD:prefixo(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "ERRO: Você deve estar de serviço.");

    new vehicleid = GetPlayerVehicleID(playerid), string[32];

	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está em um veículo.");
	if(!IsACopCar(vehicleid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está no carro de polícia.");

	if(CoreVehicles[vehicleid][vehSign])
	{
 		Delete3DTextLabel(CoreVehicles[vehicleid][vehSignText]);
	    CoreVehicles[vehicleid][vehSign] = 0;
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Prefixo deletado.");
	    return 1;
	}

	if(sscanf(params, "s[32]", string)) return SendSyntaxMessage(playerid, "/prefixo [texto]");

	CoreVehicles[vehicleid][vehSignText] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 50.0, 0, 1);
	Attach3DTextLabelToVehicle(CoreVehicles[vehicleid][vehSignText], vehicleid, -0.7, -1.9, -0.3);
		//Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -2.8, 0.0);
	CoreVehicles[vehicleid][vehSign] = 1;

	return 1;
}

CMD:cone(playerid, params[])
{
    new slot;
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "ERRO: Você deve ser um policial.");
	if(sscanf(params,"d",slot))
	{
		SendSyntaxMessage(playerid, "/cone [slot(1-10)]");
		return 1;
	}
	if (!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar de serviço.");
	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Slot invalido.");
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	slot--;
	if(RoadBlocks[playerid][slot] != INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Slot do cone usado.");
	RoadBlocks[playerid][slot] = CreateDynamicObject(1238, x, y, z, 0.0, 0.0, a+180);
	SetPlayerPos(playerid, x, y+2, z);
	EditDynamicObject(playerid, RoadBlocks[playerid][slot]);
	SetPVarInt(playerid, "EditingRB", 1);
	SendClientMessage(playerid,COLOR_LIGHTRED,"{9C4C42}[!]{FFFFFF} Cones de transito.");
	return 1;
}

CMD:rcone(playerid, params[])
{
    new slot;
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "ERRO: Você deve ser um policial.");
	if(sscanf(params,"d",slot)) return SendSyntaxMessage(playerid, "/rcone [slot(1-10)]");
	if (!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar de serviço.");
	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Slot invalido.");
    slot--;
	if(RoadBlocks[playerid][slot] == INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Slot do cone usado.");
	SendClientMessageEx(playerid, COLOR_LIGHTRED, "{9C4C42}[!]{FFFFFF} O cone de transito %s foi cancelado", slot);
	DestroyDynamicObject(RoadBlocks[playerid][slot]);
	RoadBlocks[playerid][slot] = INVALID_OBJECT_ID;
	return 1;
}

CMD:rb(playerid, params[])
{
	new slot, model;
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "ERRO: Você deve ser um policial.");
	if(sscanf(params,"dd",slot,model))
	{
		SendSyntaxMessage(playerid, "/rb [slot(1-10)] [model-id]");
		SendClientMessage(playerid, COLOR_GRAD2, "|_______________Tipos de barreira_______________|");
		SendClientMessage(playerid, COLOR_GRAD3, "973,978,979,1422,1423,1424,1425,1427,1434,1459,19834");
		return 1;
	}
	if (!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar de serviço.");

	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Slot invalido.");
	if(model != 973 && model != 978 && model != 979 && model != 1422 && model != 1423 && model != 1424 && model != 1425 && model != 1427 && model != 1434 && model != 1459 && model != 19834) return SendClientMessage(playerid, COLOR_GRAD1, "Invalid model ID.");
    slot--;
	new Float:x, Float:y, Float:z, Float:a;
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);
	if(RoadBlocks[playerid][slot] != INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Slot usado.");
	SendClientMessageEx(playerid, COLOR_WHITE, "Obstaculos #%d aplicados com sucesso. Lembre-se de o eliminar.", slot);
	RoadBlocks[playerid][slot] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, a+180);
	SetPlayerPos(playerid, x, y+2, z);
	EditDynamicObject(playerid, RoadBlocks[playerid][slot]);
	SetPVarInt(playerid, "EditingRB", 1);
	SendClientMessage(playerid, COLOR_WHITE, "Pode editar a localização das osbtruções.");
	return 1;
}

CMD:rrb(playerid, params[])
{
	new slot;
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_GRAD2, "ERRO: Você deve ser um policial.");
	if(sscanf(params,"d",slot)) return SendSyntaxMessage(playerid, "/rrb [slot(1-10)]");
	if (!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve estar de serviço.");
	if(slot > 10 || slot < 1) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Slot invalido.");
    slot--;
	if(RoadBlocks[playerid][slot] == INVALID_OBJECT_ID) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Slot usado.");
	SendClientMessageEx(playerid, COLOR_WHITE, "As osbtruções #%d foram eliminadas com sucesso.", slot);
	DestroyDynamicObject(RoadBlocks[playerid][slot]);
	RoadBlocks[playerid][slot] = INVALID_OBJECT_ID;
	return 1;
}

CMD:ajail(playerid, params[])
{
	new pid, time, reason[128];
	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é um administrador.");
	if(sscanf(params,"uds[128]",pid, time, reason)) return SendSyntaxMessage(playerid, "/ajail [playerid] [tempo em minutos] [motivo]");

	if(pid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{ds[128]}", maskid);
		if((pid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	if(time <= 0) return SendClientMessage(playerid, COLOR_GRAD1, "O tempo deve ser maior que  0!");


	format(largeQuery, sizeof(largeQuery), "INSERT INTO `logs_jail` (`charName`, `JailedBy`, `Minutes`, `Reason`, `IP`, `character_id`, `user_id`) VALUES ('%s', '%s', '%d', '%s', '%s', %d, %d)", ReturnName(pid), ReturnName(playerid), time, reason, ReturnIP(pid), PlayerData[pid][pID], AccountData[pid][aUserid]);
	mysql_query(dbCon, largeQuery);

	format(szString, sizeof(szString), "AdmCmd: O jogador %s foi para o ajail pelo administrador %s, tempo %d minutos, razão: %s.", ReturnName(playerid), ReturnName(pid), time, reason);
	SendClientMessageToAll(COLOR_LIGHTRED, szString);

	Log_Write("logs/admin_action.txt", "[%s] [/ajail] %s tem prisão administrativa %s por %d minutos, motivo %s.", ReturnDate(), ReturnName(playerid), ReturnName(pid), time, reason);

	format(szString, sizeof(szString), "O jogador %s foi enviado ao ajail por %d Minutos, motivo %s.", ReturnName(pid), time, reason);
    SQL_LogAdmin_Action(playerid, "IG", szString);

	PlayerData[pid][pJailed] = 1;
	PlayerData[pid][pJailTime] = time*60;
	SendClientMessage(pid, COLOR_YELLOW, "está preso em uma prisão.");
	SetPlayerPosEx(pid, 1393.1328,-14.6677,1001.1564);
	SetSpawnInfo(pid, NO_TEAM, PlayerData[pid][pModel], 1393.1328,-14.6677,1001.1564, 1.0, -1, -1, -1, -1, -1, -1);

	return 1;
}

CMD:soltar(playerid, params[])
{
	new pid;
	if (PlayerData[playerid][pAdmin] < 1) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é administrador");
	if(sscanf(params,"u",pid)) return SendSyntaxMessage(playerid, "/soltar [playerid]");

	if(pid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((pid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	PlayerData[pid][pJailed] = 0;
	PlayerData[pid][pJailTime] = 0;
    PlayerTextDrawHide(pid, jail_timeleft[pid]);
	SendClientMessage(pid, COLOR_YELLOW, "Foi libertado da prisão.!");

	format(szString, sizeof(szString), "saída da prisão %s", ReturnName(pid));
    SQL_LogAdmin_Action(playerid, "IG", szString);

	SendAdminAlert(COLOR_LIGHTRED, "AdmCmd: %s foi libertado da cadeia/prisão pELO admin %s.", ReturnName(pid), ReturnName(playerid, 0));
	SetPlayerPosEx(pid, 1538.1240,-1673.7794,13.5469);
	SetSpawnInfo(pid, NO_TEAM, PlayerData[pid][pModel], 1538.1240,-1673.7794,13.5469, 1.0, -1, -1, -1, -1, -1, -1);
	return 1;
}

// /taxi [accept / duty / fare / start / stop]
CMD:taxi(playerid, params[])
{
	new option[11], secoption, vehicle = GetPlayerVehicleID(playerid), msg[128];
	if(sscanf(params,"s[11]D(-1)", option, secoption))
	{
		SendSyntaxMessage(playerid, "/taxi [opção]");
		SendClientMessage(playerid, COLOR_GREY, "opção: | trabalho | tarifa | checar | aceitar | iniciar | parar");
		return 1;
	}
	if(!strcmp(option, "trabalho", true))
	{
	    if(PlayerData[playerid][pSideJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "ERRO: Você não é um taxista.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você Deve ser um condutor.");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Taxi");

		if(TaxiDuty{playerid})
		{
			SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]: Fora de serviço.");
			TaxiDuty{playerid} = false;
			TaxiMade[playerid] = 0;
		}
		else
		{
			SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]: Em serviço.");
			TaxiDuty{playerid} = true;
			TaxiMade[playerid] = 0;
		}
		SetPlayerToTeamColor(playerid);
	}
	else if(!strcmp(option, "iniciar", true))
	{
	    if(PlayerData[playerid][pSideJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "ERRO: não é taxista.");
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não é o condutor.");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não dirige um taxi/cabbie.");
		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "ERRO: É necessário estar de serviço antes de utilizar o comando.");
		if(TaxiFare{playerid} == 0) return SendClientMessage(playerid, COLOR_GREY, "ERRO: não estabeleceu o tarifa.");
		if(TaxiStart{playerid}) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você já iniciouo serviço.");
		SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]: O seu táxi inicia o serviço e afeta todos os intervenientes no seu carro.");
		TaxiStart{playerid} = true;
	}
	else if(!strcmp(option, "tarifa", true))
	{
	    if(PlayerData[playerid][pSideJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "You are not a Taxi Driver.");

		new fare;
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não é o condutor.");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não dirige um taxi/cabbie.");
		if(sscanf(params,"{s[11]}d",fare)) return SendSyntaxMessage(playerid, "/taxi tarifa [valor]");
		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "ERRO: É necessário estar de serviço antes de utilizar o comando.");
		if(fare < 0 || fare > 25) return SendClientMessage(playerid, COLOR_YELLOW, "ERRO: Valor muito alto (R$0-R$25)");
		if(TaxiStart{playerid}) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você já iniciu o serviço.");
		format(msg, sizeof(msg), "[TAXI]: Tarifa alterada para R$%d", fare);
		SendClientMessage(playerid, COLOR_YELLOW, msg);
		TaxiFare{playerid} = fare;
	}
	else if(!strcmp(option, "aceitar", true))
	{
	    if(PlayerData[playerid][pSideJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "You are not a Taxi Driver.");

		new id;
		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não é o condutor.");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não dirige um taxi/cabbie.");
		if(sscanf(params,"{s[11]}d",id)) return SendSyntaxMessage(playerid, "/taxi aceitar [playerid]");

		if(id == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "{s[11]}s[24]", maskid);
			if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
			}
		}

		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "ERRO: É necessário estar de serviço antes de utilizar o comando.");
		if(GetPVarInt(id, "NeedTaxi") == 0) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Este jogador não precisa de um táxi neste momento.");

		SetPVarInt(id, "ResponseTaxi", GetPVarInt(id, "ResponseTaxi") + 1);

		switch(GetPVarInt(id, "ResponseTaxi")) {
			case 1: SendClientMessage(playerid, COLOR_WHITE, "Você tem que responder primeiro!");
			case 2: SendClientMessage(playerid, COLOR_WHITE, "Você respondeu como uma segunda pessoa!");
		}

		GetPVarString(id, "CallTaxiLoc", msg, sizeof(msg));

		SendClientMessage(playerid, COLOR_GREEN, "|_________Chamada_________|");
		if(BitFlag_Get(g_PlayerFlags[playerid], IS_PLAYER_MASK)) SendClientMessageEx(playerid, COLOR_WHITE, "Nome:(ID:%s) %s Celular: %d", PlayerData[id][pMask_Name], ReturnName(id, 0), PlayerData[id][pPnumber]);
		else SendClientMessageEx(playerid, COLOR_WHITE, "Nome:(ID:%d) %s Celular: %d", id, ReturnName(id, 0), PlayerData[id][pPnumber]);
		SendClientMessageEx(playerid, COLOR_WHITE, "Destino: %s", msg);


	}
	else if(!strcmp(option, "parar", true))
	{
	    if(PlayerData[playerid][pSideJob] != JOB_TAXI && PlayerData[playerid][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "You are not a Taxi Driver.");

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "ERRO: Você não é o condutor.");
		if(!IsATaxi(vehicle)) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não dirige um taxi/cabbie.");
		if(!TaxiDuty{playerid}) return SendClientMessage(playerid, COLOR_GREY, "ERRO: É necessário estar de serviço antes de utilizar o comando.");
		if(!TaxiStart{playerid}) return SendClientMessage(playerid, COLOR_GREY, "Taxista, seu serviço ainda não começou.");

		SendClientMessage(playerid, COLOR_YELLOW, "[TAXI]:táxi Seu serviço foi interrompido e a tarifa foi cancelada.");

		TaxiStart{playerid} = false;
		TaxiMade[playerid] = 0;
		TaxiMoney[playerid] = 0;
	}
	else if(!strcmp(option, "checar", true))
	{
		new id;
		if(sscanf(params,"{s[11]}d",id)) return SendSyntaxMessage(playerid, "/taxi checar [playerid]");
		if(id == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(params, "{s[11]}s[24]", maskid);
			if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
			}
		}

		if(PlayerData[id][pSideJob] != JOB_TAXI && PlayerData[id][pJob] != JOB_TAXI) return SendClientMessage(playerid, COLOR_WHITE, "ERRO: Você não é um taxista.");
        if(!TaxiDuty{id} || TaxiFare{id} == 0) return SendClientMessage(playerid, COLOR_WHITE, "O jogador não começou.");
        SendClientMessageEx(playerid, COLOR_WHITE, "** Tarifa do taxista %s é R$%d por segundo **", ReturnName(id,0), TaxiFare{id});

	}
	return 1;
}

CMD:comprarlicenca(playerid, params[])
{
	    if(PlayerData[playerid][pCash] >= 1250) {

			new vehicleid = GetPlayerVehicleID(playerid);
			if(IsVehicleDMV(vehicleid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER) {

	     		new model = GetVehicleModel(vehicleid);

	         	if (model == 516) {
	         	  	if(PlayerData[playerid][pCarLic]) return SendClientMessage(playerid, COLOR_LIGHTRED, "já possui uma carta de condução.");
				 	SetPVarInt(playerid, "InDriveTest", 1);
				}
	        	else if(model == 438) {
	             	if(PlayerData[playerid][pJob] == JOB_TAXI || PlayerData[playerid][pSideJob] == JOB_TAXI) return SendClientMessage(playerid, COLOR_LIGHTRED, "já é taxista!");
                  	if(PlayerData[playerid][pJob] != JOB_NONE && PlayerData[playerid][pSideJob] != JOB_NONE) return SendClientMessage(playerid, COLOR_LIGHTRED, "Tem de deixar o trabalho primeiro (/sairemprego ou /sairemprego2)");

					SetPVarInt(playerid, "InDriveTest", 2);
	         	}
				SetEngineStatus(vehicleid, true);
				SendClientMessage(playerid, COLOR_LIGHTRED,"______________Directrizes de condução______________");
		      	SendClientMessage(playerid, COLOR_LIGHTRED,"1) Conduzir para a direita da estrada.");
		      	SendClientMessage(playerid, COLOR_LIGHTRED,"2) não conduzir demasiado depressa.");
		     	SendClientMessage(playerid, COLOR_LIGHTRED,"3) Respeitar os outros condutores na estrada.");
		       	SendClientMessage(playerid, COLOR_WHITE,"No início do teste, e finalmente no final do teste.");
		       	SendClientMessage(playerid, COLOR_WHITE,"não conduzir demasiado depressa. Pode ter problemas na estrada, se o fizer.");
				SetPVarInt(playerid, "LessonSeconds", 75);
				SetPlayerCheckpointEx(playerid, 1219.1036,-1569.8324,13.0955, 4.0, CHECKPOINT_CAREXAM, 1);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "não se encontra num veículo para exame de carta de condução.");
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "não tem dinheiro suficiente para o pagar (1,250 reais).");


		return 1;
}

CMD:setstyle(playerid, params[])
{
	new option, secoption;
	if(sscanf(params,"dD(-1)", option, secoption)) return SendSyntaxMessage(playerid, "/setstyle (1 - Walk Style | 2 - Chat Style | 3 - HUD Style)");

	if(PlayerData[playerid][pDonateRank] < 1) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não é premium.");

	if(option == 1)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle 1 [StyleID]");
			SendClientMessage(playerid, COLOR_WHITE, "Walk Styles: 1,2,3,4,5,6,7,8,9");
			SendClientMessage(playerid, COLOR_WHITE, "Walk Styles: 10,11,12,13,14,15,16");
			SendClientMessage(playerid, COLOR_WHITE, "Walk Styles: 17,18");
			return 1;
		}
		if(style < 1 || style > 18) return SendClientMessage(playerid, COLOR_WHITE, "ID 1-18");

		PlayerData[playerid][pWalk] = style;
		SendClientMessageEx(playerid, COLOR_WHITE, "Define o estilo de caminhada: %d", style);
		SendClientMessage(playerid, COLOR_GRAD1, "Use /walk Para andar");
	}
	else if(option == 2)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle 2 [StyleID]");
			SendClientMessage(playerid, COLOR_WHITE, "Chat Styles: 0,1,2,3,4,5,6,7,8");
			return 1;
		}
		if(style < 0 || style > 8) return SendClientMessage(playerid, COLOR_WHITE, "ID 0-8");

		PlayerData[playerid][pTalk] = style;
		SendClientMessageEx(playerid, COLOR_WHITE, "Definiu o estilo de fala para: %d", style);
	}
	else if(option == 3)
	{
		new style;
		if(sscanf(params,"{d}d",style))
		{
			SendSyntaxMessage(playerid, "/setstyle 3 [StyleID]");
			SendClientMessage(playerid, COLOR_WHITE, "Hud Styles: 0,1,2");
			return 1;
		}
		if(style < 0 || style > 2) return SendClientMessage(playerid, COLOR_WHITE, "ID 0-2");

		PlayerData[playerid][pHUDStyle] = style;

		switch(style) {
		    case 0: {
		        PlayerTextDrawDestroy(playerid, pPT_Radio[playerid]);
		        pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 503.199584, 109.510925, " ");
				PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.45, 1.05);
				PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
				PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 2);
				PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 0);
				PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
				PlayerTextDrawFont(playerid, pPT_Radio[playerid], 3);
				PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
		    }
		    case 1: {
		        PlayerTextDrawDestroy(playerid, pPT_Radio[playerid]);
		        pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 16.000034, 180.0, " ");
				PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.320000, 1.604979);
				PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
				PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
				PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], 255);
				PlayerTextDrawFont(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
		    }
		    case 2: {
		        PlayerTextDrawDestroy(playerid, pPT_Radio[playerid]);
		        pPT_Radio[playerid] = CreatePlayerTextDraw(playerid, 526.400329, 391.599761, " ");
				PlayerTextDrawLetterSize(playerid, pPT_Radio[playerid], 0.540798, 2.535822);
				PlayerTextDrawAlignment(playerid, pPT_Radio[playerid], 2);
				PlayerTextDrawColor(playerid, pPT_Radio[playerid], -1);
				PlayerTextDrawSetShadow(playerid, pPT_Radio[playerid], 0);
				PlayerTextDrawSetOutline(playerid, pPT_Radio[playerid], 1);
				PlayerTextDrawBackgroundColor(playerid, pPT_Radio[playerid], -2139062017);
				PlayerTextDrawFont(playerid, pPT_Radio[playerid], 2);
				PlayerTextDrawSetProportional(playerid, pPT_Radio[playerid], 1);
		    }
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "O estilo que define HUD é: %d", style);
	}
	return 1;
}
CMD:guardachuva(playerid, params[])
{

	if(!PlayerData[playerid][pUmbrella])
	{
	    PlayerData[playerid][pUmbrella] = 1;
	    
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você pegou seu guarda-chuva.");
		
		SetPlayerAttachedObject(playerid,HOLDOBJECT_UMBRELLA,-2001,6,0.050000,0.049999,0.067999,16.699996,-20.099998,21.099996,1.000000,1.000000,1.000000);
			
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
		ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1,1);
	}
	else
	{
		PlayerData[playerid][pUmbrella] = 0;
		
		ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
		RemovePlayerAttachedObject(playerid, HOLDOBJECT_UMBRELLA);
		
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você guardou seu guarda-chuva.");
	}
	return 1;
}

/*Umbrella_OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(PRESSED(KEY_NO))
	{
		if(PlayerData[playerid][pUmbrella] > 0)
		{
			PlayerData[playerid][pUmbrella] = 2;
	    
			SetPlayerAttachedObject(playerid,HOLDOBJECT_UMBRELLA,-2001,6,0.050000,0.049999,0.067999,16.699996,-20.099998,21.099996,1.000000,1.000000,1.000000);
			
			ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
			ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1,1);
		}
	}
	if(HOLDING(KEY_WALK))
	{
	    if(PlayerData[playerid][pUmbrella] == 2)
	    {
	        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
	        ApplyAnimation(playerid,"ROCKET","walk_rocket",4.1,1,1,1,1,1,1);
	    }
	}
	if(RELEASED(KEY_WALK))
	{
	    if(PlayerData[playerid][pUmbrella] == 0)
	    {
	        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
	        ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1,1);
	    }
	}
	if(HOLDING(KEY_SPRINT))
	{
	    if(PlayerData[playerid][pUmbrella] == 0)
	    {
	        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
	        ApplyAnimation(playerid,"ROCKET","run_rocket",4.1,1,1,1,1,1,1);
	    }
	}
	if(RELEASED(KEY_SPRINT))
	{
	    if(PlayerData[playerid][pUmbrella] == 0)
	    {
	        ApplyAnimation(playerid, "CARRY", "crry_prtial", 2.0, 0, 0, 0, 0, 0, 1);
	        ApplyAnimation(playerid,"ROCKET","idle_rocket",4.1,0,1,1,1,1,1);
	    }
	}
	return 1;
}*/
CMD:toghud(playerid, params[])
{
	if(!BitFlag_Get(g_PlayerFlags[playerid], TOGGLE_HUD))
	{
		BitFlag_On(g_PlayerFlags[playerid], TOGGLE_HUD);
		PlayerTextDrawHide(playerid, pPT_Radio[playerid]);
		PlayerTextDrawHide(playerid, HUDPlayer_Health[playerid]);
		PlayerTextDrawHide(playerid, HUDPlayer_Armor[playerid]);
 		SendClientMessage(playerid,COLOR_GREEN,"HUD desativada.");
	}
	else
	{
		BitFlag_Off(g_PlayerFlags[playerid], TOGGLE_HUD);
		PlayerTextDrawShow(playerid, pPT_Radio[playerid]);
		PlayerTextDrawShow(playerid, HUDPlayer_Health[playerid]);
		PlayerTextDrawShow(playerid, HUDPlayer_Armor[playerid]);
		SendClientMessage(playerid,COLOR_GREEN,"HUD ativada.");
	}
	return 1;
}

CMD:walk(playerid, params[])
{
	switch(PlayerData[playerid][pWalk])
	{
		case 1: ApplyAnimation(playerid,"PED","WALK_gang1",4.1,1,1,1,1,1);
		case 2: ApplyAnimation(playerid,"PED","WOMAN_walksexy",4.1,1,1,1,1,1);
		case 3: ApplyAnimation(playerid,"PED","WALK_armed",4.1,1,1,1,1,1);
		case 4: ApplyAnimation(playerid,"PED","WALK_civi",4.1,1,1,1,1,1);
		case 5: ApplyAnimation(playerid,"PED","WALK_csaw",4.1,1,1,1,1,1);
		case 6: ApplyAnimation(playerid,"PED","WALK_gang2",4.1,1,1,1,1,1);
		case 7: ApplyAnimation(playerid,"PED","WALK_drunk",4.1,1,1,1,1,1);
		case 8: ApplyAnimation(playerid,"PED","WALK_fat",4.1,1,1,1,1,1);
		case 9: ApplyAnimation(playerid,"PED","WALK_fatold",4.1,1,1,1,1,1);
		case 10: ApplyAnimation(playerid,"PED","WALK_old",4.1,1,1,1,1,1);
		case 11: ApplyAnimation(playerid,"PED","WALK_player",4.1,1,1,1,1,1);
		case 12: ApplyAnimation(playerid,"PED","WALK_rocket",4.1,1,1,1,1,1);
		case 13: ApplyAnimation(playerid,"PED","WALK_shuffle",4.1,1,1,1,1,1);
		case 14: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 15: ApplyAnimation(playerid,"PED","WOMAN_walkpro",4.1,1,1,1,1,1);
		case 16: ApplyAnimation(playerid,"PED","WOMAN_walkbusy",4.1,1,1,1,1,1);
		case 17: ApplyAnimation(playerid,"PED","WOMAN_walknorm",4.1,1,1,1,1,1);
		case 18: ApplyAnimation(playerid,"PED","Walk_Wuzi",4.1,1,1,1,1,1);
	}
	if(PlayerData[playerid][pWalk]) PlayerData[playerid][pAnimation] = 1;
	return 1;
}

stock ChatAnimation(playerid, length)
{
	if(GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pAnimation])
	{
		if(deathmode[playerid] || PlayerData[playerid][pInjured] || IsPlayerInAnyVehicle(playerid) || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK) return 1;

		new chatstyle = PlayerData[playerid][pTalk];
		PlayerData[playerid][pAnimation] = 1;
		if(chatstyle == 0) { ApplyAnimation(playerid,"PED","IDLE_CHAT",4.1,1,0,0,1,1); }
		else if(chatstyle == 1) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkA",4.1,1,0,0,1,1); }
		else if(chatstyle == 2) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkB",4.1,1,0,0,1,1); }
		else if(chatstyle == 3) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkC",4.1,1,0,0,1,1);}
		else if(chatstyle == 4) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkD",4.1,1,0,0,1,1);}
		else if(chatstyle == 5) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkE",4.1,1,0,0,1,1);}
		else if(chatstyle == 6) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkF",4.1,1,0,0,1,1);}
		else if(chatstyle == 7) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkG",4.1,1,0,0,1,1);}
		else if(chatstyle == 8) { ApplyAnimation(playerid,"GANGS","prtial_gngtlkH",4.1,1,0,0,1,1);}
		SetTimerEx("StopChatting", floatround(length)*100, false, "i", playerid);

	}
	return 1;
}

stock CheckFightStyle(playerid) {
	new styleid = FIGHT_STYLE_NORMAL;
	switch(PlayerData[playerid][pFightStyle])
	{
		case 0: styleid = FIGHT_STYLE_NORMAL;
		case 1: styleid = FIGHT_STYLE_BOXING;
		case 2: styleid = FIGHT_STYLE_KUNGFU;
		default: styleid = FIGHT_STYLE_NORMAL;
	}
	return SetPlayerFightingStyle(playerid, styleid);
}

stock CountAdvert() {
    new num = 0;
	for(new i=0;i!=MAX_AD_QUEUE;i++) if(AdvertData[i][ad_id]) num++;
	return num;
}

stock CountPlayerAdvert(playerid) {
    new num = 0;
	for(new i=0;i!=MAX_AD_QUEUE;i++) if(AdvertData[i][ad_id] && AdvertData[i][ad_owner] == playerid) num++;
	return num;
}

stock Advert_Free() {
	new exists = -1;
	for(new i=0;i!=MAX_AD_QUEUE;i++) {
		if(!AdvertData[i][ad_id]) {
			exists = i;
			break;
		}
	}
	return exists;
}

stock SetLastCaller(playerid)
{
    new call_str[64];
	for(new i = 0; i!=MAX_EMERGENCY_CALL; i++)
	{
		if(CallInfo[i][callTaken] == 0)
		{
		    GetPVarString(playerid, "CallEmergencySituation", call_str, 128);
			format(CallInfo[i][callSituation], 64, "%s", call_str);

			GetPVarString(playerid, "CallEmergencyLoc", call_str, 64);
			format(CallInfo[i][callLocation], 64, "%s", call_str);

			GetPVarString(playerid, "CallEmergencyType", call_str, 64);
			format(CallInfo[i][callType], 64, "%s", call_str);

			GetPVarString(playerid, "CallEmergencyTrace", call_str, 64);
			format(CallInfo[i][callTrace], 64, "%s", call_str);

			format(CallInfo[i][callDate], 64, "%s", ReturnDate());
			CallInfo[i][callID] = i;
			CallInfo[i][callCaller] = playerid;
			CallInfo[i][callTaken] = 1;
			return i;
		}
	}
	if(ToLastCallSlot < 11)
	{
	    GetPVarString(playerid, "CallEmergencySituation", call_str, 128);
		format(CallInfo[ToLastCallSlot][callSituation], 64, "%s", call_str);
		GetPVarString(playerid, "CallEmergencyLoc", call_str, 64);
		format(CallInfo[ToLastCallSlot][callLocation], 64, "%s", call_str);

		GetPVarString(playerid, "CallEmergencyType", call_str, 64);
		format(CallInfo[ToLastCallSlot][callType], 64, "%s", call_str);

		GetPVarString(playerid, "CallEmergencyTrace", call_str, 64);
		format(CallInfo[ToLastCallSlot][callTrace], 64, "%s", call_str);

		format(CallInfo[ToLastCallSlot][callDate], 64, "%s", ReturnDate());
		CallInfo[ToLastCallSlot][callID] = ToLastCallSlot;
		CallInfo[ToLastCallSlot][callCaller] = playerid;
		CallInfo[ToLastCallSlot][callTaken] = 1;
		ToLastCallSlot++;
		if(ToLastCallSlot == 10)
			ToLastCallSlot = 0;
	}
	return ToLastCallSlot;
}

stock UnSetLastCaller(playerid)
{
	for(new i = 0; i != MAX_EMERGENCY_CALL; i++) if(CallInfo[i][callCaller] == playerid) CallInfo[i][callTaken] = 0;
	return 1;
}

stock SetLastArrest(playerid, suspect, time)
{
    new call_str[64];
	for(new i = 0; i != MAX_ARREST; i++)
	{
		if(ArrestInfo[i][arrestTaken] == 0)
		{
			format(ArrestInfo[i][arrestDate], 64, "%s", ReturnDate());
			GetPVarString(playerid, "ArrestLocation", call_str, 64);
			format(ArrestInfo[i][arrestLocation], 64, "%s", call_str);
			ArrestInfo[i][arrestSuspect] = suspect;
			ArrestInfo[i][arrestOfficer] = playerid;
			ArrestInfo[i][arrestTime] = time;
			ArrestInfo[i][arrestTaken] = 1;
			return 1;
		}
	}
	if(ToLastCallSlot < 31)
	{
		format(ArrestInfo[ToLastArrestSlot][arrestDate], 64, "%s", ReturnDate());
		GetPVarString(playerid, "ArrestLocation", call_str, 64);
		format(ArrestInfo[ToLastArrestSlot][arrestLocation], 64, "%s", call_str);
		ArrestInfo[ToLastArrestSlot][arrestSuspect] = suspect;
		ArrestInfo[ToLastArrestSlot][arrestOfficer] = playerid;
		ArrestInfo[ToLastArrestSlot][arrestTime] = time;
		ArrestInfo[ToLastArrestSlot][arrestTaken] = 1;
		ToLastArrestSlot++;
		if(ToLastArrestSlot == 30)
			ToLastArrestSlot = 0;
	}
	return 1;
}

stock UnSetLastArrest(playerid)
{
	for(new i = 0; i != MAX_ARREST; i++) if(ArrestInfo[i][arrestSuspect] == playerid) ArrestInfo[i][arrestTaken] = 0;
	return 1;
}

CMD:tablet(playerid, params[])
{

	if (GetFactionType(playerid) == FACTION_POLICE) {
    	if(IsACopCar(GetPlayerVehicleID(playerid))) {
    	    new str[64];
			format(str, sizeof(str), "TABLET -  Registrado como: %s", ReturnNameEx(playerid));
			Dialog_Show(playerid, DialogMDC, DIALOG_STYLE_LIST, str, "Encontre o nome\nAcrescentar alegações\nEncontrar matrícula (ID ou nome do player)\nEncontrar matrícula (placa veicular)\nHistorico 190\nPrisíes recentes \nPesquisar Chassi", "Entrar", "Sair");
	    }
	    else SendClientMessage(playerid, COLOR_LIGHTRED, "Deve está em um veiculo.");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve ser um policial.");

	return 1;
}

Dialog:DialogMDC(playerid, response, listitem, inputtext[]) {
	if(response) {
		switch(listitem)
		{
			case 0:
			{
				Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "TABLET - Encontre o nome", "Encontre o nome\n\nPreencha o nome\n\nFormato: Nome_Sobrenome (( Ou use o ID ))", "Entrar", "Sair");
			}
			case 1:
			{
				Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "TABLET - Acrescentar alegações", "Enviar informação\n\nIntroduza o nome abaixo:\n\n(( Player ID / Nome_Sobrenome ))", "Entrar", "Sair");
			}
			case 2:
			{
				Dialog_Show(playerid, MDCVehicleID, DIALOG_STYLE_INPUT, "TABLET - Licença veicular", "Licença veicular\n\nEnter the Licença veicular:\n\n(( Player ID / Nome_Sobrenome ))", "Entrar", "Sair");
			}
			case 3:
			{
				Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "TABLET - Licença veicular", "Licença veicular\n\nInsira Licença veicular.:", "Entrar", "Sair");
			}
			case 4:
			{
				new string[500];
				for(new i = 0; i!=MAX_EMERGENCY_CALL; i++)
				{
					if(CallInfo[i][callTaken])
					{
						format(string, sizeof(string), "%s\n%d: %s", string, CallInfo[i][callNumb], CallInfo[i][callSituation]);
					}
				}
				Dialog_Show(playerid, MDCLastCalls, DIALOG_STYLE_LIST, "TABLET - Ultima ligação", string, "Entrar", "Sair");
			}
			case 5:
			{
				new string[500];
				for(new i = 0; i != MAX_ARREST; i++)
				{
					if(ArrestInfo[i][arrestTaken])
					{
						format(string, sizeof(string), "%s\n%s", string, ReturnNameEx(ArrestInfo[i][arrestSuspect]));
					}
				}
				Dialog_Show(playerid, MDCLastArrest, DIALOG_STYLE_LIST, "TABLET - Prisíes recentes", string, "Entrar", "Sair");
			}
			case 6:
			{
				Dialog_Show(playerid, MDCVehicleTwo, DIALOG_STYLE_INPUT, "TABLET - Pesquisa por Chassi", "Chassi do veiculo\n\nInsira os ultimos números de chassi do veiculo:", "Entrar", "Sair");
			}
		}
	}
	return 1;
}

Dialog:MDCLastArrest(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new i = listitem;
		new string[500];
		format(string, sizeof(string), "informações DE prisão\n\nPreso: %d minutos\nNome: %s\nOficial: %s\nData: %s\nposição: %s", ArrestInfo[i][arrestTime], ReturnNameEx(ArrestInfo[i][arrestSuspect]), ReturnNameEx(ArrestInfo[i][arrestOfficer]), ArrestInfo[i][arrestDate], ArrestInfo[i][arrestLocation]);
		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "TABLET - informações de prisão", string, "Sair", "");
	}
}

Dialog:MDCLastCalls(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new i = listitem;
		SetPVarInt(playerid, "LastCallSlot", i);
		new string[500];

		format(string, sizeof(string), "%d-ligação - #%d\n\nCategoria: %s\n\nNome: %s\nCelular: %d\nDescrição: %s\nLocal: %s\nRastreio: %s\nData: %s", CallInfo[i][callNumb], CallInfo[i][callID], CallInfo[i][callType], ReturnName(CallInfo[i][callCaller], 0), PlayerData[CallInfo[i][callCaller]][pPnumber], CallInfo[i][callSituation], CallInfo[i][callLocation], CallInfo[i][callTrace], CallInfo[i][callDate]);

		if(CallInfo[i][callNumb] == 991) Dialog_Show(playerid, MDCRespondCall, DIALOG_STYLE_MSGBOX, "TABLET - Ultima ligação", string, "Responder", "Sair");
		else Dialog_Show(playerid, MDCRespondCall, DIALOG_STYLE_MSGBOX, "TABLET - Ultima ligação", string, "Sair", "");
	}
}

Dialog:MDCRespondCall(playerid, response, listitem, inputtext[])
{
	if(response) {

		if(CallInfo[GetPVarInt(playerid, "LastCallSlot")][callNumb] == 991) SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "* %s %s atendeu a ultima ligação do 991 #%d", Faction_GetRank(playerid), ReturnName(playerid, 0), CallInfo[GetPVarInt(playerid, "LastCallSlot")][callID]);
	}
	DeletePVar(playerid, "LastCallSlot");
}

Dialog:MDCSearch(playerid, response, listitem, inputtext[])
{
	new string[256];

	if(response)
	{
		new iPlayerID = INVALID_PLAYER_ID;

		if(sscanf(inputtext, "u", iPlayerID)) return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "TABLET - Encontre o nome", "Encontre o nome\n\nPreencha o nome\n\nFormato: Nome_Sobrenome (( Ou use o ID ))", "Entrar", "Sair");
		if(iPlayerID == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(inputtext, "s[24]", maskid);
			if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return Dialog_Show(playerid, MDCSearch, DIALOG_STYLE_INPUT, "TABLET - Encontre o nome", "Encontre o nome\n\nPreencha o nome\n\nFormato: Nome_Sobrenome (( Ou use o ID ))\n\nnão consigo encontrar este jogador", "Entrar", "Sair");
			}
		}
		new year, month, day;
		getdate(year, month, day);

		new pnumber_str[16];
		valstr(pnumber_str,PlayerData[iPlayerID][pPnumber]);

		format(string, sizeof(string), "RESULTADO PES. NOME\n\nNome Completo: %s Idade: %d\nTeleCelular: %s\nhabilitação: %s\nPorte de armas: %s\n\nEndereço: %s\n\n\n", ReturnNameEx(iPlayerID), year - PlayerData[iPlayerID][pBirthdate], PlayerData[iPlayerID][pPnumber] ? (pnumber_str) : ("não possui"), PlayerData[iPlayerID][pCarLic] ? ("Possui") : ("não possui"), PlayerData[iPlayerID][pWepLic] ? ("Possui") : ("não possui"), GetHouseLocation(iPlayerID));
		format(string, sizeof(string), "FICHA CRIMINAL DE %s\nSetença de prisão: %d\nCrime: %d\n\n", string, PlayerData[iPlayerID][pArrested], PlayerData[iPlayerID][pPrisoned]);
		//format(string, sizeof(string), "%s Case of:\n\n1.%s\n2.%s\n3.%s\n4.%s\n5.%s\n", string);
		//printf("MDC Search : %d", strlen(string));
		//if(PlayerData[iPlayerID][pFines] > 0) format(string, sizeof(string), "%s%s Fine/Non-Paid Bills ((/fines))", string,ReturnNameEx(iPlayerID));

		SetPVarInt(playerid, "MDCPlayerID", iPlayerID);

		Dialog_Show(playerid, MDCResult2, DIALOG_STYLE_MSGBOX, "TABLET POLICIAL", string, "Imprimir", "Cancelar");
	}
	return 1;
}


Dialog:MDCResult2(playerid, response, listitem, inputtext[])
{
  if(response)
  {
	new iPlayerID = GetPVarInt(playerid, "MDCPlayerID");

    SendClientMessage(playerid, COLOR_WHITE,"TABLET - Encontre o nome");
    SendClientMessage(playerid, COLOR_WHITE,"");
    SendClientMessage(playerid, COLOR_WHITE,"RESULTADO PES. NOME");
    SendClientMessage(playerid, COLOR_WHITE,"");

    SendClientMessageEx(playerid, COLOR_WHITE, "Nome Completo: %s", ReturnNameEx(iPlayerID));

	new pnumber_str[16];
	valstr(pnumber_str,PlayerData[iPlayerID][pPnumber]);

    SendClientMessageEx(playerid, COLOR_WHITE, "Celular: %s", PlayerData[iPlayerID][pPnumber] ? (pnumber_str) : ("não possui"));
    SendClientMessageEx(playerid, COLOR_WHITE, "habilitação: %s", PlayerData[iPlayerID][pCarLic] ? ("Possui") : ("não possui"));
    SendClientMessageEx(playerid, COLOR_WHITE, "Endereço: %s", GetHouseLocation(iPlayerID));
  }
  DeletePVar(playerid, "MDCPlayerID");
  return 1;
}

Dialog:MDCRecord(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new iPlayerID = INVALID_PLAYER_ID;
		if(sscanf(inputtext, "u", iPlayerID)) return Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "TABLET - Acrescentar alegações", "CARGAS DE ASSITÊNCIA\n\nIntroduza o nome abaixo.:\n\n(( Player ID / Nome_Sobrenome ))", "Entrar", "Sair");
		if(iPlayerID == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(inputtext, "s[24]", maskid);
			if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return Dialog_Show(playerid, MDCRecord, DIALOG_STYLE_INPUT, "TABLET - Acrescentar alegações", "CARGAS DE ASSITÊNCIA\n\nIntroduza o nome abaixo.:\n\n(( Player ID / Nome_Sobrenome ))\n\nnão consigo encontrar este jogador.", "Entrar", "Sair");
			}
		}

		SetPVarInt(playerid, "MDCPlayerID", iPlayerID);

		format(szString, sizeof(szString), "CARGAS DE ASSITÊNCIA\n\nConfirmação da alegação: %s\n\n(( Crime ))", ReturnNameEx(iPlayerID));
		Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "TABLET - Acrescentar alegações", szString, "Entrar", "Sair");
	}
	return 1;
}

Dialog:MDCRecord2(playerid, response, listitem, inputtext[])
{
	if(response)
	{
	    new iPlayerID = GetPVarInt(playerid, "MDCPlayerID");

		new szCharge[84];
		if(sscanf(inputtext, "s[84]", szCharge))
		{
			format(szString, sizeof(szString), "CARGAS DE ASSITÊNCIA\n\nConfirmar a notificação: %s\n\n(( Crime ))", ReturnNameEx(iPlayerID));
			Dialog_Show(playerid, MDCRecord2, DIALOG_STYLE_INPUT, "TABLET - Acrescentar alegações", szString, "Entrar", "Escape");
			return 1;
		}
		if(AddCriminalRecord(iPlayerID, szCharge, playerid))
		{
			SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "[PRESO] Suspeito: %s Oficial: %s crime: %s", ReturnNameEx(iPlayerID), ReturnNameEx(playerid), szCharge);
			SendFactionMessageEx(FACTION_SASD, COLOR_RADIO, "[PRESO] Suspeito: %s Oficial: %s crime: %s", ReturnNameEx(iPlayerID), ReturnNameEx(playerid), szCharge);
			SendClientMessage(playerid, COLOR_WHITE, "A acusação já foi enviada para o jogador.");
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTRED, "A taxa ainda não foi acrescentada.");
		}
	}
	DeletePVar(playerid, "MDCPlayerID");
	return 1;
}

Dialog:MDCVehicleID(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new id = INVALID_PLAYER_ID;
		if(sscanf(inputtext, "u", id)) return Dialog_Show(playerid, MDCVehicleID, DIALOG_STYLE_INPUT, "TABLET - Licença veicular", "PESQUISA PLACA\n\nDigite a Licença:\n\n(( Player ID / Nome_Sobrenome ))", "Entrar", "Sair");
		if(id == INVALID_PLAYER_ID) {
			new maskid[MAX_PLAYER_NAME];
			sscanf(inputtext, "s[24]", maskid);
			if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
				return Dialog_Show(playerid, MDCVehicleID, DIALOG_STYLE_INPUT, "TABLET - Licença veicular", "PESQUISA PLACA\n\nDigite a Licença:\n\n(( Player ID / Nome_Sobrenome ))\n\nnão consigo encontrar este jogador.", "Entrar", "Sair");
			}
		}
		if(!IsPlayerInAnyVehicle(id)) return SendClientMessage(playerid, COLOR_GREY, "O jogador não está no veículo.");

		new vehicleid = GetPlayerVehicleID(id), carid = -1, placa[110];

        if((carid = Car_GetID(vehicleid)) != -1) {
			format(placa, 10, "SEM PLACA");
			if(strlen(CarData[carid][carPlate]) == strlen(placa)){
				format(szString, sizeof(szString), "PESQUISA PLACA RESULT\n\nO veiculo não se encontra registrado no Detran.");
				Dialog_Show(playerid, MDCResult3, DIALOG_STYLE_MSGBOX, "TABLET - Licença veicular", szString, "Imprimir", "Cancelar");
			}else{
				format(szString, sizeof(szString), "PESQUISA PLACA RESULT\n\nLicença veicular: %s\nModelo: %s\nDono: %s\nLicença: %s", CarData[carid][carPlate], g_arrVehicleNames[CarData[carid][carModel]-400], CarData[carid][carOwnerName], CarData[carid][carSemPlaca]);
				SetPVarInt(playerid, "MDCVehicleID", carid);
				Dialog_Show(playerid, MDCResult3, DIALOG_STYLE_MSGBOX, "TABLET - Licença veicular", szString, "Imprimir", "Cancelar");
			}
		}
        else SendClientMessage(playerid, COLOR_GREY, "Este jogador pode estar num veículo público (estático)");
	}
	return 1;
}


Dialog:MDCVehicleTwo(playerid, response, listitem, inputtext[])
{
    if(!response) return 1;
	else
	{
	    new placabusca[64],  str[1024];
	    format(placabusca, sizeof(placabusca),"%s",inputtext);
	    mysql_format(dbCon, str,sizeof(str),"SELECT * FROM cars WHERE carChassi = '********%s'",placabusca);
     	mysql_tquery(dbCon, str, "Infos_MDCPlaca", "d", playerid);
	}
	return 1;
}



forward setAdmin();
public setAdmin(){
	new qq[1024];
	mysql_format(dbCon, qq,sizeof(qq),"SELECT * FROM setadmin");
	mysql_tquery(dbCon, qq, "setadmin_info");
	return 1;
}

forward setadmin_info();
public setadmin_info()
{
	new rows = cache_num_rows(),
		idplayer,
		idSol,
		admins = rows,
		levelAdm;

	if(rows)
	{
		for(new i; i < admins; i++)
		{
			cache_get_value_name_int(i, "id", idSol);
			cache_get_value_name_int(i, "idPlayer", idplayer);
			cache_get_value_name_int(i, "levelAdmin", levelAdm);

			PlayerData[idplayer][pAdmin] = levelAdm;
			SendClientMessageEx(idplayer, -1, "Algum Supervidor ou gestor lhe setou admin pelo User Control Panel. Admin level %d.", levelAdm);

			SQL_SaveCharacter(idplayer);

			new del[256];
			format(del, sizeof(del), "DELETE FROM `setadmin` WHERE `id` = '%d'", idSol);
			mysql_tquery(dbCon, del);
		}
	}
	return 1;
}

forward Infos_MDCPlaca(playerid);
public Infos_MDCPlaca(playerid) {
	new rows = cache_num_rows();
	new Carros = rows;
	new Variavel[10];
	//new NameDono[24];
	new dataSPlaca[80];
	//new NamePlaca[32];
	if(rows)
  	{
	 	for(new i; i < Carros; i++)
	  	{
			cache_get_value_name_int(i,"carModel", Variavel[0]);
			//cache_get_value(i,"owner_name", NameDono, 24);
	        //cache_get_value(i,"carPlate", NamePlaca, 32);
			cache_get_value(i, "tempoSemPlaca", dataSPlaca, 80);

	        new stringmdc[1024];
			//new vname[64];
			//GetVehicleNameByModel(Variavel[0],vname);
			//g_arrVehicleNames[CarData[carid][carModel]-400]

			format(stringmdc, sizeof(stringmdc), "Modelo:\t%s\nPlaca:\tnão Emplacado\nProprietario\tTESTANDO\nLicença:\t%s", g_arrVehicleNames[Variavel[0]-400], dataSPlaca);
	 		Dialog_Show(playerid, 999999, DIALOG_STYLE_MSGBOX, "Tablet PMESP", stringmdc, "Fechar", "");
	  	}
	}
  	else
  	{
  	    SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Placa não identificada ao banco de dados.");
  	}
	return 1;
}


Dialog:MDCVehicle(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new plate[64], carid = -1, placa[10];
		if(sscanf(inputtext, "s[64]", plate)) return Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "TABLET - Find Licença veicular", "Find Licença veicular\n\nFill in the Licença veicular:", "Entrar", "Sair");


		if((carid = FindVehicleByPlate(plate)) == -1) return Dialog_Show(playerid, MDCVehicle, DIALOG_STYLE_INPUT, "TABLET - Licença veicular", "Licença veicular\n\nPreencher as informações sobre a Licença veicular:\n\nEsta etiqueta de Licença não pode ser encontrada na base de dados", "Entrar", "Sair");

		format(placa, 10, "SEM PLACA");


		if(strlen(plate) == strlen(placa)){
			format(szString, sizeof(szString), "PESQUISA PLACA RESULTADO\n\nVEICULO não EMPLACADO.");
			Dialog_Show(playerid, MDCResult3, DIALOG_STYLE_MSGBOX, "TABLET - Encontrar Etiquetas de Registo", szString, "Imprimir", "Cancelar");
		}else{
			
			format(szString, sizeof(szString), "PESQUISA PLACA RESULTADO\n\nLicença veicular: %s\nModelos: %s\nDono: %s\nLicença: %s\nChassi: %s", CarData[carid][carPlate], g_arrVehicleNames[CarData[carid][carModel]-400], CarData[carid][carOwnerName], CarData[carid][carSemPlaca], CarData[carid][carChassi]);

			if(CountVehicleTickets(CarData[carid][carOwnerName]))
			{
				format(szString, sizeof(szString), "%s\nEste veículo tem uma multa ainda não paga (/multarveiculo)", szString);
			}
			SetPVarInt(playerid, "MDCVehicleID", carid);
			Dialog_Show(playerid, MDCResult3, DIALOG_STYLE_MSGBOX, "TABLET - Encontrar Etiquetas de Registo", szString, "Imprimir", "Cancelar");
		}
	}
	return 1;
}

Dialog:MDCResult3(playerid, response, listitem, inputtext[])
{

	if(response)
	{
		new carid = GetPVarInt(playerid, "MDCVehicleID");
		SendClientMessage(playerid, COLOR_WHITE,"PESQUISA PLACA RESULTADO");
    	SendClientMessage(playerid, COLOR_WHITE,"");
    	SendClientMessageEx(playerid, COLOR_WHITE, "Licença veicular: %s", CarData[carid][carPlate]);
    	SendClientMessageEx(playerid, COLOR_WHITE, "Modelo: %s", g_arrVehicleNames[CarData[carid][carModel]-400]);
    	SendClientMessageEx(playerid, COLOR_WHITE, "Dono: %s", CarData[carid][carOwnerName]);
		SendClientMessageEx(playerid, COLOR_WHITE, "Licença: %s", CarData[carid][carSemPlaca]);
	}
	GetPVarInt(playerid, "MDCVehicleID");
	return 1;
}

stock CountVehicleTickets(owner[])
{
	new name[MAX_PLAYER_NAME + 1];
	format(name, MAX_PLAYER_NAME, "%s", owner);
	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

    format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` = 1", name);
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}

stock CountPlayerTickets(playerid)
{
    format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` = 0", ReturnNameEx(playerid));
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}

stock CountTickets(playerid)
{
	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s'", ReturnNameEx(playerid));
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}

stock CountTicketsByName(owner[])
{
	new name[MAX_PLAYER_NAME + 1];
	format(name, MAX_PLAYER_NAME, "%s", owner);
	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s'", name);
	mysql_query(dbCon, szQuery);
	return cache_num_rows();
}

/*stock PlaceVehicleTicket(carid, amount)
{
	for(new i = 0; i != MAX_CAR_TICKETS; i++)
	{
		if(CarData[carid][carTicket][i] == 0)
		{
			CarData[carid][carTicket][i] = amount;
			return 1;
		}
	}
	return 1;
}*/

stock FindVehicleByPlate(plate[])
{
	foreach(new i : sv_playercar) if(!strcmp(plate, CarData[i][carPlate], true)) return i;
	return -1;
}
//==================================Player Tickets==================================//

/*stock CountPlayerTickets(playerid)
{
	new count = 0;
	for(new i=0;i!=MAX_PLAYER_TICKETS;i++) if(PlayerData[playerid][pTickets][i] != 0) count++;
	return count;
}

stock PlacePlayerTicket(playerid, amount)
{
	for(new i=0;i!=MAX_PLAYER_TICKETS;i++)
	{
		if(PlayerData[playerid][pTickets][i] == 0)
		{
			PlayerData[playerid][pTickets][i] = amount;
			return 1;
		}
	}
	return 1;
}

stock AssignPlayerTickets(playerid, tickets[])
{
	new tmp[MAX_PLAYER_TICKETS][32];
	explode(tmp, tickets, "|");
	for(new i=0;i!=MAX_PLAYER_TICKETS;i++)
	{
	    PlayerData[playerid][pTickets][i] = strval(tmp[i]);
	}
}

stock FormatPlayerTickets(playerid)
{
	new upstr[256];
	new tmp[64];
	for(new b=0;b!=MAX_PLAYER_TICKETS;b++)
	{
		if(b == 0)
			format(tmp,sizeof(tmp),"%d",PlayerData[playerid][pTickets][b]);
		else
			format(tmp,sizeof(tmp),"|%d",PlayerData[playerid][pTickets][b]);
		strins(upstr,tmp,strlen(upstr));
	}
	return upstr;
}*/

//==================================Player Tickets==================================//

stock AddCriminalRecord(playerid, szCharge[], iOfficer)
{
	if(strlen(szCharge) < 5)
	{
		SendClientMessage(iOfficer, COLOR_RED, "Deve introduzir mais de 5 caracteres.");
		return 0;
	}
	else
	{
		format(szQuery, sizeof(szQuery),"INSERT INTO `criminalrecords` (userid, charge, date, officer) VALUES(%d, '%s', '%s', %d)", PlayerData[playerid][pID], szCharge, ReturnDate(), PlayerData[iOfficer][pID]);
		mysql_query(dbCon, szQuery);
		return 1;
	}
}

CMD:prender(playerid, params[])
{
	new id, cell, time, fine;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para agentes da polícia.");
    if(!IsPlayerInRangeOfPoint(playerid, 6.0, 1396.2157,-10.9901,1001.0098)) return SendClientMessage(playerid, COLOR_LIGHTRED, "não se encontra em frente da sala de detenção.");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Ainda não começou a exercer funções.");

	if(sscanf(params,"uddd",id,cell,time,fine)) return SendSyntaxMessage(playerid, "/prender [playerid/PartOfName] [cela(1-4)] [tempo] [multa]");
	if(id == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{ddd}", maskid);
		if((id = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	if (id == playerid) return SendClientMessage(playerid, COLOR_GRAD1, "não pode ser detido.");
	if (!IsPlayerNearPlayer(playerid, id, 5.0)) return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: não está perto do jogador.");

	if(cell < 1 || cell > 2) return SendClientMessage(playerid, COLOR_GRAD2, "A sala de detenção não pode ser inferior a 1 ou superior a 2");
	if(fine < 0 || fine > 10000) return SendClientMessage(playerid, COLOR_GRAD2, "A taxa de ajustamento não pode ser superior a R$10.000 ou inferior a R$0");
	if(time < 1 || time > 300) return SendClientMessage(playerid, COLOR_GRAD2, "O tempo não deve ser superior a 300 minutos ou inferior a 1 minuto");
	if(PlayerData[id][pJailed] == 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador foi preso.");

    BitFlag_Off(g_PlayerFlags[id],PLAYER_CUFFED);
    SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
    RemovePlayerAttachedObject(id, FREESLOT9);

	PlayerData[id][pCash] -= fine;
	FullResetPlayerWeapons(id);
	PlayerData[id][pJailTime2] = time * 60;
	PutPlayerInCell(id, cell);
	PlayerData[id][pJailed] = 2;
	PlayerData[id][pArrested] += 1;

	SendFactionMessageEx(FACTION_POLICE, COLOR_LIGHTRED, "[prisão] %s %s a ser detido %s tempo %d min", Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(id, 0), time);
	SendFactionMessageEx(FACTION_SASD, COLOR_LIGHTRED, "[prisão] %s %s a ser detido %s tempo %d min", Faction_GetRank(playerid), ReturnName(playerid, 0), ReturnName(id, 0), time);
	SendClientMessageEx(id, COLOR_LIGHTRED, "está detido por %d minutos, multa: %dR$", time, fine);

	SetPVarString(playerid, "ArrestLocation", "prisão de Segurança média");
	SetLastArrest(playerid, id, time);
	return 1;
}

stock PutPlayerInCell(playerid, cell)
{
	switch(cell)
	{
		case 1:
		{
			SetPlayerPos(playerid, 1393.1328,-14.6677,1001.1564);
			SetPlayerFacingAngle(playerid, 269.6339);
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pModel], 1393.1328, -14.6677, 1001.1564, 269.6339, -1, -1, -1, -1, -1, -1);

		    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		case 2:
		{
			SetPlayerPos(playerid, 1393.1201,-11.2215,1001.0263);
			SetPlayerFacingAngle(playerid, 272.8507);
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pModel], 1393.1201,-11.2215,1001.0263,272.8507, -1, -1, -1, -1, -1, -1);

		    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		case 3:
		{
			SetPlayerPos(playerid, 219.5155,110.9922,999.0156);
			SetPlayerFacingAngle(playerid, 358.5468);
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pModel], 227.3882,110.0966,999.0156, 358.5468, -1, -1, -1, -1, -1, -1);

		    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		case 4:
		{
			SetPlayerPos(playerid, 219.5155,110.9922,999.0156);
			SetPlayerFacingAngle(playerid, 358.5468);
			SetSpawnInfo(playerid, NO_TEAM, PlayerData[playerid][pModel], 227.3882,110.0966,999.0156, 358.5468, -1, -1, -1, -1, -1, -1);

		    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
		    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
	}
	SendClientMessageEx(playerid, COLOR_YELLOW, "SERVER: está agora atribuído a cela %d", cell);
	return 1;
}

stock FullResetPlayerWeapons(playerid) {

	PlayerData[playerid][pGun1] = 0, PlayerData[playerid][pAmmo1] = 0;
	PlayerData[playerid][pGun2] = 0, PlayerData[playerid][pAmmo2] = 0;
	PlayerData[playerid][pGun3] = 0, PlayerData[playerid][pAmmo3] = 0;

	PlayerData[playerid][pPLicense]=0;
	PlayerData[playerid][pSLicense]=0;

	ResetWeapons(playerid);
}

CMD:tazer(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO: Você não é um policial.");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Ainda não começou a exercer funções.");

	if(TazerActive{playerid})
	{
		TazerActive{playerid} = false;
		RemoveWeapon(playerid, 23);
		if(GetPVarInt(playerid, "WeaponSlot2")) GivePlayerWeaponEx(playerid, 24, GetPVarInt(playerid, "WeaponSlot2"));
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s mantém a sua air taser no coldre.", ReturnName(playerid, 0));
		DeletePVar(playerid, "WeaponSlot2");
	}
	else
	{
		TazerActive{playerid} = true;
		if(PlayerData[playerid][pAmmo][2]) {
			SetPVarInt(playerid, "WeaponSlot2", PlayerData[playerid][pAmmo][2]);
		}
		GivePlayerWeaponEx(playerid, 23, 999999);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s retira sua air taser do coldre.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:balasborracha(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para agentes da polícia.");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Ainda não começou a exercer funções.");

	if(BeanbagActive{playerid})
	{
		BeanbagActive{playerid} = false;
		SetPlayerArmedWeapon(playerid, 0);
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s mantem a Remington está suas costas.", ReturnName(playerid, 0));
	}
	else if(GetPlayerWeapon(playerid) == 25)
	{
		BeanbagActive{playerid} = true;
		SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "** %s agarra um Remington 870 com uma bala de borracha.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_YELLOW,"SERVER: Muda-se para uma bala de borracha.");
	}
	else return SendClientMessage(playerid, COLOR_GREY, "É necessário um Remington 870 na mão para obter uma bala de borracha.");

	return 1;
}

/*CMD:vehiclefine(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO: Você não é um policial.");
	new plate[64],amount;
	if(sscanf(params,"s[64]d",plate, amount)) return SendSyntaxMessage(playerid, "/vehiclefine [Vehicle Plate] [Amount(R$1,000-R$4,000)]");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"You have not started to perform duties");

	new carid = -1;

	if((carid = FindVehicleByPlate(plate)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Vehicle not found");

	if(amount < 1000 || amount > 4000) return SendClientMessage(playerid, COLOR_LIGHTRED, "Number must be in between R$1,000 e R$4,000");

	if(CountVehicleTickets(carid) >= 10) return SendClientMessage(playerid, COLOR_LIGHTRED, "This vehicle has full fines (10)");


	SendClientMessageEx(playerid, COLOR_WHITE, "You wrote the order %s this vehicle has been completed.", FormatNumber(amount));
	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s write a order %s", ReturnName(playerid, 0), FormatNumber(amount));

	PlaceVehicleTicket(carid, amount);
	return 1;
}*/

/*CMD:vehiclefines(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid), string[256];

 	if(PlayerData[playerid][pPCarkey] != 9999 && CarData[PlayerData[playerid][pPCarkey]][carVehicle] == vehicleid && CarData[PlayerData[playerid][pPCarkey]][carOwner] == PlayerData[playerid][pID] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		for(new i = 0; i != MAX_CAR_TICKETS; i++)
		{
			if(CarData[PlayerData[playerid][pPCarkey]][carTicket][i] != 0) format(string, sizeof(string), "%s(order %d) price: R$%d\n", string, i, CarData[PlayerData[playerid][pPCarkey]][carTicket][i]);
		}

		Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Vehicle Tickets", string, "Ok", "Cancelar");
	}
	else SendClientMessage(playerid, COLOR_LIGHTRED, "You must be on a vehicle. called");

	return 1;
}*/

/*stock AssignVehicleTickets(vehicleid, tickets[])
{
	new tmp[MAX_CAR_TICKETS][32];
	explode(tmp, tickets, "|");
	for(new i = 0; i != MAX_CAR_TICKETS; i ++)
	{
	    CarData[vehicleid][carTicket][i] = strval(tmp[i]);
	}
}

stock FormatVehicleTickets(vehicleid)
{
	new upstr[256];
	new tmp[64];
	for(new b = 0; b != MAX_CAR_TICKETS; b ++)
	{
		if(b == 0)
			format(tmp,sizeof(tmp),"%d",CarData[vehicleid][carTicket][b]);
		else
			format(tmp,sizeof(tmp),"|%d",CarData[vehicleid][carTicket][b]);
		strins(upstr,tmp,strlen(upstr));
	}
	return upstr;
}*/

CMD:multar(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para agentes da polícia.");

	new userid,amount,reason[64];
	if(sscanf(params,"uds[64]",userid, amount, reason)) return SendSyntaxMessage(playerid, "/multa [PlayerID/PartOfName] [valor] [motivo]");
	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{ds[64]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED," não pode escrever as suas proprias multas,");
    if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD1, "Fine value must be greater than 0");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1," não começou a desempenhar funções");
	if(CountTickets(userid) == MAX_PLAYER_TICKETS) return SendClientMessage(playerid, COLOR_LIGHTRED, "não pode escrever as suas proprias multas.... (10)");

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s escreve uma multa de R$%s a %s devido a %s", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0), reason);
    SendClientMessageEx(playerid, COLOR_PURPLE, "[!] Você tomou uma multa de %s devido é '%s' multas", ReturnName(playerid, 0), reason);

	PlacePlayerFine(userid, playerid, amount, reason);
	return 1;
}

CMD:multas(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) {

		if(!ViewPlayerFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "não tem multas!");
	}
	else
	{
		new userid;
		if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/multas [PlayerID/PartOfName]");

        if(userid == playerid) {
			if(!ViewPlayerFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "não tem multas!");
        }
        else {

            if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Ainda não começou a exercer funções");

			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]", maskid);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
				}
			}
			if(!ViewPlayerFine(playerid, userid)) SendClientMessage(playerid, COLOR_LIGHTRED, "Este jogador não tem multas!");
		}
	}
	return 1;
}

CMD:multarveiculo(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Apenas para agentes da polícia.");

	new plate[64],amount,reason[64];
	if(sscanf(params,"s[64]ds[64]", plate, amount, reason)) return SendSyntaxMessage(playerid, "/veiculomulta [Placa] [valor] [motivo]");

	new carid = -1;
	if((carid = FindVehicleByPlate(plate)) == -1) return SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhuma Licença veicular encontrada.");
	if(CarData[carid][carOwner] == PlayerData[playerid][pID]) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode escrever suas proprias multas sem ver a Licença veicular.");
	if(amount <= 0) return SendClientMessage(playerid, COLOR_GRAD1,"As multas devem ser maiores do que 0");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Você ainda não começou a exercer suas funções");
	if(CountTicketsByName(CarData[carid][carOwnerName]) == MAX_PLAYER_TICKETS) return SendClientMessage(playerid, COLOR_LIGHTRED,"This player has full fines (10)");

	SendNearbyMessage(playerid, 15.0, COLOR_PURPLE, "* %s rasgar a multa e coloca-la no para-brisa do carro %s", ReturnName(playerid, 0), g_arrVehicleNames[CarData[carid][carModel] - 400]);

	new other = IsCharacterOnline(CarData[carid][carOwner]);
	if(other != -1) SendClientMessageEx(other, COLOR_LIGHTRED, "[ATENÇÃO!] Seu veiculo %s foi multado por %s. Motivo: '%s'. ((Veja os detalhes usando  /veiculomultas))", g_arrVehicleNames[CarData[carid][carModel] - 400], ReturnName(playerid, 0), reason);


	PlaceVehicleFine(carid, playerid, amount, reason);

	return 1;
}

CMD:veiculomultas(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) {

		if(!ViewVehicleFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem multa!");
	}
	else
	{
		new userid;
		if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/veiculomultas [PlayerID/PartOfName]");

        if(userid == playerid) {
			if(!ViewVehicleFine(playerid, playerid)) SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem multa!");
        }
        else {

            if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"ERRO: Você ainda não começou a exercer suas funções");

			if(userid == INVALID_PLAYER_ID) {
				new maskid[MAX_PLAYER_NAME];
				sscanf(params, "s[24]", maskid);
				if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
					return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
				}
			}
			if(!ViewVehicleFine(playerid, userid)) SendClientMessage(playerid, COLOR_LIGHTRED, "This player has no fine!");
		}
	}
	return 1;
}

stock PlacePlayerFine(playerid, copid, price, reason[]) {

	new query[512], clean_reason[64];
	//new exp = gettime() + 259200;

	mysql_escape_string(reason,clean_reason);

	format(query, sizeof(query), "INSERT INTO `fines` (`cop`, `addressee`, `agency`, `price`, `reason`, `type`) VALUES ('%s', '%s', '%s', '%d', '%s', '%d')", ReturnNameEx(copid), ReturnNameEx(playerid), Faction_GetName(copid), price, clean_reason, 0);
	mysql_query(dbCon, query);

	return 1;
}

stock PlaceVehicleFine(carid, copid, price, reason[]) {

	new query[512], clean_reason[64], name[MAX_PLAYER_NAME + 1];
	//new exp = gettime() + 259200;

	mysql_escape_string(reason,clean_reason);

	format(name, MAX_PLAYER_NAME, "%s", CarData[carid][carOwnerName]);
	for (new i = 0, len = strlen(name); i < len; i ++) if (name[i] == '_') name[i] = ' ';

	format(query, sizeof(query), "INSERT INTO `fines` (`cop`, `addressee`, `agency`, `price`, `reason`, `type`) VALUES ('%s', '%s', '%s', '%d', '%s', '%d')", ReturnNameEx(copid), name, Faction_GetName(copid), price, clean_reason, CarData[carid][carID]);
	mysql_query(dbCon, query);

	return 1;
}

stock ViewPlayerFine(playerid, targetid) {

	new str[1024];

	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` = 0", ReturnNameEx(targetid));
	mysql_query(dbCon, szQuery);

	if(cache_num_rows()) {

		new
			rows,
			fineid,
			fineprice,
			finereason[64],
			menu[10];

		cache_get_row_count(rows);

		for (new i = 0; i < rows; i ++) if(i < MAX_PLAYER_TICKETS)
		{
			cache_get_value_index_int(i, 0, fineid);
			cache_get_value_index_int(i, 5, fineprice);
			cache_get_value_index(i, 6, finereason);

			format(str, sizeof(str), "%s{FFFFFF}Multa #%03d [{7E98B6}R$%d{FFFFFF}] Motivo '%s'\n" ,str, fineid, fineprice, finereason);
			Dialog_Show(playerid,PlayerFines,DIALOG_STYLE_LIST,"Lista de Multas",str,"Detalhes","Fechar");

			format(menu, 10, "menu%d", i);
			SetPVarInt(playerid, menu, fineid);

			SetPVarInt(playerid, "PlayerFinesID", targetid);
		}
		return 1;
	}
	return 0;
}

stock ViewVehicleFine(playerid, targetid) {

	new str[1024];

	format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `type` != 0", ReturnNameEx(targetid));
	mysql_query(dbCon, szQuery);

	if(cache_num_rows()) {

		new
			rows,
			fineid,
			fineprice,
			finereason[64],
			menu[10];

		cache_get_row_count(rows);

		for (new i = 0; i < rows; i ++) if(i < MAX_PLAYER_TICKETS)
		{
			cache_get_value_index_int(i, 0, fineid);
			cache_get_value_index_int(i, 5, fineprice);
			cache_get_value_index(i, 6, finereason);

			format(str, sizeof(str), "%s{FFFFFF}Multa #%03d [{7E98B6}R$%d{FFFFFF}] Motivo '%s'\n" ,str, fineid, fineprice, finereason);
			Dialog_Show(playerid,VehicleFines,DIALOG_STYLE_LIST,"Lista de multas",str,"Detalhes","Fechar");

			format(menu, 10, "menu%d", i);
			SetPVarInt(playerid, menu, fineid);

			SetPVarInt(playerid, "PlayerFinesID", targetid);
		}
		return 1;
	}
	return 0;
}

Dialog:VehicleFines(playerid, response, listitem, inputtext[])
{
	if(response) {
	    new menu[10], str[512], targetid = GetPVarInt(playerid, "PlayerFinesID");
	    format(menu, 10, "menu%d", listitem);
	    new rows = GetPVarInt(playerid, menu);

		format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `id` = %d AND `type` != 0", ReturnNameEx(targetid), rows);
		mysql_query(dbCon, szQuery);

		if(cache_num_rows()) {

			new
				fineid,
				fineagency[64],
				fineaddressee[24],
				fineissuer[24],
				fineprice,
				finedate[64],
				finereason[64];

			cache_get_value_index_int(0, 0, fineid);
			cache_get_value_index(0, 1, fineissuer);
			cache_get_value_index(0, 2, fineaddressee);
			cache_get_value_index(0, 3, fineagency);
			cache_get_value_index(0, 4, finedate);
			cache_get_value_index_int(0, 5, fineprice);
			cache_get_value_index(0, 6, finereason);

			if(targetid == playerid) {
			    SetPVarInt(playerid, "PlayerFinesChooseID", fineid);
			    SetPVarInt(playerid, "PlayerFinesPrice", fineprice);
			    format(str, sizeof(str), "agências:\t%s\nEndereço:\t\t%s\nPolicial:\t%s\n\nNumero:\t\tR$%d\nMotivo:\t\t%s\nData:\t\t%s\n\nVocê tem 72 Horas para pagar a multa" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,PayFines,DIALOG_STYLE_MSGBOX,"Detalhes de multa",str,"Pagar","Fechar");
			}
			else {
				format(str, sizeof(str), "agências:\t%s\nEndereço:\t\t%s\nPolicial:\t%s\n\nNumero:\t\tR$%d\nMotivo:\t\t%s\nData:\t\t%s" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,PayFines,DIALOG_STYLE_MSGBOX,"Detalhes de multa",str,"Pagar","Fechar");
			}
			return 1;
		}
	}
	return 1;
}

Dialog:PlayerFines(playerid, response, listitem, inputtext[])
{
	if(response) {
	    new menu[10], str[512], targetid = GetPVarInt(playerid, "PlayerFinesID");
	    format(menu, 10, "menu%d", listitem);
	    new rows = GetPVarInt(playerid, menu);

		format(szQuery, sizeof(szQuery), "SELECT * FROM `fines` WHERE `addressee` = '%s' AND `id` = %d AND `type` = 0", ReturnNameEx(targetid), rows);
		mysql_query(dbCon, szQuery);

		if(cache_num_rows()) {

			new
				fineid,
				fineagency[64],
				fineaddressee[24],
				fineissuer[24],
				fineprice,
				finedate[64],
				finereason[64];

			cache_get_value_index_int(0, 0, fineid);
			cache_get_value_index(0, 1, fineissuer);
			cache_get_value_index(0, 2, fineaddressee);
			cache_get_value_index(0, 3, fineagency);
			cache_get_value_index(0, 4, finedate);
			cache_get_value_index_int(0, 5, fineprice);
			cache_get_value_index(0, 6, finereason);

			if(targetid == playerid) {
			    SetPVarInt(playerid, "PlayerFinesChooseID", fineid);
			    SetPVarInt(playerid, "PlayerFinesPrice", fineprice);
			    format(str, sizeof(str), "agências:\t%s\nEndereço:\t\t%s\nPolicial:\t%s\n\nNumero:\t\tR$%d\nMotivo:\t\t%s\nData:\t\t%s\n\nVocê tem 72 Horas para pagar a multa" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,PayFines,DIALOG_STYLE_MSGBOX,"Detalhes de multa",str,"Pagar","Fechar");
			}
			else {
				format(str, sizeof(str), "agências:\t%s\nEndereço:\t\t%s\nPolicial:\t%s\n\nNumero:\t\tR$%d\nMotivo:\t\t%s\nData:\t\t%s" ,fineagency, fineaddressee, fineissuer, fineprice, finereason, finedate);
				Dialog_Show(playerid,PayFines,DIALOG_STYLE_MSGBOX,"Detalhes de multa",str,"Pagar","Fechar");
			}
			return 1;
		}
	}
	return 1;
}

Dialog:PayFines(playerid, response, listitem, inputtext[])
{
    if(response) {

		if(PlayerData[playerid][pLocal] != 102) return SendClientMessage(playerid, COLOR_YELLOW, "Você não está no local correto.");

        new fineid = GetPVarInt(playerid,"PlayerFinesChooseID");
        new price = GetPVarInt(playerid,"PlayerFinesPrice");

		if(PlayerData[playerid][pCash] < price) return SendClientMessage(playerid,COLOR_GREY,"Você não tem dinheiro suficiente para pagar esta multa.!");

	    PlayerData[playerid][pCash]-=price;

	    SendClientMessageEx(playerid, COLOR_PURPLE, "[ ! ] Você pagou uma multa #%d no preço: R$%d", fineid, price);

		format(szQuery, sizeof(szQuery), "DELETE FROM `fines` WHERE `id` = %d", fineid);
	    mysql_query(dbCon, szQuery);
    }
	DeletePVar(playerid, "PlayerFinesChooseID");
	DeletePVar(playerid, "PlayerFinesPrice");

	return 1;
}

CMD:checarplaca(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO: Você não é um policial.");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Você ainda não começou a exercer suas funções");

	new bool:success;

	foreach(new i : sv_playercar)
	{
		if(IsPlayerNearBoot(playerid, CarData[i][carVehicle]))
		{
			SendClientMessageEx(playerid, COLOR_GREEN, "* verificação... Respondido: %s", CarData[i][carPlate]);
	       	success = true;
			return 1;
		}
		//else return SendClientMessage(playerid, COLOR_GREY,"You are not on the Licença veicular of the vehicle...");
	}

	if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Nenhum veículo está a sua volta.");

	return 1;
}

CMD:sirene(playerid, params[])
{
	new factiontype = GetFactionType(playerid);

	if (factiontype != FACTION_POLICE && factiontype != FACTION_SASD && factiontype != FACTION_MEDIC && factiontype != FACTION_GOV) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está autorizado a usar este comando.");
	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be on a vehicle.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Você deve estar em um veículo.");

    new vehicle = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehicle);

	if(factiontype == FACTION_POLICE || factiontype == FACTION_SASD)
	{
		if(model != 560 && model != 541 && model != 525 && model != 426 && model != 579) return SendClientMessage(playerid, COLOR_GREY, "A sirene suporta somente veículos do modelo Sultan/Bullet/Towtruck/Premier/Huntley");

		if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren]))
		{
			if(model == 560)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.225000,0.750000,0.449999, 0.000000, 0.000000, 0.000000);
			}
			if(model == 541)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.375000,0.524999,0.375000, 0.000000, 0.000000, 0.000000);
			}
			if(model == 426)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.524999,0.749999, 0.375000, 0.000000, 0.000000, 0.000000);
			}
			if(model == 525)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle, 0.0, -0.485, 1.36, 0.000000, 0.000000, 180.0);
			}
			if(model == 579)
			{
				CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
				AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle,  0.679999, 0.479999, 0.734999, 0.000000, 0.000000, 0.000000);
			}
            SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você pegou a sirene");
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você removeu a sirene");
			DestroyDynamicObject(CoreVehicles[vehicle][vSiren]);
		}
	}
	else if(factiontype == FACTION_MEDIC)
	{
		if(model != 489) return SendClientMessage(playerid, COLOR_GREY, "A sirene suporta somente veículos modelo, rancher.");
		if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren]))
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você pegou a sirene");
			CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle,  0.654999, 1.149999, 0.594999, 0.000000, 0.000000, 0.000000);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você removeu a sirene");
			DestroyDynamicObject(CoreVehicles[vehicle][vSiren]);
		}
	}
    else if(factiontype == FACTION_GOV)
	{
		if(model != 560) return SendClientMessage(playerid, COLOR_GREY, "A sirene suporta somente veículos modelo Sultan");
		if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren]))
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você colocou a sirene");
			CoreVehicles[vehicle][vSiren] = CreateDynamicObject(18646, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren], vehicle,  0.654999, 1.149999, 0.594999, 0.000000, 0.000000, 0.000000);
		}
		else
		{
			SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você removeu a sirene");
			DestroyDynamicObject(CoreVehicles[vehicle][vSiren]);
		}
	}
	return 1;
}

CMD:sirene2(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO: Você não é um policial.");

	if (!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be on a vehicle.");
    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GREY, "Você deve estar em um veículo.");

    new vehicle = GetPlayerVehicleID(playerid), model = GetVehicleModel(vehicle);

	if(model != 560 && model != 426) return SendClientMessage(playerid, COLOR_GREY, "A sirene suporta somente veículos modelo Sultan/Premier");

	new Float:vposX, Float:vposY, Float:vposZ, Float:vposA;
	new engine, lights, alarm, doors, bonnet, boot, objective;

	if(!IsValidDynamicObject(CoreVehicles[vehicle][vSiren2]))
	{
	    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você colocou a sirene");
		if(model == 560)
		{
			CoreVehicles[vehicle][vSiren2] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren2], vehicle, 0.000000, -1.289999, 0.394999, 0.000000, 0.000000, 0.000000);
		}
		if(model == 426)
		{
			CoreVehicles[vehicle][vSiren2] = CreateDynamicObject(19419, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1, -1, -1, 300.0);
			AttachDynamicObjectToVehicle(CoreVehicles[vehicle][vSiren2], vehicle, 0.000000, -1.669998, 0.349999, 0.000000, 0.000000, 0.000000);
		}



		foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicle) {

				GetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);
				GetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				GetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);

                DestroyVehicle(vehicleVariables[i][vVehicleScriptID]);
                vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000, 1);

				SetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				SetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);
				SetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);

                PutPlayerInVehicle(playerid, vehicleVariables[i][vVehicleScriptID], 0);

				return 1;
			}
		}

		for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(AdminSpawnedVehicles[i] == vehicle)
		{

			GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			GetVehiclePos(vehicle, vposX, vposY, vposZ);
			GetVehicleZAngle(vehicle, vposA);


			DestroyVehicle(AdminSpawnedVehicles[i]);
			AdminSpawnedVehicles[i] = CreateVehicle(model, vposX, vposY, vposZ, vposA, -1, -1, -1, 1);
			SetVehicleParamsEx(AdminSpawnedVehicles[i], engine, lights, alarm, doors, bonnet, boot, objective);

			PutPlayerInVehicle(playerid, AdminSpawnedVehicles[i], 0);
			return 1;
		}

	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você removeu a sirene");
		DestroyDynamicObject(CoreVehicles[vehicle][vSiren2]);

		foreach(new i : sv_servercar) {
			if(vehicleVariables[i][vVehicleScriptID] == vehicle) {

                GetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);
				GetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				GetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);

                DestroyVehicle(vehicleVariables[i][vVehicleScriptID]);
                vehicleVariables[i][vVehicleScriptID] = CreateVehicle(vehicleVariables[i][vVehicleModelID], vehicleVariables[i][vVehiclePosition][0], vehicleVariables[i][vVehiclePosition][1], vehicleVariables[i][vVehiclePosition][2], vehicleVariables[i][vVehicleRotation], vehicleVariables[i][vVehicleColour][0], vehicleVariables[i][vVehicleColour][1], 60000, 0);

				SetVehiclePos(vehicleVariables[i][vVehicleScriptID], vposX, vposY, vposZ);
				SetVehicleZAngle(vehicleVariables[i][vVehicleScriptID], vposA);
                SetVehicleParamsEx(vehicleVariables[i][vVehicleScriptID], engine, lights, alarm, doors, bonnet, boot, objective);

                PutPlayerInVehicle(playerid, vehicleVariables[i][vVehicleScriptID], 0);
				return 1;
			}
		}

		for(new i=0;i!=MAX_ADMIN_VEHICLES;i++) if(AdminSpawnedVehicles[i] == vehicle)
		{
		    GetVehicleParamsEx(vehicle, engine, lights, alarm, doors, bonnet, boot, objective);
			GetVehiclePos(vehicle, vposX, vposY, vposZ);
			GetVehicleZAngle(vehicle, vposA);

			DestroyVehicle(AdminSpawnedVehicles[i]);
			AdminSpawnedVehicles[i] = CreateVehicle(model, vposX, vposY, vposZ, vposA, -1, -1, -1, 0);
			SetVehicleParamsEx(AdminSpawnedVehicles[i], engine, lights, alarm, doors, bonnet, boot, objective);
			PutPlayerInVehicle(playerid, AdminSpawnedVehicles[i], 0);
			return 1;
		}
	}
	return 1;
}

CMD:selectobj(playerid)//reparar
{
	SelectObject(playerid);
	return 1;
}
forward FadeBlood(objectid, alpha);
public FadeBlood(objectid, alpha)
{
    alpha -= 5;

    if(alpha) {
        SetDynamicObjectMaterial(objectid, 0, -1, "não possui", "não possui", 0xFF0000 | (alpha << 24));
        SetTimerEx("FadeBlood", 50, false, "ii", objectid, alpha);
    }
    else {
        DestroyDynamicObject(objectid);
    }
}

forward DeleteObject(objectid);
public DeleteObject(objectid) DestroyObject(objectid);


stock ShowPlayerWeapons(playerid, toplayer)
{
	SendClientMessageEx(toplayer, COLOR_GREEN, "______________%s's Pacotes de Armas:______________", ReturnName(playerid, 0));
	for(new i = 0; i < MAX_PLAYER_WEAPON_PACKAGE; i+=3)
	{
		SendClientMessageEx(toplayer, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", i+1,GetWeaponInfo(playerid, i),i+2,GetWeaponInfo(playerid, i+1),i+3, GetWeaponInfo(playerid, i+2));
	}
}

stock ShowVehicleWeapons(playerid, carid)
{
	SendClientMessage(playerid, COLOR_GREEN, "______________veículo Pacotes de Armas:______________");
	/*for(new i = 0; i < MAX_CAR_WEAPON_PACKAGE; i+=3)
	{
	    if(i > 18) SendClientMessageEx(playerid, COLOR_WHITE, "[ %d. %s ][ %d. %s ]", 19,GetVehicleInfo(carid, 18),20,GetVehicleInfo(carid, 19));
		else SendClientMessageEx(playerid, COLOR_WHITE, "[ %d. %s ][ %d. %s ][ %d. %s ]", i+1,GetVehicleInfo(carid, i),i+2,GetVehicleInfo(carid, i+1),i+3, GetVehicleInfo(carid, i+2));

	}*/
	SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 1,GetVehicleInfo(carid, 0),2,GetVehicleInfo(carid, 1),3, GetVehicleInfo(carid, 2));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 4,GetVehicleInfo(carid, 3),5,GetVehicleInfo(carid, 4),6, GetVehicleInfo(carid, 5));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 7,GetVehicleInfo(carid, 6),8,GetVehicleInfo(carid, 7),9, GetVehicleInfo(carid, 8));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 10,GetVehicleInfo(carid, 9),11,GetVehicleInfo(carid, 10),12, GetVehicleInfo(carid, 11));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 13,GetVehicleInfo(carid, 12),14,GetVehicleInfo(carid, 13),15, GetVehicleInfo(carid, 14));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ] [ %d. %s ]", 16,GetVehicleInfo(carid, 15),17,GetVehicleInfo(carid, 16),18, GetVehicleInfo(carid, 17));
    SendClientMessageEx(playerid, COLOR_GRAD3, "[ %d. %s ] [ %d. %s ]", 19,GetVehicleInfo(carid, 18),20,GetVehicleInfo(carid, 19));
}

stock GetWeaponInfo(playerid, slot)
{
	new info[64];
	if(PlayerData[playerid][pPackageWP][slot] == 0) info = "Vazio";
	else format(info, sizeof(info), "%s (%d/%d)", GetWeaponPackageName(PlayerData[playerid][pPackageWP][slot]), PlayerData[playerid][pPackageAmmo][slot], GetWeaponPackage(g_aWeaponSlots[PlayerData[playerid][pPackageWP][slot]]));
	return info;
}

stock GetVehicleInfo(carid, slot)
{
	new info[64];
	if(CarData[carid][carPackageWP][slot] == 0) info = "Vazio";
	else format(info, sizeof(info), "%s (%d/%d)", GetWeaponPackageName(CarData[carid][carPackageWP][slot]), CarData[carid][carPackageAmmo][slot], GetWeaponPackage(g_aWeaponSlots[CarData[carid][carPackageWP][slot]]));
	return info;
}

stock GetWeaponPackage(slot) {
    new max_ammo = -1;
	switch(slot) {
	    //case 0,1,10,8: max_ammo = 20;
	    case 4, 5: max_ammo = 1500;
	    case 3,6: max_ammo = 1000;
	    case 2: max_ammo = 5000;
	    default: max_ammo = 20;
	}
	return max_ammo;
}

stock FormatPlayerWeapons(playerid)
{
	new wstr[256];
	new tmp[64];
	for(new a = 0; a < MAX_PLAYER_WEAPON_PACKAGE; a++)
	{
		if(a == 0)
		{
			format(tmp,sizeof(tmp),"%d=%d",PlayerData[playerid][pPackageWP][a],PlayerData[playerid][pPackageAmmo][a]);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",PlayerData[playerid][pPackageWP][a],PlayerData[playerid][pPackageAmmo][a]);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

stock AssignPlayerWeapons(playerid, str[])
{
	new wtmp[MAX_PLAYER_WEAPON_PACKAGE][64];
	explode(wtmp,str,"|");
	for(new z = 0; z != MAX_PLAYER_WEAPON_PACKAGE; z++)
	{
		new wtmp2[2][64];
		/*Has to be minus 1, don't touch*/
		explode(wtmp2,wtmp[z],"=");
		PlayerData[playerid][pPackageWP][z] = strval(wtmp2[0]);
		PlayerData[playerid][pPackageAmmo][z] = strval(wtmp2[1]);
	}
}

/*AssignPlayerDrugAddictions(playerid)
{
	new wtmp[MAX_DRUGS][32];
	str_replace(wtmp, str, "|");
	for(new z = 0; z != MAX_DRUGS; ++z)
	{
		PlayerData[playerid][pDrugAddiction][z] = strval(wtmp[z]);
	}
}*/

stock FormatVehicleWeapons(carid)
{
	new wstr[256];
	new tmp[64];
	for(new a = 0; a < MAX_CAR_WEAPON_PACKAGE; a++)
	{
		if(a == 0)
		{
			format(tmp,sizeof(tmp),"%d=%d",CarData[carid][carPackageWP][a],CarData[carid][carPackageAmmo][a]);
		}
		else
		{
			format(tmp,sizeof(tmp),"|%d=%d",CarData[carid][carPackageWP][a],CarData[carid][carPackageAmmo][a]);
		}
		strins(wstr,tmp,strlen(wstr));
	}
	return wstr;
}

stock AssignVehicleWeapons(carid, str[])
{
	new wtmp[MAX_CAR_WEAPON_PACKAGE][64];

	explode(wtmp,str,"|");
	for(new z = 0; z != MAX_CAR_WEAPON_PACKAGE; z++)
	{
		new wtmp2[2][64];
		/*Has to be minus 1, don't touch*/
		explode(wtmp2,wtmp[z],"=");
		CarData[carid][carPackageWP][z] = strval(wtmp2[0]);
		CarData[carid][carPackageAmmo][z] = strval(wtmp2[1]);
	}
}

CMD:meupacote(playerid, params[]) {
	new userid;

	if (sscanf(params, "u", userid))
	{
	    ShowPlayerWeapons(playerid, playerid);
	    return 1;
	}

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{S()[128]}", maskid);
		userid = GetPlayerMaskID(maskid);
	}

    ShowPlayerWeapons(playerid, userid);

	return 1;
}


CMD:guardarpacote(playerid, params[]) {
	return cmd_gp(playerid, params);
}

CMD:gp(playerid, params[]) {

	new slot, vehslot;
	if (sscanf(params, "dd", slot, vehslot))
	    return SendSyntaxMessage(playerid, "/guardarpacote [slot] [slot do veículo]");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um veículo.");


	new vehicleid = GetPlayerVehicleID(playerid), bool:success;

	if(slot <= 0 || slot >= MAX_PLAYER_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Suas armas não São válidas.");

	if(vehslot <= 0 || vehslot >= MAX_CAR_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Suas armas não São válidas.");

	slot--;
	vehslot--;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
            if(PlayerData[playerid][pPackageWP][slot] == 0)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem armas neste campo.");

            if(CarData[i][carPackageWP][vehslot] != 0)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "As armas neste veículo já São utilizadas.");

            CarData[i][carPackageWP][vehslot] = PlayerData[playerid][pPackageWP][slot];
            CarData[i][carPackageAmmo][vehslot] = PlayerData[playerid][pPackageAmmo][slot];

		 	PlayerData[playerid][pPackageWP][slot] = 0;
	    	PlayerData[playerid][pPackageAmmo][slot] = 0;

            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você armazenou %s com munições %d para serem colocadas em um veículo.", GetWeaponPackageName(CarData[i][carPackageWP][vehslot]), CarData[i][carPackageAmmo][vehslot]);

            Log_Write("logs/package.txt", "[%s] %s: put %s(%d) to car %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(CarData[i][carPackageWP][vehslot]), CarData[i][carPackageAmmo][vehslot], i, CarData[i][carID]);

            Player_SavePackage(playerid);
            Car_SavePackage(i);

			success = true;
			return 1;
		}
	}
    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Este comando sí está disponível para veículos particulares, Você está em um veículo público. (estático)");

	return 1;
}

CMD:pegarpacote(playerid, params[]) {
	return cmd_pg(playerid, params);
}

CMD:pg(playerid, params[]) {

	new vehslot;
	if (sscanf(params, "d", vehslot))
	    return SendSyntaxMessage(playerid, "/takeweapon [vehicle slot]");

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be on a vehicle.");

	new vehicleid = GetPlayerVehicleID(playerid), bool:success;

	if(vehslot <= 0 || vehslot >= MAX_CAR_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Your weapon slot is not valid.");

    vehslot--;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
            if(CarData[i][carPackageWP][vehslot] == 0)
                return SendClientMessage(playerid, COLOR_LIGHTRED, "No weapons found in this field of vehicle.");


			new bool:can_take;
			for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
			{
                if(PlayerData[playerid][pPackageWP][x] == 0) {
                    can_take = true;

		            PlayerData[playerid][pPackageWP][x] = CarData[i][carPackageWP][vehslot];
	             	PlayerData[playerid][pPackageAmmo][x] = CarData[i][carPackageAmmo][vehslot];

	             	CarData[i][carPackageWP][vehslot] = 0;
	             	CarData[i][carPackageAmmo][vehslot] = 0;

		            SendClientMessageEx(playerid, COLOR_GREEN, "[Package] You have picked up %s with %d ammo vehicle Appointment", GetWeaponPackageName(PlayerData[playerid][pPackageWP][x]), PlayerData[playerid][pPackageAmmo][x]);

		            Log_Write("logs/package.txt", "[%s] %s: take %s(%d) from car %d", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(PlayerData[playerid][pPackageWP][x]), PlayerData[playerid][pPackageAmmo][x], i);

		            Player_SavePackage(playerid);
		            Car_SavePackage(i);

					break;
                }
			}
			if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED,"You do not have a space remaining.");

			success = true;
			return 1;
		}
	}
    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: This command is only available for private vehicles, you are in a public vehicle (Static)");

	return 1;
}

CMD:pegartodospacotes(playerid, params[]) {
	return cmd_taw(playerid, params);
}

CMD:taw(playerid, params[]) {

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be on a vehicle.");

	new vehicleid = GetPlayerVehicleID(playerid), bool:success;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
			new can_take;

		    for(new vehslot = 0; vehslot != MAX_CAR_WEAPON_PACKAGE; vehslot++) {

				if(CarData[i][carPackageWP][vehslot] != 0) {

					for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
					{
		                if(PlayerData[playerid][pPackageWP][x] == 0) {

							can_take++;

				            PlayerData[playerid][pPackageWP][x] = CarData[i][carPackageWP][vehslot];
			             	PlayerData[playerid][pPackageAmmo][x] = CarData[i][carPackageAmmo][vehslot];

			             	CarData[i][carPackageWP][vehslot] = 0;
			             	CarData[i][carPackageAmmo][vehslot] = 0;

				            Log_Write("logs/package.txt", "[%s] %s: take %s(%d) from car %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(PlayerData[playerid][pPackageWP][x]), PlayerData[playerid][pPackageAmmo][x], i, CarData[i][carID]);

							break;
						}
					}
	            }
            }

            if(can_take) {
           		SendClientMessageEx(playerid, COLOR_GREEN, "[Package] You've picked up all the weapons with %d ammo Piece of vehicle", can_take);

	 			Player_SavePackage(playerid);
				Car_SavePackage(i);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED,"You do not have a space remaining or you cannot find a weapon from the vehicle.");

			success = true;
			return 1;
		}
	}
    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: This command is only available for private vehicles, you are in a public vehicle (Static)");

	return 1;
}

CMD:putallweapons(playerid, params[]) {
	return cmd_paw(playerid, params);
}

CMD:paw(playerid, params[]) {

	if(!IsPlayerInAnyVehicle(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "You must be on a vehicle.");

	new vehicleid = GetPlayerVehicleID(playerid), bool:success;

	foreach(new i : sv_playercar)
	{
		if(vehicleid == CarData[i][carVehicle])
		{
			new can_take;

		    for(new slot = 0; slot != MAX_PLAYER_WEAPON_PACKAGE; slot++) {

				if(PlayerData[playerid][pPackageWP][slot] != 0) {

				    for(new vehslot = 0; vehslot != MAX_CAR_WEAPON_PACKAGE; vehslot++) {

                        if(CarData[i][carPackageWP][vehslot] == 0) {

							can_take++;

				            CarData[i][carPackageWP][vehslot] = PlayerData[playerid][pPackageWP][slot];
				            CarData[i][carPackageAmmo][vehslot] = PlayerData[playerid][pPackageAmmo][slot];

						 	PlayerData[playerid][pPackageWP][slot] = 0;
					    	PlayerData[playerid][pPackageAmmo][slot] = 0;

				            Log_Write("logs/package.txt", "[%s] %s: put %s(%d) to car %d (SID:%d)", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(CarData[i][carPackageWP][vehslot]), CarData[i][carPackageAmmo][vehslot], i, CarData[i][carID]);
                            break;
						}
					}
				}
			}
			if(can_take) {
			    SendClientMessageEx(playerid, COLOR_GREEN, "[Package] You've kept all the weapons and ammo %d Pieces in the vehicle.", can_take);

	            Player_SavePackage(playerid);
	            Car_SavePackage(i);
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED,"The vehicle does not have a space remaining, or your weapon cannot be found.");

			success = true;
			return 1;
		}
	}
    if(!success) SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: This command is only available for private vehicles, you are in a public vehicle. (Static)");

	return 1;
}

CMD:venderpacote(playerid, params[]) {
	return cmd_vp(playerid, params);
}

CMD:vp(playerid, params[]) {

	new userid, slot;
	if (sscanf(params, "ud", userid, slot))
	    return SendSyntaxMessage(playerid, "/venderpacote [PlayerID/PartOfName] [slot]");

	if(userid == playerid)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode vende-la para si mesmo.!");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");

	if(slot <= 0 || slot >= MAX_PLAYER_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Seu slot de arma não é válido.");

    slot--;

	if(PlayerData[playerid][pPackageWP][slot] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "Sua arma não é encontrada nesta caixa.");

	new bool:can_take;

	for(new x = 0; x != MAX_PLAYER_WEAPON_PACKAGE; x++)
	{
		if(PlayerData[userid][pPackageWP][x] == 0) {

			can_take=true;

			PlayerData[userid][pPackageWP][x] = PlayerData[playerid][pPackageWP][slot];
			PlayerData[userid][pPackageAmmo][x] = PlayerData[playerid][pPackageAmmo][slot];

			PlayerData[playerid][pPackageWP][slot] = 0;
			PlayerData[playerid][pPackageAmmo][slot] = 0;

            SendClientMessageEx(playerid, COLOR_GREEN, "[Pacote] Você forneceu a %s com munição %d Match %s", GetWeaponPackageName(PlayerData[userid][pPackageWP][x]), PlayerData[userid][pPackageAmmo][x], ReturnName(userid, 0));
            SendClientMessageEx(userid, COLOR_GREEN, "[Pacote] Você recebe %s com munição %d Nomeação de %s", GetWeaponPackageName(PlayerData[userid][pPackageWP][x]), PlayerData[userid][pPackageAmmo][x], ReturnName(playerid, 0));

			Log_Write("logs/package.txt", "[%s] %s: vender %s(%d) a %s", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(PlayerData[userid][pPackageWP][x]), PlayerData[userid][pPackageAmmo][x], ReturnName(playerid));

            Car_SavePackage(userid);
            Car_SavePackage(playerid);

			break;
		}
	}
	if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não descansa a lacuna para sua arma.");
	return 1;
}

CMD:venderarma(playerid, params[]) {
	return cmd_va(playerid, params);
}

CMD:va(playerid, params[]) {

    if(PlayerData[playerid][pJob] != JOB_WPDEALER) return SendClientMessage(playerid, COLOR_GRAD2, "Você não é um Negociante de Armas");

	new userid, slot, emote[64];
	if (sscanf(params, "udS()[64]", userid, slot, emote))
	    return SendSyntaxMessage(playerid, "/vendearma [PlayerID/PartOfName] [slot] [emote]");

	if (IsAtBlackMarket(playerid))
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no mercado negro.");

	if(userid == playerid)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode vende-la para si mesmo!");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{dS()[64]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");

	if(slot <= 0 || slot >= MAX_PLAYER_WEAPON_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "Seu slot de arma não é válido.");

    slot--;

	if(PlayerData[playerid][pPackageWP][slot] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "Sua arma não é encontrada nesta caixa.");

	new gunid = PlayerData[playerid][pPackageWP][slot];
	new ammo = PlayerData[playerid][pPackageAmmo][slot];

	if(gunid == 47) {
        SetPlayerArmour(userid, 50);
    }
    else
    {
        GivePlayerValidWeapon(userid, gunid, ammo);
    }

	PlayerData[playerid][pPackageWP][slot] = 0;
	PlayerData[playerid][pPackageAmmo][slot] = 0;

    Car_SavePackage(playerid);
    SQL_SaveCharacter(userid);

	SendClientMessageEx(playerid, COLOR_GREEN, "Você deu %s e munições %d Nomeação com %s", GetWeaponPackageName(gunid), ammo, ReturnName(userid, 0));
  	SendClientMessageEx(userid, COLOR_GREEN, "Você recebe %s e munições %d Nomeação de %s", GetWeaponPackageName(gunid), ammo, ReturnName(playerid, 0));

	if(!strlen(emote)) SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s da %s com %s", ReturnName(playerid, 0), GetWeaponPackageName(gunid), ReturnName(userid, 0));
	else SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "> %s %s %s", ReturnName(playerid, 0), emote, ReturnName(userid, 0));

	Log_Write("logs/sellweapon.txt", "[%s] %s: sell %s(%d) to %s", ReturnDate(), ReturnName(playerid), GetWeaponPackageName(gunid), ammo, ReturnName(playerid));

	return 1;
}

Car_SavePackage(carid) {

	new
	    query[256];

	if(carid != -1)
	{
		format(query, sizeof(query), "UPDATE `cars` SET `carPackageWeapons` = '%s' WHERE `carID` = '%d'",
			FormatVehicleWeapons(carid),
			CarData[carid][carID]
		);

		return mysql_tquery(dbCon, query);
	}
	else {
		return 0;
	}
}

Player_SavePackage(playerid) {
	new
	    query[256];

	format(query, sizeof(query), "UPDATE `characters` SET `PackageWeapons` = '%s' WHERE `ID` = '%d'",
		FormatPlayerWeapons(playerid),
		PlayerData[playerid][pID]
	);

	return mysql_tquery(dbCon, query);
}

CMD:revogar(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"Somente para agentes policiais.");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Você precisa estar em serviço para usar teste comando.");

	new userid, type[24];

	if(sscanf(params,"us[24]", userid, type)) return SendSyntaxMessage(playerid, "/REVOGAR [playerid/PartOfName] [cnh, porte, armas]");

	if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode revogar seus documentos.");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 4.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: You are not near player.");

	if(!strcmp(type, "cnh", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s obtém a carteira de motorista de %s ", ReturnName(playerid, 0), ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_WHITE, "Sua carteira de habilitação foi revogada por %s", ReturnName(playerid, 0));
		PlayerData[userid][pCarLic] = 0;
		return 1;
	}
	else if(!strcmp(type, "porte", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s removeu o porte de %s ", ReturnName(playerid, 0), ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_WHITE, "Sua Licença de arma foi revogada por %s", ReturnName(playerid, 0));
		PlayerData[userid][pWepLic] = 0;
		PlayerData[userid][pCCWLic] = 0;
		return 1;
	}
	else if(!strcmp(type, "armas", true))
	{
		SendNearbyMessage(playerid, 10.0, COLOR_PURPLE, "* %s remove as armas de %s ", ReturnName(playerid, 0), ReturnName(userid, 0));
		SendClientMessageEx(userid, COLOR_WHITE, "Suas armas foram removidas por %s", ReturnName(playerid, 0));
        FullResetPlayerWeapons(userid);
		return 1;
	}
	else SendSyntaxMessage(playerid, "/revogar [playerid/PartOfName] [cnh, porte, armas]");

	return 1;
}

CMD:revistar(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO: Você não é um policial.");
	if(!PlayerData[playerid][pOnDuty]) return SendClientMessage(playerid, COLOR_GRAD1,"Você ainda não começou a exercer suas funções");

	new userid;

	if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/revistar [playerid/PartOfName]");

	if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não pode se encontrar.");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");


	if(FriskApprove[playerid] == 0)
	{
	    SendClientMessageEx(playerid, COLOR_YELLOW,"Você enviou um pedido de busca %s", ReturnName(userid, 0));
	    SendClientMessage(playerid,0xFF4444FF,"SERVER: Este jogador deve aprovar sua busca (/aceitarevista)");
	    SendClientMessageEx(userid, COLOR_YELLOW,"%s Quer encontrar, Você (/aceitarevista)", ReturnName(playerid, 0));
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "|___________Revista___________|");
		SendClientMessageEx(playerid, COLOR_WHITE, "[Revista] Você está atualmente revistando o %s", ReturnName(userid, 0));
		SendClientMessageEx(playerid, COLOR_WHITE, "[Revista] Dinheiro em especíe: R$%d", PlayerData[userid][pCash]);
		new Player_Weapons[13], Player_Ammos[13];
		for(new i = 1;i <= 12;i++)
		{
			GetPlayerWeaponData(userid,i,Player_Weapons[i],Player_Ammos[i]);

			if(Player_Weapons[i] != 0)
			{
				SendClientMessageEx(playerid,COLOR_LIGHTRED,"[Revistas] Armas: %s munições: %d", ReturnWeaponName(Player_Weapons[i]), Player_Ammos[i]);
			}
		}
		FriskApprove[playerid] = 0;
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "|__________________________|");

 		ShowPlayerWeapons(userid, playerid);


		new bool:count;
		for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
		{
			if(PlayerDrug[userid][i][drugQTY]>0) {
				count = true;
				break;
			}
		}
		SendClientMessageEx(playerid, COLOR_WHITE, "ï¿½ï¿½ï¿½Ê¾ï¿½Ô´: %s", count ? ("ï¿½ï¿½") : ("ï¿½ï¿½ï¿½ï¿½ï¿½"));
	}
	return 1;
}

CMD:aceitarevista(playerid, params[])
{
	new userid;

	if(sscanf(params,"u",userid)) return SendSyntaxMessage(playerid, "/aceitarevista [playerid/PartOfName]");

	if(userid == playerid) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não consegue se revistar.");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{s[128]}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto do jogador.");

	FriskApprove[userid] = 1;

    SendClientMessageEx(userid,0xFF4444FF,"SERVER: O jogador %s lhe deu a permissão de revista, utilize o comando novamente.", ReturnName(playerid, 0));
    SendClientMessageEx(playerid,COLOR_YELLOW,"Você permite que o(a) %s te reviste.", ReturnName(userid, 0));
    return 1;
}


CMD:criarportao(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new objectid, modelid, faction, name[64], Float:X, Float:Y, Float:Z;
	if(sscanf(params,"dds[64]",modelid,faction,name)) return SendSyntaxMessage(playerid, "/criarportao [modelid] [Faction(/viewfactions)] [Descrição]");

	GetPlayerPos(playerid, X, Y, Z);

    if((objectid = Iter_Free(sv_movedoors)) != -1) {

		Doors[objectid][doorModel] = modelid;
		Doors[objectid][doorPosX] = X;
		Doors[objectid][doorPosY] = Y;
		Doors[objectid][doorPosZ] = Z;
		Doors[objectid][doorPosRX] = 0.0;
		Doors[objectid][doorPosRY] = 0.0;
		Doors[objectid][doorPosRZ] = 0.0;
		Doors[objectid][doorInterior] = GetPlayerInterior(playerid);
		Doors[objectid][doorFaction] = faction;
		Doors[objectid][doorOpened] = 0;
		Doors[objectid][doorVirtualWorld] = GetPlayerVirtualWorld(playerid);

		format(Doors[objectid][doorName], 64, "%s", name);
		Doors[objectid][doorObject] = CreateDynamicObject(modelid, X, Y, Z, 0.0, 0.0, 0.0, Doors[objectid][doorVirtualWorld], Doors[objectid][doorInterior], -1, 200.0);

		AddMoveDoorToFile(objectid, Doors[objectid][doorModel], Doors[objectid][doorFaction], Doors[objectid][doorInterior], Doors[objectid][doorVirtualWorld], Doors[objectid][doorPosX], Doors[objectid][doorPosY], Doors[objectid][doorPosZ], Doors[objectid][doorName]);

		SendClientMessageEx(playerid, COLOR_GREEN, "Novas portas deslizantes foram adicionadas [DoorID: %d, ModelID: %d, Descrição: %s]", objectid, modelid, Doors[objectid][doorName]);

		Iter_Add(sv_movedoors, objectid);
	}
	return 1;
}

CMD:movimentoportao(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new objectid, doorid, name[64];
	if(sscanf(params,"ds[64]",doorid,name)) return SendSyntaxMessage(playerid, "/movimentoportao [doorid] [Descrição]");
	if(!Iter_Contains(sv_movedoors, doorid)) return SendClientMessage(playerid, COLOR_WHITE, "ERRO: Portão inválido.");

	if((objectid = Iter_Free(sv_movedoors)) != -1) {

		Doors[objectid][doorModel] = Doors[doorid][doorModel];
		Doors[objectid][doorPosX] = Doors[doorid][doorPosX];
		Doors[objectid][doorPosY] = Doors[doorid][doorPosY];
		Doors[objectid][doorPosZ] = Doors[doorid][doorPosZ];
		Doors[objectid][doorPosRX] = Doors[doorid][doorPosRX];
		Doors[objectid][doorPosRY] = Doors[doorid][doorPosRY];
		Doors[objectid][doorPosRZ] = Doors[doorid][doorPosRZ];
		Doors[objectid][doorInterior] = Doors[doorid][doorInterior];
		Doors[objectid][doorFaction] = Doors[doorid][doorFaction];
		Doors[objectid][doorOpened] = Doors[doorid][doorOpened];
		Doors[objectid][doorVirtualWorld] = Doors[doorid][doorVirtualWorld];

		format(Doors[objectid][doorName], 64, "%s", name);

		Doors[objectid][doorObject] = CreateDynamicObject(Doors[objectid][doorModel], Doors[objectid][doorPosX], Doors[objectid][doorPosY], Doors[objectid][doorPosZ], Doors[objectid][doorPosRX], Doors[objectid][doorPosRY], Doors[objectid][doorPosRZ], Doors[objectid][doorVirtualWorld], Doors[objectid][doorInterior], -1, 200.0);

		AddMoveDoorToFile(objectid, Doors[objectid][doorModel], Doors[objectid][doorFaction], Doors[objectid][doorInterior], Doors[objectid][doorVirtualWorld], Doors[objectid][doorPosX], Doors[objectid][doorPosY], Doors[objectid][doorPosZ], Doors[objectid][doorName]);

		SendClientMessageEx(playerid, COLOR_GREEN, "A nova porta deslizante foi copiada [DoorID: %d, ModelID: %d, Descrição: %s]", objectid, Doors[objectid][doorModel], Doors[objectid][doorName]);

		Iter_Add(sv_movedoors, objectid);
	}
	return 1;
}

CMD:deletarportao(playerid,params[])
{
	new objectid;

	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	if(sscanf(params,"d",objectid)) return SendSyntaxMessage(playerid, "/deletarportao [doorid]");
	if(Iter_Contains(sv_movedoors, objectid))
	{
		format(szQuery, sizeof(szQuery), "DELETE FROM `movedoors` WHERE `id` = %d",Doors[objectid][doorID]);
		mysql_tquery(dbCon, szQuery, "OnMoveDoorRemove", "i", objectid);

		SendClientMessageEx(playerid, COLOR_YELLOW, "Você deletou o portão: %d!",objectid);

		Iter_Remove(sv_movedoors, objectid);
	}
	else
	{
		SendClientMessage(playerid, -1,"ERRO: The specified sliding door was not found!");
	}
	return 1;
}

CMD:editarportao(playerid,params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new objectid, type, input[64];

	if(sscanf(params,"ddS()[64]",objectid, type, input)) return SendSyntaxMessage(playerid, "/editarportao [doorid] [tipo(1-Objeto,2-Movimento,3-Velocidade,4-Nome,5-Facção)]");

	if(!Iter_Contains(sv_movedoors, objectid) && !IsValidDynamicObject(Doors[objectid][doorObject])) return SendClientMessage(playerid, -1,"ERRO: Você especificou um portão inválido!");

	if(type == 1)
	{
		if(GetPVarInt(playerid, "EditingMoveDoor") == 1) return SendClientMessage(playerid, COLOR_FADE1, "Você está editando.");
		SetPVarInt(playerid, "EditingMoveDoor", 1);
		SetPVarInt(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, Doors[objectid][doorObject]);
	}
	else if(type == 2)
	{
		if(GetPVarInt(playerid, "EditingMoveDoorMove") == 1) return SendClientMessage(playerid, COLOR_FADE1, "You are editing");
		SetPVarInt(playerid, "EditingMoveDoorMove", 1);
		SetPVarInt(playerid, "ObjectEditing", objectid);
		EditDynamicObject(playerid, Doors[objectid][doorObject]);
	}
	else if(type == 3)
	{
	    if(strlen(input)) {
		    new Float:speed = floatstr(input);

			Doors[objectid][doorOpenSpeed] = speed;
			format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `openspeed` = %f WHERE `id` = %d", speed, Doors[objectid][doorID]);
			mysql_query(dbCon, szQuery);
	      	SendClientMessageEx(playerid, COLOR_GREEN,"You modified the speed of the opening %.2f !", speed);
      	}
      	else SendSyntaxMessage(playerid, "/editarportao %d 3 [velocidade]", objectid);
	}
	else if(type == 4)
	{
	    if(strlen(input)) {
		    new clean_name[64];
			format(Doors[objectid][doorName], 64, "%s", input);
			mysql_escape_string(input,clean_name);
			format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `openspeed` = '%s' WHERE `id` = %d", clean_name, Doors[objectid][doorID]);
			mysql_query(dbCon, szQuery);
	      	SendClientMessageEx(playerid, COLOR_GREEN,"You modified the sliding door name %s !", input);
		}
		else SendSyntaxMessage(playerid, "/editarpotao %d 4 [nome]", objectid);
	}
	else if(type == 4)
	{
	    if(strlen(input)) {
			new faction = strval(input);
			if(faction && faction < MAX_FACTIONS || faction == -1) {

				format(szQuery, sizeof(szQuery), "UPDATE `movedoors` SET `faction` = '%d' WHERE `id` = %d", faction, Doors[objectid][doorID]);
				mysql_query(dbCon, szQuery);

				if(faction != -1) SendClientMessageEx(playerid, COLOR_GREEN,"You are correct that the sliding door is only available %s !", FactionData[faction][factionName]);
		      	else SendClientMessage(playerid, COLOR_GREEN,"You have modified the sliding doors available to everyone !");
	      	}
		}
		else SendSyntaxMessage(playerid, "/editarportao %d 4 [facçãoid]", objectid);
	}
	return 1;
}

CMD:portaoproximo(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new
		Float:fDistance[2] = {99999.0, 0.0},
		i = -1,
		tt[128]
	;

	foreach(new x: sv_movedoors)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, Doors[x][doorPosX], Doors[x][doorPosY], Doors[x][doorPosZ]);

		if (fDistance[1] < fDistance[0])
		{
			fDistance[0] = fDistance[1];
			i = x;
		}
	}

	if(i != -1 && fDistance[0] < 5) {
		format(tt, sizeof(tt), "Você está no portão [Normal ID: %d] [MySQL ID: %d]", i,Doors[i][doorID]);
		SendClientMessage(playerid, -1, tt);
		return 1;
	}
	return 1;
}

CMD:mostrarportoes(playerid, params[])//observar
{
	if(PlayerData[playerid][pAdmin] < 1337 && PlayerData[playerid][pPropertyTeam] < 1)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");

	new string[2048];

	foreach(new i: sv_movedoors)
	{
		format(string, sizeof(string), "%s\n%d)%s" ,string, i, Doors[i][doorName]);
	}
	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST,"Admin Move Objects:",string,"O","K");
	return 1;
}

//==============================================

stock ChargePerson(playerid)
{
	new driver = GetVehicleDriver(gPassengerCar[playerid]);
	if(PlayerData[playerid][pCash] < TaxiMoney[playerid])
	{
		if(driver != INVALID_PLAYER_ID) {
			SendClientMessageEx(driver, COLOR_WHITE, "%s não há dinheiro suficiente para pagar a tarifa.", ReturnName(playerid, 0));
			TaxiMade[driver] -= TaxiMoney[playerid];
		}
		TaxiMoney[playerid] = 0;
	}
	else
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "[TAXI]: Você paga todas as tarifas: R$%d", TaxiMoney[playerid]);

		PlayerData[playerid][pCash]-=TaxiMoney[playerid];

		if(driver != INVALID_PLAYER_ID) {
			PlayerData[driver][pCash]+=TaxiMoney[playerid];
			TaxiMade[driver] -= TaxiMoney[playerid];
		}

		TaxiMoney[playerid] = 0;
	}
}

CMD:tempo(playerid, params[])
{
	new time, msg[128];
	if(PlayerData[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params, "d", time)) return SendSyntaxMessage(playerid, "/tempo [time] (0-23)");
	SetWorldTime(time);
	format(msg, sizeof(msg), "O tempo está mudando %d:00", time);
	SendClientMessageToAll(COLOR_GRAD1, msg);
	return 1;
}

CMD:clima(playerid, params[])
{
	new weather;
	if(PlayerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params, "d", weather)) return SendSyntaxMessage(playerid, "/clima [weatherid]");
	if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "oS ids do climas vai de 0 a 45."); return 1; }
	SetPlayerWeather(playerid, weather);
	SendClientMessage(playerid, COLOR_GREY, "clima alterado!");
	return 1;
}

CMD:climatodos(playerid, params[])
{
	new weather;
	if(PlayerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não está autorizado.");
	if(sscanf(params, "d", weather)) return SendSyntaxMessage(playerid, "/climatodos [weatherid]");
	if(weather < 0||weather > 45) { SendClientMessage(playerid, COLOR_GREY, "oS ids do climas vai de 0 a 45."); return 1; }
	SetWeather(weather);
	SendClientMessage(playerid, COLOR_GREY, "O clima esta mudando para todos!");
	return 1;
}

cl_DressHoldWeapon(playerid, weaponid = 0) {

	RemovePlayerAttachedObject(playerid, FREESLOT5);
	RemovePlayerAttachedObject(playerid, FREESLOT6);
	RemovePlayerAttachedObject(playerid, FREESLOT7);
	RemovePlayerAttachedObject(playerid, FREESLOT8);
	RemovePlayerAttachedObject(playerid, FREESLOT9);

	for (new i = 0; i < 13; i ++) {
		if (PlayerData[playerid][pGuns][i] && PlayerData[playerid][pGuns][i] != weaponid) {
			new slot = g_aWeaponAttach[PlayerData[playerid][pGuns][i]];
			if(slot != -1 && PlayerAttachWeapon[playerid][slot][awHide] == 0) {
                if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT5)) SetPlayerAttachedObject(playerid, FREESLOT5, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
			    else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT6)) SetPlayerAttachedObject(playerid, FREESLOT6, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
			    else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT7)) SetPlayerAttachedObject(playerid, FREESLOT7, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
			    else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT8)) SetPlayerAttachedObject(playerid, FREESLOT8, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
			    else if(!IsPlayerAttachedObjectSlotUsed(playerid, FREESLOT9)) SetPlayerAttachedObject(playerid, FREESLOT9, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
				/*switch(g_aWeaponAttachSlots[PlayerData[playerid][pGuns][i]]) {
					case 1: SetPlayerAttachedObject(playerid, FREESLOT5, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					case 2: SetPlayerAttachedObject(playerid, FREESLOT6, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					case 3: SetPlayerAttachedObject(playerid, FREESLOT7, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					case 4: SetPlayerAttachedObject(playerid, FREESLOT8, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
					case 5: SetPlayerAttachedObject(playerid, FREESLOT9, GetGunObjectID(PlayerData[playerid][pGuns][i]), PlayerAttachWeapon[playerid][slot][awBone], PlayerAttachWeapon[playerid][slot][aPx], PlayerAttachWeapon[playerid][slot][aPy], PlayerAttachWeapon[playerid][slot][aPz], PlayerAttachWeapon[playerid][slot][aPrx], PlayerAttachWeapon[playerid][slot][aPry], PlayerAttachWeapon[playerid][slot][aPrz], 1, 1, 1);
				}*/
	  		}
		}
	}
	return 1;
}

CMD:autorizartatico(playerid, params[])
{
	new iPlayerID;

	if (sscanf(params, "u", iPlayerID))
		return SendSyntaxMessage(playerid, "/autorizartatico [PlayerID/PartOfName]");

	if(iPlayerID == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é um oficial da polícia.");

	if (!IsPlayerNearPlayer(playerid, iPlayerID, 15.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto de jogar.");

	if (PlayerData[playerid][pFactionRank] <= 2)
	{
		if(PlayerData[iPlayerID][pFaction] == PlayerData[playerid][pFaction])
		{
			PlayerData[iPlayerID][pSwat] = 1;
			SendClientMessageEx(iPlayerID, COLOR_LIGHTBLUE, "* %s %s concedido a Você a autorização para uso de fuzis.", Faction_GetRank(playerid), ReturnName(playerid, 0));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Você concedeu é autorização para uso de fuzis para %s", ReturnName(iPlayerID, 0));
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não é o mesmo que Você. Você não é o lider.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é o lider.");
	return 1;
}

CMD:removertatico(playerid, params[])
{
	new iPlayerID;
	if (sscanf(params, "u", iPlayerID))
		return SendSyntaxMessage(playerid, "/removertatico [PlayerID/PartOfName]");

	if(iPlayerID == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((iPlayerID = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_SASD) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é um oficial da polícia.");

	if (!IsPlayerNearPlayer(playerid, iPlayerID, 5000000000.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO: Você não está perto de jogar.");

	if (PlayerData[playerid][pFactionRank] <= 3)
	{
		if(PlayerData[iPlayerID][pFaction] == PlayerData[playerid][pFaction])
		{
			PlayerData[iPlayerID][pSwat] = 0;
			SendClientMessageEx(iPlayerID, COLOR_LIGHTBLUE, "* %s %s removeu a permissão de pegar armamento pessado.", Faction_GetRank(playerid), ReturnName(playerid, 0));
			SendClientMessageEx(playerid, COLOR_LIGHTBLUE, "* Você foi removido a unidade tática, %s", ReturnName(iPlayerID, 0));
		}
		else return SendClientMessage(playerid, COLOR_LIGHTRED, "O jogador não é o mesmo que Você. Você não é o lider.");
	}
	else return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não é o lider.");
	
	return 1;
}
DRUG_PACKAGE_OBJECT(); public DRUG_PACKAGE_OBJECT()
{
	new rows;
	cache_get_row_count(rows);

    if(!rows)return 1;

	for(new i; i < rows; i++)
	{
		new objectid, data[e_objectDrug];

		cache_get_value_name_int(i, "drugSID", data[drugSID]);
		cache_get_value_name_int(i, "drugOwner", data[drugOwner]);
		cache_get_value_name_int(i, "drugObj", data[drugObj]);
		cache_get_value_name_float(i, "drugObjectX", data[drugObjectX]);
		cache_get_value_name_float(i, "drugObjectY", data[drugObjectY]);
		cache_get_value_name_float(i, "drugObjectZ", data[drugObjectZ]);
		cache_get_value_name_float(i, "drugObjectRX", data[drugObjectRX]);
		cache_get_value_name_float(i, "drugObjectRY", data[drugObjectRY]);
		cache_get_value_name_float(i, "drugObjectRZ", data[drugObjectRZ]);
		cache_get_value_name_int(i, "drugObjectWorld", data[drugObjectWorld]);
		cache_get_value_name_int(i, "drugObjectInt", data[drugObjectInt]);

		objectid = CreateDynamicObject(DrugObject[data[drugObj]][DRUGOBJECT_MODEL], data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ], data[drugObjectWorld], data[drugObjectInt], -1, 200.0);
		Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

		format(szQuery, sizeof(szQuery), "SELECT * FROM `drugs_object` WHERE `objectID` = '%d'", data[drugSID]);
		mysql_tquery(dbCon, szQuery, "DRUG_LOAD_OBJECT", "ii", objectid, data[drugSID]);
	}

	return 1;
}

DRUG_LOAD_OBJECT(objectid, objectsid); public DRUG_LOAD_OBJECT(objectid, objectsid)
{
	new rows;
	cache_get_row_count(rows);

    if(!rows) {
		DrugObject_Delete(objectid, objectsid);
		return 1;
	}

	for(new i; i < rows; i++)
	{
		new itemslot = GetFreeItemDrugSlot();
		if(itemslot != -1) {

			cache_get_value_name_int(i, "drugID", ItemDrug[itemslot][drugID]);
			cache_get_value_name_int(i, "drugType", ItemDrug[itemslot][drugType]);
			cache_get_value_name_float(i, "drugQTY", ItemDrug[itemslot][drugQTY]);
			cache_get_value_name_int(i, "drugStrength", ItemDrug[itemslot][drugStrength]);
			cache_get_value_name_int(i, "drugPackage", ItemDrug[itemslot][drugPackage]);
			ItemDrug[itemslot][drugFore] = objectsid;
		}
	}
	return 1;
}

/*CMD:creategraffiti(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] >= 4) {
		new	Float:X[4];
		GetPlayerPos(playerid, X[0], X[1], X[2]);
		GetPlayerFacingAngle(playerid, X[3]);

		new rdmodel = random(sizeof(graffiti_SprayTag));
		GraffiObj[playerid] = CreateDynamicObject(graffiti_SprayTag[rdmodel][0], X[0], X[1], X[2], 0.0, 0.0, X[3]+90, 0, 0, playerid, 200 ); // Creating the graffiti for player
	    format(GraffiName[playerid], 60, graffiti_SprayTag[rdmodel][1]);
		sprayammountch[playerid] = strlen(graffiti_SprayTag[rdmodel][1]);
		GraffiModel[playerid] = graffiti_SprayTag[rdmodel][0];

		EditDynamicObject( playerid, GraffiObj[playerid]);
		SetPVarInt( playerid, "GraffitiCreating",1 );
	}
	return 0;
}*/
/*
CMD:destroygraffiti(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] >= 4) {
        new string[70];
		for(new ID = 0; ID != MAX_GRAFFITI; ID++)
		{
			if (IsPlayerInRangeOfPoint(playerid, 3.0, graff_Info[ID][Xpos], graff_Info[ID][Ypos], graff_Info[ID][Zpos])) {
				format(string, sizeof(string), "/Graffitis/%d.ini", ID);
			    if(dini_Exists(string))
			    {
					strmid(graff_Info[ID][graffname] , "", 0, 60, 60);
					strmid(graff_Info[ID][grafffont] , "", 0, 16, 16);
					strmid(graff_Info[ID][graffcreator] , "", 0, MAX_PLAYER_NAME + 1, MAX_PLAYER_NAME + 1);

					graff_Info[ID][graffmodel] = 0;
					graff_Info[ID][Xpos] = 0.0;
					graff_Info[ID][Ypos] = 0.0;
					graff_Info[ID][Zpos] = 0.0;
					graff_Info[ID][XYpos] = 0.0;
					graff_Info[ID][YYpos] = 0.0;
					graff_Info[ID][ZYpos] = 0.0;

			        dini_Remove(string);
			    }
			}
		}
	}
	return 0;
}*/

CMD:graffiti(playerid, params[])
{
	if(PlayerData[playerid][pSprayPermission] || GetFactionType(playerid) == FACTION_GANG) {
		Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Menu:", "Escolha um graffiti\nPrecisa de texto personalizado?\nEscolha a fonte (Para texto personalizado)", "Selecionar", "<<");
	}
	else {
	    SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está autorizado a usar esta função.");
	}
	return 1;
}

Dialog:Graffiti_Menu(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
			case 0: {
                Dialog_Show(playerid, Graffiti_PickImage, DIALOG_STYLE_LIST, "Escolha um graffiti:", "Grove St 4 Life\nSeville B.V.V.D Families\nVarrio Los Aztecas\nKilo\nSan Fiero Rifa\nTemple Drive Ballas\nSão Paulo Vargos\nFront Yard Balas\nRolling Heights Ballas", "Selecionar", "<<");
			}
//			case 1: {
//                Dialog_Show(playerid, Graffiti_PickCustomText, DIALOG_STYLE_INPUT, "Precisa de texto personalizado?\nMax 60 caracteres", "Selecionar", "<<");
//			}
			case 1: {
                Dialog_Show(playerid, Graffiti_PickFont, DIALOG_STYLE_LIST, "Escolha a fonte (Para texto personalizado):", "Comic Sans\nLevi Brush\nDripping\nDiploma", "Selecionar", "<<");
			}
		}
	}
	return 1;
}

Dialog:Graffiti_PickImage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		SendClientMessageEx(playerid, COLOR_YELLOW, "Você escolhe uma imagem: %s", graffiti_SprayTag[listitem][1]);
		format(GraffiName[playerid], 60, graffiti_SprayTag[listitem][1]);
		GraffiModel[playerid] = graffiti_SprayTag[listitem][0];
		sprayammountch[playerid] = 5;

		Dialog_Show(playerid, Graffiti_PickImage, DIALOG_STYLE_LIST, "Escolha um graffiti:", "Grove St 4 Life\nSeville B.V.V.D Families\nVarrio Los Aztecas\nKilo\nSan Fiero Rifa\nTemple Drive Ballas\nSão Paulo Vargos\nFront Yard Balas\nRolling Heights Ballas", "Selecionar", "<<");
	}
	else {
	    Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Menu:", "Escolha um graffiti\nPrecisa de texto personalizado?\nEscolhya a fonte", "Selecionar", "<<");
	}
	return 1;
}

Dialog:Graffiti_PickCustomText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if(strlen(inputtext) <= 60 && strlen(inputtext) > 0) {
		    SendClientMessage(playerid, COLOR_YELLOW, "Você já preparou suas mensagens.");
		    SendClientMessage(playerid, COLOR_WHITE, inputtext);
		    sprayammountch[playerid] = strlen(inputtext);
		    format(GraffiName[playerid], 60, inputtext);
		    GraffiModel[playerid] = 19482;
		}
		else {
		    SendClientMessage(playerid, COLOR_YELLOW, "O texto não deve ser maior que 60 caracteres.");
		}
	    Dialog_Show(playerid, Graffiti_PickCustomText, DIALOG_STYLE_INPUT, "Precisa de texto personalizado?:", "{FF8282}HINT:{FFFFFF}\n-\tWe use special BBCode templates to format messages using (c) system Use (n) to the new line\n\t\t(bl:Blue,(w):White,(y):Yellow,(g):Green\n\t\t(b):black, Watch out for the use of colors with Thai characters\n\t\tUSE: ??????(y)??(b)??Yellow????????????????????\n-\t????????????Â¹????????? ?\n???? 60 ???????", "Selecionar", "<<");
	}
	else {
	    Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Main Menu:", "Select a graphic\nPrecisa de texto personalizado?\nSelect a font (For custom messages)", "Selecionar", "<<");
	}
	return 1;
}

Dialog:Graffiti_PickFont(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch(listitem)
		{
			case 0: {
                SendClientMessage(playerid, COLOR_YELLOW, "Você seleciona a fonte Comic Sans");
                format(GraffiFont[playerid], 24, "Comic Sans MS");
			}
			case 1: {
                SendClientMessage(playerid, COLOR_YELLOW, "Você seleciona a fonte Levi Brush");
                format(GraffiFont[playerid], 24, "LeviBrush");
			}
			case 2: {
				SendClientMessage(playerid, COLOR_YELLOW, "Você seleciona a fonte Dripping");
				format(GraffiFont[playerid], 24, "a dripping marker");
			}
			case 3: {
				SendClientMessage(playerid, COLOR_YELLOW, "Você seleciona a fonte Diploma");
				format(GraffiFont[playerid], 24, "Diploma");
			}
		}
		Dialog_Show(playerid, Graffiti_PickFont, DIALOG_STYLE_LIST, "Alterar a fonte:", "Comic Sans\nLevi Brush\nDripping\nDiploma", "Selecionar", "<<");
	}
	else {
	    Dialog_Show(playerid, Graffiti_Menu, DIALOG_STYLE_LIST, "Main Menu:", "Escolha um graffiti\nPrecisa de texto personalizado?\nAlterar fonte", "Selecionar", "<<");
	}
	return 1;
}

/*forward killgr(playerid);
public killgr(playerid)
{
    sprayammount[playerid] = 0;
   	DeletePVar( playerid,"GraffitiCreating" ); // Deleting the PVAR afterwards
	return 1;
}*/

/*
forward spraying(playerid);
public spraying( playerid ) // This Callback gets called evrysecond
{
    if(IsPlayerInRangeOfPoint(playerid, 3.0,GraffiPos[playerid][0],GraffiPos[playerid][1], GraffiPos[playerid][2]))
    {
		sprayammount[playerid] ++; //Evry second it gets called player gets ONE point

		if( sprayammount[playerid] == sprayammountch[playerid] ) // If player reached his points
		{
			KillTimer( spraytimer[playerid] ); // We kill this timer as player reached his points
	    	creategraff(playerid); // We now call creategraff and the graffiti will be created
	 		return 1;
		}
		new string[64];
		format( string, sizeof(string),"~r~SPRAYING~n~ ~w~&%d]", sprayammountch[playerid]-sprayammount[playerid]); // <----
		GameTextForPlayer( playerid, string, 1000,5 );
		return 1;
	}
	else
	{
		GameTextForPlayer(playerid, "] ~r~Sorry, you are too far away\n-2 points deducted ~y~]",5000, 5);
		sprayammount[playerid] -= 2;
		return 1;
	}

}*/

forward replacingGraff(playerid);
public replacingGraff(playerid)
{
	new id = GetPVarInt(playerid, "GraffitiReplace");
    if(IsPlayerInRangeOfPoint(playerid, 3.0,graff_Info[id][Xpos],graff_Info[id][Ypos], graff_Info[id][Zpos]))
    {
		sprayammount[playerid] ++; //Evry second it gets called player gets ONE point

		if( sprayammount[playerid] == sprayammountch[playerid] ) // If player reached his points
		{
			KillTimer( spraytimer[playerid] ); // We kill this timer as player reached his points
	    	replacegraff(playerid); // We now call creategraff and the graffiti will be created
	 		return 1;
		}
		new string[64];
		format( string, sizeof(string),"~r~GRAFITANDO~n~ ~w~%d]", sprayammountch[playerid]-sprayammount[playerid]); // <----
		GameTextForPlayer( playerid, string, 1000,5 );
		return 1;
	}
	else
	{
		GameTextForPlayer(playerid, "~r~Graffite cancelado",5000, 5);
        KillTimer(spraytimer[playerid]);
		sprayammount[playerid]=0;
		DeletePVar( playerid,"GraffitiReplace");
		DeletePVar( playerid,"GraffitiReplacing");
		return 1;
	}

}
/*
forward creategraff( playerid );
public creategraff( playerid )
{
	for(new id = 0; id != MAX_GRAFFITI; id++)
	{
	    if(!graff_Info[id][graffmodel]) {

		    DestroyDynamicObject( GraffiObj[playerid] ); // Destroying old sprayobject

			GameTextForPlayer( playerid, "~g~SPRAYED",5000,5 ); // SElf explainable?
			DeletePVar( playerid,"GraffitiCreating" ); // Deleting the PVAR afterwards
			sprayammount[playerid] = 0; // SEtting this var to 0, will explain what it is further down

			new string[20];
			format(string, sizeof(string), "/Graffitis/%d.ini", id);
			dini_Create(string);
			strmid(graff_Info[id][graffname] , GraffiName[playerid], 0, strlen(GraffiName[playerid]), 60);

			graff_Info[id][graffcreator] = ReturnName(playerid);
			graff_Info[id][graffmodel] = GraffiModel[playerid];
			graff_Info[id][Xpos] = GraffiPos[playerid][0];
			graff_Info[id][Ypos] = GraffiPos[playerid][1];
			graff_Info[id][Zpos] = GraffiPos[playerid][2];
			graff_Info[id][XYpos] = GraffiPos[playerid][3];
			graff_Info[id][YYpos] = GraffiPos[playerid][4];
			graff_Info[id][ZYpos] = GraffiPos[playerid][5];


			if(!strlen(GraffiFont[playerid])) format(graff_Info[id][grafffont], 16, "Diploma");
			else graff_Info[id][grafffont] = GraffiFont[playerid];


			graff_Info[id][graffObject] = CreateDynamicObject(graff_Info[id][graffmodel], graff_Info[id][Xpos],graff_Info[id][Ypos],graff_Info[id][Zpos], graff_Info[id][XYpos], graff_Info[id][YYpos], graff_Info[id][ZYpos], -1, 0, -1, 200 ); //Creating the object
   			if(graff_Info[id][graffmodel] == 19482) SetDynamicObjectMaterialText( graff_Info[id][graffObject], 0, ReturnGraffitiText(graff_Info[id][graffname]), OBJECT_MATERIAL_SIZE_256x256, graff_Info[id][grafffont], 25, 0, 0xFFFFFFFF, 0, 1 ); // Setting the object text with our choosen graffiti text

			SaveGraffitis();
			break;
		}
	}
	return 1;
}*/

stock replacegraff(playerid)
{
	new id = GetPVarInt(playerid, "GraffitiReplace");

	if(GraffiModel[playerid]) {

		GameTextForPlayer( playerid, "~g~GRAFFITADO",5000,5 );
		DeletePVar( playerid,"GraffitiReplace" );
		DeletePVar( playerid,"GraffitiReplacing");
		sprayammount[playerid] = 0;

		strmid(graff_Info[id][graffname] , GraffiName[playerid], 0, strlen(GraffiName[playerid]), 60);
		graff_Info[id][graffcreator] = ReturnName(playerid);
		graff_Info[id][graffmodel] = GraffiModel[playerid];

		if(!strlen(GraffiFont[playerid])) format(graff_Info[id][grafffont], 24, "Diploma");
		else graff_Info[id][grafffont] = GraffiFont[playerid];

		DestroyDynamicObject(graff_Info[id][graffObject]);

		if(graff_Info[id][graffmodel] == 19482) {
		    graff_Info[id][graffObject] = CreateDynamicObject(graff_Info[id][graffmodel], graff_Info[id][Xpos],graff_Info[id][Ypos],graff_Info[id][Zpos], graff_Info[id][XYpos], graff_Info[id][YYpos], graff_Info[id][ZYpos]  + 180, -1, 0, -1, 200 );
			SetDynamicObjectMaterialText( graff_Info[id][graffObject], 0, ReturnGraffitiText(graff_Info[id][graffname]), OBJECT_MATERIAL_SIZE_256x256, graff_Info[id][grafffont], 25, 0, 0xFFFFFFFF, 0, 1 );
		}
		else {
		    graff_Info[id][graffObject] = CreateDynamicObject(graff_Info[id][graffmodel], graff_Info[id][Xpos],graff_Info[id][Ypos],graff_Info[id][Zpos], graff_Info[id][XYpos], graff_Info[id][YYpos], graff_Info[id][ZYpos], -1, 0, -1, 200 );
		}
		SaveGraffiti(id);
	}

	return 1;
}

stock LoadGraffitis()
{
	new string[70];
    for(new ID = 0; ID != MAX_GRAFFITI; ID++)
	{
		format(string, sizeof(string), "/Graffitis/%d.ini", ID);
	    if(dini_Exists(string))
		{
		    strmid(graff_Info[ID][graffcreator],dini_Get(string,"graffcreator"),0,MAX_PLAYER_NAME + 1,MAX_PLAYER_NAME + 1);
		    strmid(graff_Info[ID][graffname],dini_Get(string,"graffname"),0,60,60);
		    strmid(graff_Info[ID][grafffont],dini_Get(string,"grafffont"),0,24,24);
		    graff_Info[ID][graffmodel] =  dini_Int(string, "graffmodel");
			graff_Info[ID][Xpos] =  dini_Float(string, "Xpos");
		   	graff_Info[ID][Ypos] =  dini_Float(string, "Ypos");
		    graff_Info[ID][Zpos] =  dini_Float(string, "Zpos");
   			graff_Info[ID][XYpos] =  dini_Float(string, "XYpos");
		   	graff_Info[ID][YYpos] =  dini_Float(string, "YYpos");
		    graff_Info[ID][ZYpos] =  dini_Float(string, "ZYpos");


			if(graff_Info[ID][graffmodel] == 19482) {
				graff_Info[ID][graffObject] = CreateDynamicObject(graff_Info[ID][graffmodel], graff_Info[ID][Xpos],graff_Info[ID][Ypos],graff_Info[ID][Zpos], graff_Info[ID][XYpos], graff_Info[ID][YYpos], graff_Info[ID][ZYpos] + 180, -1, 0, -1, 200 ); //Creating the object
	   			SetDynamicObjectMaterialText( graff_Info[ID][graffObject], 0, ReturnGraffitiText(graff_Info[ID][graffname]), OBJECT_MATERIAL_SIZE_256x256, graff_Info[ID][grafffont], 25, 0, 0xFFFFFFFF, 0, 1 ); // Setting the object text with our choosen graffiti text
			}
			else {
			    graff_Info[ID][graffObject] = CreateDynamicObject(graff_Info[ID][graffmodel], graff_Info[ID][Xpos],graff_Info[ID][Ypos],graff_Info[ID][Zpos], graff_Info[ID][XYpos], graff_Info[ID][YYpos], graff_Info[ID][ZYpos], -1, 0, -1, 200 );
			}
		}
	}
	return 1;
}

stock SaveGraffitis()
{
	new string[50];
 	for(new ID = 0; ID != MAX_GRAFFITI; ID++)
	{
	    format(string, sizeof(string), "/Graffitis/%d.ini", ID);
	    if(dini_Exists(string))
	    {
	        dini_Set(string,"graffcreator",graff_Info[ID][graffcreator]);
	        dini_Set(string,"graffname",graff_Info[ID][graffname]);
	        dini_IntSet(string,"graffmodel", graff_Info[ID][graffmodel]);
	        dini_Set(string,"grafffont", graff_Info[ID][grafffont]);
		 	dini_FloatSet(string,"Xpos", graff_Info[ID][Xpos]);
		  	dini_FloatSet(string,"Ypos", graff_Info[ID][Ypos]);
		   	dini_FloatSet(string,"Zpos", graff_Info[ID][Zpos]);
		 	dini_FloatSet(string,"XYpos", graff_Info[ID][XYpos]);
		  	dini_FloatSet(string,"YYpos", graff_Info[ID][YYpos]);
		   	dini_FloatSet(string,"ZYpos", graff_Info[ID][ZYpos]);
	    }
    }
	return 1;
}

stock SaveGraffiti(ID)
{
    new string[50];
	format(string, sizeof(string), "/Graffitis/%d.ini", ID);
	if(dini_Exists(string))
	{
		dini_Set(string,"graffcreator",graff_Info[ID][graffcreator]);
		dini_Set(string,"graffname",graff_Info[ID][graffname]);
		dini_IntSet(string,"graffmodel", graff_Info[ID][graffmodel]);
		dini_Set(string,"grafffont", graff_Info[ID][grafffont]);
		dini_FloatSet(string,"Xpos", graff_Info[ID][Xpos]);
	  	dini_FloatSet(string,"Ypos", graff_Info[ID][Ypos]);
	   	dini_FloatSet(string,"Zpos", graff_Info[ID][Zpos]);
		dini_FloatSet(string,"XYpos", graff_Info[ID][XYpos]);
		dini_FloatSet(string,"YYpos", graff_Info[ID][YYpos]);
		dini_FloatSet(string,"ZYpos", graff_Info[ID][ZYpos]);
	}
	return 1;
}

stock ReturnGraffitiText(grafftext[]) {
	new string[128];

	format(string, 128, grafftext);

 	format(string, 128, str_replace("(n)", "\n", string));
 	format(string, 128, str_replace("(r)", "{FF0000}", string));
 	format(string, 128, str_replace("(bl)", "{0000BB}", string));
 	format(string, 128, str_replace("(g)", "{33AA33}", string));
 	format(string, 128, str_replace("(y)", "{FFFF00}", string));
 	format(string, 128, str_replace("(w)", "{FFFFFF}", string));
 	format(string, 128, str_replace("(b)", "{000000}", string));
	return string;
}

CMD:darspray(playerid, params[])
{
	new targetid;
	if(sscanf(params,"d",targetid)) return SendSyntaxMessage(playerid, "/darspray [playerid]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if(GetFactionType(playerid) == FACTION_GANG)
	{
	    if(GetFactionType(targetid) != FACTION_GANG) {

            if(PlayerData[playerid][pGuns][g_aWeaponSlots[41]] == 0) {

			    SendClientMessageEx(playerid, COLOR_YELLOW,"> Você entregou o seu spray para %s.",ReturnName(targetid, 0));
				SendClientMessageEx(targetid, COLOR_YELLOW,"> %s Borrifa spray.(/graffiti)",ReturnName(playerid, 0));
				PlayerData[targetid][pSprayPermission] = 1;

				RemoveWeapon(playerid, 41);
				GivePlayerWeaponEx(targetid, 41, 9999);

			}
			else {
			    SendClientMessageEx(playerid, COLOR_YELLOW,"> Você entregou o seu spray para %s.",ReturnName(targetid, 0));
				SendClientMessageEx(targetid, COLOR_YELLOW,"> %s Borrifa spray.(/graffiti)",ReturnName(playerid, 0));
				PlayerData[targetid][pSprayPermission] = 1;
			}
		}
		else {
			if(PlayerData[targetid][pFaction] == PlayerData[playerid][pFaction]) {
				RemoveWeapon(playerid, 41);
				GivePlayerWeaponEx(targetid, 41, 9999);
			}
		}
	}
	else
	{
	   SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um trabalho ilegal para usar isto.");
	   return 1;
	}
	return 1;
}

CMD:tomarspray(playerid, params[])
{
	new targetid;
	if(sscanf(params,"d",targetid)) return SendSyntaxMessage(playerid, "/tomarspray [playerid]");
	if(targetid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]", maskid);
		if((targetid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "O jogador está desconectado.");
		}
	}

	if(GetFactionType(playerid) == FACTION_GANG)
	{
		if(PlayerData[targetid][pSprayPermission]) {
		    SendClientMessageEx(playerid, COLOR_YELLOW,"> Você tomou o spray de %s.",ReturnName(targetid, 0));
			SendClientMessageEx(targetid, COLOR_YELLOW,"> %s Desconecte para usar o spray.",ReturnName(playerid, 0));
			PlayerData[targetid][pSprayPermission] = 0;
			RemoveWeapon(playerid, 41);
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "Os jogador não pode usar o spray.");
	}
	else
	{
	   SendClientMessage(playerid, COLOR_LIGHTRED, "Você deve estar em um facção ilegal para usar isto.");
	   return 1;
	}
	return 1;
}

stock GetHouseItem(houseid, itemid) {
	for(new z = 0; z != MAX_HOUSE_ITEMS; ++z) if(HouseInfo[houseid][hItems][z] == itemid) return 1;
	return 0;
}

CMD:aloadmat(playerid) {
    LoadHouseMaterials();
    LoadBizzMaterials();
	return 1;
}

CMD:empints(playerid, params[]){
	if (PlayerData[playerid][pAdmin] < 5)
	   return SendClientMessage(playerid, -1, "Você não tem autorização para utilizar esse comando.");
    ShowEmpInterioresDialog(playerid);
    return 1;

}


						//////////////////////////////////////////////////////////////
						///////////////////////SISTEMA DE DROGA/////////////////////////
						//////////////////////////////////////////////////////////////

CMD:minhasdrogas(playerid, params[]) {
	new userid;

	if (sscanf(params, "u", userid))
	{
	    ShowPlayerDrugs(playerid, playerid);
	    return 1;
	}

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{S()[128]}", maskid);
		userid = GetPlayerMaskID(maskid);
	}

	if (!IsPlayerNearPlayer(playerid, userid, 3.0))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE"  Teste");


    ShowPlayerDrugs(playerid, userid);

	return 1;
}

CMD:dardroga(playerid, params[]) {

	new userid, slot;
	if (sscanf(params, "ud", userid, slot))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:"EMBED_WHITE" /dardroga [playerid / PoN] [package_id]");

	if(userid == playerid)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE"Você não pode dar droga para Você mesmo.");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ERRO:"EMBED_WHITE" Player inválido.");
		}
	}

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendClientMessage(playerid, COLOR_GRAD1, "ERRO:"EMBED_WHITE" Você não está perto de um player.");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Sem quantidade");

	new bool:can_take;

	for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
	{
		if(PlayerDrug[userid][x][drugQTY]==0) {

			can_take=true;

			PlayerDrug[userid][x][drugID] = PlayerDrug[playerid][slot][drugID]; // MYSQL NUMBER
			PlayerDrug[userid][x][drugType] = PlayerDrug[playerid][slot][drugType];
			PlayerDrug[userid][x][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
			PlayerDrug[userid][x][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
			PlayerDrug[userid][x][drugPackage] = PlayerDrug[playerid][slot][drugPackage];

			PlayerDrug[playerid][slot][drugQTY]=0;

            SendClientMessageEx(playerid, COLOR_YELLOW, "Teste 1 %s (%s) 2 %s",
			DrugPackageName[PlayerDrug[userid][x][drugPackage]],
			DrugData[PlayerDrug[userid][x][drugType]][DRUGDATA_NAME],
			ReturnName(userid));

            SendClientMessageEx(userid, COLOR_YELLOW, "%s teste 2 %s (%s) 3",
			ReturnName(playerid),
			DrugPackageName[PlayerDrug[userid][x][drugPackage]],
			DrugData[PlayerDrug[userid][x][drugType]][DRUGDATA_NAME]
			);

			Log_Write("logs/drugs.txt", "[%s] %s: give %s %s (%.f) tpara %s",
			ReturnDate(),
			ReturnName(playerid),
			DrugPackageName[PlayerDrug[userid][x][drugPackage]],
			DrugData[PlayerDrug[userid][x][drugType]][DRUGDATA_NAME],
			PlayerDrug[userid][x][drugQTY],
			ReturnName(userid));

			format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `charID`='%d' WHERE `drugID` = '%d'", PlayerData[userid][pID], PlayerDrug[userid][x][drugID]);
			mysql_tquery(dbCon, szQuery);
            /*Player_SavePackage(userid);
            Player_SavePackage(playerid);*/

			break;
		}
	}
	if(!can_take) SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Ainda não sei qual é esse erro.");
	return 1;
}

CMD:dropardroga(playerid, params[])
{
	new slot, Float:amount;

	if (sscanf(params, "df", slot, amount))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:"EMBED_WHITE" /dropardroga [pacote_id] [quantidade]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" slot inválido");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Você não tem essa quantidade");

	amount = ConvertFloatToOneDP(amount);

	if(amount > 0 && amount <= PlayerDrug[playerid][slot][drugQTY]) {

		PlayerDrug[playerid][slot][drugQTY] -= amount;
		PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);

		if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
			PlayerDrug[playerid][slot][drugQTY] = 0;

			format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}
		else {
			format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}

		format(szString, sizeof(szString), "* %s testedropar 1 %s (%s)", ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME]);
		SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);

		SendClientMessageEx(playerid, COLOR_YELLOW, "teste dropar 2 %.1f", DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);

		Log_Write("logs/drugs.txt", "[%s] %s: drop %s %s (%f)", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);

	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE "verificando");
	}
	return 1;
}

CMD:colocardroga(playerid, params[]) {

	new slot, i;
	if (sscanf(params, "d", slot))
	    return SendClientMessage(playerid, COLOR_LIGHTGREEN, "USE: /colocardroga [pacote_id]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Slot inválido");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Quantidade inválida.");

	if(!IsPlayerInAnyVehicle(playerid)) {
		if(( i = DrugObject_Nearest(playerid)) != INVALID_OBJECT_ID) {
			new itemslot = GetFreeItemDrugSlot();

			if(itemslot != -1) {

				if(!DrugObject_StockDrug(i, PlayerDrug[playerid][slot][drugType])) {
					new Float:grams_size = (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE]) ? PlayerDrug[playerid][slot][drugQTY] / 2.285714 : PlayerDrug[playerid][slot][drugQTY];

					new data[e_objectDrug];
					Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);

					if(float(DrugObject[data[drugObj]][DRUGOBJECT_SIZE]) >= grams_size + DrugObject_Size(i)) {

						format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_object` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`objectID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], data[drugSID]);
						mysql_tquery(dbCon, szQuery, "OnDrugPlaceItem", "iiiiii", playerid, slot, itemslot, i, data[drugObj], data[drugSID]);

						return 1;
					}
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Na parte de objeto");
					return 1;
				}
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" obejo 2");
				return 1;
			}
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" teste");
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1)
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {

					for(new x=0;x!=MAX_VEHICLE_DRUG_PACKAGE;x++) {
						if(VehicleDrug[i][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_car` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`carID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], CarData[i][carID]);
							mysql_tquery(dbCon, szQuery, "OnDrugPlaceCar", "dddd", playerid, slot, x, i);

							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Vamover 1");
					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Veiculo");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "Fim do veiculo");
			}
		}
	}
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

		if(PlayerDrug[playerid][slot][drugQTY] == 0)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Quantidade inválida");

		if(vehicleid != INVALID_VEHICLE_ID && vehicleid > 0) {
			foreach(new carid : sv_playercar)
			{
				if(vehicleid == CarData[carid][carVehicle])
				{
					for(new x=0;x!=MAX_VEHICLE_DRUG_PACKAGE;x++) {
						if(VehicleDrug[carid][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_car` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`carID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], CarData[carid][carID]);
							mysql_tquery(dbCon, szQuery, "OnDrugPlaceCar", "dddd", playerid, slot, x, carid);

							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" carro2");
					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: algo(Static)");
	}
	return 1;
}


CMD:pegardroga(playerid, params[]) {

	new slot, i;

	if (sscanf(params, "d", slot))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:"EMBED_WHITE" /pegardroga [slot]");

	if(!IsPlayerInAnyVehicle(playerid)) {
		if(( i = DrugObject_Nearest(playerid)) != -1) {

			if(slot < 0 || slot >= 10)
				return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

			new data[e_objectDrug];
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);

			for(new drug = 0; drug != MAX_ITEM_DRUG; drug++) if(ItemDrug[drug][drugFore] == data[drugSID])
			{
				if(slot) {
					slot--;
					continue;
				}

				if(ItemDrug[drug][drugQTY] == 0)
					return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Quantidade inválida");

				for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
				{
					if(PlayerDrug[playerid][x][drugQTY] == 0) {

						format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", ItemDrug[drug][drugType], ItemDrug[drug][drugQTY], ItemDrug[drug][drugStrength], ItemDrug[drug][drugPackage], PlayerData[playerid][pID]);
						mysql_tquery(dbCon, szQuery, "OnDrugTakeItem", "iiiiii", playerid, x, i, data[drugObj], data[drugSID], drug);

						return 1;
					}
				}
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:"EMBED_WHITE" SSSSS");
				return 1;
			}
			SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:"EMBED_WHITE" SSSSS");
			return 1;
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1)
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {

					if(slot < 0 || slot >= MAX_VEHICLE_DRUG_PACKAGE)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

					if(VehicleDrug[i][slot][drugQTY] == 0)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Quantidade inválida.");

					for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
					{
						if(PlayerDrug[playerid][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", VehicleDrug[i][slot][drugType], VehicleDrug[i][slot][drugQTY], VehicleDrug[i][slot][drugStrength], VehicleDrug[i][slot][drugPackage], PlayerData[playerid][pID]);
							mysql_tquery(dbCon, szQuery, "OnDrugTakeCar", "dddd", playerid, x, slot, i);

							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:"EMBED_WHITE" PPPP");
					return 1;
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: SDF");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "SSS");
			}
		}
	}
	else
	{
		new vehicleid = GetPlayerVehicleID(playerid);

		if(slot < 0 || slot >= MAX_VEHICLE_DRUG_PACKAGE)
			return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

		if(vehicleid != INVALID_VEHICLE_ID && vehicleid > 0) {
			foreach(new carid : sv_playercar)
			{
				if(vehicleid == CarData[carid][carVehicle])
				{
					if(VehicleDrug[carid][slot][drugQTY] == 0)
						return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Quantidade inválida.");

					for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
					{
						if(PlayerDrug[playerid][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", VehicleDrug[carid][slot][drugType], VehicleDrug[carid][slot][drugQTY], VehicleDrug[carid][slot][drugStrength], VehicleDrug[carid][slot][drugPackage], PlayerData[playerid][pID]);
							mysql_tquery(dbCon, szQuery, "OnDrugTakeCar", "dddd", playerid, x, slot, carid);
							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:"EMBED_WHITE" ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Íªï¿½Í§ï¿½ï¿½Ò§ï¿½ï¿½ï¿½ï¿½Ñºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½");
					return 1;
				}
			}
		}
		SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: ï¿½ï¿½ï¿½ï¿½è§¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½ï¿½à©¾ï¿½ï¿½ï¿½Ò¹ï¿½ï¿½Ë¹ï¿½ï¿½ï¿½Ç¹ï¿½ï¿½ï¿½ ï¿½ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò¹ï¿½ï¿½Ë¹ï¿½ï¿½Ò¸ï¿½Ã³ï¿½ (Static)");

	}
	return 1;
}



CMD:entregardroga(playerid, params[]) {
	new slot;
	if (sscanf(params, "d", slot))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:"EMBED_WHITE" /dardroga [pacote_id]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
		return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Quantidade inválida");

	SetPVarInt(playerid, "TransferDrug", slot);
	Dialog_Show(playerid, TransferDrugMenu, DIALOG_STYLE_LIST, "Transfer Drug", "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½\nï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", "Next", "Exit");

	return 1;
}


CMD:usardroga(playerid, params[]) {
	new slot, Float:amount;

	if (sscanf(params, "df", slot, amount))
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "USE:"EMBED_WHITE" /userdroga [pacote_id] [quantidade]");

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Quantidade inválida.");

	if(amount <= PlayerDrug[playerid][slot][drugQTY]) {

		if(amount >= 0.1 && amount <= 0.4) {

			amount = ConvertFloatToOneDP(amount);

			PlayerDrug[playerid][slot][drugQTY] -= amount;
			PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);

			if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
				PlayerDrug[playerid][slot][drugQTY] = 0;

				format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
				mysql_tquery(dbCon, szQuery);
			}
			else {
				format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
				mysql_tquery(dbCon, szQuery);
			}

			format(szString, sizeof(szString), "* %s usou %s", ReturnName(playerid), DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME]);
			SetPlayerChatBubble(playerid, szString, COLOR_PURPLE, 30.0, 6000);

			UseDrug(playerid, PlayerDrug[playerid][slot][drugType], amount + 0.6, PlayerDrug[playerid][slot][drugStrength]);

			SendClientMessageEx(playerid, COLOR_YELLOW, "Droga %s quantidade %.1f", DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);

			Log_Write("logs/drugs.txt", "[%s] %s: use %s (%.1f)", ReturnDate(), ReturnName(playerid), DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], amount);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE"O minimo que pode usar é 0.1 e o máximo 0.4");
		}

	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE"Você não possui essa quantidade");
	}
	return 1;
}



Dialog:TransferDrugMenu(playerid, response, listitem, inputtext[])
{
	if(response) {

		if(listitem==0) {
			new str[800];
			SetPVarInt(playerid, "TransferDrugMenu", 1);

			format(str, sizeof(str), "#\tDrogas\n");
			for(new i=0;i!=MAX_DRUG_TYPE;i++) {
				format(str, sizeof(str), "%s%d\t%s (Tamanho: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
			}
			Dialog_Show(playerid, TransferDrugNewPackage, DIALOG_STYLE_TABLIST_HEADERS, "Dar Droga", str, "Dar", "Desistir");
		}
		else {
			new str[1024];
			new slot = GetPVarInt(playerid, "TransferDrug");
			new bool:count;
			SetPVarInt(playerid, "TransferDrugMenu", 2);

			for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
			{
				if(i != slot && PlayerDrug[playerid][i][drugQTY]>0 && PlayerDrug[playerid][i][drugType] == PlayerDrug[playerid][slot][drugType] && PlayerDrug[playerid][i][drugStrength] == PlayerDrug[playerid][slot][drugStrength]) {

					format(str, sizeof(str), "%s%s %s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %.1f%s / %d.0%s) (Strength: %d)\n",
					str,
					DrugPackageName[PlayerDrug[playerid][i][drugPackage]],
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME],
					PlayerDrug[playerid][i][drugQTY],
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					floatround(DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[PlayerDrug[playerid][i][drugPackage]] * 2.285714 : DrugPackageSize[PlayerDrug[playerid][i][drugPackage]]),
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					PlayerDrug[playerid][i][drugStrength]);
					count = true;
				}
			}
			if(count) Dialog_Show(playerid, TransferDrugExistPackage, DIALOG_STYLE_LIST, "Transfer Drug", str, "Selecionar", "voltar");
			else Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Transfer Drug", "ï¿½ï¿½è¾ºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", "O", "K");
		}
	}
	else {
		DeletePVar(playerid, "TransferDrug");
	}
	return 1;
}

Dialog:TransferDrugExistPackage(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[256], slot = GetPVarInt(playerid, "TransferDrug");
		SetPVarInt(playerid, "TransferPackage", listitem);
		format(str, sizeof(str), "%s ï¿½Í§ï¿½Ø³ï¿½Ñ¨ï¿½ØºÑ¹ï¿½ï¿½ %s ï¿½ï¿½ï¿½ï¿½ %.1f%s\n\nï¿½Ø³ï¿½ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
		Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Selecionar", "voltar");
	}
	else {
		Dialog_Show(playerid, TransferDrugMenu, DIALOG_STYLE_LIST, "Transfer Drug", "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½\nï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", "Next", "Exit");
	}
	return 1;
}

Dialog:TransferDrugNewPackage(playerid, response, listitem, inputtext[])
{
	if(response) {
		new str[256], slot = GetPVarInt(playerid, "TransferDrug");
		SetPVarInt(playerid, "TransferPackage", listitem);
		format(str, sizeof(str), "%s ï¿½Í§ï¿½Ø³ï¿½Ñ¨ï¿½ØºÑ¹ï¿½ï¿½ %s ï¿½ï¿½ï¿½ï¿½ %.1f%s\n\nï¿½Ø³ï¿½ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
		Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Selecionar", "voltar");
	}
	else {
		Dialog_Show(playerid, TransferDrugMenu, DIALOG_STYLE_LIST, "Transfer Drug", "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½\nï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ§ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½", "Next", "Exit");
	}
	return 1;
}

Dialog:TransferDrugAmount(playerid, response, listitem, inputtext[])
{
	new transfertype = GetPVarInt(playerid, "TransferDrugMenu");

	if(response) {

		new packageid = GetPVarInt(playerid, "TransferPackage");
		new Float:transfer_amount = ConvertFloatToOneDP(floatstr(inputtext)), str[256];
		new slot = GetPVarInt(playerid, "TransferDrug"), Float:grams;

		if(transfertype == 1) {
			if(PlayerDrug[playerid][slot][drugQTY] > 0 && transfer_amount <= PlayerDrug[playerid][slot][drugQTY] && transfer_amount >= 0.1) {

				grams = DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? transfer_amount / 2.285714 : transfer_amount;

				if(DrugPackageSize[packageid] >= grams) {

					for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
					{
						if(PlayerDrug[playerid][x][drugQTY] == 0) {

							format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], transfer_amount, PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], PlayerData[playerid][pID]);
							mysql_tquery(dbCon, szQuery, "OnDrugTransferNew", "ddddf", playerid, slot, packageid, x, transfer_amount);

							return 1;
						}
					}
					SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:"EMBED_WHITE" ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Íªï¿½Í§ï¿½ï¿½Ò§ï¿½ï¿½ï¿½ï¿½Ñºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½");
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½Õ¾ï¿½é¹·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñºï¿½Ò¢Í§ï¿½Ø³");
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½ï¿½è¾ºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ã¹ªï¿½Í§ï¿½ï¿½ï¿½/ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù¡ï¿½ï¿½Í§");

			format(str, sizeof(str), "%s ï¿½Í§ï¿½Ø³ï¿½Ñ¨ï¿½ØºÑ¹ï¿½ï¿½ %s ï¿½ï¿½ï¿½ï¿½ %.1f%s\n\nï¿½Ø³ï¿½ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
			Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Selecionar", "voltar");
		}
		else {
			//printf("%f %f", PlayerDrug[playerid][slot][drugQTY], transfer_amount);
			if(PlayerDrug[playerid][slot][drugQTY] >= 0.1 && transfer_amount <= PlayerDrug[playerid][slot][drugQTY] && transfer_amount >= 0.1) {

				for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
				{
					if(i != slot && PlayerDrug[playerid][i][drugQTY]>0 && PlayerDrug[playerid][i][drugType] == PlayerDrug[playerid][slot][drugType] && PlayerDrug[playerid][i][drugStrength] == PlayerDrug[playerid][slot][drugStrength]) {
						if(packageid) {
							packageid--;
							continue;
						}
						if(PlayerDrug[playerid][i][drugQTY]) {

							grams = (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? transfer_amount / 2.285714 : transfer_amount) + (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? PlayerDrug[playerid][i][drugQTY] / 2.285714 : PlayerDrug[playerid][i][drugQTY]);

							if(floatround(ConvertFloatToOneDP(grams)) <= floatround(DrugPackageSize[PlayerDrug[playerid][i][drugPackage]])) {

								PlayerDrug[playerid][slot][drugQTY] -= transfer_amount;
								PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);

								if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
									PlayerDrug[playerid][slot][drugQTY] = 0;

									format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
									mysql_tquery(dbCon, szQuery);
								}
								else {
									format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
									mysql_tquery(dbCon, szQuery);
								}

								PlayerDrug[playerid][i][drugQTY] += transfer_amount;
								PlayerDrug[playerid][i][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][i][drugQTY]);

								Log_Write("logs/drugs.txt", "[%s] %s: transfer %s %s (%f) add to %s", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][i][drugPackage]]);
								SendClientMessageEx(playerid, COLOR_YELLOW, "ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ %s ï¿½Ó¹Ç¹ %.1fg ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à¡¨ %s", DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][i][drugPackage]]);

								format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][i][drugQTY], PlayerDrug[playerid][i][drugID]);
								mysql_tquery(dbCon, szQuery);

								return 1;
							}
							else {
								SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½Õ¾ï¿½é¹·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñºï¿½Ò¢Í§ï¿½Ø³");
							}
						}
						else {
							SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½ï¿½è¾ºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ã¹ªï¿½Í§ï¿½ï¿½ï¿½");
						}
						break;
					}
				}
			}
			else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½ï¿½è¾ºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ã¹ªï¿½Í§ï¿½ï¿½ï¿½/ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù¡ï¿½ï¿½Í§");

			format(str, sizeof(str), "%s ï¿½Í§ï¿½Ø³ï¿½Ñ¨ï¿½ØºÑ¹ï¿½ï¿½ %s ï¿½ï¿½ï¿½ï¿½ %.1f%s\n\nï¿½Ø³ï¿½ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½?", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"));
			Dialog_Show(playerid, TransferDrugAmount, DIALOG_STYLE_INPUT, "Transfer Drug", str, "Selecionar", "voltar");
		}
	}
	else {
		if(transfertype == 1) {
			new str[800];
			format(str, sizeof(str), "#\tStorage Name\n");
			for(new i=0;i!=MAX_DRUG_TYPE;i++) {
				format(str, sizeof(str), "%s%d\t%s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
			}
			Dialog_Show(playerid, TransferDrugNewPackage, DIALOG_STYLE_TABLIST_HEADERS, "Transfer Drug", str, "Selecionar", "voltar");
		}
		else {
			new str[1024];
			new slot = GetPVarInt(playerid, "TransferDrug");
			SetPVarInt(playerid, "TransferDrugMenu", 2);

			for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
			{
				if(i != slot && PlayerDrug[playerid][i][drugQTY]>0 && PlayerDrug[playerid][i][drugType] == PlayerDrug[playerid][slot][drugType] && PlayerDrug[playerid][i][drugStrength] == PlayerDrug[playerid][slot][drugStrength]) {

					format(str, sizeof(str), "%s%s %s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %.1f%s / %d.0%s) (Strength: %d)\n",
					str,
					DrugPackageName[PlayerDrug[playerid][i][drugPackage]],
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME],
					PlayerDrug[playerid][i][drugQTY],
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					floatround(DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[PlayerDrug[playerid][i][drugPackage]] * 2.285714 : DrugPackageSize[PlayerDrug[playerid][i][drugPackage]]),
					DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
					PlayerDrug[playerid][i][drugStrength]);
				}
			}
			Dialog_Show(playerid, TransferDrugExistPackage, DIALOG_STYLE_LIST, "Transfer Drug", str, "Selecionar", "voltar");
		}
	}
	return 1;
}

CMD:verdrogas(playerid, params[]) {

	new i;
	if(!IsPlayerInAnyVehicle(playerid)) {

		if(( i = DrugObject_Nearest(playerid)) != INVALID_OBJECT_ID) {
			ShowObjectDrugs(i, playerid);
		}
		else {
			if(( i = Car_Nearest(playerid)) != -1)
			{
				if (IsPlayerNearBoot(playerid, CarData[i][carVehicle]) && (GetTrunkStatus(CarData[i][carVehicle]) || IsVehicleTrunkBroken(CarData[i][carVehicle]))) {
					ShowVehicleDrugs(i, playerid);
				}
				else {
					SendClientMessage(playerid, COLOR_LIGHTRED,"SERVER: Você não está no portamalas do veiculo");
				}
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está proximo de um veiculo.");
			}
		}
	}
	else
	{
		if((i = Car_GetID(GetPlayerVehicleID(playerid))) != -1) {
			ShowVehicleDrugs(i, playerid);
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "SERVER: Ainda não sei (Static)");
		}
	}
	return 1;
}


CMD:fazerpacote(playerid, params[]) {

	new slot, objectid;
	if (sscanf(params, "dd", slot, objectid)) {
		SendClientMessage(playerid, COLOR_LIGHTRED, "USAR:"EMBED_WHITE" /fazerpacote [slot] [objeto]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "OBJETOS: 0 - Caixa de Hamburguer 1 - Copa de Hamburguer 2 - Cok O Pops 3 - Caixa de Sapato 4 - Caixa de Leite 5 - Pacote Embalado 6 - Caixa de Pizza");
		SendClientMessage(playerid, COLOR_LIGHTRED, "7 - Caixa de papelão 8 - Maço de Cigarro");
		return 1;
	}


	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Slot inválido");

	if(PlayerDrug[playerid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Quantidade inválida");

	if(objectid < 0 || objectid >= sizeof(DrugObject)) {
		return SendClientMessageEx(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" Objeto inválido. (0-%d)", sizeof(DrugObject) - 1);
	}

	new Float:grams_size = (DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_TYPE]) ? PlayerDrug[playerid][slot][drugQTY] / 2.285714 : PlayerDrug[playerid][slot][drugQTY];

	if(float(DrugObject[objectid][DRUGOBJECT_SIZE]) >= grams_size) {
		if(DrugObject_Count(PlayerData[playerid][pID]) < 2) {
			new itemslot = -1;
			if((itemslot = GetFreeItemDrugSlot()) != -1) {

				format(szQuery, sizeof(szQuery), "INSERT INTO `drug_package` (`drugObj`,`drugOwner`) VALUES('%d','%d')", objectid, PlayerData[playerid][pID]);
				new Cache: add = mysql_query(dbCon, szQuery), data[e_objectDrug], drugobjectid;

				data[drugSID]=cache_insert_id();
				data[drugOwner]=PlayerData[playerid][pID];

				GetPlayerPos(playerid, data[drugObjectX], data[drugObjectY], data[drugObjectZ]);
				GetXYInFrontOfPlayer(playerid, data[drugObjectX], data[drugObjectY], 1.5);

				data[drugObj] = objectid;
				data[drugObjectRX] = 0.0;
				data[drugObjectRY] = 0.0;
				data[drugObjectRZ] = 0.0;
				data[drugObjectWorld] = GetPlayerVirtualWorld(playerid);
				data[drugObjectInt] = GetPlayerInterior(playerid);
				cache_delete(add);

				drugobjectid = CreateDynamicObject(DrugObject[objectid][DRUGOBJECT_MODEL], data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectRX], data[drugObjectRY], data[drugObjectRZ], data[drugObjectWorld], data[drugObjectInt], -1, 200.0);

				Streamer_SetArrayData(STREAMER_TYPE_OBJECT, drugobjectid, E_STREAMER_EXTRA_ID, data);

				new XLQuery[256];
				format(XLQuery, sizeof(XLQuery), "UPDATE `drug_package` SET `drugObjectX`='%f',`drugObjectY`='%f',`drugObjectZ`='%f',`drugObjectRX`='0.0',`drugObjectRY`='0.0',`drugObjectRZ`='0.0',`drugObjectWorld`='%d',`drugObjectInt`='%d' WHERE `drugSID` = '%d'",
				data[drugObjectX], data[drugObjectY], data[drugObjectZ], data[drugObjectWorld], data[drugObjectInt], data[drugSID]);
				mysql_tquery(dbCon, XLQuery);

				format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_object` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`objectID`) VALUES('%d','%f','%d','%d','%d')", PlayerDrug[playerid][slot][drugType], PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugStrength], PlayerDrug[playerid][slot][drugPackage], data[drugSID]);
				mysql_tquery(dbCon, szQuery, "OnDrugPackageItem", "ddddd", playerid, slot, objectid, itemslot, data[drugSID]);

			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½Ö§ï¿½Õ´ï¿½Ó¡Ñ´ã¹¡ï¿½ï¿½ï¿½ï¿½ï¿½Ò§ï¿½ï¿½à¡¨ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã´ï¿½Í§ï¿½ï¿½ï¿½ï¿½ï¿½Õ¡ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ§");
			}
		}
		else {
			SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½Ò§ï¿½ï¿½à¡¨ã¹¾ï¿½é¹·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò¡ï¿½ï¿½ï¿½Ò¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½");
		}
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½ï¿½Ò´ï¿½ï¿½à¡¨ï¿½Õ¾ï¿½é¹·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Â§ï¿½ï¿½");
	}

	return 1;
}

CMD:editarpdroga(playerid, params[]) {
	new objectid = INVALID_OBJECT_ID;
	if((objectid = DrugObject_Nearest(playerid)) != INVALID_OBJECT_ID)
	{
		SetPVarInt(playerid, "EditingDrugPackage", 1);

		EditDynamicObject(playerid, objectid);

		SendClientMessage(playerid, COLOR_LIGHTRED, "WARNING: Edite a droga;");
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "Algo deu errrado");
	}
	return 1;
}



GetFreeItemDrugSlot()
{
	for(new i = 0; i != MAX_ITEM_DRUG; i++)
	{
		if(ItemDrug[i][drugQTY] == 0)
			return i;
	}
	return -1;
}

DrugObject_Nearest(playerid, Float:radius = 2.5)
{
	new
	    Float:fDistance = FLOAT_INFINITY,
	    iIndex = INVALID_OBJECT_ID
	;

	new data[e_objectDrug];
	for(new x = 0, j = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); x != j; ++x) {
		if(!IsValidDynamicObject(x)) continue;
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, x, E_STREAMER_EXTRA_ID, data);
		if(data[drugSID]) {
			new
				Float:temp = GetPlayerDistanceFromPoint(playerid, data[drugObjectX], data[drugObjectY], data[drugObjectZ]);

			if (temp < fDistance && temp <= radius)
			{
				fDistance = temp;
				iIndex = x;
			}
		}
	}

	return iIndex;
}










ShowVehicleDrugs(carid, toplayer)
{
	new bool:count=false;
	SendClientMessageEx(toplayer, COLOR_LIGHTRED, "%s's Drugs:", g_arrVehicleNames[CarData[carid][carModel] - 400]);
	for(new i = 0; i != MAX_VEHICLE_DRUG_PACKAGE; i++)
	{
		if(VehicleDrug[carid][i][drugQTY]>0) {

			SendClientMessageEx(toplayer, -1, "{FF6347}["EMBED_WHITE" %d. %s (%s: %.1f%s / %d.0%s) (Strength: %d) {FF6347}]",
			i,
			DrugPackageName[VehicleDrug[carid][i][drugPackage]],
			DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_NAME],
			VehicleDrug[carid][i][drugQTY],
			DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			floatround(DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[VehicleDrug[carid][i][drugPackage]] * 2.285714 : DrugPackageSize[VehicleDrug[carid][i][drugPackage]]),
			DrugData[VehicleDrug[carid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			VehicleDrug[carid][i][drugStrength]);

			count=true;
		}
	}
	if(!count) {
		SendClientMessage(toplayer, -1, "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½Ô´ï¿½ï¿½ï¿½ï¿½ï¿½Ê´ï¿½");
	}
}

ShowPlayerDrugs(playerid, toplayer)
{
	new bool:count=false;
	SendClientMessageEx(toplayer, COLOR_LIGHTRED, "%s's Drugs:", ReturnName(playerid));
	for(new i = 0; i != MAX_PLAYER_DRUG_PACKAGE; i++)
	{
		if(PlayerDrug[playerid][i][drugQTY]>0) {

			SendClientMessageEx(toplayer, -1, "{FF6347}["EMBED_WHITE" %d. %s (%s: %.1f%s / %d.0%s) (Strength: %d) {FF6347}]",
			i,
			DrugPackageName[PlayerDrug[playerid][i][drugPackage]],
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_NAME],
			PlayerDrug[playerid][i][drugQTY],
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			floatround(DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[PlayerDrug[playerid][i][drugPackage]] * 2.285714 : DrugPackageSize[PlayerDrug[playerid][i][drugPackage]]),
			DrugData[PlayerDrug[playerid][i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			PlayerDrug[playerid][i][drugStrength]);


			count=true;
		}
	}
	if(!count) {
		SendClientMessage(toplayer, -1, "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½Ô´ï¿½ï¿½ï¿½ï¿½ï¿½Ê´ï¿½");
	}
}

ShowObjectDrugs(objectid, toplayer)
{
	new count=0, data[e_objectDrug];
	Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

	SendClientMessageEx(toplayer, COLOR_LIGHTRED, "%s ( %.1fg / %.1fg ):", DrugObject[data[drugObj]][DRUGOBJECT_NAME], DrugObject_Size(objectid), float(DrugObject[data[drugObj]][DRUGOBJECT_SIZE]));
	for(new i = 0; i != MAX_ITEM_DRUG; i++) if(ItemDrug[i][drugFore] == data[drugSID])
	{
		if(ItemDrug[i][drugQTY] > 0) {

			SendClientMessageEx(toplayer, -1, "{FF6347}["EMBED_WHITE" %d. %s (%s: %.1f%s / %d.0%s) (Strength: %d) {FF6347}]",
			count,
			DrugPackageName[ItemDrug[i][drugPackage]],
			DrugData[ItemDrug[i][drugType]][DRUGDATA_NAME],
			ItemDrug[i][drugQTY],
			DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			floatround(DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE] ? DrugPackageSize[ItemDrug[i][drugPackage]] * 2.285714 : DrugPackageSize[ItemDrug[i][drugPackage]]),
			DrugData[ItemDrug[i][drugType]][DRUGDATA_TYPE] ? (" Pills") : ("g"),
			ItemDrug[i][drugStrength]);

			count++;
		}
	}
	if(count==0) {
		SendClientMessage(toplayer, -1, "ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¾ï¿½Ô´ï¿½ï¿½ï¿½ï¿½ï¿½Ê´ï¿½");
	}
}


CMD:destruirdroga(playerid, params[]) {

    if (PlayerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GRAD1, "Você não tem level admin suficiente.");

	new userid, slot, Float:amount;
	if (sscanf(params, "ud", userid, slot))
	    return SendSyntaxMessage(playerid, "/removedrug [ï¿½Í´Õ¼ï¿½ï¿½ï¿½ï¿½ï¿½/ï¿½ï¿½ï¿½ÍºÒ§ï¿½ï¿½Ç¹] [ï¿½ï¿½Í§]");

	if(userid == INVALID_PLAYER_ID) {
		new maskid[MAX_PLAYER_NAME];
		sscanf(params, "s[24]{d}", maskid);
		if((userid = GetPlayerMaskID(maskid)) == INVALID_PLAYER_ID) {
			return SendClientMessage(playerid, COLOR_GRAD1, "ï¿½ï¿½ï¿½ï¿½ï¿½è¹¹ï¿½é¹µÑ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½");
		}
	}

	if(slot < 0 || slot >= MAX_PLAYER_DRUG_PACKAGE)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½Í´ï¿½ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½Ù¡ï¿½ï¿½Í§");

	if(PlayerDrug[userid][slot][drugQTY] == 0)
     	return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½ï¿½è¾ºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ã¹ªï¿½Í§ï¿½ï¿½ï¿½");

	if(amount <= PlayerDrug[userid][slot][drugQTY]) {

		amount = ConvertFloatToOneDP(amount);

		PlayerDrug[userid][slot][drugQTY] -= amount;
		PlayerDrug[userid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[userid][slot][drugQTY]);

		if(PlayerDrug[userid][slot][drugQTY]<0.1) {
			PlayerDrug[userid][slot][drugQTY] = 0;

			format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[userid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}
		else {
			format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[userid][slot][drugQTY], PlayerDrug[userid][slot][drugID]);
			mysql_tquery(dbCon, szQuery);
		}

		SendClientMessageEx(playerid, COLOR_YELLOW, "ï¿½Ø³ï¿½ï¿½ï¿½Ö´ %s ï¿½Ó¹Ç¹ %.1f ï¿½Í§ %s", DrugData[PlayerDrug[userid][slot][drugType]][DRUGDATA_NAME], amount, ReturnName(userid));

		Log_Write("logs/drugs.txt", "[%s] %s: remove %s (%.1f) %s", ReturnDate(), ReturnName(playerid), DrugData[PlayerDrug[userid][slot][drugType]][DRUGDATA_NAME], amount, ReturnName(userid));
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½Ù¡ï¿½ï¿½Í§");
	}
	return 1;
}

CMD:spawndrug(playerid) {

	if(PlayerData[playerid][pAdmin] < 3) return SendClientMessage(playerid, COLOR_GREY, "Você não tem level suficiente.");

	new str[1024];
	format(str, sizeof(str), "#\tDrug Name\n");
	for(new i=0;i!=sizeof(DrugData);i++) {
		format(str, sizeof(str), "%s%d\t%s\n", str, i, DrugData[i][DRUGDATA_NAME]);
	}
	Dialog_Show(playerid, AdminDrugCreate_Type, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Spawn de Drogas", str, "Selecionar", "voltar");
	return 1;
}

Dialog:AdminDrugCreate_Type(playerid, response, listitem, inputtext[]) {
	if(response) {
		new str[800];
		SetPVarInt(playerid, "AdminDrugCreate_drugid", listitem);

		format(str, sizeof(str), "#\tStorage Name\n");
		for(new i=0;i!=MAX_DRUG_TYPE;i++) {
			format(str, sizeof(str), "%s%d\t%s (Tamanho: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
		}
		Dialog_Show(playerid, AdminDrugCreate_Package, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Drug Spawn", str, "Selecionar", "voltar");
	}
	return 1;
}

Dialog:AdminDrugCreate_Package(playerid, response, listitem, inputtext[]) {
	if(response) {
		new str[512];

		new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
		SetPVarInt(playerid, "AdminDrugCreate_package", listitem);

		format(str, sizeof(str), "Criou: %s\n  %s (AQUI: %d.0%s)\n\n ainda nao sei (0-100):", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[listitem], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[listitem] * 2.285714 : DrugPackageSize[listitem]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pilulas") : ("Gramas"));
		Dialog_Show(playerid, AdminDrugCreate_Strength, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Selecionar", "voltar");
	}
	else {
//		PC_EmulateCommand(playerid, "/spawndrug");
	}
	return 1;
}

Dialog:AdminDrugCreate_Strength(playerid, response, listitem, inputtext[]) {
	new str[800];
	if(response) {

		new strength = strval(inputtext);
		if(strength >= 0 || strength <= 100) {
			new packageid = GetPVarInt(playerid, "AdminDrugCreate_package");
			new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
			SetPVarInt(playerid, "AdminDrugCreate_strength", strength);

			format(str, sizeof(str), "ï¿½ï¿½ï¿½Ê¾ï¿½Ô´: %s\nï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¡ %s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %d.0%s)\nï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã§: %d\n\nï¿½ï¿½Í¡ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½Ê¾ï¿½Ô´ï¿½ï¿½ï¿½ï¿½Í§ï¿½ï¿½ï¿½:", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[packageid], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[packageid] * 2.285714 : DrugPackageSize[packageid]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pills") : ("g"), strength);
			Dialog_Show(playerid, AdminDrugCreate_Amount, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Done", "voltar");
		}
		else {
			new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
			SetPVarInt(playerid, "AdminDrugCreate_package", listitem);

			format(str, sizeof(str), "ï¿½ï¿½ï¿½Ê¾ï¿½Ô´: %s\nï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¡ %s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %d.0%s)\n\nï¿½ï¿½Í¡ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã§ (0-100):", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[listitem], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[listitem] * 2.285714 : DrugPackageSize[listitem]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pills") : ("g"));
			Dialog_Show(playerid, AdminDrugCreate_Strength, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Selecionar", "voltar");
		}
	}
	else {
		format(str, sizeof(str), "#\tStorage Name\n");
		for(new i=0;i!=MAX_DRUG_TYPE;i++) {
			format(str, sizeof(str), "%s%d\t%s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
		}
		Dialog_Show(playerid, AdminDrugCreate_Package, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Drug Spawn", str, "Selecionar", "voltar");
	}
	return 1;
}

Dialog:AdminDrugCreate_Amount(playerid, response, listitem, inputtext[]) {
	if(response) {


		new drugid = GetPVarInt(playerid, "AdminDrugCreate_drugid");
		new packageid = GetPVarInt(playerid, "AdminDrugCreate_package");
		new strength = GetPVarInt(playerid, "AdminDrugCreate_strength");
		new Float:transfer_amount = ConvertFloatToOneDP(floatstr(inputtext)), str[512];

		if(transfer_amount > 0) {

			new grams = floatround(DrugData[drugid][DRUGDATA_TYPE] ? transfer_amount / 2.285714 : transfer_amount);

			if(floatround(DrugPackageSize[packageid]) >= grams) {

				for(new x = 0; x != MAX_PLAYER_DRUG_PACKAGE; x++)
				{
					if(PlayerDrug[playerid][x][drugQTY] == 0) {

						format(szQuery, sizeof(szQuery), "INSERT INTO `drugs_char` (`drugType`,`drugQTY`,`drugStrength`,`drugPackage`,`charID`) VALUES('%d','%f','%d','%d','%d')", drugid, transfer_amount, strength, packageid, PlayerData[playerid][pID]);
						mysql_tquery(dbCon, szQuery, "OnDrugAdminCreate", "dddfdd", playerid, x, drugid, transfer_amount, strength, packageid);

						/*Log_Write("logs/drugs.txt", "[%s] %s: create %s %s (%f)", ReturnDate(), ReturnPlayerName(playerid), DrugPackageName[packageid], DrugData[drugid][DRUGDATA_NAME], transfer_amount);

						PlayerDrug[playerid][x][drugID] = 1; // MYSQL NUMBER
						PlayerDrug[playerid][x][drugType] = drugid;
						PlayerDrug[playerid][x][drugQTY] = transfer_amount;
						PlayerDrug[playerid][x][drugStrength] = strength;
						PlayerDrug[playerid][x][drugPackage] = packageid;

						SendClientMessageEx(playerid, COLOR_YELLOW, "ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½Ò§ %s ï¿½Ó¹Ç¹ %.1fg ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à¡¨ %s", DrugData[PlayerDrug[playerid][x][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][x][drugPackage]]);
						*/
						DeletePVar(playerid, "AdminDrugCreate_drugid");
						DeletePVar(playerid, "AdminDrugCreate_package");
						DeletePVar(playerid, "AdminDrugCreate_strength");

						return 1;
					}
				}
				SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:"EMBED_WHITE" ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Íªï¿½Í§ï¿½ï¿½Ò§ï¿½ï¿½ï¿½ï¿½Ñºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½");
			}
			else {
				SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½Ù¡ï¿½ï¿½Í§");
			}
		}
		else SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO:"EMBED_WHITE" ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½Ù¡ï¿½ï¿½Í§");

		format(str, sizeof(str), "ï¿½ï¿½ï¿½Ê¾ï¿½Ô´: %s\nï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Í¡ %s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %d.0%s)\nï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã§: %d\n\nï¿½ï¿½Í¡ï¿½Ó¹Ç¹ï¿½ï¿½ï¿½ï¿½Í§ï¿½ï¿½ï¿½:", DrugData[drugid][DRUGDATA_NAME], DrugPackageName[packageid], floatround(DrugData[drugid][DRUGDATA_TYPE] ? DrugPackageSize[packageid] * 2.285714 : DrugPackageSize[packageid]), DrugData[drugid][DRUGDATA_TYPE] ? (" Pills") : ("g"), strength);
		Dialog_Show(playerid, AdminDrugCreate_Amount, DIALOG_STYLE_INPUT, "Admin Tools: Drug Spawn", str, "Selecionar", "voltar");
	}
	else {
		new str[800];
		format(str, sizeof(str), "#\tStorage Name\n");
		for(new i=0;i!=MAX_DRUG_TYPE;i++) {
			format(str, sizeof(str), "%s%d\t%s (ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½: %.1fg)\n", str, i, DrugPackageName[i], DrugPackageSize[i]);
		}
		Dialog_Show(playerid, AdminDrugCreate_Package, DIALOG_STYLE_TABLIST_HEADERS, "Admin Tools: Drug Spawn", str, "Selecionar", "voltar");
	}
	return 1;
}

forward OnDrugAdminCreate(playerid, slot, drugid, Float:transfer_amount, strength, packageid);
public OnDrugAdminCreate(playerid, slot, drugid, Float:transfer_amount, strength, packageid)
{
	if(PlayerDrug[playerid][slot][drugQTY] == 0) {
		PlayerDrug[playerid][slot][drugID] = cache_insert_id(); // MYSQL NUMBER
		PlayerDrug[playerid][slot][drugType] = drugid;
		PlayerDrug[playerid][slot][drugQTY] = transfer_amount;
		PlayerDrug[playerid][slot][drugStrength] = strength;
		PlayerDrug[playerid][slot][drugPackage] = packageid;

		SendClientMessageEx(playerid, COLOR_YELLOW, "ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½Ò§ %s ï¿½Ó¹Ç¹ %.1fg ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à¡¨ %s", DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][slot][drugPackage]]);

		Log_Write("logs/drugs.txt", "[%s] %s: admin create %s %s (%f)", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY]);
	}
	else {
		SendClientMessage(playerid, COLOR_LIGHTRED,"ERRO:"EMBED_WHITE" ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Íªï¿½Í§ï¿½ï¿½Ò§ï¿½ï¿½ï¿½ï¿½Ñºï¿½ï¿½à¡¨ï¿½ï¿½ï¿½");
	}
}



forward UseDrug(playerid, drugid, Float:level, strength);
public UseDrug(playerid, drugid, Float:level, strength) {

	/*
	pDrugAddiction[MAX_DRUGS],
	pDrugAddict,
	pDrugAddictStrength,
	*/
	static const DrugsAddict[MAX_DRUGS][5] =
	{
		/*
			0 - ï¿½Ê¾ï¿½Ô´ï¿½ï¿½ï¿½ï¿½ï¿½Ã¡
			1 - ï¿½Ò¡ï¿½Ô´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			2 - ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ÍµÔ´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			3 - ï¿½Ô´ï¿½Òªï¿½Ô´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			4 - ï¿½ï¿½ÒµÔ´ï¿½Òµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		*/
		{3, 3, 6, 2, 15}, //Cocaine
		{0, 0, 0, 0, 0}, //Cannabis
		{3, 3, 6, 2, 15}, //Xanax
		{3, 3, 6, 2, 15}, //MDMA
		{3, 3, 6, 2, 15}, //Heroin
		{3, 3, 6, 2, 15}, //Ketamine
		{3, 3, 6, 2, 15}, //Fentanyl
		{3, 3, 6, 2, 15}, //Methamphetamine
		{3, 3, 3, 1, 7}, //Steroids
		{3, 3, 6, 2, 15} //Oxycodone
	};

	static const Float:DrugsHealth[MAX_DRUGS][4] =
	{
		/*
			0 - ï¿½ï¿½ï¿½Í´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
			1 - âº¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ù§ï¿½Ø´
			2 - ï¿½Ó¹Ç¹ï¿½Ô¹Ò·ï¿½
			3 - ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		*/
		{7.0, 70.0, 10.0, 10.0}, //Cocaine
		{3.0, 45.0, 15.0, 9.0}, //Cannabis
		{4.0, 40.0, 15.0, 10.0}, //Xanax
		{5.0, 35.0, 12.0, 10.0}, //MDMA
		{5.0, 65.0, 12.0, 10.0}, //Heroin
		{6.0, 60.0, 10.0, 10.0}, //Ketamine
		{6.0, 60.0, 10.0, 10.0}, //Fentanyl
		{10.0, 50.0, 13.0, 7.0}, //Methamphetamine
		{10.0, 50.0, 20.0, 10.0}, //Steroids
		{5.0, 50.0, 20.0, 10.0} //Oxycodone
	};

	if(PlayerData[playerid][pDrugAddiction][drugid] == 0) {
		PlayerData[playerid][pDrugAddiction][drugid] = DrugsAddict[drugid][0];
	}
	else {

		if(DrugsAddict[drugid][1] > 0)
			PlayerData[playerid][pDrugAddiction][drugid] += DrugsAddict[drugid][1] + (random(DrugsAddict[drugid][2]) + 1);

		if(DrugAddiction_OtherDrug(playerid, drugid)) {
			if(DrugsAddict[drugid][3] > 0)
				PlayerData[playerid][pDrugAddiction][drugid] += DrugsAddict[drugid][3];
		}
		if(PlayerData[playerid][pDrugAddict] && PlayerData[playerid][pDrugAddict] != drugid + 1) {

			if(DrugsAddict[drugid][4] > 0) {
				PlayerData[playerid][pDrugAddiction][drugid] += DrugsAddict[drugid][4];

				if(strength >= PlayerData[playerid][pDrugAddictStrength] && PlayerData[playerid][pDrugAddiction][drugid] > DrugsAddict[drugid][4]) {
					PlayerData[playerid][pDrugAddict] = drugid + 1;
					PlayerData[playerid][pDrugAddictStrength] = strength;
				}
			}
		}

		if(PlayerData[playerid][pDrugAddict] && PlayerData[playerid][pDrugAddict] == drugid + 1)
			SufferDrugs{playerid}=true;
	}

	if(PlayerData[playerid][pDrugAddiction][drugid] > 100) {
		PlayerData[playerid][pDrugAddiction][drugid] = 100;
	}

	// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	if(DrugsHealth[drugid][3]) {
		if(PlayerData[playerid][pSHealth] / DrugsHealth[drugid][3] > 0) {
			PlayerData[playerid][pHunger] += PlayerData[playerid][pSHealth] / DrugsHealth[drugid][3];
		}
	}


	if(PlayerData[playerid][pDrugAddiction][drugid] < 70) {
		if(EffectDrugs_Timer[playerid] != Timer:0) {
//			stop EffectDrugs_Timer[playerid];
			EffectDrugs_Timer[playerid] = Timer:0;
		}
		EffectDrugs[playerid]=DrugsHealth[drugid][1];
		EffectDrugAmount[playerid] = floatround(DrugsHealth[drugid][2]);
//		EffectDrugs_Timer[playerid] = drugEffects(playerid, DrugsHealth[drugid][0] * level);

		GameTextForPlayer(playerid, "~r~Max de Vida", 5000, 4);
		//SetPlayerMaxHealth(playerid, 200.0);
	}
	return 1;
}

DrugAddiction_OtherDrug(playerid, drugid) {
	for(new i=0;i!=MAX_DRUGS;i++) {
		if(PlayerData[playerid][pDrugAddiction][i] != drugid) {
			return true;
		}
	}
	return false;
}

forward drugEffects(playerid, Float:amount);
public drugEffects(playerid, Float:amount)
{
	/*if(isDeathmode{playerid} || isInjuredmode{playerid} || EffectDrugAmount[playerid] <= 0) {
		stop EffectDrugs_Timer[playerid];
		EffectDrugs_Timer[playerid]=Timer:0;
		return true;
	}*/

	if(PlayerData[playerid][pHealth] > 200){
		SetPlayerHealthEx(playerid, 200.0);
	}
	else
	{
		SetPlayerHealthEx(playerid,(PlayerData[playerid][pHealth] + amount));
		EffectDrugs[playerid] -= amount;
		if(EffectDrugs[playerid] <= 0.0) {
			EffectDrugs[playerid] = 0.0;
//			EffectDrugs_Timer[playerid];
			EffectDrugs_Timer[playerid]=Timer:0;
		}
	}
	EffectDrugAmount[playerid]--;
	return true;
}

forward OnDrugPackageItem(playerid, slot, objectid, itemslot, objectslot);
public OnDrugPackageItem(playerid, slot, objectid, itemslot, objectslot)
{
	ItemDrug[itemslot][drugID] = cache_insert_id();
	ItemDrug[itemslot][drugType] = PlayerDrug[playerid][slot][drugType];
	ItemDrug[itemslot][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
	ItemDrug[itemslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	ItemDrug[itemslot][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
	ItemDrug[itemslot][drugFore] = objectslot;

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ %s ï¿½ï¿½ï¿½ï¿½ %s", DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugObject[objectid][DRUGOBJECT_NAME]);
	SendClientMessage(playerid, COLOR_LIGHTRED, "ï¿½ï¿½ï¿½ï¿½ï¿½:"EMBED_WHITE" ï¿½ï¿½ /adjustpackage ï¿½ï¿½ï¿½Í»ï¿½Ñºï¿½ï¿½ï¿½Ë¹ï¿½ï¿½ï¿½à¡¨ï¿½ï¿½ï¿½ï¿½");

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery, "OnDrugPackageCharBuild", "ddd", playerid, slot, objectid);

	return 1;
}

forward OnDrugPackageCharBuild(playerid, slot, objectid);
public OnDrugPackageCharBuild(playerid, slot, objectid)
{
	Log_Write("logs/drugs.txt", "[%s] %s: build and place %s %s (%f) to %s", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], DrugObject[objectid][DRUGOBJECT_NAME]);
	PlayerDrug[playerid][slot][drugQTY] = 0;
}

forward OnDrugPlaceItem(playerid, slot, itemslot, objectid, dObj, dSid);
public OnDrugPlaceItem(playerid, slot, itemslot, objectid, dObj, dSid)
{
	ItemDrug[itemslot][drugID] = cache_insert_id();
	ItemDrug[itemslot][drugType] = PlayerDrug[playerid][slot][drugType];
	ItemDrug[itemslot][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
	ItemDrug[itemslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	ItemDrug[itemslot][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
	ItemDrug[itemslot][drugFore] = dSid;

	PlayerDrug[playerid][slot][drugQTY] = 0;

	SendClientMessageEx(playerid, COLOR_LIGHTRED, "[ ! ]"EMBED_WHITE" ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ %s ï¿½ï¿½ï¿½ï¿½ %s", DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugObject[dObj][DRUGOBJECT_NAME]);

	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to object %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugData[ItemDrug[itemslot][drugType]][DRUGDATA_NAME], ItemDrug[itemslot][drugQTY], objectid, dSid);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugPlaceAllItem(playerid, slot, itemslot, objectid, dSid);
public OnDrugPlaceAllItem(playerid, slot, itemslot, objectid, dSid)
{
	ItemDrug[itemslot][drugID] = cache_insert_id();

	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to object %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[ItemDrug[itemslot][drugPackage]], DrugData[ItemDrug[itemslot][drugType]][DRUGDATA_NAME], ItemDrug[itemslot][drugQTY], objectid, dSid);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugPlaceCar(playerid, slot, itemslot, carid);
public OnDrugPlaceCar(playerid, slot, itemslot, carid)
{
	VehicleDrug[carid][itemslot][drugID] = cache_insert_id();
	VehicleDrug[carid][itemslot][drugType] = PlayerDrug[playerid][slot][drugType];
	VehicleDrug[carid][itemslot][drugQTY] = PlayerDrug[playerid][slot][drugQTY];
	VehicleDrug[carid][itemslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	VehicleDrug[carid][itemslot][drugPackage] = PlayerDrug[playerid][slot][drugPackage];
	VehicleDrug[carid][itemslot][drugFore] = CarData[carid][carID];

	PlayerDrug[playerid][slot][drugQTY] = 0;

	SendClientMessageEx(playerid, COLOR_YELLOW, "Guardou %s (%s) no carro.", DrugPackageName[VehicleDrug[carid][itemslot][drugPackage]], DrugData[VehicleDrug[carid][itemslot][drugType]][DRUGDATA_NAME]);

	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to car %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[VehicleDrug[carid][itemslot][drugPackage]], DrugData[VehicleDrug[carid][itemslot][drugType]][DRUGDATA_NAME], VehicleDrug[carid][itemslot][drugQTY], carid, CarData[carid][carID]);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugPlaceAllCar(playerid, slot, itemslot, carid);
public OnDrugPlaceAllCar(playerid, slot, itemslot, carid)
{
	VehicleDrug[carid][itemslot][drugID] = cache_insert_id();

	Log_Write("logs/drugs.txt", "[%s] %s: place %s %s (%f) to car %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[VehicleDrug[carid][itemslot][drugPackage]], DrugData[VehicleDrug[carid][itemslot][drugType]][DRUGDATA_NAME], VehicleDrug[carid][itemslot][drugQTY], carid, CarData[carid][carID]);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugTakeItem(playerid, slot, objectid, dObject, dSid, drug);
public OnDrugTakeItem(playerid, slot, objectid, dObject, dSid, drug)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();
	PlayerDrug[playerid][slot][drugType] = ItemDrug[drug][drugType];
	PlayerDrug[playerid][slot][drugQTY] = ItemDrug[drug][drugQTY];
	PlayerDrug[playerid][slot][drugStrength] = ItemDrug[drug][drugStrength];
	PlayerDrug[playerid][slot][drugPackage] = ItemDrug[drug][drugPackage];

	ItemDrug[drug][drugQTY] = 0;

	SendClientMessageEx(playerid, COLOR_YELLOW, "ï¿½Ø³ï¿½ï¿½ï¿½ï¿½Ôº %s (%s) ï¿½Ò¡ %s", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], DrugObject[dObject][DRUGOBJECT_NAME]);

	Log_Write("logs/drugs.txt", "[%s] %s: take %s %s (%f) from object %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], objectid, dSid);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_object` WHERE `drugID` = '%d'", ItemDrug[drug][drugID]);
	mysql_tquery(dbCon, szQuery);

	if(DrugObject_IsEmpty(objectid)) {
		DrugObject_Delete(objectid, dSid);
	}
}

forward OnDrugTakeAllItem(playerid, slot, objectid, dSid, drug);
public OnDrugTakeAllItem(playerid, slot, objectid, dSid, drug)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();

	Log_Write("logs/drugs.txt", "[%s] %s: take %s %s (%f) from object %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], objectid, dSid);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_object` WHERE `drugID` = '%d'", ItemDrug[drug][drugID]);
	mysql_tquery(dbCon, szQuery);

}

forward OnDrugTakeCar(playerid, slot, itemslot, carid);
public OnDrugTakeCar(playerid, slot, itemslot, carid)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();

	PlayerDrug[playerid][slot][drugType] = VehicleDrug[carid][itemslot][drugType];
	PlayerDrug[playerid][slot][drugQTY] = VehicleDrug[carid][itemslot][drugQTY];
	PlayerDrug[playerid][slot][drugStrength] = VehicleDrug[carid][itemslot][drugStrength];
	PlayerDrug[playerid][slot][drugPackage] = VehicleDrug[carid][itemslot][drugPackage];

	VehicleDrug[carid][itemslot][drugQTY] = 0;

	SendClientMessageEx(playerid, COLOR_YELLOW, "Pegou  %s (%s) do interior do veiculo.", DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME]);

	Log_Write("logs/drugs.txt", "[%s] %s: pgou  %s %s (%f) do veiculo %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], carid, CarData[carid][carID]);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_car` WHERE `drugID` = '%d'", VehicleDrug[carid][itemslot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugTakeAllCar(playerid, slot, itemslot, carid);
public OnDrugTakeAllCar(playerid, slot, itemslot, carid)
{
	PlayerDrug[playerid][slot][drugID] = cache_insert_id();

	Log_Write("logs/drugs.txt", "[%s] %s: take %s %s (%f) from car %d (SID:%d)", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], PlayerDrug[playerid][slot][drugQTY], carid, CarData[carid][carID]);

	format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_car` WHERE `drugID` = '%d'", VehicleDrug[carid][itemslot][drugID]);
	mysql_tquery(dbCon, szQuery);
}

forward OnDrugTransferNew(playerid, slot, packageid, toslot, Float:transfer_amount);
public OnDrugTransferNew(playerid, slot, packageid, toslot, Float:transfer_amount)
{
	Log_Write("logs/drugs.txt", "[%s] %s: transfer %s (%s:%f) to %s", ReturnDate(), ReturnName(playerid), DrugPackageName[PlayerDrug[playerid][slot][drugPackage]], DrugData[PlayerDrug[playerid][slot][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[packageid]);

	PlayerDrug[playerid][toslot][drugID] = cache_insert_id();
	PlayerDrug[playerid][toslot][drugType] = PlayerDrug[playerid][slot][drugType];
	PlayerDrug[playerid][toslot][drugQTY] = transfer_amount;
	PlayerDrug[playerid][toslot][drugStrength] = PlayerDrug[playerid][slot][drugStrength];
	PlayerDrug[playerid][toslot][drugPackage] = packageid;

	PlayerDrug[playerid][slot][drugQTY] -= transfer_amount;
	PlayerDrug[playerid][slot][drugQTY] = ConvertFloatToOneDP(PlayerDrug[playerid][slot][drugQTY]);

	if(PlayerDrug[playerid][slot][drugQTY]<0.1) {
		PlayerDrug[playerid][slot][drugQTY] = 0;

		format(szQuery, sizeof(szQuery), "DELETE FROM `drugs_char` WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugID]);
		mysql_tquery(dbCon, szQuery);
	}
	else {
		format(szQuery, sizeof(szQuery), "UPDATE `drugs_char` SET `drugQTY`='%1.f' WHERE `drugID` = '%d'", PlayerDrug[playerid][slot][drugQTY], PlayerDrug[playerid][slot][drugID]);
		mysql_tquery(dbCon, szQuery);
	}

	SendClientMessageEx(playerid, COLOR_YELLOW, "ï¿½Ø³ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ %s ï¿½Ó¹Ç¹ %.1fg ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½à¡¨ %s", DrugData[PlayerDrug[playerid][toslot][drugType]][DRUGDATA_NAME], transfer_amount, DrugPackageName[PlayerDrug[playerid][toslot][drugPackage]]);

}
CMD:casasint(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	   return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem autorização para utilizar esse comando.");
    ShowHouseInterioresDialog(playerid);
    return 1;
}
CMD:jetpack(playerid, params[])
{
    if(PlayerData[playerid][pAdmin] < 2) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem autorização para utilizar esse comando.");
	SendClientMessage(playerid, COLOR_GRAD1, "Jetpack criado com sucesso, aproveite.");
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	return 1;
}


/*forward Timer_Segundos();
public Timer_Segundos()
{



}*/

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if(!response) return 1;
	else
	{
		if(extraid == MODEL_SELECTION_BINCO)
		{
		    if(PlayerData[playerid][pCash] >= 50) {
			    SendClientMessage(playerid, COLOR_LIGHTGREEN, "Você comprou uma nova skin por R$50.");
			    PlayerData[playerid][pChar] = modelid;
			    SetPlayerSkin(playerid, modelid);

				PlayerData[playerid][pCash] = PlayerData[playerid][pCash]-25;
			    ApplyAnimation(playerid, "CLOTHES", "CLO_Buy", 3.0, 0, 0, 0, 0, 0, 1);
			}
			else return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você não tem R$50.");
		}
	}
	return 1;
}
/*Dialog:DIALOG_AGE(playerid, response, inputtext[])
{
	if(!response) return Dialog_Show(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Data de nascimento", "Entre com a Data de nascimento de seu personagem. Formato: 02/07/1998.", "Confirmar", "Cancelar");
	if(response)
	{
	    if(strval(inputtext) < 5 || strval(inputtext) > 9999) return Dialog_Show(playerid, DIALOG_AGE, DIALOG_STYLE_INPUT, "Data de nascimento", "Formato: 02/07/1998\n Entre com uma Data de nascimento valída.", "Confirmar", "Cancelar");
		format(szQuery, sizeof(szQuery), "[Personagem] Seu personagem nasceu em %d.", strval(inputtext));
		SendClientMessage(playerid, COLOR_LIGHTGREEN, szQuery);
		PlayerData[playerid][pBirthdate] = strval(inputtext);
	}
	return 1;
}*/
Dialog:DIALOGLJROUPAS(playerid, response, listitem, inputtext[])
{
	if (!response) return 1;
	else
	{
 		switch(listitem)
 		{
      		case 0:	ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_BINCO, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);
			case 1: ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_BINCO, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
			case 2: ShowModelSelectionMenu(playerid, "Skins", MODEL_SELECTION_BINCO, g_aModificadaskin, sizeof(g_aModificadaskin), -16.0, 0.0, -55.0);
		}
	}
	return 1;
}

CMD:versom(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendClientMessage(playerid, COLOR_LIGHTRED, "ERRO: Você deve ser um adminstrador com nivel 4 para usar este comando.");

    new soundid = 0;
	if(sscanf(params, "d", soundid)) return SendClientMessage(playerid, 0xFFFFFFFF, "ERRO: Você deve digitar um ID!");

	PlayerPlaySound(playerid, soundid, 0.0, 0.0, 10.0);
	return 1;
}


						/////////////////////////////////////////BY IMAC////////////////////////////////////////////
						/////////////////////////////////SISTEMA DE FINANCIAMENTO//////////////////////////////////
						///////////////////////////////////   28/04/2021    ///////////////////////////////////////

forward simulato();
public simulato(){
	new qs[1024];
	mysql_format(dbCon, qs, sizeof(qs), "SELECT * FROM bank_simulato WHERE status = 0 LIMIT 1");
	mysql_tquery(dbCon, qs, "analisaDados");
	return 1;
}

forward analisaDados();
public analisaDados(){
	new rows = cache_num_rows(),
	    idFin,
	    nNome[24],
		modelo[24],
	    cpf,
	    valor,
		totalD = rows;

	if(rows)
	{
		for(new i; i < totalD; i++)
		{
			cache_get_value_name(0, "nome", nNome);
			cache_get_value_name(0, "modelo", modelo);
			cache_get_value_name_int(i, "cpf", cpf);
			cache_get_value_name_int(i, "id", idFin);
			cache_get_value_name_int(i, "valor", valor);

			for(new e; e < MAX_IDENT; e++)
			{
				if(strlen(nNome) == strlen(IdentInfo[e][Nome]) && cpf == IdentInfo[e][Cpf])
				{
					if(IdentInfo[e][Score] >= 300)
					{
						//Calculando Juros
						if(IdentInfo[e][Score] >= 300 && IdentInfo[e][Score] <= 450)
						{
							valor = valor+=randomEx(10000, 20000); //a chance de juros, é de 10,000 á 20,000 a mais do valor do veiculo.
						}
						else if(IdentInfo[e][Score] > 450 && IdentInfo[e][Score] <= 670)
						{
                            valor = valor+=randomEx(9600, 16900); //a chance de juros, é de 9,600 á 16,900 a mais do valor do veiculo.
						}
						else if(IdentInfo[e][Score] > 670 && IdentInfo[e][Score] <= 800)
						{
                            valor = valor+=randomEx(6000, 9300); //a chance de juros, é de 6,000 á 9,300 a mais do valor do veiculo.
						}
						else if(IdentInfo[e][Score] > 800 && IdentInfo[e][Score] <= 899)
						{
                            valor = valor+=randomEx(3000, 5200); //a chance de juros, é de 3,000 á 5,200 a mais do valor do veiculo.
						}
						else if(IdentInfo[e][Score] > 900)
						{
                            valor = valor+=randomEx(700, 2500); //a chance de juros, é de 700,00 á 2,500 a mais do valor do veiculo.
						}


						new parcela = 48, valorP;

						valorP = valor / parcela;

						new attFin[256];
						format(attFin, sizeof(attFin), "UPDATE `bank_simulato` SET `status` = '1' WHERE `id` = '%d'", idFin);
						mysql_tquery(dbCon, attFin);

						new mecSet[1024], idContrato;

						idContrato = randomEx(1000, 9999);

						format(mecSet, sizeof(mecSet), "INSERT INTO bank_aprovado (`idContrato`, `nome`, `veiculo`, `valorT`, `valorP`, `parcelas`, `cpf`) VALUES ('%d','%s', '%s', '%d', '%d', '%d', '%d')", idContrato, nNome, modelo, valor, valorP, parcela, cpf);
						mysql_tquery(dbCon, mecSet, "QuaseFimContrato", "ssddd", nNome, modelo, cpf, idFin, idContrato);
						//mysql_tquery(dbCon, mecSet, "finalizaSimulato", "d", idFin);

					}
				}
			}
		}
	}
	return 1;
}

forward QuaseFimContrato(nNome[32], modelo[32], cpf, idFin, idContrato);
public QuaseFimContrato(nNome[32], modelo[32], cpf, idFin, idContrato)
{
	new qs[1024];
	mysql_format(dbCon, qs, sizeof(qs), "SELECT * FROM characters WHERE cpf = '%d' AND charName = '%s' LIMIT 1", cpf, nNome);
	mysql_tquery(dbCon, qs, "analisaDados2", "ssddd", nNome, modelo, cpf, idFin, idContrato);
	return 1;
}

forward analisaDados2(nNome[32], modelo[32], cpf, idFin, idContrato);
public analisaDados2(nNome[32], modelo[32], cpf, idFin, idContrato)
{
	new rows = cache_num_rows(),
		idResp,
		nomeVeiculo,
		totalD = rows;

	if(rows)
	{
		for(new i; i < totalD; i++)
		{
			cache_get_value_name_int(i, "ID", idResp);
			nomeVeiculo = GetVehicleModelByName(modelo);
			new chassis = randomEx(1000, 9999);

			new sk[1024];
			format(sk,sizeof(sk),"INSERT INTO `cars` (`carModel`, `carOwner`, `carChassi`, `carColor1`, `carColor2`, `carLock`, `carImmob`, `carAlarm`, `carXM`, `cpfDono`, `finan`, `idFinan`, `idContrato`,`tempoSemPlaca` ,`carDate`) VALUES (%d, %d, '********%d', 0, 0, 0, 0, 0, 0, '%d', 1, '%d', '%d', DATE_ADD(NOW(), INTERVAL 3 DAY), NOW())",
	            nomeVeiculo,
			    idResp,
				chassis,
				cpf,
				idFin,
				idContrato);
			    //VDealerColor[playerid][0],
			    //VDealerColor[playerid][1],
				//VDealerLock[playerid],
				//VDealerImmob[playerid],
				//VDealerAlarm[playerid],
				//VDealerXM[playerid]);
			mysql_tquery(dbCon, sk);
		}
	}
	return 1;
}

						////////////////////////////////////////BY IMAC/////////////////////////////////
						////////////////////////////////////SYSTEM FATURAS/////////////////////////////
						////////////////////////////////////  28/04/2021  ////////////////////////////
						
						
forward gerandoFaturas();
public gerandoFaturas()
{
	new qs[1024];
	mysql_format(dbCon, qs, sizeof(qs), "SELECT * FROM bank_aprovado");
	mysql_tquery(dbCon, qs, "verificando");
	return 1;
}

forward verificando();
public verificando()
{
	new rows = cache_num_rows(),
	    idContrato,
	    cpf,
	    nome[24],
	    valorP,
	    parcelas,
	    parcelasPagas,
		totalD = rows;

	if(rows)
	{
	
		foreach (new p : Player)
		{
			for(new i; i < totalD; i++)
			{
	            cache_get_value_name_int(i, "idContrato", idContrato);
	            cache_get_value_name(0, "nome", nome);
	            cache_get_value_name_int(i, "cpf", cpf);
	            cache_get_value_name_int(i, "valorP", valorP);
	            cache_get_value_name_int(i, "parcelas", parcelas);
	            cache_get_value_name_int(i, "pPagas", parcelasPagas);

				if(PlayerData[p][pCpf] == cpf)
				{
				    if(PlayerData[p][pLogado] == 1)
				    {
			            if(parcelasPagas < parcelas)
			            {
			                new mecSet[256], codigoF;

			                codigoF = randomEx(1000, 9999);

							format(mecSet, sizeof(mecSet), "INSERT INTO bank_faturas (`idFatura`,`cpf`, `valor`, `contratoid`) VALUES ('%d','%d', '%d', '%d')", codigoF, cpf, valorP, idContrato);
							mysql_tquery(dbCon, mecSet);
							
							new bancotexto[1024];
							format(bancotexto, sizeof(bancotexto), "[BANCO SWIPE] Uma nova fatura do seu contrato foi gerada. Trate-a de pagar assim que possivel!");
                            SendClientMessage(p, COLOR_YELLOW, bancotexto);
                            PlayerPlaySound(p, 41603, 0.0, 0.0, 0.0);
							new queryMec[256];
							format(queryMec, sizeof(queryMec), "SELECT * FROM bank_faturas WHERE paga = 0 AND cpf = '%d'", cpf);
							mysql_tquery(dbCon, queryMec, "contando", "dd", idContrato, cpf);
						}
     				}
				}
			}
		}
	}
	return 1;
}

forward contando(idContrato, cpf);
public contando(idContrato, cpf)
{
	new rows = cache_num_rows();
//		totalD = rows;

	if(rows >= 3)
	{
		new attFin[256];
		format(attFin, sizeof(attFin), "UPDATE `cars` SET `finan` = '2' WHERE `idContrato` = '%d' AND `cpfDono` = '%d'", idContrato, cpf);
		mysql_tquery(dbCon, attFin);
	}
	else if(rows >= 5)
	{
		new attFin[256];
		format(attFin, sizeof(attFin), "UPDATE `characters` SET `pNomeSujo` = '1' WHERE `cpf` = '%d'", cpf);
		mysql_tquery(dbCon, attFin);
	}
	return 1;
}

CMD:faturas(playerid, params[])
{
	new queryMec[256];
	format(queryMec, sizeof(queryMec), "SELECT * FROM bank_faturas WHERE paga = 0 AND cpf = '%d'", PlayerData[playerid][pCpf]);
	mysql_tquery(dbCon, queryMec, "vendofaturas");
	return 1;
}
forward vendofaturas(playerid);
public vendofaturas(playerid)
{
	new rows = cache_num_rows(),
	    idFatura,
	    valorF,
		contrato,
	    totalD = rows;
	    
	if(rows)
	{
		for(new i; i < totalD; i++)
		{
        	cache_get_value_name_int(i, "idFatura", idFatura);
        	cache_get_value_name_int(i, "contratoid", contrato);
        	cache_get_value_name_int(i, "valor", valorF);
        	
            SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
            SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_FATURA_ID:_%d_|", idFatura);
            SendClientMessage(playerid,COLOR_YELLOW3,     "|_ Banco Swipe.");
            SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Valor: %d |_ Contrato: %d", valorF, contrato);
            SendClientMessage(playerid,COLOR_YELLOW3,     "| Assinatura: Banco Swipe");
            SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
		}
		new msgg[256];
    	format(msgg, sizeof(msgg), "Total: %d Faturas", totalD);
    	SendClientMessage(playerid, COLOR_GREEN, msgg);
	}else{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Nenhuma fatura para pagar.");
	}
	return 1;
}

CMD:pagarfatura(playerid, params[])
{
	new idfatura;

	if (sscanf(params, "i", idfatura))
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "{FF6347}USE:{FFFFFF}/pagarfatura [numero da fatura]");
	}
	else
	{
		new queryMec[256];
		format(queryMec, sizeof(queryMec), "SELECT * FROM bank_faturas WHERE paga = 0 AND idFatura = '%d'", idfatura);
		mysql_tquery(dbCon, queryMec, "pagandoFatura", "d", playerid);
		
	}
	return 1;
}
forward pagandoFatura(playerid);
public pagandoFatura(playerid)
{
	new rows = cache_num_rows(),
	    idFatura,
	    valorF,
		contrato,
	    totalD = rows;

	if(rows)
	{
	    for(new i; i < totalD; i++)
	    {
	        cache_get_value_name_int(i, "idFatura", idFatura);
	        cache_get_value_name_int(i, "valor", valorF);
	        cache_get_value_name_int(i, "contratoid", contrato);

	        if(PlayerData[playerid][pAccount] >= valorF)
	        {
	   			PlayerData[playerid][pAccount] -= valorF;
	   			new pagou[256];
	   			format(pagou, sizeof(pagou), "Você pagou uma fatura #%d R$ %d.", idFatura, valorF);
	   			SendClientMessage(playerid, COLOR_STAT1, pagou);

				new attFin[256];
				format(attFin, sizeof(attFin), "UPDATE `bank_faturas` SET `paga` = '1' WHERE `cpf` = '%d' AND `idFatura` = '%d'", PlayerData[playerid][pCpf], idFatura);
				mysql_tquery(dbCon, attFin);

				new queryMec[256];
				format(queryMec, sizeof(queryMec), "SELECT * FROM bank_aprovado WHERE cpf = '%d' AND idContrato = '%d'", PlayerData[playerid][pCpf], contrato);
				mysql_tquery(dbCon, queryMec, "atualizandoContrato");

			}
			else
			{
				SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem dinheiro na sua conta bancária.");
			}
		}
	}
	else
	{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Fatura desconhecida, certifique-se do código da fatura.");
	}
	return 1;
}

forward atualizandoContrato();
public atualizandoContrato()
{
	new rows = cache_num_rows(),
		contrato,
		totalD = rows,
		pagas;
	
	if(rows)
	{
	    for(new i; i < totalD; i++)
	    {
	        cache_get_value_name_int(i, "idContrato", contrato);
	        cache_get_value_name_int(i, "pPagas", pagas);

	        pagas = pagas += 1;

			new attFin[256];
			format(attFin, sizeof(attFin), "UPDATE `bank_aprovado` SET `pPagas` = '%d' WHERE `idContrato` = '%d'", pagas, contrato);
			mysql_tquery(dbCon, attFin);
		}
	}
	return 1;
}


						//////////////////////////////////////BY IMAC///////////////////////////////////
						//////////////////////////////APREENSÃO A VEICULOS/////////////////////////////
						/////////////////////////////////  01/05/2021  ///////////////////////////////
						
						
CMD:prenderveiculo(playerid, params[])
{
	new vehicleid, mec;
	
	if(!IsPlayerInRangeOfPoint(playerid, 20.0, 2809.1711,-1187.9789,25.3382) && !IsPlayerInRangeOfPoint(playerid, 20.0, 2824.2815,-1210.8698,24.7395) && !IsPlayerInRangeOfPoint(playerid, 20.0, 2815.2380,-1169.1149,25.3074)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Você não está no pátio.");

	
	vehicleid = GetPlayerVehicleID(playerid);
	
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, COLOR_GRAD1, "Você não é o motorista.");
	
	if((mec = Car_GetID(vehicleid)) != -1)
	{
		if(CarData[mec][carPreso] != 1)
		{
			new
			    Float:fX,
				Float:fY,
				Float:fZ;

			GetPlayerPos(playerid, fX, fY, fZ);
			CarData[mec][carPos][0] = fX;
			CarData[mec][carPos][1] = fY;
			CarData[mec][carPos][2] = fZ;
			CarData[mec][carPreso] = 1;
			CarData[mec][diasPreso] = 90;
			Car_SaveID(mec);
			
			SetEngineStatus(vehicleid, false);
			SetLightStatus(vehicleid, false);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desligou o motor do %s.", ReturnName(playerid, 0), g_arrVehicleNames[GetVehicleModel(vehicleid) - 400]);
            StopCarBoomBox(vehicleid);
			SendClientMessage(playerid, -1, "Veiculo Apreendido.");
		}
	}
	return 1;
}


CMD:veiculospreso(playerid, params[])
{
	new queryMec[256];
	format(queryMec, sizeof(queryMec), "SELECT * FROM cars WHERE carOwner = '%d' AND carPreso = '1'", PlayerData[playerid][pID]);
	mysql_tquery(dbCon, queryMec, "carsPreso");
	return 1;
}

forward carsPreso(playerid);
public carsPreso(playerid)
{
	new rows = cache_num_rows(),
	    placa[32],
	    chassi[32],
	    totalD = rows;

	if(rows)
	{
		for(new i; i < totalD; i++)
		{
        	cache_get_value_name(0, "carPlate", placa);
        	cache_get_value_name(i, "carChassi", chassi);

            SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
            SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_VEICULO PRESO_|");
            SendClientMessage(playerid,COLOR_YELLOW3,     "|_ DETRAN SP.");
            SendClientMessageEx(playerid,COLOR_YELLOW3,   "|_Placa: %s |_ Chassi: %s", placa, chassi);
            SendClientMessage(playerid,COLOR_YELLOW3,     "| Valor diário do pátio: R$ 50,00");
            SendClientMessage(playerid,COLOR_YELLOW3, "-------------------------------------------------------------------------------");
		}
		new msgg[256];
    	format(msgg, sizeof(msgg), "Total: %d Veiculos Presos", totalD);
    	SendClientMessage(playerid, COLOR_GREEN, msgg);
	}else{
		SendClientMessage(playerid, COLOR_LIGHTRED, "Você não tem veiculos apreendidos.");
	}
	return 1;
}